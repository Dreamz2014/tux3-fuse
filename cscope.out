cscope 15 $HOME/tux3-master/user -q 0000009122 0001052205
	@buffer.c

1 
	~<°dlib.h
>

2 
	~<°ddef.h
>

3 
	~<î∫o.h
>

4 #i‚de‡
BUFFER_FOR_TUX3


5 
	~"diskio.h
"

7 
	~"buf„r.h
"

8 
	~"åa˚.h
"

9 
	~"libklib/îr.h
"

10 
	~"libklib/li°_s‹t.h
"

12 
	#bu·ø˚
 
åa˚_off


	)

33 
	#MIN_SECTOR_BITS
 6

	)

34 
	#SECTOR_BITS
 9

	)

35 
	#SECTOR_SIZE
 (1 << 
SECTOR_BITS
)

	)

37 
	#BUFFER_PARANOIA_DEBUG


	)

43 
	gdebug_buf„r
;

45 
li°_hód
 
	gbuf„rs
[
BUFFER_STATES
], 
	gÃu_buf„rs
;

46 
	gmax_buf„rs
 = 10000, 
	gmax_evi˘
 = 1000, 
	gbuf„r_cou¡
;

48 
	$show_buf„r
(
buf„r_hód
 *
buf„r
)

50 if(
DEBUG_MODE_U
==1)

52 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

54 
	`¥ötf
("%Lx/%i%†", 
buf„r
->
ödex
, buf„r->
cou¡
,

55 
	`buf„r_dúty
(
buf„r
) ? "*" :

56 
	`buf„r_˛ón
(
buf„r
) ? "" :

57 
buf„r
->
°©e
 =
BUFFER_EMPTY
 ? "-" :

59 
	}
}

61 
	$show_buf„rs_
(
m≠_t
 *
m≠
, 
Æl
)

63 if(
DEBUG_MODE_U
==1)

65 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

67 
buf„r_hód
 *
buf„r
;

68 
i
;

70 
i
 = 0; i < 
BUFFER_BUCKETS
; i++) {

71 
hli°_hód
 *
buckë
 = &
m≠
->
hash
[
i
];

72 i‡(
	`hli°_em±y
(
buckë
))

75 
	`¥ötf
("[%i] ", 
i
);

76 
	`hli°_f‹_óch_íåy
(
buf„r
, 
buckë
, 
hashlök
) {

77 i‡(
Æl
 || 
buf„r
->
cou¡
 >!
	`hli°_unhashed
(&buf„r->
hashlök
) + 1)

78 
	`show_buf„r
(
buf„r
);

80 
	`¥ötf
("\n");

82 
	}
}

84 
	$show_a˘ive_buf„rs
(
m≠_t
 *
m≠
)

86 if(
DEBUG_MODE_U
==1)

88 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

90 
	`¥ötf
("(m≠ %p)\n", 
m≠
);

91 
	`show_buf„rs_
(
m≠
, 0);

92 
	}
}

94 
	$show_buf„rs
(
m≠_t
 *
m≠
)

96 if(
DEBUG_MODE_U
==1)

98 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

100 
	`¥ötf
("(m≠ %p)\n", 
m≠
);

101 
	`show_buf„rs_
(
m≠
, 1);

102 
	}
}

104 
	$show_buf„r_li°
(
li°_hód
 *
li°
)

106 if(
DEBUG_MODE_U
==1)

108 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

110 
buf„r_hód
 *
buf„r
;

111 
cou¡
 = 0;

112 
	`li°_f‹_óch_íåy
(
buf„r
, 
li°
, 
lök
) {

113 
	`show_buf„r
(
buf„r
);

114 
cou¡
++;

116 
	`¥ötf
("(%i)\n", 
cou¡
);

117 
	}
}

119 
	$show_dúty_buf„rs
(
m≠_t
 *
m≠
)

121 if(
DEBUG_MODE_U
==1)

123 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

125 
i
 = 0; i < 
BUFFER_DIRTY_STATES
; i++) {

126 
	`¥ötf
("m≠ %∞dúty [%d]: ", 
m≠
, 
i
);

127 
	`show_buf„r_li°
(
	`tux3_dúty_buf„rs
(
m≠
->
öode
, 
i
));

129 
	}
}

131 
	$show_buf„rs_°©e
(
°©e
)

133 if(
DEBUG_MODE_U
==1)

135 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

137 
	`¥ötf
("buf„r†ö sèã %u: ", 
°©e
);

138 
	`show_buf„r_li°
(
buf„rs
 + 
°©e
);

139 
	}
}

141 
	$cou¡_buf„rs
()

143 if(
DEBUG_MODE_U
==1)

145 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

147 
buf„r_hód
 *
ß„
, *
buf„r
;

148 
cou¡
 = 0;

149 
	`li°_f‹_óch_íåy_ß„
(
buf„r
, 
ß„
, &
Ãu_buf„rs
, 
Ãu
) {

150 i‡(
buf„r
->
cou¡
 <!
	`hli°_unhashed
(&buf„r->
hashlök
))

152 
	`åa˚_off
("buf„∏%Lx ha†n⁄-zîÿcou¡ %d", ()
buf„r
->
ödex
, buf„r->
cou¡
);

153 
cou¡
++;

155  
cou¡
;

156 
	}
}

158 
	$ª˛aim_buf„r
(
buf„r_hód
 *
buf„r
)

161 if(
DEBUG_MODE_U
==1)

163 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

166 i‡(
buf„r
->
cou¡
 =1 && !
	`buf„r_dúty
(buffer)) {

167 i‡(!
	`hli°_unhashed
(&
buf„r
->
hashlök
)) {

168 
	`ªmove_buf„r_hash
(
buf„r
);

173 
	}
}

175 
ölöe
 
	$ª˛aim_buf„r_óæy
(
buf„r_hód
 *
buf„r
)

177 if(
DEBUG_MODE_U
==1)

179 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

181 #ifde‡
BUFFER_PARANOIA_DEBUG


182 i‡(
debug_buf„r
 >= 2)

183  
	`ª˛aim_buf„r
(
buf„r
);

186 
	}
}

188 
ölöe
 
	$is_ª˛aim_buf„r_óæy
()

190 if(
DEBUG_MODE_U
==1)

192 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

194 #ifde‡
BUFFER_PARANOIA_DEBUG


195 i‡(
debug_buf„r
 >= 2)

199 
	}
}

201 
	$£t_buf„r_°©e_li°
(
buf„r_hód
 *
buf„r
, 
°©e
, 
li°_hód
 *
li°
)

203 if(
DEBUG_MODE_U
==1)

205 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

207 
	`li°_move_èû
(&
buf„r
->
lök
, 
li°
);

208 
buf„r
->
°©e
 = state;

210 
	`ª˛aim_buf„r_óæy
(
buf„r
);

211 
	}
}

213 
ölöe
 
	$£t_buf„r_°©e
(
buf„r_hód
 *
buf„r
, 
°©e
)

215 if(
DEBUG_MODE_U
==1)

217 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

219 
	`£t_buf„r_°©e_li°
(
buf„r
, 
°©e
, 
buf„rs
 + state);

220 
	}
}

222 
	$tux3_£t_buf„r_dúty_li°
(
m≠_t
 *
m≠
, 
buf„r_hód
 *
buf„r
,

223 
dñè
, 
li°_hód
 *
hód
)

225 if(
DEBUG_MODE_U
==1)

227 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

229 
	`£t_buf„r_°©e_li°
(
buf„r
, 
	`tux3_buf°a_dñè
(
dñè
), 
hód
);

230 
	}
}

232 
	$tux3_£t_buf„r_dúty
(
m≠_t
 *
m≠
, 
buf„r_hód
 *
buf„r
, 
dñè
)

234 if(
DEBUG_MODE_U
==1)

236 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

238 
li°_hód
 *
hód
 = 
	`tux3_dúty_buf„rs
(
m≠
->
öode
, 
dñè
);

239 
	`tux3_£t_buf„r_dúty_li°
(
m≠
, 
buf„r
, 
dñè
, 
hód
);

240 
	}
}

242 
buf„r_hód
 *
	$£t_buf„r_dúty
(
buf„r_hód
 *
buf„r
)

244 if(
DEBUG_MODE_U
==1)

246 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

248 
	`tux3_£t_buf„r_dúty
(
buf„r
->
m≠
, buf„r, 
BUFFER_INIT_DELTA
);

249  
buf„r
;

250 
	}
}

252 
buf„r_hód
 *
	$£t_buf„r_˛ón
(
buf„r_hód
 *
buf„r
)

254 if(
DEBUG_MODE_U
==1)

256 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

258 
	`as£π
(!
	`buf„r_˛ón
(
buf„r
));

259 
	`£t_buf„r_°©e
(
buf„r
, 
BUFFER_CLEAN
);

260  
buf„r
;

261 
	}
}

263 
buf„r_hód
 *
	$__£t_buf„r_em±y
(
buf„r_hód
 *
buf„r
)

265 if(
DEBUG_MODE_U
==1)

267 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

269 
	`£t_buf„r_°©e
(
buf„r
, 
BUFFER_EMPTY
);

270  
buf„r
;

271 
	}
}

273 
buf„r_hód
 *
	$£t_buf„r_em±y
(
buf„r_hód
 *
buf„r
)

275 if(
DEBUG_MODE_U
==1)

277 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

279 
	`as£π
(!
	`buf„r_em±y
(
buf„r
));

280  
	`__£t_buf„r_em±y
(
buf„r
);

281 
	}
}

283 
	$tux3_˛ór_buf„r_dúty
(
buf„r_hód
 *
buf„r
, 
dñè
)

285 if(
DEBUG_MODE_U
==1)

287 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

289 #ifde‡
BUFFER_FOR_TUX3


290 
	`as£π
(
	`buf„r_ˇn_modify
(
buf„r
, 
dñè
));

293 
	`£t_buf„r_˛ón
(
buf„r
);

294 
	}
}

297 
	$__˛ór_buf„r_dúty_f‹_ídio
(
buf„r_hód
 *
buf„r
, 
îr
)

299 if(
DEBUG_MODE_U
==1)

301 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

303 i‡(
îr
) {

305 
	`as£π
(0);

306 
	`__£t_buf„r_em±y
(
buf„r
);

309 
	`£t_buf„r_˛ón
(
buf„r
);

311 
	}
}

314 
	$˛ór_buf„r_dúty_f‹_ídio
(
buf„r_hód
 *
buf„r
, 
îr
)

316 if(
DEBUG_MODE_U
==1)

318 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

320 
f‹ked
 = 
	`hli°_unhashed
(&
buf„r
->
hashlök
);

322 
	`__˛ór_buf„r_dúty_f‹_ídio
(
buf„r
, 
îr
);

325 i‡(
f‹ked
) {

327 
	`blockput
(
buf„r
);

329 
	}
}

332 
	$tux3_övÆid©e_buf„r
(
buf„r_hód
 *
buf„r
)

334 if(
DEBUG_MODE_U
==1)

336 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

338 #ifde‡
BUFFER_FOR_TUX3


339 
dñè
 = 
	`tux3_öode_dñè
(
buf„r
->
m≠
->
öode
);

340 
	`as£π
(
	`buf„r_ˇn_modify
(
buf„r
, 
dñè
));

342 
	`£t_buf„r_em±y
(
buf„r
);

343 
	}
}

345 #ifde‡
BUFFER_PARANOIA_DEBUG


346 
	$__‰ì_buf„r
(
buf„r_hód
 *
buf„r
)

348 if(
DEBUG_MODE_U
==1)

350 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

352 
	`li°_dñ
(&
buf„r
->
lök
);

353 
	`‰ì
(
buf„r
->
d©a
);

354 
	`‰ì
(
buf„r
);

355 
	}
}

358 
	$‰ì_buf„r
(
buf„r_hód
 *
buf„r
)

360 if(
DEBUG_MODE_U
==1)

362 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

364 #ifde‡
BUFFER_PARANOIA_DEBUG


365 i‡(
debug_buf„r
) {

366 
	`__‰ì_buf„r
(
buf„r
);

367 
buf„r_cou¡
--;

372 
	`£t_buf„r_°©e
(
buf„r
, 
BUFFER_FREED
);

373 
buf„r
->
m≠
 = 
NULL
;

374 
buf„r_cou¡
--;

375 
	}
}

377 
	$blockput
(
buf„r_hód
 *
buf„r
)

379 if(
DEBUG_MODE_U
==1)

381 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

383 
	`as£π
(
buf„r
);

384 
	`as£π
(
buf„r
->
cou¡
 > 0);

385 
	`bu·ø˚
("Rñó£ buf„∏%Lx, cou¡ = %i, sèã = %i", 
buf„r
->
ödex
, buf„r->
cou¡
, buf„r->
°©e
);

386 
buf„r
->
cou¡
--;

387 i‡(
buf„r
->
cou¡
 == 0) {

388 
	`bu·ø˚
("Fªêbuf„∏%Lx", 
buf„r
->
ödex
);

389 
	`as£π
(!
	`buf„r_dúty
(
buf„r
));

390 
	`as£π
(
	`hli°_unhashed
(&
buf„r
->
hashlök
));

391 
	`as£π
(
	`li°_em±y
(&
buf„r
->
Ãu
));

392 
	`¥ötf
("\nFªêBuf„r\nBuf„r->ödex : %Lx OF INODE : %Lu\nBuf„r_Cou¡ : %u\n", 
buf„r
->
ödex
, 
	`tux_öode
(buf„r->
m≠
->
öode
)->
öum
, 
buf„r_cou¡
-1);

393 
	`‰ì_buf„r
(
buf„r
);

397 
	`ª˛aim_buf„r_óæy
(
buf„r
);

398 
	}
}

400 
	$gë_bh
(
buf„r_hód
 *
buf„r
)

402 if(
DEBUG_MODE_U
==1)

404 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

406 
	`as£π
(
buf„r
->
cou¡
 >= 1);

407 
buf„r
->
cou¡
++;

408 
	}
}

411 
	$__blockput_‰ì
(
buf„r_hód
 *
buf„r
, 
dñè
)

413 if(
DEBUG_MODE_U
==1)

415 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

417 i‡(
	`bufcou¡
(
buf„r
) != 2) {

418 
	`¥ötf
("Error: free block %Lx/%x still in use!\n",

419 
	`bufödex
(
buf„r
), 
	`bufcou¡
(buffer));

420 
	`blockput
(
buf„r
);

421 
	`as£π
(
	`bufcou¡
(
buf„r
) == 1);

425 
	`tux3_˛ór_buf„r_dúty
(
buf„r
, 
dñè
);

426 
	`blockput
(
buf„r
);

427 
	}
}

429 
	$blockput_‰ì
(
sb
 *sb, 
buf„r_hód
 *
buf„r
)

431 if(
DEBUG_MODE_U
==1)

433 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

435 
	`__blockput_‰ì
(
buf„r
, 
BUFFER_INIT_DELTA
);

436 
	}
}

438 
	$blockput_‰ì_unify
(
sb
 *sb, 
buf„r_hód
 *
buf„r
)

440 if(
DEBUG_MODE_U
==1)

442 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

444 
	`__blockput_‰ì
(
buf„r
, 
sb
->
unify
);

445 
	}
}

447 
	$buf„r_hash
(
block_t
 
block
)

449 if(
DEBUG_MODE_U
==1)

451 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

453  (((
block
 >> 32Ë^ (
block_t
)blockË* 978317583Ë% 
BUFFER_BUCKETS
;

454 
	}
}

456 
	$ö£π_buf„r_hash
(
buf„r_hód
 *
buf„r
)

458 if(
DEBUG_MODE_U
==1)

460 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

462 
m≠_t
 *
m≠
 = 
buf„r
->map;

463 
hli°_hód
 *
buckë
 = 
m≠
->
hash
 + 
	`buf„r_hash
(
buf„r
->
ödex
);

464 
	`gë_bh
(
buf„r
);

465 
	`hli°_add_hód
(&
buf„r
->
hashlök
, 
buckë
);

466 
	`li°_add_èû
(&
buf„r
->
Ãu
, &
Ãu_buf„rs
);

467 
	}
}

469 
	$ªmove_buf„r_hash
(
buf„r_hód
 *
buf„r
)

471 if(
DEBUG_MODE_U
==1)

473 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

475 
	`li°_dñ_öô
(&
buf„r
->
Ãu
);

476 
	`hli°_dñ_öô
(&
buf„r
->
hashlök
);

477 
	`blockput
(
buf„r
);

478 
	}
}

480 
	$evi˘_buf„r
(
buf„r_hód
 *
buf„r
)

482 if(
DEBUG_MODE_U
==1)

484 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

486 
	`bu·ø˚
("evi˘ buf„∏[%Lx]", 
buf„r
->
ödex
);

487 
	`as£π
(
	`buf„r_˛ón
(
buf„r
Ë|| 
	`buf„r_em±y
(buffer));

488 
	`as£π
(
buf„r
->
cou¡
 == 1);

489 
	`ª˛aim_buf„r
(
buf„r
);

490 
	}
}

492 
buf„r_hód
 *
	$√w_buf„r
(
m≠_t
 *
m≠
)

494 if(
DEBUG_MODE_U
==1)

496 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

499 
buf„r_hód
 *
buf„r
 = 
NULL
;

500 
li°_hód
 *
‰ìd_li°
 = &
buf„rs
[
BUFFER_FREED
];

501 
îr
;

503 i‡(!
	`li°_em±y
(
‰ìd_li°
)) {

504 
buf„r
 = 
	`li°_íåy
(
‰ìd_li°
->
√xt
, 
buf„r_hód
, 
lök
);

505 
have_buf„r
;

508 i‡(
buf„r_cou¡
 >
max_buf„rs
) {

509 
	`bu·ø˚
("tryÅoÉvict buffers");

510 
buf„r_hód
 *
ß„
, *
vi˘im
;

511 
cou¡
 = 0;

513 
	`li°_f‹_óch_íåy_ß„
(
vi˘im
, 
ß„
, &
Ãu_buf„rs
, 
Ãu
) {

514 i‡(
	`ª˛aim_buf„r
(
vi˘im
)) {

515 i‡(++
cou¡
 =
max_evi˘
)

520 i‡(!
	`li°_em±y
(
‰ìd_li°
)) {

521 
buf„r
 = 
	`li°_íåy
(
‰ìd_li°
->
√xt
, 
buf„r_hód
, 
lök
);

522 
have_buf„r
;

526 
	`bu·ø˚
("expand bufferÖool");

527 i‡(
buf„r_cou¡
 =
max_buf„rs
) {

528 
	`¥ötf
("Warning: maximum buffer countÉxceeded (%i)\n",

529 
buf„r_cou¡
);

530  
	`ERR_PTR
(-
ENOMEM
);

533 
buf„r
 = 
	`mÆloc
((
buf„r_hód
));

534 i‡(!
buf„r
)

535  
	`ERR_PTR
(-
ENOMEM
);

536 *
buf„r
 = (
buf„r_hód
){

537 .
°©e
 = 
BUFFER_FREED
,

538 .
lök
 = 
	`LIST_HEAD_INIT
(
buf„r
->link),

539 .
Ãu
 = 
	`LIST_HEAD_INIT
(
buf„r
->lru),

541 
	`INIT_HLIST_NODE
(&
buf„r
->
hashlök
);

544 
îr
 = 
	`posix_memÆign
(&
buf„r
->
d©a
, 
SECTOR_SIZE
, 1 << 
m≠
->
dev
->
bôs
);

545 i‡(
îr
) {

546 
	`¥ötf
("Error: unableÅoÉxpand bufferÖool: %s\n",

547 
	`°ªº‹
(
îr
));

548 
	`‰ì
(
buf„r
);

549  
	`ERR_PTR
(-
îr
);

551 
	`¥ötf
("\nBuf„∏AŒoˇãd!\nBuf„r_Cou¡ : %u\n",
buf„r_cou¡
+1);

553 
have_buf„r
:

554 
	`as£π
(
buf„r
->
cou¡
 == 0);

555 
	`as£π
(
buf„r
->
°©e
 =
BUFFER_FREED
);

556 
buf„r
->
m≠
 = map;

557 
buf„r
->
cou¡
 = 1;

558 
	`£t_buf„r_em±y
(
buf„r
);

559 
buf„r_cou¡
++;

560  
buf„r
;

561 
	}
}

563 
buf„r_hód
 *
	$≥ekblk
(
m≠_t
 *
m≠
, 
block_t
 
block
)

565 if(
DEBUG_MODE_U
==1)

567 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

569 
hli°_hód
 *
buckë
 = 
m≠
->
hash
 + 
	`buf„r_hash
(
block
);

570 
buf„r_hód
 *
buf„r
;

572 
	`hli°_f‹_óch_íåy
(
buf„r
, 
buckë
, 
hashlök
) {

573 i‡(
buf„r
->
ödex
 =
block
) {

574 
	`gë_bh
(
buf„r
);

575  
buf„r
;

578  
NULL
;

579 
	}
}

581 
buf„r_hód
 *
	$blockgë
(
m≠_t
 *
m≠
, 
block_t
 
block
)

583 if(
DEBUG_MODE_U
==1)

585 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

587 
hli°_hód
 *
buckë
 = 
m≠
->
hash
 + 
	`buf„r_hash
(
block
);

588 
buf„r_hód
 *
buf„r
;

590 
	`hli°_f‹_óch_íåy
(
buf„r
, 
buckë
, 
hashlök
) {

591 i‡(
buf„r
->
ödex
 =
block
) {

592 
	`li°_move_èû
(&
buf„r
->
Ãu
, &
Ãu_buf„rs
);

593 
	`gë_bh
(
buf„r
);

594  
buf„r
;

597 
	`¥ötf
("\nMakêbuf„∏[%Lx]\n", 
block
);

598 
	`bu·ø˚
("makêbuf„∏[%Lx]", 
block
);

599 
buf„r
 = 
	`√w_buf„r
(
m≠
);

600 i‡(
	`IS_ERR
(
buf„r
))

601  
NULL
;

602 
buf„r
->
ödex
 = 
block
;

603 
	`¥ötf
("\nbuf„r->ödex = %Lx FOR INODE : %Lu\n",
block
,
	`tux_öode
(
m≠
->
öode
)->
öum
);

604 
	`ö£π_buf„r_hash
(
buf„r
);

605  
buf„r
;

606 
	}
}

608 
buf„r_hód
 *
	$blockªad
(
m≠_t
 *
m≠
, 
block_t
 
block
)

610 if(
DEBUG_MODE_U
==1)

612 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

614 
buf„r_hód
 *
buf„r
 = 
	`blockgë
(
m≠
, 
block
);

616 i‡(
buf„r
 && 
	`buf„r_em±y
(buffer)) {

617 
bufvec
 bufvec;

618 
ªt
;

620 
	`bufvec_öô
(&
bufvec
, 
m≠
, 
NULL
, NULL);

621 
ªt
 = 
	`bufvec_c⁄tig_add
(&
bufvec
, 
buf„r
);

622 
	`as£π
(
ªt
 == 1);

624 
	`bu·ø˚
("ªad buf„∏%Lx, sèã %i", 
buf„r
->
ödex
, buf„r->
°©e
);

625 
îr
 = 
buf„r
->
m≠
->
	`io
(
READ
, &
bufvec
);

626 i‡(
îr
 || !
	`buf„r_˛ón
(
buf„r
)) {

627 
	`blockput
(
buf„r
);

628  
NULL
;

631  
buf„r
;

632 
	}
}

634 
	$åunˇã_buf„rs_ønge
(
m≠_t
 *
m≠
, 
loff_t
 
l°¨t
,Üoff_à
Ànd
)

636 if(
DEBUG_MODE_U
==1)

638 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

640 
blockbôs
 = 
m≠
->
dev
->
bôs
;

641 
blocksize
 = 1 << 
blockbôs
;

642 
block_t
 
°¨t
 = (
l°¨t
 + 
blocksize
 - 1Ë>> 
blockbôs
;

643 
block_t
 
íd
 = 
Ànd
 >> 
blockbôs
;

644 
∑πül
 = 
l°¨t
 & (
blocksize
 - 1);

645 
∑πül_size
 = 
blocksize
 - 
∑πül
;

646 
i
;

648 
	`as£π
((
Ànd
 & (
blocksize
 - 1)) == (blocksize - 1));

650 
i
 = 0; i < 
BUFFER_BUCKETS
; i++) {

651 
hli°_hód
 *
buckë
 = &
m≠
->
hash
[
i
];

652 
buf„r_hód
 *
buf„r
;

653 
hli°_node
 *
n
;

655 
	`hli°_f‹_óch_íåy_ß„
(
buf„r
, 
n
, 
buckë
, 
hashlök
) {

657 i‡(
∑πül
 && 
buf„r
->
ödex
 =
°¨t
 - 1)

658 
	`mem£t
(
buf„r
->
d©a
 + 
∑πül
, 0, 
∑πül_size
);

660 i‡(
buf„r
->
ödex
 < 
°¨t
 || 
íd
 < buffer->index)

664 i‡(
	`buf„rf‹k_to_övÆid©e
(
m≠
, 
buf„r
))

668 i‡(!
	`buf„r_em±y
(
buf„r
))

669 
	`tux3_övÆid©e_buf„r
(
buf„r
);

670 i‡(!
	`is_ª˛aim_buf„r_óæy
())

671 
	`ª˛aim_buf„r
(
buf„r
);

674 
	}
}

677 
	$övÆid©e_buf„rs
(
m≠_t
 *
m≠
)

679 if(
DEBUG_MODE_U
==1)

681 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

683 
i
;

684 
i
 = 0; i < 
BUFFER_BUCKETS
; i++) {

685 
hli°_hód
 *
buckë
 = &
m≠
->
hash
[
i
];

686 
buf„r_hód
 *
buf„r
;

687 
hli°_node
 *
n
;

689 
	`hli°_f‹_óch_íåy_ß„
(
buf„r
, 
n
, 
buckë
, 
hashlök
) {

690 i‡(
buf„r
->
cou¡
 == 1) {

691 i‡(!
	`buf„r_em±y
(
buf„r
))

692 
	`£t_buf„r_em±y
(
buf„r
);

693 i‡(!
	`is_ª˛aim_buf„r_óæy
())

694 
	`evi˘_buf„r
(
buf„r
);

698 
	}
}

700 #ifde‡
BUFFER_PARANOIA_DEBUG


701 
	$de°roy_buf„rs
()

703 if(
DEBUG_MODE_U
==1)

705 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

707 
buf„r_hód
 *
buf„r
, *
ß„
;

708 
li°_hód
 *
hód
;

712 
i
 = 0; i < 
BUFFER_STATES
; i++) {

713 
hód
 = 
buf„rs
 + 
i
;

714 i‡(!
debug_buf„r
) {

715 
	`li°_f‹_óch_íåy_ß„
(
buf„r
, 
ß„
, 
hód
, 
lök
) {

716 
	`li°_dñ
(&
buf„r
->
Ãu
);

717 
	`__‰ì_buf„r
(
buf„r
);

720 i‡(!
	`li°_em±y
(
hód
)) {

721 
	`¥ötf
("Eº‹: sèã %d: buf„∏Àak, o∏li° c‹ru±i⁄?\n", 
i
);

722 
	`li°_f‹_óch_íåy
(
buf„r
, 
hód
, 
lök
) {

723 
	`¥ötf
("m≠ [%p] ", 
buf„r
->
m≠
);

724 
	`show_buf„r
(
buf„r
);

726 
	`¥ötf
("\n");

728 
	`as£π
(
	`li°_em±y
(
hód
));

735 i‡(!
debug_buf„r
) {

736 
	`li°_f‹_óch_íåy_ß„
(
buf„r
, 
ß„
, &
Ãu_buf„rs
, 
Ãu
) {

737 
	`as£π
(
	`buf„r_dúty
(
buf„r
));

738 
	`li°_dñ
(&
buf„r
->
Ãu
);

739 
	`__‰ì_buf„r
(
buf„r
);

742 i‡(!
	`li°_em±y
(&
Ãu_buf„rs
)) {

743 
	`¥ötf
("Error: dirty bufferÜeak, orÜist corruption?\n");

744 
	`li°_f‹_óch_íåy
(
buf„r
, &
Ãu_buf„rs
, 
Ãu
) {

745 i‡(
	`buf„r_dúty
(
buf„r
)) {

746 
	`¥ötf
("m≠ [%p] ", 
buf„r
->
m≠
);

747 
	`show_buf„r
(
buf„r
);

750 
	`¥ötf
("\n");

751 
	`as£π
(
	`li°_em±y
(&
Ãu_buf„rs
));

753 
	}
}

756 
buf„r_hód
 *
	g¥óŒoc_hóds
;

757 *
	gd©a_poﬁ
;

759 
	$¥óŒoˇã_buf„rs
(
bufsize
)

761 if(
DEBUG_MODE_U
==1)

763 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

765 
i
, 
îr
;

767 
	`bu·ø˚
("Pre-allocating buffers...");

768 
¥óŒoc_hóds
 = 
	`mÆloc
(
max_buf„rs
 * (*prealloc_heads));

769 i‡(!
¥óŒoc_hóds
) {

770 
	`¥ötf
("Warning: unableÅoÖre-allocate buffers."

772 
îr
 = -
ENOMEM
;

773 
îr‹
;

776 
	`bu·ø˚
("Pre-allocating data for buffers...");

777 
îr
 = 
	`posix_memÆign
(&
d©a_poﬁ
, 
SECTOR_SIZE
, 
max_buf„rs
 * 
bufsize
);

778 i‡(
îr
) {

779 
	`¥ötf
("Error: unableÅoállocate space for buffer data: %s\n",

780 
	`°ªº‹
(
îr
));

781 
îr
 = -err;

782 
îr‹_memÆign
;

786 
i
 = 0; i < 
max_buf„rs
; i++) {

787 
¥óŒoc_hóds
[
i
] = (
buf„r_hód
){

788 .
d©a
 = 
d©a_poﬁ
 + 
i
*
bufsize
,

789 .
°©e
 = 
BUFFER_FREED
,

790 .
Ãu
 = 
	`LIST_HEAD_INIT
(
¥óŒoc_hóds
[
i
].lru),

792 
	`INIT_HLIST_NODE
(&
¥óŒoc_hóds
[
i
].
hashlök
);

794 
	`li°_add_èû
(&
¥óŒoc_hóds
[
i
].
lök
, 
buf„rs
 + 
BUFFER_FREED
);

799 
îr‹_memÆign
:

800 
	`‰ì
(
¥óŒoc_hóds
);

801 
îr‹
:

802  
îr
;

803 
	}
}

806 
	$öô_buf„rs
(
dev
 *dev, 
poﬁsize
, 
debug
)

808 if(
DEBUG_MODE_U
==1)

810 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

812 
debug_buf„r
 = 
debug
;

813 
	`INIT_LIST_HEAD
(&
Ãu_buf„rs
);

814 
i
 = 0; i < 
BUFFER_STATES
; i++)

815 
	`INIT_LIST_HEAD
(
buf„rs
 + 
i
);

817 
bufsize
 = 1 << 
dev
->
bôs
;

818 
max_buf„rs
 = 
poﬁsize
 / 
bufsize
;

819 
max_evi˘
 = 
max_buf„rs
 / 10;

821 
mö_buf„rs
 = 100;

822 i‡(
max_buf„rs
 < 
mö_buf„rs
)

823 
max_buf„rs
 = 
mö_buf„rs
;

825 #ifde‡
BUFFER_PARANOIA_DEBUG


826 
	`©exô
(
de°roy_buf„rs
);

828 
	`¥óŒoˇã_buf„rs
(
bufsize
);

830 
	}
}

832 
	$__tux3_vﬁm≠_io
(
rw
, 
bufvec
 *bufvec, 
block_t
 
block
,

833 
cou¡
)

835 if(
DEBUG_MODE_U
==1)

837 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

839 
	`as£π
(
	`bufvec_c⁄tig_buf
(
bufvec
)->
m≠
->
dev
->
bôs
 >= 6 &&

840 
	`bufvec_c⁄tig_buf
(
bufvec
)->
m≠
->
dev
->
fd
);

842 
bufvec
->
íd_io
 = 
__˛ór_buf„r_dúty_f‹_ídio
;

844  
	`blockio_vec
(
rw
, 
bufvec
, 
block
, 
cou¡
);

845 
	}
}

847 
	$dev_blockio
(
rw
, 
bufvec
 *bufvec)

849 if(
DEBUG_MODE_U
==1)

851 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

853 
block_t
 
block
 = 
	`bufvec_c⁄tig_ödex
(
bufvec
);

854 
cou¡
 = 
	`bufvec_c⁄tig_cou¡
(
bufvec
);

856  
	`__tux3_vﬁm≠_io
(
rw
, 
bufvec
, 
block
, 
cou¡
);

857 
	}
}

859 
	$dev_îrio
(
rw
, 
bufvec
 *bufvec)

861 if(
DEBUG_MODE_U
==1)

863 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

865 
	`as£π
(0);

866  -
EIO
;

867 
	}
}

869 
m≠_t
 *
	$√w_m≠
(
dev
 *dev, 
blockio_t
 *
io
)

871 if(
DEBUG_MODE_U
==1)

873 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

875 
m≠_t
 *
m≠
 = 
	`mÆloc
((*map));

876 *
m≠
 = (
m≠_t
){

877 .
dev
 = dev,

878 .
io
 = iÿ? iÿ: 
dev_blockio


880 
i
 = 0; i < 
BUFFER_BUCKETS
; i++)

881 
	`INIT_HLIST_HEAD
(&
m≠
->
hash
[
i
]);

882  
m≠
;

883 
	}
}

885 
	$‰ì_m≠
(
m≠_t
 *
m≠
)

887 if(
DEBUG_MODE_U
==1)

889 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

891 
i
 = 0; i < 
BUFFER_BUCKETS
; i++) {

892 
hli°_hód
 *
buckë
 = &
m≠
->
hash
[
i
];

893 
buf„r_hód
 *
buf„r
;

894 
hli°_node
 *
n
;

896 
	`hli°_f‹_óch_íåy_ß„
(
buf„r
, 
n
, 
buckë
, 
hashlök
)

897 
	`evi˘_buf„r
(
buf„r
);

899 
	`‰ì
(
m≠
);

900 
	}
}

902 
	~"buf„r_wrôeback.c
"

903 
	~"buf„r_f‹k.c
"

	@buffer.h

1 #i‚de‡
BUFFER_H


2 
	#BUFFER_H


	)

4 
	#BUFFER_FOR_TUX3


	)

6 #ifde‡
BUFFER_FOR_TUX3


7 
	~"tux3u£r.h
"

8 
	~"åa˚.h
"

10 
ölöe
 
tux3_dñè
(
dñè
);

12 
	~"kî√l/tux3_f‹k.h
"

13 
	~"libklib/li°.h
"

14 
	~<sys/uio.h
>

16 #ifde‡
BUFFER_FOR_TUX3


18 
	#BUFFER_DIRTY_STATES
 2

	)

19 
	#BUFFER_INIT_DELTA
 0

	)

20 
	#TUX3_MAX_DELTA
 
BUFFER_DIRTY_STATES


	)

21 
	#TUX3_INIT_DELTA
 
BUFFER_INIT_DELTA


	)

24 
	#BUFFER_DIRTY_STATES
 4

	)

25 
	#BUFFER_INIT_DELTA
 0

	)

29 
	mBUFFER_FREED
, 
	mBUFFER_EMPTY
, 
	mBUFFER_CLEAN
, 
	mBUFFER_DIRTY
,

30 
	mBUFFER_STATES
 = 
BUFFER_DIRTY
 + 
BUFFER_DIRTY_STATES


34 
	#BUFFER_STATE_BITS
 
	`‹dî_ba£_2
(
BUFFER_STATES
)

	)

35 
TUX3_DEFINE_STATE_FNS
(, 
buf
, 
BUFFER_DIRTY
, 
BUFFER_STATE_BITS
, 0);

37 
	#BUFFER_BUCKETS
 999

	)

40 #ifde‡
BUFFER_FOR_TUX3


48 sig√d 
	tblock_t
;

50 
loff_t
 
	tblock_t
;

53 
	sdev
 { 
	mfd
, 
	mbôs
; };

55 
	gbuf„r_hód
;

56 
	gbufvec
;

58 (
	tblockio_t
)(
	trw
, 
	tbufvec
 *bufvec);

60 
	sm≠
 {

61 #ifde‡
BUFFER_FOR_TUX3


62 
öode
 *inode;

64 
dev
 *dev;

65 
blockio_t
 *
io
;

66 
hli°_hód
 
hash
[
BUFFER_BUCKETS
];

69 
m≠
 
	tm≠_t
;

71 
	sbuf„r_hód
 {

72 
m≠_t
 *
m≠
;

73 
hli°_node
 
hashlök
;

74 
li°_hód
 
lök
;

75 
li°_hód
 
Ãu
;

76 
cou¡
, 
°©e
;

77 
block_t
 
ödex
;

78 *
d©a
;

81 
ölöe
 *
	$bufd©a
(
buf„r_hód
 *
buf„r
)

83  
buf„r
->
d©a
;

84 
	}
}

86 
ölöe
 
	$bufsize
(
buf„r_hód
 *
buf„r
)

88  1 << 
buf„r
->
m≠
->
dev
->
bôs
;

89 
	}
}

91 
ölöe
 
block_t
 
	$bufödex
(
buf„r_hód
 *
buf„r
)

93  
buf„r
->
ödex
;

94 
	}
}

96 
ölöe
 
	$bufcou¡
(
buf„r_hód
 *
buf„r
)

98  
buf„r
->
cou¡
;

99 
	}
}

101 
ölöe
 
	$buf„r_em±y
(
buf„r_hód
 *
buf„r
)

103  
buf„r
->
°©e
 =
BUFFER_EMPTY
;

104 
	}
}

106 
ölöe
 
	$buf„r_˛ón
(
buf„r_hód
 *
buf„r
)

108  
buf„r
->
°©e
 =
BUFFER_CLEAN
;

109 
	}
}

111 
ölöe
 
	$buf„r_dúty
(
buf„r_hód
 *
buf„r
)

113  
	`tux3_buf°a_has_dñè
(
buf„r
->
°©e
);

114 
	}
}

117 
ölöe
 
	$buf„r_Æªady_dúty
(
buf„r_hód
 *
buf„r
,

118 
dñè
)

120 
°©e
 = 
buf„r
->state;

122  
	`tux3_buf°a_has_dñè
(
°©e
) &&

123 
	`tux3_buf°a_gë_dñè
(
°©e
Ë=
	`tux3_dñè
(
dñè
);

124 
	}
}

127 
ölöe
 
	$buf„r_ˇn_modify
(
buf„r_hód
 *
buf„r
, 
dñè
)

129 
°©e
 = 
buf„r
->state;

131  !
	`tux3_buf°a_has_dñè
(
°©e
) ||

132 
	`tux3_buf°a_gë_dñè
(
°©e
Ë=
	`tux3_dñè
(
dñè
);

133 
	}
}

135 
	gsb
;

136 
	gtux3_üâr_d©a
;

137 
buf„r_hód
 *
√w_buf„r
(
m≠_t
 *
m≠
);

138 
show_buf„r
(
buf„r_hód
 *
buf„r
);

139 
show_buf„rs
(
m≠_t
 *
m≠
);

140 
show_a˘ive_buf„rs
(
m≠_t
 *
m≠
);

141 
show_dúty_buf„rs
(
m≠_t
 *
m≠
);

142 
show_buf„rs_°©e
(
°©e
);

143 
£t_buf„r_°©e_li°
(
buf„r_hód
 *
buf„r
, 
°©e
, 
li°_hód
 *
li°
);

144 
tux3_£t_buf„r_dúty_li°
(
m≠_t
 *
m≠
, 
buf„r_hód
 *
buf„r
,

145 
dñè
, 
li°_hód
 *
hód
);

146 
tux3_£t_buf„r_dúty
(
m≠_t
 *
m≠
, 
buf„r_hód
 *
buf„r
, 
dñè
);

147 
buf„r_hód
 *
£t_buf„r_dúty
(buf„r_hód *
buf„r
);

148 
buf„r_hód
 *
£t_buf„r_˛ón
(buf„r_hód *
buf„r
);

149 
buf„r_hód
 *
__£t_buf„r_em±y
(buf„r_hód *
buf„r
);

150 
buf„r_hód
 *
£t_buf„r_em±y
(buf„r_hód *
buf„r
);

151 
tux3_˛ór_buf„r_dúty
(
buf„r_hód
 *
buf„r
, 
dñè
);

152 
˛ór_buf„r_dúty_f‹_ídio
(
buf„r_hód
 *
buf„r
, 
îr
);

153 
gë_bh
(
buf„r_hód
 *
buf„r
);

154 
blockput_‰ì
(
sb
 *sb, 
buf„r_hód
 *
buf„r
);

155 
blockput_‰ì_unify
(
sb
 *sb, 
buf„r_hód
 *
buf„r
);

156 
blockput
(
buf„r_hód
 *
buf„r
);

157 
buf„r_hash
(
block_t
 
block
);

158 
buf„r_hód
 *
≥ekblk
(
m≠_t
 *
m≠
, 
block_t
 
block
);

159 
buf„r_hód
 *
blockgë
(
m≠_t
 *
m≠
, 
block_t
 
block
);

160 
buf„r_hód
 *
blockªad
(
m≠_t
 *
m≠
, 
block_t
 
block
);

161 
ö£π_buf„r_hash
(
buf„r_hód
 *
buf„r
);

162 
ªmove_buf„r_hash
(
buf„r_hód
 *
buf„r
);

163 
åunˇã_buf„rs_ønge
(
m≠_t
 *
m≠
, 
loff_t
 
l°¨t
,Üoff_à
Ànd
);

164 
övÆid©e_buf„rs
(
m≠_t
 *
m≠
);

165 
öô_buf„rs
(
dev
 *dev, 
poﬁsize
, 
debug
);

166 
__tux3_vﬁm≠_io
(
rw
, 
bufvec
 *bufvec, 
block_t
 
block
,

167 
cou¡
);

168 
dev_îrio
(
rw
, 
bufvec
 *bufvec);

169 
m≠_t
 *
√w_m≠
(
dev
 *dev, 
blockio_t
 *
io
);

170 
‰ì_m≠
(
m≠_t
 *
m≠
);

174 
	siowaô
 {

178 (*
	tbufvec_íd_io_t
)(
	tbuf„r_hód
 *
	tbuf„r
, 
	tîr
);

181 
	sbufvec
 {

182 
li°_hód
 *
buf„rs
;

183 
li°_hód
 
c⁄tig
;

184 
c⁄tig_cou¡
;

185 
li°_hód
 
com¥ess
;

186 
com¥ess_cou¡
;

187 
block_t
 
globÆ_ödex
;

188 
tux3_üâr_d©a
 *
id©a
;

189 
m≠_t
 *
m≠
;

191 
li°_hód
 
f‹_io
;

193 
bufvec_íd_io_t
 
íd_io
;

196 
ölöe
 
öode
 *
	$bufvec_öode
(
bufvec
 *bufvec)

198  
bufvec
->
m≠
->
öode
;

199 
	}
}

201 
ölöe
 
	$bufvec_c⁄tig_cou¡
(
bufvec
 *bufvec)

203  
bufvec
->
c⁄tig_cou¡
;

204 
	}
}

206 
ölöe
 
buf„r_hód
 *
	$bufvec_c⁄tig_buf
(
bufvec
 *bufvec)

208 
li°_hód
 *
fú°
 = 
bufvec
->
c⁄tig
.
√xt
;

209 
	`as£π
(!
	`li°_em±y
(&
bufvec
->
c⁄tig
));

210  
	`li°_íåy
(
fú°
, 
buf„r_hód
, 
lök
);

211 
	}
}

214 
	#bufvec_buf„r_f‹_óch_c⁄tig
(
b
, 
v
) \

215 
	`li°_f‹_óch_íåy
(
b
, &(
v
)->
c⁄tig
, 
lök
)

	)

217 
ölöe
 
block_t
 
	$bufvec_c⁄tig_ödex
(
bufvec
 *bufvec)

219  
	`bufödex
(
	`bufvec_c⁄tig_buf
(
bufvec
));

220 
	}
}

222 
ölöe
 
block_t
 
	$bufvec_c⁄tig_œ°_ödex
(
bufvec
 *bufvec)

224  
	`bufvec_c⁄tig_ödex
(
bufvec
Ë+ 
	`bufvec_c⁄tig_cou¡
(bufvec) - 1;

225 
	}
}

227 
tux3_iowaô_öô
(
iowaô
 *iowait);

228 
tux3_iowaô_waô
(
iowaô
 *iowait);

229 
bufvec_öô
(
bufvec
 *bufvec, 
m≠_t
 *
m≠
,

230 
li°_hód
 *
hód
, 
tux3_üâr_d©a
 *
id©a
);

231 
bufvec_‰ì
(
bufvec
 *bufvec);

232 
bufvec_io
(
rw
, 
bufvec
 *bufvec, 
block_t
 
physiˇl
, 
cou¡
);

233 
bufvec_com∂ëe_wôhout_io
(
bufvec
 *bufvec, 
cou¡
);

234 
bufvec_c⁄tig_add
(
bufvec
 *bufvec, 
buf„r_hód
 *
buf„r
);

235 
Êush_li°
(
m≠_t
 *
m≠
, 
tux3_üâr_d©a
 *
id©a
,

236 
li°_hód
 *
hód
);

239 
ölöe
 
	$buf„r_f‹ked
(
buf„r_hód
 *
buf„r
)

242 
	`as£π
(!
	`hli°_unhashed
(&
buf„r
->
hashlök
));

244 
	}
}

246 
‰ì_f‹ked_buf„rs
(
sb
 *sb, 
öode
 *öode, 
f‹˚
);

247 
buf„r_hód
 *
blockdúty
(buf„r_hód *
buf„r
, 
√wdñè
);

248 
buf„rf‹k_to_övÆid©e
(
m≠_t
 *
m≠
, 
buf„r_hód
 *
buf„r
);

	@buffer_fork.c

9 
	$‰ì_f‹ked_buf„rs
(
sb
 *sb, 
öode
 *öode, 
f‹˚
)

11 if(
DEBUG_MODE_U
==1)

13 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

16 
	}
}

18 
buf„r_hód
 *
	$blockdúty
(
buf„r_hód
 *
buf„r
, 
√wdñè
)

20 if(
DEBUG_MODE_U
==1)

22 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

24 
m≠_t
 *
m≠
 = 
buf„r
->map;

26 
	`as£π
(
buf„r
->
°©e
 < 
BUFFER_STATES
);

28 
	`bu·ø˚
("---- bef‹e: f‹k buf„∏%∞----", 
buf„r
);

29 i‡(
	`buf„r_dúty
(
buf„r
)) {

30 i‡(
	`buf„r_Æªady_dúty
(
buf„r
, 
√wdñè
))

31  
buf„r
;

34 
	`bu·ø˚
("---- f‹k buf„∏%∞----", 
buf„r
);

35 
buf„r_hód
 *
˛⁄e
 = 
	`√w_buf„r
(
m≠
);

36 i‡(
	`IS_ERR
(
˛⁄e
))

37  
˛⁄e
;

39 
	`mem˝y
(
	`bufd©a
(
˛⁄e
), bufd©a(
buf„r
), 
	`bufsize
(buffer));

40 
˛⁄e
->
ödex
 = 
buf„r
->index;

42 
	`ªmove_buf„r_hash
(
buf„r
);

43 
	`ö£π_buf„r_hash
(
˛⁄e
);

49 
buf„r
 = 
˛⁄e
;

52 
	`__tux3_m¨k_buf„r_dúty
(
buf„r
, 
√wdñè
);

54  
buf„r
;

55 
	}
}

57 
	$buf„rf‹k_to_övÆid©e
(
m≠_t
 *
m≠
, 
buf„r_hód
 *
buf„r
)

59 if(
DEBUG_MODE_U
==1)

61 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

63 
dñè
 = 
	`tux3_öode_dñè
(
m≠
->
öode
);

68 
	`as£π
(
	`buf„r_ˇn_modify
(
buf„r
, 
dñè
));

71 
	}
}

	@buffer_writeback.c

4 
com¥ess_°ride
(
bufvec
*);

9 
	$tux3_iowaô_öô
(
iowaô
 *iowait)

11 if(
DEBUG_MODE_U
==1)

13 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

16 
	}
}

18 
	$tux3_iowaô_waô
(
iowaô
 *iowait)

20 if(
DEBUG_MODE_U
==1)

22 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

25 
	}
}

31 
	#buf„rs_íåy
(
x
) \

32 
	`li°_íåy
(
x
, 
buf„r_hód
, 
lök
)

	)

33 
	#MAX_BUFVEC_COUNT
 
UINT_MAX


	)

36 
	$bufvec_öô
(
bufvec
 *bufvec, 
m≠_t
 *
m≠
,

37 
li°_hód
 *
hód
, 
tux3_üâr_d©a
 *
id©a
)

39 if(
DEBUG_MODE_U
==1)

41 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

43 
	`INIT_LIST_HEAD
(&
bufvec
->
c⁄tig
);

44 
	`INIT_LIST_HEAD
(&
bufvec
->
com¥ess
);

45 
	`INIT_LIST_HEAD
(&
bufvec
->
f‹_io
);

46 
bufvec
->
globÆ_ödex
 = 0;

47 
bufvec
->
buf„rs
 = 
hód
;

48 
bufvec
->
c⁄tig_cou¡
 = 0;

49 
bufvec
->
com¥ess_cou¡
 = 0;

50 
bufvec
->
id©a
 = idata;

51 
bufvec
->
m≠
 = map;

52 
bufvec
->
íd_io
 = 
NULL
;

64 
	}
}

66 
	$bufvec_‰ì
(
bufvec
 *bufvec)

69 if(
DEBUG_MODE_U
==1)

71 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

73 
	`as£π
(!
bufvec
->
buf„rs
 || 
	`li°_em±y
(bufvec->buffers));

74 
	`as£π
(
	`li°_em±y
(&
bufvec
->
c⁄tig
));

75 
	`as£π
(
	`li°_em±y
(&
bufvec
->
f‹_io
));

76 
	}
}

78 
ölöe
 
	$bufvec_buf„r_move_to_c⁄tig
(
bufvec
 *bufvec,

79 
buf„r_hód
 *
buf„r
)

81 if(
DEBUG_MODE_U
==1)

83 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

85 
	`li°_move_èû
(&
buf„r
->
lök
, &
bufvec
->
c⁄tig
);

86 
bufvec
->
c⁄tig_cou¡
++;

87 
	}
}

89 
	$bufvec_io_d⁄e
(
bufvec
 *bufvec, 
îr
)

91 if(
DEBUG_MODE_U
==1)

93 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

95 
li°_hód
 *
hód
 = &
bufvec
->
f‹_io
;

97 !
	`li°_em±y
(
hód
)) {

98 
buf„r_hód
 *
buf„r
 = 
	`buf„rs_íåy
(
hód
->
√xt
);

99 
	`li°_dñ_öô
(&
buf„r
->
lök
);

100 
bufvec
->
	`íd_io
(
buf„r
, 
îr
);

102 if(
	`is_com¥es£d_fûe
(
	`bufvec_öode
(
bufvec
)))

104 
hód
 = &
bufvec
->
com¥ess
;

105 !
	`li°_em±y
(
hód
)) {

106 
buf„r_hód
 *
buf„r
 = 
	`buf„rs_íåy
(
hód
->
√xt
);

107 
	`li°_dñ_öô
(&
buf„r
->
lök
);

108 
bufvec
->
	`íd_io
(
buf„r
, 
îr
);

110 
bufvec
->
com¥ess_cou¡
 = 0;

112 
	}
}

115 
buf„r_hód
 *
	$bufvec_√xt_buf„r
(
bufvec
 *bufvec)

117 if(
DEBUG_MODE_U
==1)

119 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

121 i‡(!
	`li°_em±y
(&
bufvec
->
c⁄tig
))

122  
	`bufvec_c⁄tig_buf
(
bufvec
);

124 i‡(
bufvec
->
buf„rs
 && !
	`li°_em±y
(bufvec->buffers))

125  
	`buf„rs_íåy
(
bufvec
->
buf„rs
->
√xt
);

127  
NULL
;

128 
	}
}

140 
	$bufvec_io
(
rw
, 
bufvec
 *bufvec, 
block_t
 
physiˇl
, 
cou¡
)

142 if(
DEBUG_MODE_U
==1)

144 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

146 
sb
 *sb = 
	`tux_sb
(
	`bufvec_öode
(
bufvec
)->
i_sb
);

147 
iovec
 *
iov
;

148 
i
, 
iov_cou¡
;

149 
îr
;

151 
	`as£π
(
cou¡
 <
	`bufvec_c⁄tig_cou¡
(
bufvec
));

153 
iov
 = 
	`mÆloc
((*iovË* 
cou¡
);

154 i‡(
iov
 =
NULL
)

155  -
ENOMEM
;

156 
iov_cou¡
 = 0;

159 
i
 = 0; i < 
cou¡
; i++) {

160 
buf„r_hód
 *
buf„r
 = 
	`bufvec_c⁄tig_buf
(
bufvec
);

163 
	`li°_move_èû
(&
buf„r
->
lök
, &
bufvec
->
f‹_io
);

164 
bufvec
->
c⁄tig_cou¡
--;

166 
iov
[
i
].
iov_ba£
 = 
	`bufd©a
(
buf„r
);

167 
iov
[
i
].
iov_Àn
 = 
	`bufsize
(
buf„r
);

168 
iov_cou¡
++;

170 
	`as£π
(
i
 > 0);

172 
îr
 = 
	`devio_vec
(
rw
, 
	`sb_dev
(
sb
), 
physiˇl
 << sb->
blockbôs
,

173 
iov
, 
iov_cou¡
);

174 
	`bufvec_io_d⁄e
(
bufvec
, 
îr
);

176 
	`‰ì
(
iov
);

179 
	}
}

184 
	$bufvec_com∂ëe_wôhout_io
(
bufvec
 *bufvec, 
cou¡
)

186 if(
DEBUG_MODE_U
==1)

188 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

190 
i
;

192 
	`as£π
(
cou¡
 <
	`bufvec_c⁄tig_cou¡
(
bufvec
));

195 
i
 = 0; i < 
cou¡
; i++) {

196 
buf„r_hód
 *
buf„r
 = 
	`bufvec_c⁄tig_buf
(
bufvec
);

199 
	`li°_move_èû
(&
buf„r
->
lök
, &
bufvec
->
f‹_io
);

200 
bufvec
->
c⁄tig_cou¡
--;

202 
	`as£π
(
i
 > 0);

204 
	`bufvec_io_d⁄e
(
bufvec
, 0);

205 
	}
}

214 
	$bufvec_c⁄tig_add
(
bufvec
 *bufvec, 
buf„r_hód
 *
buf„r
)

216 if(
DEBUG_MODE_U
==1)

218 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

220 
c⁄tig_cou¡
 = 
	`bufvec_c⁄tig_cou¡
(
bufvec
);

222 i‡(
c⁄tig_cou¡
) {

223 
block_t
 
œ°
;

226 i‡(
	`bufvec_c⁄tig_cou¡
(
bufvec
Ë=
MAX_BUFVEC_COUNT
)

230 
œ°
 = 
	`bufvec_c⁄tig_œ°_ödex
(
bufvec
);

231 i‡(
œ°
 !
	`bufödex
(
buf„r
) - 1)

235 
	`bufvec_buf„r_move_to_c⁄tig
(
bufvec
, 
buf„r
);

238 
	}
}

240 
	$ˇn˚l_buf„r_dúty
(
bufvec
 *bufvec,

241 
buf„r_hód
 *
buf„r
)

243 if(
DEBUG_MODE_U
==1)

245 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

247 i‡(
	`tux_öode
(
	`bufvec_öode
(
bufvec
))->
öum
 =
TUX_VOLMAP_INO
)

248 
	`__˛ór_buf„r_dúty_f‹_ídio
(
buf„r
, 0);

250 
	`˛ór_buf„r_dúty_f‹_ídio
(
buf„r
, 0);

251 
	}
}

254 
	$bufvec_ˇn˚l_dúty_outside
(
bufvec
 *bufvec)

256 if(
DEBUG_MODE_U
==1)

258 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

260 
buf„r_hód
 *
buf„r
;

262 !
	`li°_em±y
(
bufvec
->
buf„rs
)) {

263 
buf„r
 = 
	`buf„rs_íåy
(
bufvec
->
buf„rs
->
√xt
);

264 
	`bu·ø˚
("cancel dirty: buffer %p, block %Lu",

265 
buf„r
, 
	`bufödex
(buffer));

267 
	`li°_dñ_öô
(&
buf„r
->
lök
);

269 
	`ˇn˚l_buf„r_dúty
(
bufvec
, 
buf„r
);

271 
	}
}

280 
	$bufvec_c⁄tig_cﬁÀ˘
(
bufvec
 *bufvec)

282 if(
DEBUG_MODE_U
==1)

284 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

286 
sb
 *sb = 
	`tux_sb
(
	`bufvec_öode
(
bufvec
)->
i_sb
);

287 
tux3_üâr_d©a
 *
id©a
 = 
bufvec
->idata;

288 
buf„r_hód
 *
buf„r
;

289 
block_t
 
œ°_ödex
, 
√xt_ödex
, 
outside_block
;

292 i‡(
	`bufvec_c⁄tig_cou¡
(
bufvec
))

294 
	`as£π
(!
	`li°_em±y
(
bufvec
->
buf„rs
));

296 
outside_block
 = (
id©a
->
i_size
 + 
sb
->
blockmask
Ë>> sb->
blockbôs
;

298 
buf„r
 = 
	`buf„rs_íåy
(
bufvec
->
buf„rs
->
√xt
);

299 
√xt_ödex
 = 
	`bufödex
(
buf„r
);

301 i‡(
√xt_ödex
 >
outside_block
) {

302 
	`bufvec_ˇn˚l_dúty_outside
(
bufvec
);

308 i‡(
	`bufvec_c⁄tig_cou¡
(
bufvec
Ë=(
	`is_com¥es£d_fûe
(
	`bufvec_öode
(bufvec))?
COMPRESSION_STRIDE_LEN
:
UINT_MAX
))

310 
	`bufvec_buf„r_move_to_c⁄tig
(
bufvec
, 
buf„r
);

312 i‡(
	`li°_em±y
(
bufvec
->
buf„rs
))

315 
buf„r
 = 
	`buf„rs_íåy
(
bufvec
->
buf„rs
->
√xt
);

316 
œ°_ödex
 = 
√xt_ödex
;

317 
√xt_ödex
 = 
	`bufödex
(
buf„r
);

332 i‡(
√xt_ödex
 >
outside_block
) {

333 
	`bufvec_ˇn˚l_dúty_outside
(
bufvec
);

336 } 
œ°_ödex
 =
√xt_ödex
 - 1);

339 if(
	`tux_öode
(
	`bufvec_öode
(
bufvec
))->
öum
 >64 && 
	`is_com¥es£d_fûe
(bufvec_inode(bufvec)))

340 
	`com¥ess_°ride
(
bufvec
);

342  !!
	`bufvec_c⁄tig_cou¡
(
bufvec
);

343 
	}
}

345 
	$buf„r_ödex_cmp
(*
¥iv
, 
li°_hód
 *
a
,

346 
li°_hód
 *
b
)

348 if(
DEBUG_MODE_U
==1)

350 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

352 
buf„r_hód
 *
buf_a
 = 
	`li°_íåy
(
a
, buf„r_hód, 
lök
);

353 
buf„r_hód
 *
buf_b
 = 
	`li°_íåy
(
b
, buf„r_hód, 
lök
);

355 i‡(
	`bufödex
(
buf_a
Ë< bufödex(
buf_b
))

357 i‡(
	`bufödex
(
buf_a
Ë> bufödex(
buf_b
))

360 
	}
}

365 
	$Êush_li°
(
m≠_t
 *
m≠
, 
tux3_üâr_d©a
 *
id©a
,

366 
li°_hód
 *
hód
)

368 if(
DEBUG_MODE_U
==1)

370 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

372 
bufvec
 bufvec;

373 
îr
 = 0;

377 i‡(
	`li°_em±y
(
hód
))

380 
	`bufvec_öô
(&
bufvec
, 
m≠
, 
hód
, 
id©a
);

383 
	`li°_s‹t
(
NULL
, 
hód
, 
buf„r_ödex_cmp
);

385 
	`bufvec_√xt_buf„r
(&
bufvec
)) {

387 i‡(
	`bufvec_c⁄tig_cﬁÀ˘
(&
bufvec
)) {

389 
îr
 = 
m≠
->
	`io
(
WRITE
, &
bufvec
);

390 i‡(
îr
)

395 
	`bufvec_‰ì
(&
bufvec
);

397  
îr
;

398 
	}
}

	@compression.c

1 #i‚de‡
COMPRESSION_C


2 
	#COMPRESSION_C


	)

5 
	~<lzo/lzo1x.h
>

7 
	sw‹k•a˚


9 *
	mmem
;

10 *
	mc_buf
;

11 *
	md_buf
;

14 
w‹k•a˚
 *
	$öô_w‹k•a˚
(
°ride_Àn
)

16 if(
DEBUG_MODE_K
==1)

18 
	`¥ötf
("%25† %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

20 
w‹k•a˚
 *workspace;

22 
w‹k•a˚
 = 
	`mÆloc
((*workspace));

23 if(!
w‹k•a˚
)

24  
	`ERR_PTR
(-
ENOMEM
);

26 
w‹k•a˚
->
mem
 = 
	`mÆloc
(
LZO1X_MEM_COMPRESS
);

27 
w‹k•a˚
->
c_buf
 = 
	`mÆloc
(
PAGE_SIZE_1
*
°ride_Àn
);

28 
w‹k•a˚
->
d_buf
 = 
	`mÆloc
(
PAGE_SIZE_1
*
°ride_Àn
);

30 i‡(!
w‹k•a˚
->
mem
 || !w‹k•a˚->
d_buf
 || !w‹k•a˚->
c_buf
)

31 
Áû
;

33  
w‹k•a˚
;

35 
Áû
:

36  
	`ERR_PTR
(-
ENOMEM
);

37 
	}
}

39 
	$‰ì_w‹k•a˚
(
w‹k•a˚
 *workspace)

41 if(
DEBUG_MODE_K
==1)

43 
	`¥ötf
("%25† %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

46 
	`‰ì
(
w‹k•a˚
->
mem
);

47 
	`‰ì
(
w‹k•a˚
->
c_buf
);

48 
	`‰ì
(
w‹k•a˚
->
d_buf
);

49 
	`‰ì
(
w‹k•a˚
);

50 
	}
}

52 
	$com¥ess_°ride
(
bufvec
 *bufvec)

54 if(
DEBUG_MODE_K
==1)

56 
	`¥ötf
("%25† %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

58 
öode
 *öodê
	`bufvec_öode
(
bufvec
);

59 
buf„r_hód
 *
buf„r
;

60 
w‹k•a˚
 *workspace;

61 
li°_hód
 *
li°
;

62 
off£t
, 
out_blocks
;

63 
Àn
 = 
	`bufvec_c⁄tig_cou¡
(
bufvec
);

64 
ö_Àn
, 
èû
, 
out_Àn
;

65 *
d©a
;

66 
ªt
 = 0;

68 
w‹k•a˚
 = 
	`öô_w‹k•a˚
(
Àn
);

69 
	`¥ötf
("\n[C]öodê: %Lu", 
	`tux_öode
(
öode
)->
öum
);

71 
ö_Àn
 = 
	`bufvec_c⁄tig_cou¡
(
bufvec
)*
PAGE_SIZE_1
;

72 
out_Àn
 = 0;

74 
off£t
 = 0;

75 
Àn
)

77 
li°
 = 
bufvec
->
c⁄tig
.
√xt
;

78 
buf„r
 = 
	`li°_íåy
(
li°
, 
buf„r_hód
, 
lök
);

80 
d©a
 = (*)
buf„r
->data;

81 
	`mem˝y
((*)
w‹k•a˚
->
d_buf
 + 
off£t
, 
d©a
, 
PAGE_SIZE_1
);

82 
off£t
 +
PAGE_SIZE_1
;

84 
	`li°_move_èû
(&
buf„r
->
lök
, &
bufvec
->
com¥ess
);

85 
bufvec
->
c⁄tig_cou¡
--;

86 
bufvec
->
com¥ess_cou¡
++;

87 
Àn
--;

90 i‡(
	`lzo_öô
(Ë!
LZO_E_OK
)

92 
	`¥ötf
("internalÉrror -Üzo_init() failed !!!\n");

93 
	`¥ötf
("(this usually indicatesá compiler bug -ÅryÑecompiling\nwithout optimizations,ándÉnable '-DLZO_DEBUG' for diagnostics)\n");

97 
ªt
 = 
	`lzo1x_1_com¥ess
(
w‹k•a˚
->
d_buf
, 
ö_Àn
, w‹k•a˚->
c_buf
, (
lzo_uöt
 *)&
out_Àn
, w‹k•a˚->
mem
);

98 i‡(
ªt
 =
LZO_E_OK
)

99 
	`¥ötf
("\nSTRIDE SUCCESSFULLY COMPRESSED !");

101 
out_blocks
 = 
out_Àn
 / 
PAGE_SIZE_1
 + 1;

102 
èû
 = 
PAGE_SIZE_1
 - (
out_Àn
 % PAGE_SIZE_1);

103 
	`¥ötf
("\n\nCom¥es£d from %uÅÿ%u | Com¥es£d block†: %u |Åaû : %u\n", 
ö_Àn
, ()
out_Àn
, 
out_blocks
, 
èû
);

104 
	`mem£t
((*)
w‹k•a˚
->
c_buf
 + 
out_Àn
, 0, 
èû
);

106 
off£t
 = 0;

107 
out_blocks
 > 0)

109 
li°
 = 
bufvec
->
com¥ess
.
√xt
;

110 
buf„r
 = 
	`li°_íåy
(
li°
, 
buf„r_hód
, 
lök
);

113 
d©a
 = (*)
buf„r
->data;

114 
	`mem˝y
(
d©a
, (*)
w‹k•a˚
->
c_buf
 + 
off£t
, 
PAGE_SIZE_1
);

115 
buf„r
->
ödex
 = 
bufvec
->
globÆ_ödex
++;

116 
off£t
 +
PAGE_SIZE_1
;

118 
	`li°_move_èû
(&
buf„r
->
lök
, &
bufvec
->
c⁄tig
);

119 
bufvec
->
c⁄tig_cou¡
++;

120 
bufvec
->
com¥ess_cou¡
--;

122 
out_blocks
--;

125 
	`‰ì_w‹k•a˚
(
w‹k•a˚
);

126  
ªt
;

127 
	}
}

129 
	gã°
;

130 
	s°ride_m≠


132 
	mnum
[100];

133 
	mcou¡
;

134 }
	gem
;

137 
	gis_fú°
;

138 
	$öô_°ride
()

140 
em
.
cou¡
=0;

141 
	}
}

143 
	$add_°ride
(
i
)

145 
	`¥ötf
("ò%d\n",
i
);

146 if(
em
.
cou¡
==0)

148 
em
.
num
[em.
cou¡
]=
i
;

152 
em
.
num
[em.
cou¡
]=
i
-em.num[em.count-1];

153 
	`¥ötf
("em.num[em.cou¡-1] %d\n",
em
.
num
[em.
cou¡
-1]);

155 
	`¥ötf
("ADDSTRIDE såidênÿ: %d, såidêÀ¿: %d\n",
em
.
cou¡
,em.
num
[em.count]);

156 
em
.
cou¡
++;

157 
	}
}

159 
	$is_°ride_öôüli£d
()

161  
em
.
cou¡
;

162 
	}
}

	@current_task.c

5 
	~"tux3u£r.h
"

7 
__thªad
 
èsk_°ru˘
 
	gcuºít_èsk
 = {};

	@current_task.h

1 #i‚de‡
TUX3_CURRENT_TASK_H


2 
	#TUX3_CURRENT_TASK_H


	)

4 
	sèsk_°ru˘
 {

5 *
	mjou∫Æ_öfo
;

8 
__thªad
 
èsk_°ru˘
 
cuºít_èsk
;

9 
ölöe
 
èsk_°ru˘
 *
	$gë_cuºít
()

11  &
cuºít_èsk
;

12 
	}
}

14 
	#cuºít
 
	`gë_cuºít
()

	)

	@dir.c

41 
	~"tux3u£r.h
"

43 #i‚de‡
åa˚


44 
	#åa˚
 
åa˚_off


	)

47 
	~"kî√l/dú.c
"

49 
	$tux_dump_íåõs
(
buf„r_hód
 *
buf„r
)

51 if(
DEBUG_MODE_U
==1)

53 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

55 
öode
 *
dú
 = 
buf„r
->
m≠
->inode;

56 
blocksize
 = 
	`bufsize
(
buf„r
);

57 
tux_dúít
 *
íåy
 = (tux_dúíà*)
	`bufd©a
(
buf„r
);

58 
tux_dúít
 *
limô
 = 
	`bufd©a
(
buf„r
Ë+ 
blocksize
;

60 
	`__tux3_dbg
("entries <%Lx:%Lx>: ",

61 
	`tux_öode
(
dú
)->
öum
, 
	`bufödex
(
buf„r
));

62 
íåy
 < 
limô
) {

63 i‡(!
íåy
->
ªc_Àn
) {

64 
	`tux_zîo_Àn_îr‹
(
dú
, 
	`bufödex
(
buf„r
));

67 i‡(!
	`is_dñëed
(
íåy
))

68 
	`__tux3_dbg
("%.*s (%Lx:%i) ",

69 
íåy
->
«me_Àn
,

70 
íåy
->
«me
,

71 
	`be64_to_˝u
(
íåy
->
öum
),

72 
íåy
->
ty≥
);

73 
íåy
 = 
	`√xt_íåy
(entry);

75 
	`blockput
(
buf„r
);

76 
	`__tux3_dbg
("\n");

77 
	}
}

	@diskio.c

1 
	~<uni°d.h
>

2 
	~<î∫o.h
>

3 
	~<öây≥s.h
>

4 
	~<löux/fs.h
>

5 
	~<sys/io˘l.h
>

6 
	~<sys/°©.h
>

7 
	~"åa˚.h
"

8 
	~"diskio.h
"

10 
ssize_t
 
	$iov_Àngth
(
iovec
 *
iov
, 
iov˙t
)

12 if(
DEBUG_MODE_U
==1)

14 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

16 
ssize_t
 
size
 = 0;

17 
i
;

19 
i
 = 0; i < 
iov˙t
; i++)

20 
size
 +
iov
[
i
].
iov_Àn
;

21  
size
;

22 
	}
}

24 
	$iovabs
(
fd
, 
iovec
 *
iov
, 
iov˙t
, 
out
, 
off_t
 
off£t
)

26 if(
DEBUG_MODE_U
==1)

28 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

31 
cou¡
 = 
	`mö
(
iov˙t
, 
UIO_MAXIOV
);

32 
ssize_t
 
ªt
;

34 i‡(
out
)

37 if(
DEBUG_RW
==1)

39 
	`¥ötf
("\n\n------------------------------IOVABS-PWRITEV------------------------------\n");

40 *
c
=
iov
->
iov_ba£
;

41 
i
;

42 
FILE
 *
f
;

43 
f
=
	`f›í
("iovabs","a");

44 
	`Ârötf
(
f
,"\nWrite:\n");

45 
i
=0;i<
iov
->
iov_Àn
;i++)

47 if((
i
)%32==0)

49 
	`Ârötf
(
f
,"\n");

51 
	`¥ötf
("%c",*
c
);

52 
	`Ârötf
(
f
,"%3u",*
c
);

53 
c
++;

56 
	`¥ötf
("\n\n--------------------------------------------------------------------------\n");

59 
ªt
 = 
	`pwrôev
(
fd
, 
iov
, 
cou¡
, 
off£t
);

63 
ªt
 = 
	`¥ódv
(
fd
, 
iov
, 
cou¡
, 
off£t
);

65 if(
DEBUG_RW
==1)

67 
	`¥ötf
("\n\n------------------------------IOVABS-PREADV------------------------------\n");

68 *
c
=
iov
->
iov_ba£
;

69 
i
;

70 
FILE
 *
f
;

71 
f
=
	`f›í
("iovabs","a");

72 
	`Ârötf
(
f
,"\nRead:\n");

73 
i
=0;i<
iov
->
iov_Àn
;i++)

75 if((
i
)%32==0)

77 
	`Ârötf
(
f
,"\n");

79 
	`¥ötf
("%c",*
c
);

80 
	`Ârötf
(
f
,"%3u",*
c
);

81 
c
++;

83 
	`¥ötf
("\n\n-------------------------------------------------------------------------\n");

87 i‡(
ªt
 == -1) {

88 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

90  -
î∫o
;

92 i‡(
ªt
 !
	`iov_Àngth
(
iov
, 
cou¡
))

93  -
EIO
;

94 i‡(
iov˙t
 =
cou¡
)

97 
iov
 +
cou¡
;

98 
iov˙t
 -
cou¡
;

99 
off£t
 +
ªt
;

103 
	}
}

105 
	$iﬂbs
(
fd
, *
d©a
, 
size_t
 
cou¡
, 
out
, 
off_t
 
off£t
)

107 if(
DEBUG_MODE_U
==1)

109 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

111 
cou¡
) {

112 
ssize_t
 
ªt
;

113 i‡(
out
)

116 if(
DEBUG_RW
==1)

118 
	`¥ötf
("\n\n------------------------------IOABS-PWRITEV------------------------------\n");

119 *
c
=
d©a
;

120 
i
;

121 
FILE
 *
f
;

122 
f
=
	`f›í
("ioabs","a");

123 
	`Ârötf
(
f
,"\npwrite:\n");

124 
i
=0;i<
cou¡
;i++)

126 if((
i
)%32==0)

128 
	`Ârötf
(
f
,"\n");

130 
	`¥ötf
("%c",*
c
);

131 
	`Ârötf
(
f
,"%3u",*
c
);

132 
c
++;

134 
	`¥ötf
("\n\n-------------------------------------------------------------------------\n");

137 
ªt
 = 
	`pwrôe
(
fd
, 
d©a
, 
cou¡
, 
off£t
);

141 
ªt
 = 
	`¥ód
(
fd
, 
d©a
, 
cou¡
, 
off£t
);

143 if(
DEBUG_RW
==1)

145 
	`¥ötf
("\n\n------------------------------IOABS-PREADV------------------------------\n");

146 *
c
=
d©a
;

147 
i
;

148 
FILE
 *
f
;

149 
f
=
	`f›í
("ioabs","a");

150 
	`Ârötf
(
f
,"\nPread:\n");

151 
i
=0;i<
cou¡
;i++)

153 if((
i
)%32==0)

155 
	`Ârötf
(
f
,"\n");

157 
	`¥ötf
("%c",*
c
);

158 
	`Ârötf
(
f
,"%3u",*
c
);

159 
c
++;

161 
	`¥ötf
("\n\n------------------------------------------------------------------------\n");

165 i‡(
ªt
 == -1) {

166 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

168  -
î∫o
;

170 i‡(
ªt
 == 0)

171  -
EIO
;

172 
d©a
 +
ªt
;

173 
cou¡
 -
ªt
;

174 
off£t
 +
ªt
;

177 
	}
}

179 
	$i‹ñ
(
fd
, *
d©a
, 
size_t
 
cou¡
, 
out
)

181 if(
DEBUG_MODE_U
==1)

183 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

185 
cou¡
) {

186 
ssize_t
 
ªt
;

187 i‡(
out
)

188 
ªt
 = 
	`wrôe
(
fd
, 
d©a
, 
cou¡
);

190 
ªt
 = 
	`ªad
(
fd
, 
d©a
, 
cou¡
);

191 i‡(
ªt
 == -1) {

192 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

194  -
î∫o
;

196 i‡(
ªt
 == 0)

197  -
EIO
;

198 
d©a
 +
ªt
;

199 
cou¡
 -
ªt
;

202 
	}
}

204 
	$diskªad
(
fd
, *
d©a
, 
size_t
 
cou¡
, 
off_t
 
off£t
)

206 if(
DEBUG_MODE_U
==1)

208 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

210  
	`iﬂbs
(
fd
, 
d©a
, 
cou¡
, 0, 
off£t
);

211 
	}
}

213 
	$diskwrôe
(
fd
, *
d©a
, 
size_t
 
cou¡
, 
off_t
 
off£t
)

215 if(
DEBUG_MODE_U
==1)

217 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

219  
	`iﬂbs
(
fd
, 
d©a
, 
cou¡
, 1, 
off£t
);

220 
	}
}

222 
	$°ªamªad
(
fd
, *
d©a
, 
size_t
 
cou¡
)

224 if(
DEBUG_MODE_U
==1)

226 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

228  
	`i‹ñ
(
fd
, 
d©a
, 
cou¡
, 0);

229 
	}
}

231 
	$°ªamwrôe
(
fd
, *
d©a
, 
size_t
 
cou¡
)

233 if(
DEBUG_MODE_U
==1)

235 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

237  
	`i‹ñ
(
fd
, 
d©a
, 
cou¡
, 1);

238 
	}
}

240 
	$fdsize64
(
fd
, 
loff_t
 *
size
)

242 if(
DEBUG_MODE_U
==1)

244 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

246 
°©
 stat;

247 i‡(
	`f°©
(
fd
, &
°©
))

249 i‡(
	`S_ISREG
(
°©
.
°_mode
)) {

250 *
size
 = 
°©
.
°_size
;

253  
	`io˘l
(
fd
, 
BLKGETSIZE64
, 
size
);

254 
	}
}

	@diskio.h

1 #i‚de‡
TUX3_DISKIO_H


2 
	#TUX3_DISKIO_H


	)

4 
	~<öây≥s.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/uio.h
>

8 
iovabs
(
fd
, 
iovec
 *
iov
, 
iov˙t
, 
out
, 
off_t
 
off£t
);

9 
iﬂbs
(
fd
, *
d©a
, 
size_t
 
cou¡
, 
out
, 
off_t
 
off£t
);

10 
diskªad
(
fd
, *
d©a
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

11 
diskwrôe
(
fd
, *
d©a
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

12 
°ªamªad
(
fd
, *
d©a
, 
size_t
 
cou¡
);

13 
°ªamwrôe
(
fd
, *
d©a
, 
size_t
 
cou¡
);

14 
fdsize64
(
fd
, 
loff_t
 *
size
);

	@filemap.c

1 
	~"tux3u£r.h
"

3 #i‚de‡
åa˚


4 
	#åa˚
 
åa˚_⁄


	)

6 
	~"kî√l/fûem≠.c
"

7 
	~"com¥essi⁄.c
"

9 
	$fûem≠_bufvec_check
(
bufvec
 *bufvec, 
m≠_mode
 
mode
)

11 if(
DEBUG_MODE_U
==1)

13 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

15 
sb
 *sb = 
	`tux_sb
(
	`bufvec_öode
(
bufvec
)->
i_sb
);

16 
buf„r_hód
 *
buf„r
;

18 
	`åa˚
("%s inode 0x%Lx block 0x%Lx",

19 (
mode
 =
MAP_READ
) ? "read" :

20 (
mode
 =
MAP_WRITE
) ? "write" : "redirect",

21 
	`tux_öode
(
	`bufvec_öode
(
bufvec
))->
öum
,

22 
	`bufvec_c⁄tig_ödex
(
bufvec
));

24 i‡(
	`bufvec_c⁄tig_œ°_ödex
(
bufvec
Ë& (-1LL << 
MAX_BLOCKS_BITS
))

26 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; -
EIO
;

29 
	`li°_f‹_óch_íåy
(
buf„r
, &
bufvec
->
c⁄tig
, 
lök
) {

30 i‡(
mode
 !
MAP_READ
 && 
	`buf„r_em±y
(
buf„r
))

31 
	`tux3_w¨n
(
sb
, "egad, writingán invalid buffer");

32 i‡(
mode
 =
MAP_READ
 && 
	`buf„r_dúty
(
buf„r
))

33 
	`tux3_w¨n
(
sb
, "egad,Ñeadingá dirty buffer");

36 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; 0;

37 
	}
}

48 
	$guess_ªadahód
(
bufvec
 *bufvec, 
öode
 *inode,

49 
block_t
 
ödex
)

51 if(
DEBUG_MODE_U
==1)

53 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

55 
sb
 *sb = 
öode
->
i_sb
;

56 
buf„r_hód
 *
buf„r
;

57 
block_t
 
limô
;

58 
ªt
;

60 
	`bufvec_öô
(
bufvec
, 
öode
->
m≠
, 
NULL
, NULL);

62 
limô
 = (
öode
->
i_size
 + 
sb
->
blockmask
Ë>> sb->
blockbôs
;

64 i‡(
limô
 > 
ödex
 + 
MAX_EXTENT
)

65 
limô
 = 
ödex
 + 
MAX_EXTENT
;

71 
buf„r
 = 
	`blockgë
(
	`m≠pög
(
öode
), 
ödex
++);

72 i‡(!
buf„r
)

74 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; -
ENOMEM
;

76 
ªt
 = 
	`bufvec_c⁄tig_add
(
bufvec
, 
buf„r
);

77 
	`as£π
(
ªt
);

79 
ödex
 < 
limô
) {

80 
buf„r_hód
 *
√xtbuf
 = 
	`≥ekblk
(
buf„r
->
m≠
, 
ödex
);

81 i‡(
√xtbuf
) {

82 
°›
 = !
	`buf„r_em±y
(
√xtbuf
);

83 i‡(
°›
) {

84 
	`blockput
(
√xtbuf
);

88 
√xtbuf
 = 
	`blockgë
(
buf„r
->
m≠
, 
ödex
);

89 i‡(!
√xtbuf
)

92 
ªt
 = 
	`bufvec_c⁄tig_add
(
bufvec
, 
√xtbuf
);

93 
	`as£π
(
ªt
);

95 
ödex
++;

98 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; 0;

99 
	}
}

102 
	$fûem≠_ªad_ídio
(
buf„r_hód
 *
buf„r
, 
îr
)

104 if(
DEBUG_MODE_U
==1)

106 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

108 i‡(
îr
) {

110 
	`as£π
(0);

111 
	`__£t_buf„r_em±y
(
buf„r
);

113 
	`£t_buf„r_˛ón
(
buf„r
);

116 
	`blockput
(
buf„r
);

117 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}

118 
	}
}

122 
	$fûem≠_hﬁe_ídio
(
buf„r_hód
 *
buf„r
, 
îr
)

124 if(
DEBUG_MODE_U
==1)

126 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

128 
	`as£π
(
îr
 == 0);

129 
	`mem£t
(
	`bufd©a
(
buf„r
), 0, 
	`bufsize
(buffer));

130 
	`£t_buf„r_˛ón
(
buf„r
);

132 
	`blockput
(
buf„r
);

133 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}

134 
	}
}

138 
	$fûem≠_˛ón_ídio
(
buf„r_hód
 *
buf„r
, 
îr
)

140 if(
DEBUG_MODE_U
==1)

142 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

144 
	`as£π
(
îr
 == 0);

145 
	`__£t_buf„r_em±y
(
buf„r
);

147 
	`blockput
(
buf„r
);

148 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}

149 
	}
}

152 
	$fûem≠_exã¡_io
(
m≠_mode
 
mode
, 
rw
, 
bufvec
 *bufvec)

154 if(
DEBUG_MODE_U
==1)

156 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

158 
öode
 *öodê
	`bufvec_öode
(
bufvec
);

159 
block_t
 
block
, 
ödex
 = 
	`bufvec_c⁄tig_ödex
(
bufvec
);

160 
îr
;

163 
	`as£π
(
mode
 !
MAP_READ
 || 
	`bufvec_c⁄tig_cou¡
(
bufvec
) == 1);

164 
îr
 = 
	`fûem≠_bufvec_check
(
bufvec
, 
mode
);

165 i‡(
îr
)

167 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; 
îr
;

170 
bufvec
 *
bufvec_io
, 
bufvec_ahód
;

171 
cou¡
;

172 i‡(!(
rw
 & 
WRITE
)) {

174 
îr
 = 
	`guess_ªadahód
(&
bufvec_ahód
, 
öode
, 
ödex
);

175 i‡(
îr
)

177 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; 
îr
;

179 
bufvec_io
 = &
bufvec_ahód
;

181 
bufvec_io
 = 
bufvec
;

183 
cou¡
 = 
	`bufvec_c⁄tig_cou¡
(
bufvec_io
);

185 
block_£gmít
 
£g
[10];

187 
£gs
 = 
	`m≠_ªgi⁄
(
öode
, 
ödex
, 
cou¡
, 
£g
, 
	`ARRAY_SIZE
(£g), 
mode
);

188 i‡(
£gs
 < 0)

190 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; 
£gs
;

192 
	`as£π
(
£gs
);

194 
i
 = 0; i < 
£gs
; i++) {

195 
block
 = 
£g
[
i
].block;

196 
cou¡
 = 
£g
[
i
].count;

198 
	`åa˚
("exã¡ 0x%Lx/%x => %Lx", 
ödex
, 
cou¡
, 
block
);

200 i‡(
£g
[
i
].
°©e
 !
BLOCK_SEG_HOLE
) {

201 i‡(!(
rw
 & 
WRITE
))

202 
bufvec_io
->
íd_io
 = 
fûem≠_ªad_ídio
;

204 
bufvec_io
->
íd_io
 = 
˛ór_buf„r_dúty_f‹_ídio
;

206 
îr
 = 
	`blockio_vec
(
rw
, 
bufvec_io
, 
block
, 
cou¡
);

207 i‡(
îr
)

210 
	`as£π
(!(
rw
 & 
WRITE
));

211 
bufvec_io
->
íd_io
 = 
fûem≠_hﬁe_ídio
;

212 
	`bufvec_com∂ëe_wôhout_io
(
bufvec_io
, 
cou¡
);

215 
ödex
 +
cou¡
;

223 i‡(!(
rw
 & 
WRITE
)) {

225 
cou¡
 = 
	`bufvec_c⁄tig_cou¡
(
bufvec_io
);

226 i‡(
cou¡
) {

227 
bufvec_io
->
íd_io
 = 
fûem≠_˛ón_ídio
;

228 
	`bufvec_com∂ëe_wôhout_io
(
bufvec_io
, 
cou¡
);

230 
	`bufvec_‰ì
(
bufvec_io
);

233 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; 
îr
;

234 
	}
}

236 
	$tuxio
(
fûe
 *fûe, *
d©a
, 
Àn
, 
wrôe
)

238 if(
DEBUG_MODE_U
==1)

240 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

242 
dñè
 = 
wrôe
 ? 
	`tux3_gë_cuºít_dñè
() : 0;

243 
öode
 *öodê
fûe
->
f_öode
;

244 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

245 
loff_t
 
pos
 = 
fûe
->
f_pos
;

246 
îr
 = 0;

249 
lzo_uöt
 
°ride_Àn
;

250 *
˛⁄e1
[
COMPRESSION_STRIDE_LEN
];

251 *
com¥es£d_d©a
;

252 
decom¥es£d_Àngth
;

253 
i
,
r
;

254 
Àn2
=
Àn
;

255 
°ride_cou¡
=1;

256 
blocks_cou¡
=0;

257 
	`öô_°ride
();

264 
	`åa˚
("%s %u bytesát %Lu, isize = 0x%Lx",

265 
wrôe
 ? "wrôe" : "ªad", 
Àn
, (
s64
)
pos
, (s64)
öode
->
i_size
);

266 i‡(
wrôe
 && 
pos
 + 
Àn
 > 
sb
->
s_maxbyãs
)

268 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; -
EFBIG
;

270 i‡(!
wrôe
 && 
pos
 + 
Àn
 > 
öode
->
i_size
) {

271 i‡(
pos
 >
öode
->
i_size
)

273 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; 0;

275 
Àn
 = 
öode
->
i_size
 - 
pos
;

278 i‡(
wrôe
) {

279 
	`tux3_üârdúty
(
öode
);

280 
öode
->
i_mtime
 = inode->
i_˘ime
 = 
	`gëtime
();

283 
bbôs
 = 
sb
->
blockbôs
;

284 
bsize
 = 
sb
->
blocksize
;

285 
bmask
 = 
sb
->
blockmask
;

287 
loff_t
 
èû
 = 
Àn
;

288 
èû
) {

289 
buf„r_hód
 *
buf„r
, *
˛⁄e
;

290 
‰om
 = 
pos
 & 
bmask
;

291 
some
 = 
‰om
 + 
èû
 > 
bsize
 ? bsize - from :Åail;

292 
fuŒ
 = 
wrôe
 && 
some
 =
bsize
;

294 i‡(
fuŒ
)

295 
buf„r
 = 
	`blockgë
(
	`m≠pög
(
öode
), 
pos
 >> 
bbôs
);

297 
buf„r
 = 
	`blockªad
(
	`m≠pög
(
öode
), 
pos
 >> 
bbôs
);

298 i‡(!
buf„r
) {

299 
îr
 = -
EIO
;

302 if(!
wrôe
)

306 i‡(
wrôe
) {

307 
˛⁄e
 = 
	`blockdúty
(
buf„r
, 
dñè
);

308 i‡(
	`IS_ERR
(
˛⁄e
)) {

309 
	`blockput
(
buf„r
);

310 
îr
 = 
	`PTR_ERR
(
˛⁄e
);

314 
	`mem˝y
(
	`bufd©a
(
˛⁄e
Ë+ 
‰om
, 
d©a
, 
some
);

315 
	`m¨k_buf„r_dúty_n⁄
(
˛⁄e
);

319 
˛⁄e
=
buf„r
;

321 if(
	`is_com¥es£d_fûe
(
öode
))

323 
˛⁄e1
[
blocks_cou¡
]=
	`mÆloc
(
PAGE_SIZE_1
);

324 
	`mem˝y
(
˛⁄e1
[
blocks_cou¡
],
buf„r
->
d©a
,
PAGE_SIZE_1
);

325 
	`¥ötf
("\n°ridêCou¡ : %d ; cou¡ : %d\n",
°ride_cou¡
,
blocks_cou¡
);

326 
blocks_cou¡
++;

328 if(
blocks_cou¡
==(
em
.
num
[
°ride_cou¡
]))

330 
com¥es£d_d©a
=
	`mÆloc
(
PAGE_SIZE_1
*
COMPRESSION_STRIDE_LEN
);

331 
i
=0;i<
em
.
num
[
°ride_cou¡
];i++)

333 
	`mem˝y
(
com¥es£d_d©a
+
i
*
PAGE_SIZE_1
,(*)
˛⁄e1
[i], 
some
);

335 
	`‰ì
(
˛⁄e1
[
i
]);

338 
	`¥ötf
("\n-----------------------------------------------------------------------\n");

339 
i
=0;i<
PAGE_SIZE_1
*
em
.
num
[
°ride_cou¡
];i++)

341 
	`¥ötf
("%c",*(*)(
com¥es£d_d©a
+
i
));

343 
	`¥ötf
("\n-----------------------------------------------------------------------\n");

346 
°ride_Àn
 = (
em
.
num
[
°ride_cou¡
])*
PAGE_SIZE_1
;

347 
r
 = 
	`lzo1x_decom¥ess
(
com¥es£d_d©a
,
°ride_Àn
,
d©a
+(
°ride_cou¡
-1)*
PAGE_SIZE_1
*
COMPRESSION_STRIDE_LEN
,(
lzo_uöt
 *)&
decom¥es£d_Àngth
,
NULL
);

348 i‡(
r
 =
LZO_E_OK
)

349 
	`¥ötf
("decompressed %lu bytes back into %lu bytes\n",

350 (Ë
decom¥es£d_Àngth
, (Ë
°ride_Àn
);

360 
blocks_cou¡
=0;

361 
	`‰ì
(
com¥es£d_d©a
);

362 
°ride_cou¡
++;

367 
	`mem˝y
(
d©a
, 
	`bufd©a
(
˛⁄e
Ë+ 
‰om
, 
some
);

371 
	`åa˚_off
("transfer %u bytes, block 0x%Lx, buffer %p",

372 
some
, 
	`bufödex
(
˛⁄e
), 
buf„r
);

373 
	`blockput
(
˛⁄e
);

374 if(
°ride_cou¡
==
em
.
cou¡
 && !
wrôe
 && 
	`is_com¥es£d_fûe
(
öode
))

376 
èû
=0;

377 
pos
=0;

380 
èû
 -
some
;

381 
pos
 +
some
;

382 if(
wrôe
 || !
	`is_com¥es£d_fûe
(
öode
))

383 
d©a
 +
some
;

384 
	`¥ötf
("po†%u,somê%u,Åaû %u",()
pos
,()
some
,()
èû
);

387 
fûe
->
f_pos
 = 
pos
;

389 i‡(
wrôe
) {

390 i‡(
öode
->
i_size
 < 
pos
)

391 
öode
->
i_size
 = 
pos
;

392 
	`tux3_m¨k_öode_dúty
(
öode
);

394 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; 
îr
 ?Éº : (!
	`is_com¥es£d_fûe
(
öode
)?
Àn
 - 
èû
:
Àn2
);

395 
	}
}

397 
	$tuxªad
(
fûe
 *fûe, *
d©a
, 
Àn
)

399 if(
DEBUG_MODE_U
==1)

401 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

403 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; 
	`tuxio
(
fûe
, 
d©a
, 
Àn
, 0);

404 
	}
}

406 
	$tuxwrôe
(
fûe
 *fûe, c⁄° *
d©a
, 
Àn
)

408 if(
DEBUG_MODE_U
==1)

410 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

412 
sb
 *sb = 
fûe
->
f_öode
->
i_sb
;

413 
ªt
;

414 
	`ch™ge_begö
(
sb
);

415 
ªt
 = 
	`tuxio
(
fûe
, (*)
d©a
, 
Àn
, 1);

416 
	`ch™ge_íd
(
sb
);

417 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; 
ªt
;

418 
	}
}

420 
	$tux£ek
(
fûe
 *fûe, 
loff_t
 
pos
)

422 if(
DEBUG_MODE_U
==1)

424 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

426 
fûe
->
f_pos
 = 
pos
;

427 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}

428 
	}
}

431 
	$∑ge_symlök
(
öode
 *öode, c⁄° *
sym«me
, 
Àn
)

433 if(
DEBUG_MODE_U
==1)

435 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

437 
fûe
 fûê{ .
f_öode
 = 
öode
, };

438 
ªt
;

440 
	`as£π
(
öode
->
i_size
 == 0);

441 
ªt
 = 
	`tuxio
(&
fûe
, (*)
sym«me
, 
Àn
, 1);

442 i‡(
ªt
 < 0)

444 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; 
ªt
;

446 i‡(
Àn
 !
ªt
)

448 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; -
EIO
;

450 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; 0;

451 
	}
}

453 
	$∑ge_ªadlök
(
öode
 *öode, *
buf
, 
size
)

455 if(
DEBUG_MODE_U
==1)

457 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

459 
fûe
 fûê{ .
f_öode
 = 
öode
, };

460 
Àn
 = 
	`mö_t
(
loff_t
, 
öode
->
i_size
, 
size
);

461 
ªt
;

463 
ªt
 = 
	`tuxªad
(&
fûe
, 
buf
, 
Àn
);

464 i‡(
ªt
 < 0)

466 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; 
ªt
;

468 i‡(
ªt
 !
Àn
)

470 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; -
EIO
;

472 if(
DEBUG_MODE_U
==1){
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #out\n",
__FILE__
,
__func__
,
__LINE__
);}; 0;

473 
	}
}

	@hexdump.c

3 #i‚de‡
HEXDUMP


4 
	#HEXDUMP


	)

5 
	~<execöfo.h
>

7 
	$°ackåa˚
()

9 if(
DEBUG_MODE_U
==1)

11 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

13 *
¨øy
[100];

14 
size_t
 
size
 = 
	`backåa˚
(
¨øy
, 100);

15 
	`¥ötf
("_______stack ______\n");

16 
	`backåa˚_symbﬁs_fd
(
¨øy
, 
size
, 2);

17 
	}
}

19 
	$hexdump
(*
d©a
, 
size
)

21 if(
DEBUG_MODE_U
==1)

23 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

25 
size
) {

26 *
p
;

27 
w
 = 16, 
n
 = 
size
 < w? size: w, 
∑d
 = w -Ç;

28 
	`¥ötf
("%p: ", 
d©a
);

29 
p
 = 
d©a
;Ö < (*)d©®+ 
n
;)

30 
	`¥ötf
("%02hx ", *
p
++);

31 
	`¥ötf
("%*.† \"", 
∑d
*3, "");

32 
p
 = 
d©a
;Ö < (*)d©®+ 
n
;) {

33 
c
 = *
p
++;

34 
	`¥ötf
("%c", 
c
 < ' ' || c > 127 ? '.' : c);

36 
	`¥ötf
("\"\n");

37 
d©a
 +
w
;

38 
size
 -
n
;

40 
	}
}

	@inode.c

11 
	~"tux3u£r.h
"

13 #i‚de‡
åa˚


14 
	#åa˚
 
åa˚_⁄


	)

17 
	#HASH_SHIFT
 10

	)

18 
	#HASH_SIZE
 (1 << 10)

	)

19 
	#HASH_MASK
 (
HASH_SIZE
 - 1)

	)

21 
hli°_hód
 
	göode_hashèbÀ
[
HASH_SIZE
] = {

22 [0 ... (
HASH_SIZE
 - 1)] = 
HLIST_HEAD_INIT
,

25 
	$hash
(
öum_t
 
öum
)

27 if(
DEBUG_MODE_U
==1)

29 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

31  
	`hash_64
(
öum
, 
HASH_SHIFT
);

32 
	}
}

34 
	$öode_Àak_check
()

36 if(
DEBUG_MODE_U
==1)

38 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

40 
Àaks
 = 0;

42 
i
 = 0; i < 
HASH_SIZE
; i++) {

43 
hli°_hód
 *
hód
 = 
öode_hashèbÀ
 + 
i
;

44 
öode
 *inode;

45 
	`hli°_f‹_óch_íåy
(
öode
, 
hód
, 
i_hash
) {

46 
	`åa˚_⁄
("possibleÜeak inode inum %Lu, i_count %d",

47 
	`tux_öode
(
öode
)->
öum
,

48 
	`©omic_ªad
(&
öode
->
i_cou¡
));

49 
Àaks
++;

53 
	`as£π
(
Àaks
 == 0);

54 
	}
}

56 
ölöe
 
	$öode_unhashed
(
öode
 *inode)

58 if(
DEBUG_MODE_U
==1)

60 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

62  
	`hli°_unhashed
(&
öode
->
i_hash
);

63 
	}
}

65 
	$ö£π_öode_hash
(
öode
 *inode)

67 if(
DEBUG_MODE_U
==1)

69 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

71 
hli°_hód
 *
b
 = 
öode_hashèbÀ
 + 
	`hash
(
	`tux_öode
(
öode
)->
öum
);

72 
	`hli°_add_hód
(&
öode
->
i_hash
, 
b
);

73 
	}
}

75 
	$ªmove_öode_hash
(
öode
 *inode)

77 if(
DEBUG_MODE_U
==1)

79 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

81 i‡(!
	`öode_unhashed
(
öode
))

82 
	`hli°_dñ_öô
(&
öode
->
i_hash
);

83 
	}
}

85 
öode
 *
	$√w_öode
(
sb
 *sb)

87 if(
DEBUG_MODE_U
==1)

89 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

91 
tux3_öode
 *
tuxnode
;

92 
öode
 *inode;

94 
tuxnode
 = 
	`mÆloc
((*tuxnode));

95 i‡(!
tuxnode
)

96 
îr‹
;

98 
	`öode_öô
(
tuxnode
, 
sb
, 0);

99 
öode
 = &
tuxnode
->
vfs_öode
;

101 
öode
->
m≠
 = 
	`√w_m≠
(
sb
->
dev
, 
NULL
);

102 i‡(!
öode
->
m≠
)

103 
îr‹_m≠
;

105 
öode
->
m≠
->inode = inode;

107  
öode
;

109 
îr‹_m≠
:

110 
	`‰ì
(
tuxnode
);

111 
îr‹
:

112  
NULL
;

113 
	}
}

115 
	$‰ì_öode
(
öode
 *inode)

117 if(
DEBUG_MODE_U
==1)

119 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

121 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

123 
öode
->
i_°©e
 &~
I_BAD
;

125 
	`‰ì_öode_check
(
tuxnode
);

127 
	`‰ì_m≠
(
	`m≠pög
(
öode
));

128 
	`‰ì
(
tuxnode
);

129 
	}
}

132 
	$make_bad_öode
(
öode
 *inode)

134 if(
DEBUG_MODE_U
==1)

136 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

138 
	`ªmove_öode_hash
(
öode
);

139 
öode
->
i_°©e
 |
I_BAD
;

140 
	}
}

142 
	$is_bad_öode
(
öode
 *inode)

144 if(
DEBUG_MODE_U
==1)

146 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

148  
öode
->
i_°©e
 & 
I_BAD
;

149 
	}
}

151 
	$u∆ock_√w_öode
(
öode
 *inode)

153 if(
DEBUG_MODE_U
==1)

155 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

157 
	`as£π
(
öode
->
i_°©e
 & 
I_NEW
);

158 
öode
->
i_°©e
 &~
I_NEW
;

159 
	}
}

161 
	$igë_Áûed
(
öode
 *inode)

163 if(
DEBUG_MODE_U
==1)

165 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

167 
	`make_bad_öode
(
öode
);

168 
	`u∆ock_√w_öode
(
öode
);

169 
	`ùut
(
öode
);

170 
	}
}

172 
	$__igë
(
öode
 *inode)

174 if(
DEBUG_MODE_U
==1)

176 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

178 
	`as£π
(!(
öode
->
i_°©e
 & 
I_FREEING
));

179 i‡(
	`©omic_ªad
(&
öode
->
i_cou¡
)) {

180 
	`©omic_öc
(&
öode
->
i_cou¡
);

184 
	`as£π
(
öode
->
i_°©e
 & 
I_DIRTY
);

185 
	`©omic_öc
(&
öode
->
i_cou¡
);

186 
	}
}

189 
	$igë_if_dúty
(
öode
 *inode)

191 if(
DEBUG_MODE_U
==1)

193 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

195 
	`__igë
(
öode
);

196 
	}
}

199 
	$ihﬁd
(
öode
 *inode)

201 if(
DEBUG_MODE_U
==1)

203 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

205 
	`as£π
(!(
öode
->
i_°©e
 & 
I_FREEING
));

206 
	`as£π
(
	`©omic_ªad
(&
öode
->
i_cou¡
) >= 1);

207 
	`©omic_öc
(&
öode
->
i_cou¡
);

208 
	}
}

210 
öode
 *
föd_öode
(
sb
 *sb, 
hli°_hód
 *
hód
,

211 (*
ã°
)(
öode
 *, *),

212 *
d©a
)

214 if(
DEBUG_MODE_U
==1)

216 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

218 
öode
 *inode;

220 
	`hli°_f‹_óch_íåy
(
öode
, 
hód
, 
i_hash
) {

221 i‡(
	`ã°
(
öode
, 
d©a
)) {

222 
	`__igë
(
öode
);

223  
öode
;

226  
NULL
;

227 
	}
}

229 
öode
 *
ûookup5_nowaô
(
sb
 *sb, 
öum_t
 
öum
,

230 (*
ã°
)(
öode
 *, *), *
d©a
)

232 if(
DEBUG_MODE_U
==1)

234 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

236 
hli°_hód
 *
hód
 = 
öode_hashèbÀ
 + 
	`hash
(
öum
);

237 
öode
 *inode;

239 
öode
 = 
	`föd_öode
(
sb
, 
hód
, 
ã°
, 
d©a
);

241  
öode
;

242 
	}
}

244 
öode
 *
ûookup5
(
sb
 *sb, 
öum_t
 
öum
,

245 (*
ã°
)(
öode
 *, *), *
d©a
)

247 if(
DEBUG_MODE_U
==1)

249 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

251 
öode
 *öodê
	`ûookup5_nowaô
(
sb
, 
öum
, 
ã°
, 
d©a
);

253 
	`as£π
(!
öode
 || !(öode->
i_°©e
 & 
I_NEW
));

254  
öode
;

255 
	}
}

257 
öode
 *
igë5_locked
(
sb
 *sb, 
öum_t
 
öum
,

258 (*
ã°
)(
öode
 *, *),

259 (*
£t
)(
öode
 *, *), *
d©a
)

261 if(
DEBUG_MODE_U
==1)

263 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

265 
hli°_hód
 *
hód
 = 
öode_hashèbÀ
 + 
	`hash
(
öum
);

266 
öode
 *inode;

268 
öode
 = 
	`föd_öode
(
sb
, 
hód
, 
ã°
, 
d©a
);

269 i‡(
öode
)

270  
öode
;

272 
öode
 = 
	`√w_öode
(
sb
);

273 i‡(!
öode
)

274  
NULL
;

275 i‡(
	`£t
(
öode
, 
d©a
)) {

276 
	`‰ì_öode
(
öode
);

277  
NULL
;

280 
öode
->
i_°©e
 = 
I_NEW
;

281 
	`hli°_add_hód
(&
öode
->
i_hash
, 
hód
);

283  
öode
;

284 
	}
}

286 
ö£π_öode_locked4
(
öode
 *öode, 
öum_t
 
öum
,

287 (*
ã°
)(
öode
 *, *), *
d©a
)

289 if(
DEBUG_MODE_U
==1)

291 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

293 
hli°_hód
 *
hód
 = 
öode_hashèbÀ
 + 
	`hash
(
öum
);

296 
öode
 *
ﬁd
 = 
NULL
;

298 
	`hli°_f‹_óch_íåy
(
ﬁd
, 
hód
, 
i_hash
) {

299 i‡(!
	`ã°
(
ﬁd
, 
d©a
))

301 i‡(
ﬁd
->
i_°©e
 & (
I_FREEING
 ))

305 i‡(
	`likñy
(!
ﬁd
)) {

306 
öode
->
i_°©e
 |
I_NEW
;

307 
	`hli°_add_hód
(&
öode
->
i_hash
, 
hód
);

310 
	`__igë
(
ﬁd
);

312 i‡(
	`u∆ikñy
(!
	`öode_unhashed
(
ﬁd
))) {

313 
	`ùut
(
ﬁd
);

314  -
EBUSY
;

316 
	`ùut
(
ﬁd
);

318 
	}
}

320 
loff_t
 
	$i_size_ªad
(c⁄° 
öode
 *inode)

322 if(
DEBUG_MODE_U
==1)

324 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

326  
öode
->
i_size
;

327 
	}
}

329 
	$i_size_wrôe
(
öode
 *öode, 
loff_t
 
i_size
)

331 if(
DEBUG_MODE_U
==1)

333 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

335 
öode
->
i_size
 = i_size;

336 
	}
}

339 
	$tux3_åunˇã_∑πül_block
(
öode
 *öode, 
loff_t
 
√wsize
)

341 if(
DEBUG_MODE_U
==1)

343 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

345 
dñè
 = 
	`tux3_gë_cuºít_dñè
();

346 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

347 
block_t
 
ödex
 = 
√wsize
 >> 
sb
->
blockbôs
;

348 
off£t
 = 
√wsize
 & 
sb
->
blockmask
;

349 
buf„r_hód
 *
buf„r
, *
˛⁄e
;

351 i‡(!
off£t
)

354 
buf„r
 = 
	`blockªad
(
	`m≠pög
(
öode
), 
ödex
);

355 i‡(!
buf„r
)

356  -
EIO
;

358 
˛⁄e
 = 
	`blockdúty
(
buf„r
, 
dñè
);

359 i‡(
	`IS_ERR
(
˛⁄e
)) {

360 
	`blockput
(
buf„r
);

361  
	`PTR_ERR
(
˛⁄e
);

364 
	`mem£t
(
	`bufd©a
(
˛⁄e
Ë+ 
off£t
, 0, 
sb
->
blocksize
 - offset);

365 
	`m¨k_buf„r_dúty_n⁄
(
˛⁄e
);

366 
	`blockput
(
˛⁄e
);

369 
	}
}

372 
	$gíîic_dr›_öode
(
öode
 *inode)

374 if(
DEBUG_MODE_U
==1)

376 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

379 
	}
}

381 
	~"kî√l/öode.c
"

383 
	$tux_£tup_öode
(
öode
 *inode)

385 if(
DEBUG_MODE_U
==1)

387 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

389 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

391 
	`as£π
(
	`tux_öode
(
öode
)->
öum
 !
TUX_INVALID_INO
);

392 
öode
->
i_mode
 & 
S_IFMT
) {

393 
S_IFSOCK
:

394 
S_IFIFO
:

395 
S_IFBLK
:

396 
S_IFCHR
:

397 
öode
->
m≠
->
io
 = 
dev_îrio
;

399 
S_IFREG
:

401 
öode
->
m≠
->
io
 = 
tux3_fûem≠_ªdúe˘_io
;

403 
S_IFDIR
:

404 
S_IFLNK
:

405 
öode
->
m≠
->
io
 = 
tux3_fûem≠_ªdúe˘_io
;

409 
	`tux_öode
(
öode
)->
öum
) {

410 
TUX_BITMAP_INO
:

411 
TUX_VTABLE_INO
:

412 
TUX_ATABLE_INO
:

414 
öode
->
i_size
 = 
	`vfs_sb
(
sb
)->
s_maxbyãs
;

415 
öode
->
m≠
->
io
 = 
tux3_fûem≠_ªdúe˘_io
;

417 
	`tux3_£t_öode_no_Êush
(
öode
);

419 
TUX_VOLMAP_INO
:

420 
TUX_LOGMAP_INO
:

421 
öode
->
i_size
 = (
loff_t
)
sb
->
vﬁblocks
 << sb->
blockbôs
;

422 i‡(
	`tux_öode
(
öode
)->
öum
 =
TUX_VOLMAP_INO
)

425 
öode
->
m≠
->
io
 = 
tux3_logm≠_io
;

427 
	`tux3_£t_öode_no_Êush
(
öode
);

430 
	`as£π
(0);

435 
	`tux3_fs_îr‹
(
sb
, "Unknown mode: inum %Lx, mode %07ho",

436 
	`tux_öode
(
öode
)->
öum
, inode->
i_mode
);

439 
	}
}

445 
	$ùut
(
öode
 *inode)

447 if(
DEBUG_MODE_U
==1)

449 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

451 i‡(
öode
 =
NULL
)

454 i‡(
	`©omic_dec_™d_ã°
(&
öode
->
i_cou¡
)) {

455 
	`as£π
(!(
öode
->
i_°©e
 & 
I_NEW
));

457 i‡(!
	`tux3_dr›_öode
(
öode
)) {

462 
	`tux3_evi˘_öode
(
öode
);

464 
	`ªmove_öode_hash
(
öode
);

465 
	`‰ì_öode
(
öode
);

467 
	}
}

469 
	$__tuxåunˇã
(
öode
 *öode, 
loff_t
 
size
)

471 if(
DEBUG_MODE_U
==1)

473 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

475  
	`tux3_åunˇã
(
öode
, 
size
);

476 
	}
}

478 
	$tuxåunˇã
(
öode
 *öode, 
loff_t
 
size
)

480 if(
DEBUG_MODE_U
==1)

482 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

484 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

485 
îr
;

487 
	`ch™ge_begö
(
sb
);

488 
	`tux3_üârdúty
(
öode
);

489 
îr
 = 
	`__tuxåunˇã
(
öode
, 
size
);

490 
	`ch™ge_íd
(
sb
);

492  
îr
;

493 
	}
}

	@kernel/balloc.c

12 
	~"tux3.h
"

14 #i‚de‡
åa˚


15 
	#åa˚
 
åa˚_⁄


	)

18 #i‚de‡
__KERNEL__


19 
block_t
 
	$cou¡_ønge
(
öode
 *öode, 
block_t
 
°¨t
, block_à
cou¡
)

21 if(
DEBUG_MODE_K
==1)

23 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

25 
⁄es
[256];

27 
	`as£π
(!(
°¨t
 & 7));

29 
i
 = 0; i < (
⁄es
); i++)

30 
⁄es
[
i
] = 
	`byãbôs
(i);

32 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

33 
m≠shi·
 = 
sb
->
blockbôs
 + 3;

34 
m≠mask
 = (1 << 
m≠shi·
) - 1;

35 
block_t
 
limô
 = 
°¨t
 + 
cou¡
;

36 
block_t
 
blocks
 = (
limô
 + 
m≠mask
Ë>> 
m≠shi·
;

37 
block_t
 
èû
 = (
cou¡
 + 7Ë>> 3, 
tŸÆ
 = 0;

38 
off£t
 = (
°¨t
 & 
m≠mask
) >> 3;

40 
block_t
 
block
 = 
°¨t
 >> 
m≠shi·
; block < 
blocks
; block++) {

42 
buf„r_hód
 *
buf„r
 = 
	`blockªad
(
	`m≠pög
(
öode
), 
block
);

43 i‡(!
buf„r
)

45 
byãs
 = 
sb
->
blocksize
 - 
off£t
;

46 i‡(
byãs
 > 
èû
)

47 
byãs
 = 
èû
;

48 *
p
 = 
	`bufd©a
(
buf„r
Ë+ 
off£t
, *
t›
 =Ö + 
byãs
;

49 
p
 < 
t›
)

50 
tŸÆ
 +
⁄es
[*
p
++];

51 
	`blockput
(
buf„r
);

52 
èû
 -
byãs
;

53 
off£t
 = 0;

55  
tŸÆ
;

56 
	}
}

58 
block_t
 
	$bôm≠_dump
(
öode
 *öode, 
block_t
 
°¨t
, block_à
cou¡
)

60 if(
DEBUG_MODE_K
==1)

62 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

64 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

65 
m≠shi·
 = 
sb
->
blockbôs
 + 3;

66 
m≠mask
 = (1 << 
m≠shi·
) - 1;

67 
block_t
 
limô
 = 
°¨t
 + 
cou¡
;

68 
block_t
 
blocks
 = (
limô
 + 
m≠mask
Ë>> 
m≠shi·
, 
a˘ive
 = 0;

69 
off£t
 = (
°¨t
 & 
m≠mask
) >> 3;

70 
°¨tbô
 = 
°¨t
 & 7;

71 
block_t
 
èû
 = (
cou¡
 + 
°¨tbô
 + 7Ë>> 3, 
begö
 = -1;

73 
	`__tux3_dbg
("%Ld bôm≠ blocks:\n", 
blocks
);

74 
block_t
 
block
 = 
°¨t
 >> 
m≠shi·
; block < 
blocks
; block++) {

75 
íded
 = 0, 
™y
 = 0;

76 
buf„r_hód
 *
buf„r
 = 
	`blockªad
(
	`m≠pög
(
öode
), 
block
);

77 i‡(!
buf„r
)

79 
byãs
 = 
sb
->
blocksize
 - 
off£t
;

80 i‡(
byãs
 > 
èû
)

81 
byãs
 = 
èû
;

82 *
p
 = 
	`bufd©a
(
buf„r
Ë+ 
off£t
, *
t›
 =Ö + 
byãs
;

83 ; 
p
 < 
t›
;Ö++, 
°¨tbô
 = 0) {

84 
c
 = *
p
;

85 i‡(!
™y
 && 
c
)

86 
	`__tux3_dbg
("[%Lx] ", 
block
);

87 
™y
 |
c
;

88 i‡((!
c
 && 
begö
 < 0) || (c == 0xff && begin >= 0))

90 
i
 = 
°¨tbô
, 
mask
 = 1 << startbit; i < 8; i++, mask <<= 1) {

91 i‡(!(
c
 & 
mask
Ë=(
begö
 < 0))

93 
block_t
 
found
 = 
i
 + (((*)
p
 - 
	`bufd©a
(
buf„r
)Ë<< 3Ë+ (
block
 << 
m≠shi·
);

94 i‡(
begö
 < 0)

95 
begö
 = 
found
;

97 i‡((
begö
 >> 
m≠shi·
Ë!
block
)

98 
	`__tux3_dbg
("-%Lx ", 
found
 - 1);

99 i‡(
begö
 =
found
 - 1)

100 
	`__tux3_dbg
("%Lx ", 
begö
);

102 
	`__tux3_dbg
("%Lx-%Lx ", 
begö
, 
found
 - 1);

103 
begö
 = -1;

104 
íded
++;

108 
a˘ive
 +!!
™y
;

109 
	`blockput
(
buf„r
);

110 
èû
 -
byãs
;

111 
off£t
 = 0;

112 i‡(
begö
 >= 0)

113 
	`__tux3_dbg
("%Lx-", 
begö
);

114 i‡(
™y
)

115 
	`__tux3_dbg
("\n");

117 
	`__tux3_dbg
("(%Ldá˘ive)\n", 
a˘ive
);

119 
	}
}

125 
	$bôm≠_modify_bôs
(
sb
 *sb, 
buf„r_hód
 *
buf„r
,

126 
off£t
, 
blocks
, 
£t
)

128 if(
DEBUG_MODE_K
==1)

130 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

132 
buf„r_hód
 *
˛⁄e
;

133 (*
modify
)(
u8
 *, , Ë
£t
 ? 
£t_bôs
 : 
˛ór_bôs
;

135 
	`as£π
(
blocks
 > 0);

136 
	`as£π
(
off£t
 + 
blocks
 <
sb
->
blocksize
 << 3);

142 
˛⁄e
 = 
	`blockdúty
(
buf„r
, 
sb
->
unify
);

143 i‡(
	`IS_ERR
(
˛⁄e
)) {

144 
îr
 = 
	`PTR_ERR
(
˛⁄e
);

145 
	`as£π
(
îr
 !-
EAGAIN
);

146  
îr
;

149 
	`modify
(
	`bufd©a
(
˛⁄e
), 
off£t
, 
blocks
);

151 
	`m¨k_buf„r_dúty_n⁄
(
˛⁄e
);

152 
	`blockput
(
˛⁄e
);

154 i‡(
£t
)

155 
sb
->
‰ìblocks
 -
blocks
;

157 
sb
->
‰ìblocks
 +
blocks
;

160 
	}
}

169 
	$bôm≠_modify
(
sb
 *sb, 
block_t
 
°¨t
, 
blocks
, 
£t
)

171 if(
DEBUG_MODE_K
==1)

173 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

175 
öode
 *
bôm≠
 = 
sb
->bitmap;

176 
m≠shi·
 = 
sb
->
blockbôs
 + 3;

177 
m≠size
 = 1 << 
m≠shi·
;

178 
m≠mask
 = 
m≠size
 - 1;

179 
m≠off£t
 = 
°¨t
 & 
m≠mask
;

180 
block_t
 
m≠block
, 
m≠blocks
 = (
°¨t
 + 
blocks
 + 
m≠mask
Ë>> 
m≠shi·
;

182 
	`as£π
(
blocks
 > 0);

183 
	`as£π
(
°¨t
 + 
blocks
 <
sb
->
vﬁblocks
);

185 
m≠block
 = 
°¨t
 >> 
m≠shi·
; m≠block < 
m≠blocks
; mapblock++) {

186 
buf„r_hód
 *
buf„r
;

187 
Àn
;

188 
îr
;

190 
buf„r
 = 
	`blockªad
(
	`m≠pög
(
bôm≠
), 
m≠block
);

191 i‡(!
buf„r
) {

192 
	`tux3_îr
(
sb
, "blockÑead failed");

194  -
EIO
;

197 
Àn
 = 
	`mö
(
m≠size
 - 
m≠off£t
, 
blocks
);

198 
îr
 = 
	`bôm≠_modify_bôs
(
sb
, 
buf„r
, 
m≠off£t
, 
Àn
, 
£t
);

199 i‡(
îr
) {

200 
	`blockput
(
buf„r
);

202  
îr
;

205 
m≠off£t
 = 0;

206 
blocks
 -
Àn
;

210 
	}
}

218 
	$bôm≠_ã°_™d_modify
(
sb
 *sb, 
block_t
 
°¨t
, 
blocks
,

219 
£t
)

221 if(
DEBUG_MODE_K
==1)

223 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

225 
öode
 *
bôm≠
 = 
sb
->bitmap;

226 
m≠shi·
 = 
sb
->
blockbôs
 + 3;

227 
m≠size
 = 1 << 
m≠shi·
;

228 
m≠mask
 = 
m≠size
 - 1;

229 
m≠off£t
 = 
°¨t
 & 
m≠mask
;

230 
block_t
 
m≠block
, 
m≠blocks
 = (
°¨t
 + 
blocks
 + 
m≠mask
Ë>> 
m≠shi·
;

231 (*
ã°
)(
u8
 *, , Ë
£t
 ? 
Æl_˛ór
 : 
Æl_£t
;

233 
	`as£π
(
blocks
 > 0);

234 
	`as£π
(
°¨t
 + 
blocks
 <
sb
->
vﬁblocks
);

236 
m≠block
 = 
°¨t
 >> 
m≠shi·
; m≠block < 
m≠blocks
; mapblock++) {

237 
buf„r_hód
 *
buf„r
;

238 
Àn
;

239 
îr
;

241 
buf„r
 = 
	`blockªad
(
	`m≠pög
(
bôm≠
), 
m≠block
);

242 i‡(!
buf„r
) {

243 
	`tux3_îr
(
sb
, "blockÑead failed");

245  -
EIO
;

248 
Àn
 = 
	`mö
(
m≠size
 - 
m≠off£t
, 
blocks
);

249 i‡(!
	`ã°
(
	`bufd©a
(
buf„r
), 
m≠off£t
, 
Àn
)) {

250 
	`blockput
(
buf„r
);

252 
	`tux3_fs_îr‹
(
sb
, "%s: start 0x%Lx, count %x",

253 
£t
 ? "alreadyállocated" : "double free",

254 
°¨t
, 
blocks
);

256  -
EIO
;

259 
îr
 = 
	`bôm≠_modify_bôs
(
sb
, 
buf„r
, 
m≠off£t
, 
Àn
, 
£t
);

260 i‡(
îr
) {

261 
	`blockput
(
buf„r
);

263  
îr
;

266 
m≠off£t
 = 0;

267 
blocks
 -
Àn
;

271 
	}
}

273 
	$ßve_£g
(
block_£gmít
 *
£g
, 
£gs
, 
block_t
 
°¨t
,

274 
cou¡
)

276 if(
DEBUG_MODE_K
==1)

278 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

280 i‡(
£g
[0].
cou¡
 < count) {

281 
£g
[0].
block
 = 
°¨t
;

282 
£g
[0].
cou¡
 = count;

284 
	}
}

294 
	$bÆloc_‰om_ønge
(
sb
 *sb, 
block_t
 
°¨t
, block_à
Àn
,

295 
blocks
, 
Êags
,

296 
block_£gmít
 *
£g
, 
£gs
)

298 if(
DEBUG_MODE_K
==1)

300 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

302 
öode
 *
bôm≠
 = 
sb
->bitmap;

303 
m≠shi·
 = 
sb
->
blockbôs
 + 3;

304 
m≠size
 = 1 << 
m≠shi·
;

305 
m≠mask
 = 
m≠size
 - 1;

306 
buf„r_hód
 *
buf„r
;

307 
block_t
 
√ed
, 
found
, 
m≠block
;

309 
	`åa˚
("bÆlo¯föd %òblocks,Ñ™gê[°¨àÀn] [%Lx, %Lx], seg†%d", 
blocks
, 
°¨t
, 
Àn
, 
£gs
);

311 
	`as£π
(
blocks
 > 0);

312 
	`as£π
(
Àn
 <
sb
->
vﬁblocks
);

313 
	`as£π
(
	`tux3_undî_backíd
(
sb
));

316 
	`mem£t
(
£g
, 0, (*£gË* 
£gs
);

318 
√ed
 = 
blocks
;

319 
Àn
 > 0) {

320 
block_t
 
m≠°¨t
;

321 
m≠off£t
, 
m≠limô
, 
m≠Àn
;

322 *
p
;

324 i‡(
	`u∆ikñy
(
°¨t
 >
sb
->
vﬁblocks
)) {

325 i‡(
√ed
 < 
blocks
) {

327 
blks
 = 
blocks
 - 
√ed
;

328 
found
 = 
sb
->
vﬁblocks
 - 
blks
;

329 
	`ßve_£g
(
£g
, 
£gs
, 
found
, 
blks
);

332 
°¨t
 = 0;

337 
√ed
 = 
blocks
;

340 
m≠block
 = 
°¨t
 >> 
m≠shi·
;

341 
m≠°¨t
 = 
m≠block
 << 
m≠shi·
;

342 
m≠off£t
 = 
°¨t
 & 
m≠mask
;

343 
m≠limô
 = 
	`mö_t
(
block_t
, 
m≠size
, 
m≠off£t
 + 
Àn
);

345 i‡(
	`u∆ikñy
(
m≠°¨t
 + 
m≠limô
 > 
sb
->
vﬁblocks
))

346 
m≠limô
 = 
sb
->
vﬁblocks
 & 
m≠mask
;

347 
m≠Àn
 = 
m≠limô
 - 
m≠off£t
;

349 
buf„r
 = 
	`blockªad
(
	`m≠pög
(
bôm≠
), 
m≠block
);

350 i‡(!
buf„r
) {

351 
	`tux3_îr
(
sb
, "blockÑead failed");

353  -
EIO
;

356 
p
 = 
	`bufd©a
(
buf„r
);

358 
idx
, 
m≠√xt
;

360 
m≠√xt
 = 
	`mö_t
(
block_t
, 
m≠off£t
 + 
√ed
, 
m≠limô
);

363 
idx
 = 
	`föd_√xt_bô_À
(
p
, 
m≠√xt
, 
m≠off£t
);

364 i‡(
idx
 =
m≠√xt
) {

365 
√ed
 -
idx
 - 
m≠off£t
;

366 i‡(
√ed
)

370 
found
 = 
m≠°¨t
 + 
idx
 - 
blocks
;

371 
	`ßve_£g
(
£g
, 
£gs
, 
found
, 
blocks
);

372 
found_ønge
;

375 
√ed
 -
idx
 - 
m≠off£t
;

376 i‡(
√ed
 < 
blocks
) {

378 
blks
 = 
blocks
 - 
√ed
;

379 
found
 = 
m≠°¨t
 + 
idx
 - 
blks
;

380 
	`ßve_£g
(
£g
, 
£gs
, 
found
, 
blks
);

384 
√ed
 = 
blocks
;

387 
m≠off£t
 = 
	`föd_√xt_zîo_bô_À
(
p
, 
m≠limô
, 
idx
 + 1);

388 i‡(
m≠off£t
 =
m≠limô
)

392 
°¨t
 +
m≠Àn
;

393 
Àn
 -
m≠Àn
;

395 
	`blockput
(
buf„r
);

398 i‡((
Êags
 & 
BALLOC_PARTIAL
Ë&& 
£g
[0].
cou¡
) {

399 
	`tux3_dbg
("partial blocks %u, block %llu, count %u",

400 
blocks
, 
£g
[0].
block
, seg[0].
cou¡
);

401 
found
 = 
£g
[0].
block
;

402 
blocks
 = 
£g
[0].
cou¡
;

403 
found_∑πül
;

406  -
ENOSPC
;

408 
found_ønge
:

410 i‡((
found
 >> 
m≠shi·
Ë=
m≠block
) {

411 
foundoff£t
 = 
found
 & 
m≠mask
;

412 
îr
;

414 
îr
 = 
	`bôm≠_modify_bôs
(
sb
, 
buf„r
, 
foundoff£t
, 
blocks
, 1);

415 i‡(
îr
) {

416 
	`blockput
(
buf„r
);

418  
îr
;

421 
îr
;

423 
	`blockput
(
buf„r
);

424 
found_∑πül
:

425 
îr
 = 
	`bôm≠_modify
(
sb
, 
found
, 
blocks
, 1);

426 i‡(
îr
)

427  
îr
;

430 
£g
->
block
 = 
found
;

431 
£g
->
cou¡
 = 
blocks
;

433 
sb
->
√xtblock
 = 
found
 + 
blocks
;

434 i‡(
sb
->
√xtblock
 >sb->
vﬁblocks
)

435 
sb
->
√xtblock
 = 0;

438 
	`åa˚
("bÆlo¯exã¡ [block %Lx, cou¡ %x]", 
found
, 
blocks
);

441 
	}
}

443 
	$__bÆloc
(
sb
 *sb, 
blocks
, 
Êags
,

444 
block_£gmít
 *
£g
, 
£gs
)

446 if(
DEBUG_MODE_K
==1)

448 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

450 
block_t
 
gﬂl
 = 
sb
->
√xtblock
;

451 
îr
;

454 
îr
 = 
	`bÆloc_‰om_ønge
(
sb
, 
gﬂl
, sb->
vﬁblocks
, 
blocks
, 
Êags
,

455 
£g
, 
£gs
);

456 i‡(
îr
 =-
ENOSPC
) {

458 
	`tux3_w¨n
(
sb
, "couldn'àbÆloc: block†%u", 
blocks
);

461  
îr
;

462 
	}
}

464 
	$bÆloc
(
sb
 *sb, 
blocks
, 
block_£gmít
 *
£g
, 
£gs
)

466 if(
DEBUG_MODE_K
==1)

468 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

470  
	`__bÆloc
(
sb
, 
blocks
, 0, 
£g
, 
£gs
);

471 
	}
}

473 
	$bÆloc_∑πül
(
sb
 *sb, 
blocks
,

474 
block_£gmít
 *
£g
, 
£gs
)

476 if(
DEBUG_MODE_K
==1)

478 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

480  
	`__bÆloc
(
sb
, 
blocks
, 
BALLOC_PARTIAL
, 
£g
, 
£gs
);

481 
	}
}

483 
	$b‰ì
(
sb
 *sb, 
block_t
 
°¨t
, 
blocks
)

485 if(
DEBUG_MODE_K
==1)

487 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

489 
	`as£π
(
	`tux3_undî_backíd
(
sb
));

490 
	`åa˚
("b‰ìÉxã¡ [block %Lx, cou¡ %x], ", 
°¨t
, 
blocks
);

491  
	`bôm≠_ã°_™d_modify
(
sb
, 
°¨t
, 
blocks
, 0);

492 
	}
}

494 
	$ª∂ay_upd©e_bôm≠
(
ª∂ay
 *
Ω
, 
block_t
 
°¨t
, 
blocks
,

495 
£t
)

497 if(
DEBUG_MODE_K
==1)

499 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

501  
	`bôm≠_ã°_™d_modify
(
Ω
->
sb
, 
°¨t
, 
blocks
, 
£t
);

502 
	}
}

	@kernel/btree.c

12 
	~"tux3.h
"

14 #i‚de‡
åa˚


15 
	#åa˚
 
åa˚_off


	)

19 
roŸ
 
	gno_roŸ
 = {

20 .
block
 = 0,

21 .
	gdïth
 = 0,

24 
	sbnode
 {

25 
__be16
 
	mmagic
;

26 
__be16
 
	munu£d
;

27 
__be32
 
	mcou¡
;

28 
	södex_íåy
 {

29 
__be64
 
	mkey
;

30 
__be64
 
	mblock
;

31 } 
	míåõs
[];

43 
	$ˇlc_íåõs_≥r_node
(
blocksize
)

45 if(
DEBUG_MODE_K
==1)

47 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

49  (
blocksize
 - (
bnode
)Ë/ (
ödex_íåy
);

50 
	}
}

52 
ölöe
 
	$bcou¡
(
bnode
 *
node
)

54 if(
DEBUG_MODE_K
==1)

56 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

58  
	`be32_to_˝u
(
node
->
cou¡
);

59 
	}
}

61 
buf„r_hód
 *
	$√w_block
(
båì
 *btree)

63 if(
DEBUG_MODE_K
==1)

65 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

67 
block_£gmít
 
£g
;

69 
îr
 = 
båì
->
›s
->
	`bÆloc
(båì->
sb
, 1, &
£g
, 1);

70 i‡(
îr
)

71  
	`ERR_PTR
(
îr
);

72 
buf„r_hód
 *
buf„r
 = 
	`vﬁ_gëblk
(
båì
->
sb
, 
£g
.
block
);

73 i‡(!
buf„r
)

74  
	`ERR_PTR
(-
ENOMEM
);

75  
buf„r
;

76 
	}
}

78 
buf„r_hód
 *
	$√w_Àaf
(
båì
 *btree)

80 if(
DEBUG_MODE_K
==1)

82 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

84 
buf„r_hód
 *
buf„r
 = 
	`√w_block
(
båì
);

86 i‡(!
	`IS_ERR
(
buf„r
)) {

87 
	`mem£t
(
	`bufd©a
(
buf„r
), 0, 
	`bufsize
(buffer));

88 (
båì
->
›s
->
Àaf_öô
)(båì, 
	`bufd©a
(
buf„r
));

89 
	`m¨k_buf„r_dúty_©omic
(
buf„r
);

91  
buf„r
;

92 
	}
}

94 
ölöe
 
	$bnode_buf„r_öô
(
buf„r_hód
 *
buf„r
)

96 if(
DEBUG_MODE_K
==1)

98 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

100 
bnode
 *bnodê
	`bufd©a
(
buf„r
);

101 
	`mem£t
(
bnode
, 0, 
	`bufsize
(
buf„r
));

102 
bnode
->
magic
 = 
	`˝u_to_be16
(
TUX3_MAGIC_BNODE
);

103 
	}
}

105 
ölöe
 
	$bnode_¢iff
(
bnode
 *bnode)

107 if(
DEBUG_MODE_K
==1)

109 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

111  
bnode
->
magic
 =
	`˝u_to_be16
(
TUX3_MAGIC_BNODE
);

112 
	}
}

114 
buf„r_hód
 *
	$√w_node
(
båì
 *btree)

116 if(
DEBUG_MODE_K
==1)

118 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

120 
buf„r_hód
 *
buf„r
 = 
	`√w_block
(
båì
);

122 i‡(!
	`IS_ERR
(
buf„r
)) {

123 
	`bnode_buf„r_öô
(
buf„r
);

124 
	`m¨k_buf„r_unify_©omic
(
buf„r
);

126  
buf„r
;

127 
	}
}

137 
ölöe
 
bnode
 *
	$Àvñ_node
(
curs‹
 *curs‹, 
Àvñ
)

139 if(
DEBUG_MODE_K
==1)

141 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

143  
	`bufd©a
(
curs‹
->
∑th
[
Àvñ
].
buf„r
);

144 
	}
}

146 
buf„r_hód
 *
	$curs‹_Àafbuf
(
curs‹
 *cursor)

148 if(
DEBUG_MODE_K
==1)

150 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

152 
	`as£π
(
curs‹
->
Àvñ
 =curs‹->
båì
->
roŸ
.
dïth
);

153  
curs‹
->
∑th
[curs‹->
Àvñ
].
buf„r
;

154 
	}
}

156 
	$curs‹_roŸ_add
(
curs‹
 *curs‹, 
buf„r_hód
 *
buf„r
,

157 
ödex_íåy
 *
√xt
)

159 if(
DEBUG_MODE_K
==1)

161 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

164 #ifde‡
CURSOR_DEBUG


165 
	`as£π
(
curs‹
->
Àvñ
 < curs‹->
maxÀvñ
);

166 
	`as£π
(
curs‹
->
∑th
[curs‹->
Àvñ
 + 1].
buf„r
 =
FREE_BUFFER
);

167 
	`as£π
(
curs‹
->
∑th
[curs‹->
Àvñ
 + 1].
√xt
 =
FREE_NEXT
);

169 
	`vecmove
(
curs‹
->
∑th
 + 1, curs‹->∑th, curs‹->
Àvñ
 + 1);

170 
curs‹
->
Àvñ
++;

171 
curs‹
->
∑th
[0].
buf„r
 = buffer;

172 
curs‹
->
∑th
[0].
√xt
 =Çext;

173 
	}
}

175 
	$Àvñ_ª∂a˚_blockput
(
curs‹
 *curs‹, 
Àvñ
,

176 
buf„r_hód
 *
buf„r
,

177 
ödex_íåy
 *
√xt
)

179 if(
DEBUG_MODE_K
==1)

181 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

183 #ifde‡
CURSOR_DEBUG


184 
	`as£π
(
buf„r
);

185 
	`as£π
(
Àvñ
 <
curs‹
->level);

186 
	`as£π
(
curs‹
->
∑th
[
Àvñ
].
buf„r
 !
FREE_BUFFER
);

187 
	`as£π
(
curs‹
->
∑th
[
Àvñ
].
√xt
 !
FREE_NEXT
);

189 
	`blockput
(
curs‹
->
∑th
[
Àvñ
].
buf„r
);

190 
curs‹
->
∑th
[
Àvñ
].
buf„r
 = buffer;

191 
curs‹
->
∑th
[
Àvñ
].
√xt
 =Çext;

192 
	}
}

194 
	$curs‹_push
(
curs‹
 *curs‹, 
buf„r_hód
 *
buf„r
,

195 
ödex_íåy
 *
√xt
)

197 if(
DEBUG_MODE_K
==1)

199 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

201 
curs‹
->
Àvñ
++;

202 #ifde‡
CURSOR_DEBUG


203 
	`as£π
(
curs‹
->
Àvñ
 <curs‹->
maxÀvñ
);

204 
	`as£π
(
curs‹
->
∑th
[curs‹->
Àvñ
].
buf„r
 =
FREE_BUFFER
);

205 
	`as£π
(
curs‹
->
∑th
[curs‹->
Àvñ
].
√xt
 =
FREE_NEXT
);

207 
curs‹
->
∑th
[curs‹->
Àvñ
].
buf„r
 = buffer;

208 
curs‹
->
∑th
[curs‹->
Àvñ
].
√xt
 =Çext;

209 
	}
}

211 
buf„r_hód
 *
	$curs‹_p›
(
curs‹
 *cursor)

213 if(
DEBUG_MODE_K
==1)

215 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

217 
buf„r_hód
 *
buf„r
;

219 #ifde‡
CURSOR_DEBUG


220 
	`as£π
(
curs‹
->
Àvñ
 >= 0);

222 
buf„r
 = 
curs‹
->
∑th
[curs‹->
Àvñ
].buffer;

223 #ifde‡
CURSOR_DEBUG


224 
curs‹
->
∑th
[curs‹->
Àvñ
].
buf„r
 = 
FREE_BUFFER
;

225 
curs‹
->
∑th
[curs‹->
Àvñ
].
√xt
 = 
FREE_NEXT
;

227 
curs‹
->
Àvñ
--;

228  
buf„r
;

229 
	}
}

231 
ölöe
 
	$curs‹_p›_blockput
(
curs‹
 *cursor)

233 if(
DEBUG_MODE_K
==1)

235 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

237 
	`blockput
(
	`curs‹_p›
(
curs‹
));

238 
	}
}

241 
ölöe
 
	$Àvñ_föished
(
curs‹
 *curs‹, 
Àvñ
)

243 if(
DEBUG_MODE_K
==1)

245 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

247 
bnode
 *
node
 = 
	`Àvñ_node
(
curs‹
, 
Àvñ
);

248  
curs‹
->
∑th
[
Àvñ
].
√xt
 =
node
->
íåõs
 + 
	`bcou¡
(node);

249 
	}
}

252 
	$ªÀa£_curs‹
(
curs‹
 *cursor)

254 if(
DEBUG_MODE_K
==1)

256 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

258 
curs‹
->
Àvñ
 >= 0)

259 
	`curs‹_p›_blockput
(
curs‹
);

260 
	}
}

263 
	$show_curs‹
(
curs‹
 *curs‹, 
dïth
)

265 if(
DEBUG_MODE_K
==1)

267 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

269 
	`__tux3_dbg
(">>> curs‹ %p/%i:", 
curs‹
, 
dïth
);

270 
i
 = 0; i < 
dïth
; i++) {

271 
	`__tux3_dbg
(" [%Lx/%i]",

272 
	`bufödex
(
curs‹
->
∑th
[
i
].
buf„r
),

273 
	`bufcou¡
(
curs‹
->
∑th
[
i
].
buf„r
));

275 
	`__tux3_dbg
("\n");

276 
	}
}

278 
	$curs‹_check
(
curs‹
 *cursor)

280 if(
DEBUG_MODE_K
==1)

282 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

284 i‡(
curs‹
->
Àvñ
 == -1)

286 
tuxkey_t
 
key
 = 0;

287 
block_t
 
block
 = 
curs‹
->
båì
->
roŸ
.block;

289 
i
 = 0; i <
curs‹
->
Àvñ
; i++) {

290 
	`as£π
(
	`bufödex
(
curs‹
->
∑th
[
i
].
buf„r
Ë=
block
);

291 i‡(
i
 =
curs‹
->
Àvñ
)

294 
bnode
 *bnodê
	`Àvñ_node
(
curs‹
, 
i
);

295 
ödex_íåy
 *
íåy
 = 
curs‹
->
∑th
[
i
].
√xt
 - 1;

296 
	`as£π
(
bnode
->
íåõs
 <
íåy
);

297 
	`as£π
(
íåy
 < 
bnode
->
íåõs
 + 
	`bcou¡
(bnode));

303 i‡(
bnode
->
íåõs
 =
íåy
)

304 
	`as£π
(
	`be64_to_˝u
(
íåy
->
key
) == key);

306 
	`as£π
(
	`be64_to_˝u
(
íåy
->
key
) > key);

308 
block
 = 
	`be64_to_˝u
(
íåy
->block);

309 
key
 = 
	`be64_to_˝u
(
íåy
->key);

311 
	}
}

313 
ölöe
 
	$Æloc_curs‹_size
(
cou¡
)

315 if(
DEBUG_MODE_K
==1)

317 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

319  (
curs‹
Ë+ (
∑th_Àvñ
Ë* 
cou¡
;

320 
	}
}

322 
curs‹
 *
	$Æloc_curs‹
(
båì
 *båì, 
exåa
)

324 if(
DEBUG_MODE_K
==1)

326 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

328 
maxÀvñ
 = 
båì
->
roŸ
.
dïth
 + 
exåa
;

329 
curs‹
 *curs‹ = 
	`mÆloc
(
	`Æloc_curs‹_size
(
maxÀvñ
 + 1));

331 i‡(
curs‹
) {

332 
curs‹
->
båì
 = btree;

333 
curs‹
->
Àvñ
 = -1;

334 #ifde‡
CURSOR_DEBUG


335 
curs‹
->
maxÀvñ
 = maxlevel;

336 
i
 = 0; i <
maxÀvñ
; i++) {

337 
curs‹
->
∑th
[
i
].
buf„r
 = 
FREE_BUFFER
;

338 
curs‹
->
∑th
[
i
].
√xt
 = 
FREE_NEXT
;

342  
curs‹
;

343 
	}
}

345 
	$‰ì_curs‹
(
curs‹
 *cursor)

347 if(
DEBUG_MODE_K
==1)

349 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

351 #ifde‡
CURSOR_DEBUG


352 
	`as£π
(
curs‹
->
Àvñ
 == -1);

354 
	`‰ì
(
curs‹
);

355 
	}
}

358 
ödex_íåy
 *
	$bnode_lookup
(
bnode
 *
node
, 
tuxkey_t
 
key
)

360 if(
DEBUG_MODE_K
==1)

362 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

364 
ödex_íåy
 *
√xt
 = 
node
->
íåõs
, *
t›
 =Çexà+ 
	`bcou¡
(node);

365 
	`as£π
(
	`bcou¡
(
node
) > 0);

367 ++
√xt
 < 
t›
) {

368 i‡(
	`be64_to_˝u
(
√xt
->
key
) > key)

371  
√xt
 - 1;

372 
	}
}

374 
	$curs‹_Àvñ_föished
(
curs‹
 *cursor)

376 if(
DEBUG_MODE_K
==1)

378 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

381 
	`as£π
(
curs‹
->
Àvñ
 < curs‹->
båì
->
roŸ
.
dïth
);

382  
	`Àvñ_föished
(
curs‹
, curs‹->
Àvñ
);

383 
	}
}

390 
tuxkey_t
 
	$curs‹_√xt_key
(
curs‹
 *cursor)

392 if(
DEBUG_MODE_K
==1)

394 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

396 
Àvñ
 = 
curs‹
->level;

397 
	`as£π
(
curs‹
->
Àvñ
 =curs‹->
båì
->
roŸ
.
dïth
);

398 
Àvñ
--) {

399 i‡(!
	`Àvñ_föished
(
curs‹
, 
Àvñ
))

400  
	`be64_to_˝u
(
curs‹
->
∑th
[
Àvñ
].
√xt
->
key
);

402  
TUXKEY_LIMIT
;

403 
	}
}

405 
tuxkey_t
 
	$curs‹_Àvñ_√xt_key
(
curs‹
 *cursor)

407 if(
DEBUG_MODE_K
==1)

409 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

411 
Àvñ
 = 
curs‹
->level;

412 
	`as£π
(
curs‹
->
Àvñ
 < curs‹->
båì
->
roŸ
.
dïth
);

413 
Àvñ
 >= 0) {

414 i‡(!
	`Àvñ_föished
(
curs‹
, 
Àvñ
))

415  
	`be64_to_˝u
(
curs‹
->
∑th
[
Àvñ
].
√xt
->
key
);

416 
Àvñ
--;

418  
TUXKEY_LIMIT
;

419 
	}
}

422 
tuxkey_t
 
	$curs‹_this_key
(
curs‹
 *cursor)

424 if(
DEBUG_MODE_K
==1)

426 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

428 
	`as£π
(
curs‹
->
Àvñ
 =curs‹->
båì
->
roŸ
.
dïth
);

429  
	`be64_to_˝u
((
curs‹
->
∑th
[curs‹->
Àvñ
 - 1].
√xt
 - 1)->
key
);

430 
	}
}

432 
tuxkey_t
 
	$curs‹_Àvñ_this_key
(
curs‹
 *cursor)

434 if(
DEBUG_MODE_K
==1)

436 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

438 
	`as£π
(
curs‹
->
Àvñ
 < curs‹->
båì
->
roŸ
.
dïth
);

439  
	`be64_to_˝u
((
curs‹
->
∑th
[curs‹->
Àvñ
].
√xt
 - 1)->
key
);

440 
	}
}

447 
	$curs‹_ªad_roŸ
(
curs‹
 *cursor)

449 if(
DEBUG_MODE_K
==1)

451 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

453 
båì
 *båì = 
curs‹
->btree;

454 
buf„r_hód
 *
buf„r
;

456 
	`as£π
(
	`has_roŸ
(
båì
));

458 
buf„r
 = 
	`vﬁ_bªad
(
båì
->
sb
, båì->
roŸ
.
block
);

459 i‡(!
buf„r
)

460  -
EIO
;

461 
	`as£π
(
	`bnode_¢iff
(
	`bufd©a
(
buf„r
)));

462 
	`curs‹_push
(
curs‹
, 
buf„r
, ((
bnode
 *)
	`bufd©a
(buf„r))->
íåõs
);

464 
	}
}

471 
	$curs‹_adv™˚_up
(
curs‹
 *cursor)

473 if(
DEBUG_MODE_K
==1)

475 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

477 
	`as£π
(
curs‹
->
Àvñ
 >= 0);

478 
	`curs‹_p›_blockput
(
curs‹
);

479  
curs‹
->
Àvñ
 >= 0;

480 
	}
}

488 
	$curs‹_adv™˚_down
(
curs‹
 *cursor)

490 if(
DEBUG_MODE_K
==1)

492 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

494 
båì
 *båì = 
curs‹
->btree;

495 
buf„r_hód
 *
buf„r
;

496 
block_t
 
chûd
;

498 
	`as£π
(
curs‹
->
Àvñ
 < 
båì
->
roŸ
.
dïth
);

500 
chûd
 = 
	`be64_to_˝u
(
curs‹
->
∑th
[curs‹->
Àvñ
].
√xt
->
block
);

501 
buf„r
 = 
	`vﬁ_bªad
(
båì
->
sb
, 
chûd
);

502 i‡(!
buf„r
)

503  -
EIO
;

504 
curs‹
->
∑th
[curs‹->
Àvñ
].
√xt
++;

506 i‡(
curs‹
->
Àvñ
 < 
båì
->
roŸ
.
dïth
 - 1) {

507 
bnode
 *
node
 = 
	`bufd©a
(
buf„r
);

508 
	`as£π
(
	`bnode_¢iff
(
node
));

509 
	`curs‹_push
(
curs‹
, 
buf„r
, 
node
->
íåõs
);

510 
	`curs‹_check
(
curs‹
);

514 
	`as£π
(
båì
->
›s
->
	`Àaf_¢iff
(båì, 
	`bufd©a
(
buf„r
)));

515 
	`curs‹_push
(
curs‹
, 
buf„r
, 
NULL
);

516 
	`curs‹_check
(
curs‹
);

518 
	}
}

526 
	$curs‹_adv™˚
(
curs‹
 *cursor)

528 if(
DEBUG_MODE_K
==1)

530 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

532 
ªt
;

535 i‡(!
	`curs‹_adv™˚_up
(
curs‹
))

537 } 
	`curs‹_Àvñ_föished
(
curs‹
));

539 
ªt
 = 
	`curs‹_adv™˚_down
(
curs‹
);

540 i‡(
ªt
 < 0)

541  
ªt
;

542 } 
ªt
);

545 
	}
}

548 
	$curs‹_bnode_lookup
(
curs‹
 *curs‹, 
tuxkey_t
 
key
)

550 if(
DEBUG_MODE_K
==1)

552 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

554 
∑th_Àvñ
 *
©
 = &
curs‹
->
∑th
[curs‹->
Àvñ
];

555 
©
->
√xt
 = 
	`bnode_lookup
(
	`bufd©a
◊t->
buf„r
), 
key
);

556 
	}
}

558 
	$båì_¥obe
(
curs‹
 *curs‹, 
tuxkey_t
 
key
)

560 if(
DEBUG_MODE_K
==1)

562 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

564 
ªt
;

566 
ªt
 = 
	`curs‹_ªad_roŸ
(
curs‹
);

567 i‡(
ªt
 < 0)

568  
ªt
;

570 
	`curs‹_bnode_lookup
(
curs‹
, 
key
);

572 
ªt
 = 
	`curs‹_adv™˚_down
(
curs‹
);

573 i‡(
ªt
 < 0)

574 
îr‹
;

575 } 
ªt
);

579 
îr‹
:

580 
	`ªÀa£_curs‹
(
curs‹
);

581  
ªt
;

582 
	}
}

594 
	$båì_åavî£
(
curs‹
 *curs‹, 
tuxkey_t
 
key
, 
u64
 
Àn
,

595 
båì_åavî£_func_t
 
func
, *
d©a
)

597 if(
DEBUG_MODE_K
==1)

599 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

601 
båì
 *båì = 
curs‹
->btree;

602 
ªt
;

605 
tuxkey_t
 
bŸtom
 = 
	`curs‹_this_key
(
curs‹
);

606 
tuxkey_t
 
limô
 = 
	`curs‹_√xt_key
(
curs‹
);

607 *
Àaf
 = 
	`bufd©a
(
	`curs‹_Àafbuf
(
curs‹
));

608 
	`as£π
(
båì
->
›s
->
	`Àaf_¢iff
(båì, 
Àaf
));

610 i‡(
key
 < 
bŸtom
) {

611 
Àn
 -
	`mö_t
(
u64
,Üí, 
bŸtom
 - 
key
);

612 i‡(
Àn
 == 0)

614 
key
 = 
bŸtom
;

617 
ªt
 = 
	`func
(
båì
, 
bŸtom
, 
limô
, 
Àaf
, 
key
, 
Àn
, 
d©a
);

619 i‡(
ªt
)

620 
out
;

623 i‡(
key
 + 
Àn
 <
limô
)

626 
ªt
 = 
	`curs‹_adv™˚
(
curs‹
);

627 i‡(
ªt
 < 0)

628 
out
;

629 } 
ªt
);

631 
ªt
 = 0;

632 
out
:

633  
ªt
;

634 
	}
}

636 
	$show_åì_ønge
(
båì
 *båì, 
tuxkey_t
 
°¨t
, 
cou¡
)

638 if(
DEBUG_MODE_K
==1)

640 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

642 
	`__tux3_dbg
("%iÜevel btreeát %Li:\n",

643 
båì
->
roŸ
.
dïth
, båì->roŸ.
block
);

644 i‡(!
	`has_roŸ
(
båì
))

647 
curs‹
 *curs‹ = 
	`Æloc_curs‹
(
båì
, 0);

648 i‡(!
curs‹
) {

649 
	`tux3_îr
(
båì
->
sb
, "out of memory");

652 i‡(
	`båì_¥obe
(
curs‹
, 
°¨t
)) {

653 
	`tux3_fs_îr‹
(
båì
->
sb
, "tell me why!!!");

654 
out
;

657 
buf„r_hód
 *
buf„r
;

659 
buf„r
 = 
	`curs‹_Àafbuf
(
curs‹
);

660 
	`as£π
((
båì
->
›s
->
Àaf_¢iff
)(båì, 
	`bufd©a
(
buf„r
)));

661 (
båì
->
›s
->
Àaf_dump
)(båì, 
	`bufd©a
(
buf„r
));

662 } --
cou¡
 && 
	`curs‹_adv™˚
(
curs‹
));

664 
out
:

665 
	`‰ì_curs‹
(
curs‹
);

666 
	}
}

668 
	$show_åì
(
båì
 *btree)

670 if(
DEBUG_MODE_K
==1)

672 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

674 
	`show_åì_ønge
(
båì
, 0, -1);

675 
	}
}

677 
	$Àvñ_ªdúe˘_blockput
(
curs‹
 *curs‹, 
Àvñ
, 
buf„r_hód
 *
˛⁄e
)

679 if(
DEBUG_MODE_K
==1)

681 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

683 
buf„r_hód
 *
buf„r
 = 
curs‹
->
∑th
[
Àvñ
].buffer;

684 
ödex_íåy
 *
√xt
 = 
curs‹
->
∑th
[
Àvñ
].next;

687 i‡(
√xt
)

688 
√xt
 = 
	`±r_ªdúe˘
“ext, 
	`bufd©a
(
buf„r
), bufd©a(
˛⁄e
));

690 
	`mem˝y
(
	`bufd©a
(
˛⁄e
), bufd©a(
buf„r
), 
	`bufsize
(clone));

691 
	`Àvñ_ª∂a˚_blockput
(
curs‹
, 
Àvñ
, 
˛⁄e
, 
√xt
);

692 
	}
}

694 
	$Àaf_√ed_ªdúe˘
(
sb
 *sb, 
buf„r_hód
 *
buf„r
)

696 if(
DEBUG_MODE_K
==1)

698 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

703  !
	`buf„r_dúty
(
buf„r
);

704 
	}
}

706 
	$bnode_√ed_ªdúe˘
(
sb
 *sb, 
buf„r_hód
 *
buf„r
)

708 if(
DEBUG_MODE_K
==1)

710 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

713  !
	`buf„r_Æªady_dúty
(
buf„r
, 
sb
->
unify
);

714 
	}
}

726 
	$curs‹_ªdúe˘
(
curs‹
 *cursor)

728 if(
DEBUG_MODE_K
==1)

730 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

732 
båì
 *båì = 
curs‹
->btree;

733 
sb
 *sb = 
båì
->sb;

734 
Àvñ
;

736 
Àvñ
 = 0;Üevñ <
båì
->
roŸ
.
dïth
;Üevel++) {

737 
buf„r_hód
 *
buf„r
, *
˛⁄e
;

738 
block_t
 
∑ª¡
, 
ﬁdblock
, 
√wblock
;

739 
ödex_íåy
 *
íåy
;

740 
ªdúe˘
, 
is_Àaf
 = (
Àvñ
 =
båì
->
roŸ
.
dïth
);

742 
buf„r
 = 
curs‹
->
∑th
[
Àvñ
].buffer;

744 i‡(
is_Àaf
)

745 
ªdúe˘
 = 
	`Àaf_√ed_ªdúe˘
(
sb
, 
buf„r
);

747 
ªdúe˘
 = 
	`bnode_√ed_ªdúe˘
(
sb
, 
buf„r
);

750 i‡(!
ªdúe˘
)

754 
˛⁄e
 = 
	`√w_block
(
båì
);

755 i‡(
	`IS_ERR
(
˛⁄e
))

756  
	`PTR_ERR
(
˛⁄e
);

757 
ﬁdblock
 = 
	`bufödex
(
buf„r
);

758 
√wblock
 = 
	`bufödex
(
˛⁄e
);

759 
	`åa˚
("ªdúe˘ %LxÅÿ%Lx", 
ﬁdblock
, 
√wblock
);

760 
	`Àvñ_ªdúe˘_blockput
(
curs‹
, 
Àvñ
, 
˛⁄e
);

761 i‡(
is_Àaf
) {

763 
	`m¨k_buf„r_dúty_©omic
(
˛⁄e
);

764 
	`log_Àaf_ªdúe˘
(
sb
, 
ﬁdblock
, 
√wblock
);

765 
	`de„r_b‰ì
(&
sb
->
de‰ì
, 
ﬁdblock
, 1);

768 
	`m¨k_buf„r_unify_©omic
(
˛⁄e
);

769 
	`log_bnode_ªdúe˘
(
sb
, 
ﬁdblock
, 
√wblock
);

770 
	`de„r_b‰ì
(&
sb
->
deunify
, 
ﬁdblock
, 1);

773 
	`åa˚
("updateÖarent");

774 i‡(!
Àvñ
) {

776 
	`åa˚
("redirectÑoot");

777 
	`as£π
(
ﬁdblock
 =
båì
->
roŸ
.
block
);

778 
båì
->
roŸ
.
block
 = 
√wblock
;

779 
	`tux3_m¨k_båì_dúty
(
båì
);

783 
∑ª¡
 = 
	`bufödex
(
curs‹
->
∑th
[
Àvñ
 - 1].
buf„r
);

784 
íåy
 = 
curs‹
->
∑th
[
Àvñ
 - 1].
√xt
 - 1;

785 
íåy
->
block
 = 
	`˝u_to_be64
(
√wblock
);

786 
	`log_bnode_upd©e
(
sb
, 
∑ª¡
, 
√wblock
, 
	`be64_to_˝u
(
íåy
->
key
));

789 
	`curs‹_check
(
curs‹
);

791 
	}
}

795 
	$bnode_ªmove_ödex
(
bnode
 *
node
, 
ödex_íåy
 *
p
,

796 
cou¡
)

798 if(
DEBUG_MODE_K
==1)

800 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

802 
tŸÆ
 = 
	`bcou¡
(
node
);

803 *
íd
 = 
node
->
íåõs
 + 
tŸÆ
;

804 
	`memmove
(
p
,Ö + 
cou¡
, 
íd
 - (*)(p + count));

805 
node
->
cou¡
 = 
	`˝u_to_be32
(
tŸÆ
 - count);

806 
	}
}

808 
	$bnode_mîge_nodes
(
sb
 *sb, 
bnode
 *
öto
,

809 
bnode
 *
‰om
)

811 if(
DEBUG_MODE_K
==1)

813 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

815 
öto_cou¡
 = 
	`bcou¡
(
öto
), 
‰om_cou¡
 = bcou¡(
‰om
);

817 i‡(
‰om_cou¡
 + 
öto_cou¡
 > 
sb
->
íåõs_≥r_node
)

820 
	`vecc›y
(&
öto
->
íåõs
[
öto_cou¡
], 
‰om
->íåõs, 
‰om_cou¡
);

821 
öto
->
cou¡
 = 
	`˝u_to_be32
(
öto_cou¡
 + 
‰om_cou¡
);

824 
	}
}

826 
	$adju°_∑ª¡_£p
(
curs‹
 *curs‹, 
Àvñ
, 
__be64
 
√w£p
)

828 if(
DEBUG_MODE_K
==1)

830 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

833 
Àvñ
 >= 0) {

834 
∑th_Àvñ
 *
∑ª¡_©
 = &
curs‹
->
∑th
[
Àvñ
];

835 
ödex_íåy
 *
∑ª¡
 = 
∑ª¡_©
->
√xt
 - 1;

837 
	`as£π
(0 < 
	`be64_to_˝u
(
∑ª¡
->
key
));

838 
	`as£π
(
	`be64_to_˝u
(
∑ª¡
->
key
Ë< be64_to_˝u(
√w£p
));

839 
	`log_bnode_adju°
(
curs‹
->
båì
->
sb
,

840 
	`bufödex
(
∑ª¡_©
->
buf„r
),

841 
	`be64_to_˝u
(
∑ª¡
->
key
),

842 
	`be64_to_˝u
(
√w£p
));

843 
∑ª¡
->
key
 = 
√w£p
;

844 
	`m¨k_buf„r_unify_n⁄
(
∑ª¡_©
->
buf„r
);

846 i‡(
∑ª¡
 !
	`Àvñ_node
(
curs‹
, 
Àvñ
)->
íåõs
)

849 
Àvñ
--;

851 
	}
}

854 
	sch›≥d_ödex_öfo
 {

855 
tuxkey_t
 
	m°¨t
;

856 
	mcou¡
;

859 
	$ªmove_ödex
(
curs‹
 *curs‹, 
ch›≥d_ödex_öfo
 *
cii
)

861 if(
DEBUG_MODE_K
==1)

863 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

865 
Àvñ
 = 
curs‹
->level;

866 
bnode
 *
node
 = 
	`Àvñ_node
(
curs‹
, 
Àvñ
);

867 
ch›≥d_ödex_öfo
 *
ciû
 = &
cii
[
Àvñ
];

870 i‡(!
ciû
->
cou¡
)

871 
ciû
->
°¨t
 = 
	`be64_to_˝u
((
curs‹
->
∑th
[
Àvñ
].
√xt
 - 1)->
key
);

872 
ciû
->
cou¡
++;

875 
	`bnode_ªmove_ödex
(
node
, 
curs‹
->
∑th
[
Àvñ
].
√xt
 - 1, 1);

876 --(
curs‹
->
∑th
[
Àvñ
].
√xt
);

877 
	`m¨k_buf„r_unify_n⁄
(
curs‹
->
∑th
[
Àvñ
].
buf„r
);

890 i‡(!
Àvñ
 || 
	`curs‹_Àvñ_föished
(
curs‹
))

893 i‡(
curs‹
->
∑th
[
Àvñ
].
√xt
 !
node
->
íåõs
)

896 
	`adju°_∑ª¡_£p
(
curs‹
, 
Àvñ
 - 1, curs‹->
∑th
[Àvñ].
√xt
->
key
);

897 
	}
}

899 
	$åy_Àaf_mîge
(
båì
 *båì, 
buf„r_hód
 *
ötobuf
,

900 
buf„r_hód
 *
‰ombuf
)

902 if(
DEBUG_MODE_K
==1)

904 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

906 
vÀaf
 *
‰om
 = 
	`bufd©a
(
‰ombuf
);

907 
vÀaf
 *
öto
 = 
	`bufd©a
(
ötobuf
);

910 i‡(
båì
->
›s
->
	`Àaf_mîge
(båì, 
öto
, 
‰om
)) {

911 
sb
 *sb = 
båì
->sb;

919 
	`b‰ì
(
sb
, 
	`bufödex
(
‰ombuf
), 1);

920 
	`log_Àaf_‰ì
(
sb
, 
	`bufödex
(
‰ombuf
));

924 
	}
}

926 
	$åy_bnode_mîge
(
sb
 *sb, 
buf„r_hód
 *
ötobuf
,

927 
buf„r_hód
 *
‰ombuf
)

929 if(
DEBUG_MODE_K
==1)

931 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

933 
bnode
 *
öto
 = 
	`bufd©a
(
ötobuf
);

934 
bnode
 *
‰om
 = 
	`bufd©a
(
‰ombuf
);

937 i‡(
	`bnode_mîge_nodes
(
sb
, 
öto
, 
‰om
)) {

945 
	`b‰ì
(
sb
, 
	`bufödex
(
‰ombuf
), 1);

946 
	`log_bnode_mîge
(
sb
, 
	`bufödex
(
‰ombuf
), bufödex(
ötobuf
));

950 
	}
}

978 
	$båì_ch›
(
båì
 *båì, 
tuxkey_t
 
°¨t
, 
u64
 
Àn
)

980 if(
DEBUG_MODE_K
==1)

982 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

984 
sb
 *sb = 
båì
->sb;

985 
båì_›s
 *
›s
 = 
båì
->ops;

986 
buf„r_hód
 **
¥ev
, *
ÀaÂªv
 = 
NULL
;

987 
ch›≥d_ödex_öfo
 *
cii
;

988 
curs‹
 *cursor;

989 
tuxkey_t
 
limô
;

990 
ªt
, 
d⁄e
 = 0;

992 i‡(!
	`has_roŸ
(
båì
))

996 
limô
 = (
Àn
 >
TUXKEY_LIMIT
Ë? TUXKEY_LIMIT : 
°¨t
 +Üen;

998 
¥ev
 = 
	`mÆloc
((*¥evË* 
båì
->
roŸ
.
dïth
);

999 i‡(
¥ev
 =
NULL
)

1000  -
ENOMEM
;

1001 
	`mem£t
(
¥ev
, 0, (*¥evË* 
båì
->
roŸ
.
dïth
);

1003 
cii
 = 
	`mÆloc
((*ciiË* 
båì
->
roŸ
.
dïth
);

1004 i‡(
cii
 =
NULL
) {

1005 
ªt
 = -
ENOMEM
;

1006 
îr‹_cii
;

1008 
	`mem£t
(
cii
, 0, (*ciiË* 
båì
->
roŸ
.
dïth
);

1010 
curs‹
 = 
	`Æloc_curs‹
(
båì
, 0);

1011 i‡(!
curs‹
) {

1012 
ªt
 = -
ENOMEM
;

1013 
îr‹_Æloc_curs‹
;

1016 
	`down_wrôe
(&
båì
->
lock
);

1017 
ªt
 = 
	`båì_¥obe
(
curs‹
, 
°¨t
);

1018 i‡(
ªt
)

1019 
îr‹_båì_¥obe
;

1023 
buf„r_hód
 *
Àafbuf
;

1024 
tuxkey_t
 
this_key
;

1030 i‡((
ªt
 = 
	`curs‹_ªdúe˘
(
curs‹
)))

1031 
out
;

1032 
Àafbuf
 = 
	`curs‹_p›
(
curs‹
);

1035 
this_key
 = 
	`curs‹_Àvñ_this_key
(
curs‹
);

1036 i‡(
°¨t
 < 
this_key
) {

1037 i‡(
limô
 < 
TUXKEY_LIMIT
)

1038 
Àn
 -
this_key
 - 
°¨t
;

1039 
°¨t
 = 
this_key
;

1042 
ªt
 = 
›s
->
	`Àaf_ch›
(
båì
, 
°¨t
, 
Àn
, 
	`bufd©a
(
Àafbuf
));

1043 i‡(
ªt
) {

1044 i‡(
ªt
 < 0) {

1045 
	`blockput
(
Àafbuf
);

1046 
out
;

1048 
	`m¨k_buf„r_dúty_n⁄
(
Àafbuf
);

1052 i‡(
ÀaÂªv
) {

1053 i‡(
	`åy_Àaf_mîge
(
båì
, 
ÀaÂªv
, 
Àafbuf
)) {

1054 
	`åa˚
(">>> c™ mîgêÀa‡%∞ötÿÀa‡%p", 
Àafbuf
, 
ÀaÂªv
);

1055 
	`ªmove_ödex
(
curs‹
, 
cii
);

1056 
	`m¨k_buf„r_dúty_n⁄
(
ÀaÂªv
);

1057 
	`blockput_‰ì
(
sb
, 
Àafbuf
);

1058 
kìp_¥ev_Àaf
;

1060 
	`blockput
(
ÀaÂªv
);

1062 
ÀaÂªv
 = 
Àafbuf
;

1064 
kìp_¥ev_Àaf
:

1066 i‡(
	`curs‹_Àvñ_√xt_key
(
curs‹
Ë>
limô
)

1067 
d⁄e
 = 1;

1069 
d⁄e
 || 
	`curs‹_Àvñ_föished
(
curs‹
)) {

1070 
buf„r_hód
 *
buf
;

1071 
Àvñ
 = 
curs‹
->level;

1072 
ch›≥d_ödex_öfo
 *
ciû
 = &
cii
[
Àvñ
];

1076 
buf
 = 
	`curs‹_p›
(
curs‹
);

1083 i‡(
ciû
->
cou¡
) {

1084 
	`log_bnode_dñ
(
sb
, 
	`bufödex
(
buf
), 
ciû
->
°¨t
,

1085 
ciû
->
cou¡
);

1087 
	`mem£t
(
ciû
, 0, (*ciil));

1090 i‡(
¥ev
[
Àvñ
]) {

1091 
	`as£π
(
Àvñ
);

1092 i‡(
	`åy_bnode_mîge
(
sb
, 
¥ev
[
Àvñ
], 
buf
)) {

1093 
	`åa˚
(">>> c™ mîgênodê%∞ötÿnodê%p", 
buf
, 
¥ev
[
Àvñ
]);

1094 
	`ªmove_ödex
(
curs‹
, 
cii
);

1095 
	`m¨k_buf„r_unify_n⁄
(
¥ev
[
Àvñ
]);

1096 
	`blockput_‰ì_unify
(
sb
, 
buf
);

1097 
kìp_¥ev_node
;

1099 
	`blockput
(
¥ev
[
Àvñ
]);

1101 
¥ev
[
Àvñ
] = 
buf
;

1102 
kìp_¥ev_node
:

1104 i‡(!
Àvñ
)

1105 
ch›_roŸ
;

1110 
ªt
 = 
	`curs‹_adv™˚_down
(
curs‹
);

1111 i‡(
ªt
 < 0)

1112 
out
;

1113 } 
ªt
);

1116 
ch›_roŸ
:

1118 
båì
->
roŸ
.
dïth
 > 1 && 
	`bcou¡
(
	`bufd©a
(
¥ev
[0])) == 1) {

1119 
	`åa˚
("drop btreeÜevel");

1120 
båì
->
roŸ
.
block
 = 
	`bufödex
(
¥ev
[1]);

1121 
båì
->
roŸ
.
dïth
--;

1122 
	`tux3_m¨k_båì_dúty
(
båì
);

1131 
	`b‰ì
(
sb
, 
	`bufödex
(
¥ev
[0]), 1);

1132 
	`log_bnode_‰ì
(
sb
, 
	`bufödex
(
¥ev
[0]));

1133 
	`blockput_‰ì_unify
(
sb
, 
¥ev
[0]);

1135 
	`vecmove
(
¥ev
,Öªv + 1, 
båì
->
roŸ
.
dïth
);

1137 
ªt
 = 0;

1139 
out
:

1140 i‡(
ÀaÂªv
)

1141 
	`blockput
(
ÀaÂªv
);

1142 
i
 = 0; i < 
båì
->
roŸ
.
dïth
; i++) {

1143 i‡(
¥ev
[
i
])

1144 
	`blockput
(
¥ev
[
i
]);

1146 
	`ªÀa£_curs‹
(
curs‹
);

1147 
îr‹_båì_¥obe
:

1148 
	`up_wrôe
(&
båì
->
lock
);

1150 
	`‰ì_curs‹
(
curs‹
);

1151 
îr‹_Æloc_curs‹
:

1152 
	`‰ì
(
cii
);

1153 
îr‹_cii
:

1154 
	`‰ì
(
¥ev
);

1156  
ªt
;

1157 
	}
}

1160 
	$bnode_öô_roŸ
(
bnode
 *
roŸ
, 
cou¡
, 
block_t
 
À·
,

1161 
block_t
 
right
, 
tuxkey_t
 
rkey
)

1163 if(
DEBUG_MODE_K
==1)

1165 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1167 
roŸ
->
cou¡
 = 
	`˝u_to_be32
(count);

1168 
roŸ
->
íåõs
[0].
block
 = 
	`˝u_to_be64
(
À·
);

1169 
roŸ
->
íåõs
[1].
block
 = 
	`˝u_to_be64
(
right
);

1170 
roŸ
->
íåõs
[1].
key
 = 
	`˝u_to_be64
(
rkey
);

1171 
	}
}

1175 
	$bnode_add_ödex
(
bnode
 *
node
, 
ödex_íåy
 *
p
,

1176 
block_t
 
chûd
, 
u64
 
chûdkey
)

1178 if(
DEBUG_MODE_K
==1)

1180 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1182 
cou¡
 = 
	`bcou¡
(
node
);

1183 
	`vecmove
(
p
 + 1,Ö, 
node
->
íåõs
 + 
cou¡
 -Ö);

1184 
p
->
block
 = 
	`˝u_to_be64
(
chûd
);

1185 
p
->
key
 = 
	`˝u_to_be64
(
chûdkey
);

1186 
node
->
cou¡
 = 
	`˝u_to_be32
(count + 1);

1187 
	}
}

1189 
	$bnode_•lô
(
bnode
 *
§c
, 
pos
, bnodê*
d°
)

1191 if(
DEBUG_MODE_K
==1)

1193 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1195 
d°
->
cou¡
 = 
	`˝u_to_be32
(
	`bcou¡
(
§c
Ë- 
pos
);

1196 
§c
->
cou¡
 = 
	`˝u_to_be32
(
pos
);

1198 
	`mem˝y
(&
d°
->
íåõs
[0], &
§c
->íåõs[
pos
],

1199 
	`bcou¡
(
d°
Ë* (
ödex_íåy
));

1200 
	}
}

1207 
	$ö£π_Àaf
(
curs‹
 *curs‹, 
tuxkey_t
 
chûdkey
, 
buf„r_hód
 *
Àafbuf
, 
kìp
)

1209 if(
DEBUG_MODE_K
==1)

1211 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1213 
båì
 *båì = 
curs‹
->btree;

1214 
sb
 *sb = 
båì
->sb;

1215 
Àvñ
 = 
båì
->
roŸ
.
dïth
;

1216 
block_t
 
chûdblock
 = 
	`bufödex
(
Àafbuf
);

1218 i‡(
kìp
)

1219 
	`blockput
(
Àafbuf
);

1221 
	`curs‹_p›_blockput
(
curs‹
);

1222 
	`curs‹_push
(
curs‹
, 
Àafbuf
, 
NULL
);

1224 
Àvñ
--) {

1225 
∑th_Àvñ
 *
©
 = &
curs‹
->
∑th
[
Àvñ
];

1226 
buf„r_hód
 *
∑ª¡buf
 = 
©
->
buf„r
;

1227 
bnode
 *
∑ª¡
 = 
	`bufd©a
(
∑ª¡buf
);

1230 i‡(
	`bcou¡
(
∑ª¡
Ë< 
båì
->
sb
->
íåõs_≥r_node
) {

1231 
	`bnode_add_ödex
(
∑ª¡
, 
©
->
√xt
, 
chûdblock
, 
chûdkey
);

1232 i‡(!
kìp
)

1233 
©
->
√xt
++;

1234 
	`log_bnode_add
(
sb
, 
	`bufödex
(
∑ª¡buf
), 
chûdblock
, 
chûdkey
);

1235 
	`m¨k_buf„r_unify_n⁄
(
∑ª¡buf
);

1236 
	`curs‹_check
(
curs‹
);

1241 
buf„r_hód
 *
√wbuf
 = 
	`√w_node
(
båì
);

1242 i‡(
	`IS_ERR
(
√wbuf
))

1243  
	`PTR_ERR
(
√wbuf
);

1245 
bnode
 *
√wnode
 = 
	`bufd©a
(
√wbuf
);

1246 
hÆf
 = 
	`bcou¡
(
∑ª¡
) / 2;

1247 
u64
 
√wkey
 = 
	`be64_to_˝u
(
∑ª¡
->
íåõs
[
hÆf
].
key
);

1249 
	`bnode_•lô
(
∑ª¡
, 
hÆf
, 
√wnode
);

1250 
	`log_bnode_•lô
(
sb
, 
	`bufödex
(
∑ª¡buf
), 
hÆf
, bufödex(
√wbuf
));

1253 
chûd_is_À·
 = 
©
->
√xt
 <
∑ª¡
->
íåõs
 + 
hÆf
;

1254 i‡(!
chûd_is_À·
) {

1255 
ödex_íåy
 *
√w√xt
;

1256 
	`m¨k_buf„r_unify_n⁄
(
∑ª¡buf
);

1257 
√w√xt
 = 
√wnode
->
íåõs
 + (
©
->
√xt
 - &
∑ª¡
->íåõs[
hÆf
]);

1258 
	`gë_bh
(
√wbuf
);

1259 
	`Àvñ_ª∂a˚_blockput
(
curs‹
, 
Àvñ
, 
√wbuf
, 
√w√xt
);

1260 
∑ª¡buf
 = 
√wbuf
;

1261 
∑ª¡
 = 
√wnode
;

1263 
	`m¨k_buf„r_unify_n⁄
(
√wbuf
);

1265 
	`bnode_add_ödex
(
∑ª¡
, 
©
->
√xt
, 
chûdblock
, 
chûdkey
);

1266 i‡(!
kìp
)

1267 
©
->
√xt
++;

1268 
	`log_bnode_add
(
sb
, 
	`bufödex
(
∑ª¡buf
), 
chûdblock
, 
chûdkey
);

1269 
	`m¨k_buf„r_unify_n⁄
(
∑ª¡buf
);

1271 
chûdkey
 = 
√wkey
;

1272 
chûdblock
 = 
	`bufödex
(
√wbuf
);

1273 
	`blockput
(
√wbuf
);

1280 
kìp
 = 
chûd_is_À·
;

1284 
	`åa˚
("addÅreeÜevel");

1285 
buf„r_hód
 *
√wbuf
 = 
	`√w_node
(
båì
);

1286 i‡(
	`IS_ERR
(
√wbuf
))

1287  
	`PTR_ERR
(
√wbuf
);

1289 
bnode
 *
√wroŸ
 = 
	`bufd©a
(
√wbuf
);

1290 
block_t
 
√wroŸblock
 = 
	`bufödex
(
√wbuf
);

1291 
block_t
 
ﬁdroŸblock
 = 
båì
->
roŸ
.
block
;

1292 
À·_node
 = 
	`bufödex
(
curs‹
->
∑th
[0].
buf„r
Ë!
chûdblock
;

1293 
	`bnode_öô_roŸ
(
√wroŸ
, 2, 
ﬁdroŸblock
, 
chûdblock
, 
chûdkey
);

1294 
	`curs‹_roŸ_add
(
curs‹
, 
√wbuf
, 
√wroŸ
->
íåõs
 + 1 + !
À·_node
);

1295 
	`log_bnode_roŸ
(
sb
, 
√wroŸblock
, 2, 
ﬁdroŸblock
, 
chûdblock
, 
chûdkey
);

1298 
båì
->
roŸ
.
block
 = 
√wroŸblock
;

1299 
båì
->
roŸ
.
dïth
++;

1301 
	`m¨k_buf„r_unify_n⁄
(
√wbuf
);

1302 
	`tux3_m¨k_båì_dúty
(
båì
);

1303 
	`curs‹_check
(
curs‹
);

1306 
	}
}

1309 
	$båì_ö£π_Àaf
(
curs‹
 *curs‹, 
tuxkey_t
 
key
, 
buf„r_hód
 *
Àafbuf
)

1311 if(
DEBUG_MODE_K
==1)

1313 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1315  
	`ö£π_Àaf
(
curs‹
, 
key
, 
Àafbuf
, 0);

1316 
	}
}

1327 
	$båì_Àaf_•lô
(
curs‹
 *curs‹, 
tuxkey_t
 
key
,Åuxkey_à
höt
)

1329 if(
DEBUG_MODE_K
==1)

1331 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1333 
	`åa˚
("splitÜeaf");

1334 
båì
 *båì = 
curs‹
->btree;

1335 
buf„r_hód
 *
√wbuf
;

1337 
√wbuf
 = 
	`√w_Àaf
(
båì
);

1338 i‡(
	`IS_ERR
(
√wbuf
))

1339  
	`PTR_ERR
(
√wbuf
);

1340 
	`log_bÆloc
(
båì
->
sb
, 
	`bufödex
(
√wbuf
), 1);

1342 
buf„r_hód
 *
Àafbuf
 = 
	`curs‹_Àafbuf
(
curs‹
);

1343 
tuxkey_t
 
√wkey
 = 
båì
->
›s
->
	`Àaf_•lô
(båì, 
höt
, 
	`bufd©a
(
Àafbuf
),

1344 
	`bufd©a
(
√wbuf
));

1345 
	`as£π
(
	`curs‹_this_key
(
curs‹
Ë< 
√wkey
);

1346 
	`as£π
(
√wkey
 < 
	`curs‹_√xt_key
(
curs‹
));

1347 i‡(
key
 < 
√wkey
)

1348 
	`m¨k_buf„r_dúty_n⁄
(
√wbuf
);

1350 
	`m¨k_buf„r_dúty_n⁄
(
Àafbuf
);

1351  
	`ö£π_Àaf
(
curs‹
, 
√wkey
, 
√wbuf
, 
key
 <Çewkey);

1352 
	}
}

1354 
	$båì_wrôe
(
curs‹
 *curs‹, 
båì_key_ønge
 *
key
)

1356 if(
DEBUG_MODE_K
==1)

1358 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1360 
båì
 *båì = 
curs‹
->btree;

1361 
båì_›s
 *
›s
 = 
båì
->ops;

1362 
tuxkey_t
 
•lô_höt
;

1363 
îr
;

1367 
îr
 = 
	`curs‹_ªdúe˘
(
curs‹
);

1368 i‡(
îr
)

1369  
îr
;

1371 
key
->
Àn
 > 0) {

1372 
tuxkey_t
 
bŸtom
 = 
	`curs‹_this_key
(
curs‹
);

1373 
tuxkey_t
 
limô
 = 
	`curs‹_√xt_key
(
curs‹
);

1374 *
Àaf
 = 
	`bufd©a
(
	`curs‹_Àafbuf
(
curs‹
));

1375 
√ed_•lô
;

1377 
	`as£π
(
bŸtom
 <
key
->
°¨t
 && key->°¨à< 
limô
);

1378 
	`as£π
(
›s
->
	`Àaf_¢iff
(
båì
, 
Àaf
));

1380 
√ed_•lô
 = 
›s
->
	`Àaf_wrôe
(
båì
, 
bŸtom
, 
limô
, 
Àaf
, 
key
,

1381 &
•lô_höt
);

1382 i‡(
√ed_•lô
 < 0)

1383  
√ed_•lô
;

1384 i‡(!
√ed_•lô
) {

1385 
	`m¨k_buf„r_dúty_n⁄
(
	`curs‹_Àafbuf
(
curs‹
));

1389 
îr
 = 
	`båì_Àaf_•lô
(
curs‹
, 
key
->
°¨t
, 
•lô_höt
);

1390 i‡(
îr
)

1391  
îr
;

1395 
	}
}

1397 
	$båì_ªad
(
curs‹
 *curs‹, 
båì_key_ønge
 *
key
)

1399 if(
DEBUG_MODE_K
==1)

1401 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1403 
båì
 *båì = 
curs‹
->btree;

1404 
båì_›s
 *
›s
 = 
båì
->ops;

1405 *
Àaf
 = 
	`bufd©a
(
	`curs‹_Àafbuf
(
curs‹
));

1406 
tuxkey_t
 
bŸtom
 = 
	`curs‹_this_key
(
curs‹
);

1407 
tuxkey_t
 
limô
 = 
	`curs‹_√xt_key
(
curs‹
);

1411 
	`as£π
(
bŸtom
 <
key
->
°¨t
 && key->°¨à< 
limô
);

1412 
	`as£π
(
›s
->
	`Àaf_¢iff
(
båì
, 
Àaf
));

1414  
›s
->
	`Àaf_ªad
(
båì
, 
bŸtom
, 
limô
, 
Àaf
, 
key
);

1415 
	}
}

1417 
	$öô_båì
(
båì
 *båì, 
sb
 *sb, 
roŸ
ÑoŸ, 
båì_›s
 *
›s
)

1419 if(
DEBUG_MODE_K
==1)

1421 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1423 
båì
->
sb
 = sb;

1424 
båì
->
›s
 = ops;

1425 
båì
->
roŸ
 =Ñoot;

1426 
	`öô_rw£m
(&
båì
->
lock
);

1427 
›s
->
	`båì_öô
(
båì
);

1428 
	}
}

1430 
	$Æloc_em±y_båì
(
båì
 *btree)

1432 if(
DEBUG_MODE_K
==1)

1434 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1436 
sb
 *sb = 
båì
->sb;

1437 
buf„r_hód
 *
roŸbuf
 = 
	`√w_node
(
båì
);

1438 i‡(
	`IS_ERR
(
roŸbuf
))

1439 
îr‹
;

1440 
buf„r_hód
 *
Àafbuf
 = 
	`√w_Àaf
(
båì
);

1441 i‡(
	`IS_ERR
(
Àafbuf
))

1442 
îr‹_Àafbuf
;

1444 
	`as£π
(!
	`has_roŸ
(
båì
));

1445 
bnode
 *
roŸnode
 = 
	`bufd©a
(
roŸbuf
);

1446 
block_t
 
roŸblock
 = 
	`bufödex
(
roŸbuf
);

1447 
block_t
 
Àafblock
 = 
	`bufödex
(
Àafbuf
);

1448 
	`åa˚
("roŸáà%Lx", 
roŸblock
);

1449 
	`åa˚
("Àa‡© %Lx", 
Àafblock
);

1450 
	`bnode_öô_roŸ
(
roŸnode
, 1, 
Àafblock
, 0, 0);

1451 
	`log_bnode_roŸ
(
sb
, 
roŸblock
, 1, 
Àafblock
, 0, 0);

1452 
	`log_bÆloc
(
sb
, 
Àafblock
, 1);

1454 
	`m¨k_buf„r_unify_n⁄
(
roŸbuf
);

1455 
	`blockput
(
roŸbuf
);

1456 
	`m¨k_buf„r_dúty_n⁄
(
Àafbuf
);

1457 
	`blockput
(
Àafbuf
);

1459 
båì
->
roŸ
 = (roŸ){ .
block
 = 
roŸblock
, .
dïth
 = 1 };

1460 
	`tux3_m¨k_båì_dúty
(
båì
);

1464 
îr‹_Àafbuf
:

1465 (
båì
->
›s
->
b‰ì
)(
sb
, 
	`bufödex
(
roŸbuf
), 1);

1466 
	`blockput
(
roŸbuf
);

1467 
roŸbuf
 = 
Àafbuf
;

1468 
îr‹
:

1469  
	`PTR_ERR
(
roŸbuf
);

1470 
	}
}

1473 
	$‰ì_em±y_båì
(
båì
 *btree)

1475 if(
DEBUG_MODE_K
==1)

1477 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1479 
båì_›s
 *
›s
 = 
båì
->ops;

1481 i‡(!
	`has_roŸ
(
båì
))

1484 
	`as£π
(
båì
->
roŸ
.
dïth
 == 1);

1485 
sb
 *sb = 
båì
->sb;

1486 
buf„r_hód
 *
roŸbuf
 = 
	`vﬁ_bªad
(
sb
, 
båì
->
roŸ
.
block
);

1487 i‡(!
roŸbuf
)

1488  -
EIO
;

1489 
	`as£π
(
	`bnode_¢iff
(
	`bufd©a
(
roŸbuf
)));

1491 
båì
->
roŸ
 = 
no_roŸ
;

1492 
	`tux3_m¨k_båì_dúty
(
båì
);

1494 
bnode
 *
roŸnode
 = 
	`bufd©a
(
roŸbuf
);

1495 
	`as£π
(
	`bcou¡
(
roŸnode
) == 1);

1496 
block_t
 
Àaf
 = 
	`be64_to_˝u
(
roŸnode
->
íåõs
[0].
block
);

1497 
buf„r_hód
 *
Àafbuf
 = 
	`vﬁ_föd_gë_block
(
sb
, 
Àaf
);

1499 i‡(
Àafbuf
 && !
	`Àaf_√ed_ªdúe˘
(
sb
,Üeafbuf)) {

1505 
	`b‰ì
(
sb
, 
Àaf
, 1);

1506 
	`log_Àaf_‰ì
(
sb
, 
Àaf
);

1507 
	`as£π
(
›s
->
	`Àaf_ˇn_‰ì
(
båì
, 
	`bufd©a
(
Àafbuf
)));

1508 
	`blockput_‰ì
(
sb
, 
Àafbuf
);

1510 
	`de„r_b‰ì
(&
sb
->
de‰ì
, 
Àaf
, 1);

1511 
	`log_b‰ì
(
sb
, 
Àaf
, 1);

1512 i‡(
Àafbuf
) {

1513 
	`as£π
(
›s
->
	`Àaf_ˇn_‰ì
(
båì
, 
	`bufd©a
(
Àafbuf
)));

1514 
	`blockput
(
Àafbuf
);

1518 i‡(!
	`bnode_√ed_ªdúe˘
(
sb
, 
roŸbuf
)) {

1524 
	`b‰ì
(
sb
, 
	`bufödex
(
roŸbuf
), 1);

1525 
	`log_bnode_‰ì
(
sb
, 
	`bufödex
(
roŸbuf
));

1526 
	`blockput_‰ì_unify
(
sb
, 
roŸbuf
);

1528 
	`de„r_b‰ì
(&
sb
->
deunify
, 
	`bufödex
(
roŸbuf
), 1);

1529 
	`log_b‰ì_⁄_unify
(
sb
, 
	`bufödex
(
roŸbuf
), 1);

1530 
	`blockput
(
roŸbuf
);

1534 
	}
}

1536 
	$ª∂ay_bnode_ªdúe˘
(
ª∂ay
 *
Ω
, 
block_t
 
ﬁdblock
, block_à
√wblock
)

1538 if(
DEBUG_MODE_K
==1)

1540 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1542 
sb
 *sb = 
Ω
->sb;

1543 
buf„r_hód
 *
√wbuf
, *
ﬁdbuf
;

1544 
îr
 = 0;

1546 
√wbuf
 = 
	`vﬁ_gëblk
(
sb
, 
√wblock
);

1547 i‡(!
√wbuf
) {

1548 
îr
 = -
ENOMEM
;

1549 
îr‹
;

1551 
ﬁdbuf
 = 
	`vﬁ_bªad
(
sb
, 
ﬁdblock
);

1552 i‡(!
ﬁdbuf
) {

1553 
îr
 = -
EIO
;

1554 
îr‹_put_√wbuf
;

1556 
	`as£π
(
	`bnode_¢iff
(
	`bufd©a
(
ﬁdbuf
)));

1558 
	`mem˝y
(
	`bufd©a
(
√wbuf
), bufd©a(
ﬁdbuf
), 
	`bufsize
(newbuf));

1559 
	`m¨k_buf„r_unify_©omic
(
√wbuf
);

1561 
	`blockput
(
ﬁdbuf
);

1562 
îr‹_put_√wbuf
:

1563 
	`blockput
(
√wbuf
);

1564 
îr‹
:

1565  
îr
;

1566 
	}
}

1568 
	$ª∂ay_bnode_roŸ
(
ª∂ay
 *
Ω
, 
block_t
 
roŸ
, 
cou¡
,

1569 
block_t
 
À·
, block_à
right
, 
tuxkey_t
 
rkey
)

1571 if(
DEBUG_MODE_K
==1)

1573 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1575 
sb
 *sb = 
Ω
->sb;

1576 
buf„r_hód
 *
roŸbuf
;

1578 
roŸbuf
 = 
	`vﬁ_gëblk
(
sb
, 
roŸ
);

1579 i‡(!
roŸbuf
)

1580  -
ENOMEM
;

1581 
	`bnode_buf„r_öô
(
roŸbuf
);

1583 
	`bnode_öô_roŸ
(
	`bufd©a
(
roŸbuf
), 
cou¡
, 
À·
, 
right
, 
rkey
);

1585 
	`m¨k_buf„r_unify_©omic
(
roŸbuf
);

1586 
	`blockput
(
roŸbuf
);

1589 
	}
}

1595 
	$ª∂ay_bnode_•lô
(
ª∂ay
 *
Ω
, 
block_t
 
§c
, 
pos
,

1596 
block_t
 
d°
)

1598 if(
DEBUG_MODE_K
==1)

1600 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1602 
sb
 *sb = 
Ω
->sb;

1603 
buf„r_hód
 *
§cbuf
, *
d°buf
;

1604 
îr
 = 0;

1606 
§cbuf
 = 
	`vﬁ_gëblk
(
sb
, 
§c
);

1607 i‡(!
§cbuf
) {

1608 
îr
 = -
ENOMEM
;

1609 
îr‹
;

1612 
d°buf
 = 
	`vﬁ_gëblk
(
sb
, 
d°
);

1613 i‡(!
d°buf
) {

1614 
îr
 = -
ENOMEM
;

1615 
îr‹_put_§cbuf
;

1617 
	`bnode_buf„r_öô
(
d°buf
);

1619 
	`bnode_•lô
(
	`bufd©a
(
§cbuf
), 
pos
, bufd©a(
d°buf
));

1621 
	`m¨k_buf„r_unify_n⁄
(
§cbuf
);

1622 
	`m¨k_buf„r_unify_©omic
(
d°buf
);

1624 
	`blockput
(
d°buf
);

1625 
îr‹_put_§cbuf
:

1626 
	`blockput
(
§cbuf
);

1627 
îr‹
:

1628  
îr
;

1629 
	}
}

1635 
ª∂ay_bnode_ch™ge
(
sb
 *sb, 
block_t
 
bnodeblock
,

1636 
u64
 
vÆ1
, u64 
vÆ2
,

1637 (*
ch™ge
)(
bnode
 *, 
u64
, u64))

1639 if(
DEBUG_MODE_K
==1)

1641 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1643 
buf„r_hód
 *
bnodebuf
;

1645 
bnodebuf
 = 
	`vﬁ_gëblk
(
sb
, 
bnodeblock
);

1646 i‡(!
bnodebuf
)

1647  -
ENOMEM
;

1649 
bnode
 *bnodê
	`bufd©a
(
bnodebuf
);

1650 
	`ch™ge
(
bnode
, 
vÆ1
, 
vÆ2
);

1652 
	`m¨k_buf„r_unify_n⁄
(
bnodebuf
);

1653 
	`blockput
(
bnodebuf
);

1656 
	}
}

1658 
	$add_func
(
bnode
 *bnode, 
u64
 
chûd
, u64 
key
)

1660 if(
DEBUG_MODE_K
==1)

1662 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1664 
ödex_íåy
 *
íåy
 = 
	`bnode_lookup
(
bnode
, 
key
) + 1;

1665 
	`bnode_add_ödex
(
bnode
, 
íåy
, 
chûd
, 
key
);

1666 
	}
}

1668 
	$ª∂ay_bnode_add
(
ª∂ay
 *
Ω
, 
block_t
 
∑ª¡
, block_à
chûd
,

1669 
tuxkey_t
 
key
)

1671 if(
DEBUG_MODE_K
==1)

1673 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1675  
	`ª∂ay_bnode_ch™ge
(
Ω
->
sb
, 
∑ª¡
, 
chûd
, 
key
, 
add_func
);

1676 
	}
}

1678 
	$upd©e_func
(
bnode
 *bnode, 
u64
 
chûd
, u64 
key
)

1680 if(
DEBUG_MODE_K
==1)

1682 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1684 
ödex_íåy
 *
íåy
 = 
	`bnode_lookup
(
bnode
, 
key
);

1685 
	`as£π
(
	`be64_to_˝u
(
íåy
->
key
) == key);

1686 
íåy
->
block
 = 
	`˝u_to_be64
(
chûd
);

1687 
	}
}

1689 
	$ª∂ay_bnode_upd©e
(
ª∂ay
 *
Ω
, 
block_t
 
∑ª¡
, block_à
chûd
,

1690 
tuxkey_t
 
key
)

1692 if(
DEBUG_MODE_K
==1)

1694 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1696  
	`ª∂ay_bnode_ch™ge
(
Ω
->
sb
, 
∑ª¡
, 
chûd
, 
key
, 
upd©e_func
);

1697 
	}
}

1699 
	$ª∂ay_bnode_mîge
(
ª∂ay
 *
Ω
, 
block_t
 
§c
, block_à
d°
)

1701 if(
DEBUG_MODE_K
==1)

1703 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1705 
sb
 *sb = 
Ω
->sb;

1706 
buf„r_hód
 *
§cbuf
, *
d°buf
;

1707 
îr
 = 0, 
ªt
;

1709 
§cbuf
 = 
	`vﬁ_gëblk
(
sb
, 
§c
);

1710 i‡(!
§cbuf
) {

1711 
îr
 = -
ENOMEM
;

1712 
îr‹
;

1715 
d°buf
 = 
	`vﬁ_gëblk
(
sb
, 
d°
);

1716 i‡(!
d°buf
) {

1717 
îr
 = -
ENOMEM
;

1718 
îr‹_put_§cbuf
;

1721 
ªt
 = 
	`bnode_mîge_nodes
(
sb
, 
	`bufd©a
(
d°buf
), bufd©a(
§cbuf
));

1722 
	`as£π
(
ªt
 == 1);

1724 
	`m¨k_buf„r_unify_n⁄
(
d°buf
);

1725 
	`m¨k_buf„r_unify_n⁄
(
§cbuf
);

1727 
	`blockput
(
d°buf
);

1728 
îr‹_put_§cbuf
:

1729 
	`blockput
(
§cbuf
);

1730 
îr‹
:

1731  
îr
;

1732 
	}
}

1734 
	$dñ_func
(
bnode
 *bnode, 
u64
 
key
, u64 
cou¡
)

1736 if(
DEBUG_MODE_K
==1)

1738 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1740 
ödex_íåy
 *
íåy
 = 
	`bnode_lookup
(
bnode
, 
key
);

1741 
	`as£π
(
	`be64_to_˝u
(
íåy
->
key
) == key);

1742 
	`bnode_ªmove_ödex
(
bnode
, 
íåy
, 
cou¡
);

1743 
	}
}

1745 
	$ª∂ay_bnode_dñ
(
ª∂ay
 *
Ω
, 
block_t
 
bnode
, 
tuxkey_t
 
key
,

1746 
cou¡
)

1748 if(
DEBUG_MODE_K
==1)

1750 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1752  
	`ª∂ay_bnode_ch™ge
(
Ω
->
sb
, 
bnode
, 
key
, 
cou¡
, 
dñ_func
);

1753 
	}
}

1755 
	$adju°_func
(
bnode
 *bnode, 
u64
 
‰om
, u64 
to
)

1757 if(
DEBUG_MODE_K
==1)

1759 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1761 
ödex_íåy
 *
íåy
 = 
	`bnode_lookup
(
bnode
, 
‰om
);

1762 
	`as£π
(
	`be64_to_˝u
(
íåy
->
key
Ë=
‰om
);

1763 
íåy
->
key
 = 
	`˝u_to_be64
(
to
);

1764 
	}
}

1766 
	$ª∂ay_bnode_adju°
(
ª∂ay
 *
Ω
, 
block_t
 
bnode
, 
tuxkey_t
 
‰om
,

1767 
tuxkey_t
 
to
)

1769 if(
DEBUG_MODE_K
==1)

1771 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1773  
	`ª∂ay_bnode_ch™ge
(
Ω
->
sb
, 
bnode
, 
‰om
, 
to
, 
adju°_func
);

1774 
	}
}

	@kernel/buffer.c

6 
	~"tux3.h
"

7 
	~"tux3_f‹k.h
"

9 #i‚de‡
åa˚


10 
	#åa˚
 
åa˚_⁄


	)

16 
	#BUFDELTA_AVAIL
 1

	)

17 
	#BUFDELTA_BITS
 
	`‹dî_ba£_2
(
BUFDELTA_AVAIL
 + 
TUX3_MAX_DELTA
)

	)

18 
TUX3_DEFINE_STATE_FNS
(, 
buf
, 
BUFDELTA_AVAIL
, 
BUFDELTA_BITS
,

19 
BH_Priv©eSèπ
);

31 
	$tux3_£t_bufdñè
(
buf„r_hód
 *
buf„r
, 
dñè
)

33 if(
DEBUG_MODE_K
==1)

35 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

37 
°©e
, 
ﬁd_°©e
;

39 
dñè
 = 
	`tux3_dñè
(delta);

41 
°©e
 = 
buf„r
->
b_°©e
;

43 
ﬁd_°©e
 = 
°©e
;

44 
°©e
 = 
	`tux3_buf°a_upd©e
(
ﬁd_°©e
, 
dñè
);

45 
°©e
 = 
	`cmpxchg
(&
buf„r
->
b_°©e
, 
ﬁd_°©e
, state);

46 i‡(
°©e
 =
ﬁd_°©e
)

49 
	}
}

51 
	$tux3_˛ór_bufdñè
(
buf„r_hód
 *
buf„r
)

53 if(
DEBUG_MODE_K
==1)

55 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

57 
°©e
, 
ﬁd_°©e
;

59 
°©e
 = 
buf„r
->
b_°©e
;

61 
ﬁd_°©e
 = 
°©e
;

62 
°©e
 = 
	`tux3_buf°a_˛ór
(
ﬁd_°©e
);

63 
°©e
 = 
	`cmpxchg
(&
buf„r
->
b_°©e
, 
ﬁd_°©e
, state);

64 i‡(
°©e
 =
ﬁd_°©e
)

67 
	}
}

74 
	$buf„r_check_dúty_dñè
(
°©e
)

76 if(
DEBUG_MODE_K
==1)

78 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

80 i‡(
	`tux3_buf°a_has_dñè
(
°©e
))

81  
	`tux3_buf°a_gë_dñè
(
°©e
);

84 
	}
}

87 
	$buf„r_Æªady_dúty
(
buf„r_hód
 *
buf„r
, 
dñè
)

89 if(
DEBUG_MODE_K
==1)

91 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

93 
°©e
 = 
buf„r
->
b_°©e
;

95  
	`buf„r_check_dúty_dñè
(
°©e
Ë=
	`tux3_dñè
(
dñè
);

96 
	}
}

99 
	$buf„r_ˇn_modify
(
buf„r_hód
 *
buf„r
, 
dñè
)

101 if(
DEBUG_MODE_K
==1)

103 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

105 
°©e
 = 
buf„r
->
b_°©e
;

107  !
	`tux3_buf°a_has_dñè
(
°©e
) ||

108 
	`tux3_buf°a_gë_dñè
(
°©e
Ë=
	`tux3_dñè
(
dñè
);

109 
	}
}

115 
	$tux3_£t_buf„r_dúty_li°
(
addªss_•a˚
 *
m≠pög
,

116 
buf„r_hód
 *
buf„r
, 
dñè
,

117 
li°_hód
 *
hód
)

119 if(
DEBUG_MODE_K
==1)

121 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

124 i‡(!
	`buf„r_u±od©e
(
buf„r
))

125 
	`£t_buf„r_u±od©e
(
buf„r
);

126 
	`m¨k_buf„r_dúty
(
buf„r
);

128 i‡(!
buf„r
->
b_assoc_m≠
) {

129 
	`•ö_lock
(&
m≠pög
->
¥iv©e_lock
);

130 
	`BUG_ON
(!
	`li°_em±y
(&
buf„r
->
b_assoc_buf„rs
));

131 
	`li°_move_èû
(&
buf„r
->
b_assoc_buf„rs
, 
hód
);

132 
buf„r
->
b_assoc_m≠
 = 
m≠pög
;

134 
	`tux3_£t_bufdñè
(
buf„r
, 
dñè
);

135 
	`•ö_u∆ock
(&
m≠pög
->
¥iv©e_lock
);

137 
	}
}

139 
	$tux3_£t_buf„r_dúty
(
addªss_•a˚
 *
m≠pög
,

140 
buf„r_hód
 *
buf„r
, 
dñè
)

142 if(
DEBUG_MODE_K
==1)

144 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

146 
li°_hód
 *
hód
 = 
	`tux3_dúty_buf„rs
(
m≠pög
->
ho°
, 
dñè
);

147 
	`tux3_£t_buf„r_dúty_li°
(
m≠pög
, 
buf„r
, 
dñè
, 
hód
);

148 
	}
}

154 
	$tux3_˛ór_buf„r_dúty
(
buf„r_hód
 *
buf„r
, 
dñè
)

156 if(
DEBUG_MODE_K
==1)

158 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

160 
addªss_•a˚
 *
buf„r_m≠pög
 = 
buf„r
->
b_assoc_m≠
;

163 
	`as£π
(
	`buf„r_ˇn_modify
(
buf„r
, 
dñè
));

165 i‡(
buf„r_m≠pög
) {

166 
	`•ö_lock
(&
buf„r_m≠pög
->
¥iv©e_lock
);

167 
	`li°_dñ_öô
(&
buf„r
->
b_assoc_buf„rs
);

168 
buf„r
->
b_assoc_m≠
 = 
NULL
;

169 
	`tux3_˛ór_bufdñè
(
buf„r
);

170 
	`•ö_u∆ock
(&
buf„r_m≠pög
->
¥iv©e_lock
);

172 
	`˛ór_buf„r_dúty
(
buf„r
);

174 
	`BUG_ON
(!
	`li°_em±y
(&
buf„r
->
b_assoc_buf„rs
));

175 
	}
}

178 
	$tux3_˛ór_buf„r_dúty_f‹_io
(
buf„r_hód
 *
buf„r
,

179 
sb
 *sb, 
block_t
 
block
)

181 if(
DEBUG_MODE_K
==1)

183 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

185 
	`as£π
(
	`li°_em±y
(&
buf„r
->
b_assoc_buf„rs
));

186 
	`as£π
(
	`buf„r_dúty
(
buf„r
));

189 
	`as£π
(
	`buf„r_u±od©e
(
buf„r
));

192 
	`m≠_bh
(
buf„r
, 
	`vfs_sb
(
sb
), 
block
);

193 
	`˛ór_buf„r_dñay
(
buf„r
);

196 
	`tux3_˛ór_bufdñè
(
buf„r
);

197 
	`˛ór_buf„r_dúty
(
buf„r
);

198 
	}
}

205 
	$tux3_˛ór_buf„r_dúty_f‹_io_hack
(
buf„r_hód
 *
buf„r
)

207 if(
DEBUG_MODE_K
==1)

209 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

211 
buf„r
->
b_assoc_m≠
 = 
NULL
;

212 
	}
}

215 
	$__blockput_‰ì
(
sb
 *sb, 
buf„r_hód
 *
buf„r
,

216 
dñè
)

218 if(
DEBUG_MODE_K
==1)

220 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

223 
	`tux3_˛ór_buf„r_dúty
(
buf„r
, 
dñè
);

224 
	`tux3_åy_ˇn˚l_dúty_∑ge
(
buf„r
->
b_∑ge
);

225 
	`blockput
(
buf„r
);

226 
	}
}

228 
	$blockput_‰ì
(
sb
 *sb, 
buf„r_hód
 *
buf„r
)

230 if(
DEBUG_MODE_K
==1)

232 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

234 
	`__blockput_‰ì
(
sb
, 
buf„r
, 
TUX3_INIT_DELTA
);

235 
	}
}

237 
	$blockput_‰ì_unify
(
sb
 *sb, 
buf„r_hód
 *
buf„r
)

239 if(
DEBUG_MODE_K
==1)

241 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

243 
	`__blockput_‰ì
(
sb
, 
buf„r
, sb->
unify
);

244 
	}
}

247 
	$disˇrd_buf„r
(
buf„r_hód
 *
buf„r
)

249 if(
DEBUG_MODE_K
==1)

251 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

254 
	`lock_buf„r
(
buf„r
);

256 
buf„r
->
b_bdev
 = 
NULL
;

257 
	`˛ór_buf„r_m≠≥d
(
buf„r
);

258 
	`˛ór_buf„r_ªq
(
buf„r
);

259 
	`˛ór_buf„r_√w
(
buf„r
);

260 
	`˛ór_buf„r_dñay
(
buf„r
);

261 
	`˛ór_buf„r_unwrôãn
(
buf„r
);

262 
	`u∆ock_buf„r
(
buf„r
);

263 
	}
}

269 
	$tux3_övÆid©e_buf„r
(
buf„r_hód
 *
buf„r
)

271 if(
DEBUG_MODE_K
==1)

273 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

275 
dñè
 = 
	`tux3_öode_dñè
(
	`buf„r_öode
(
buf„r
));

276 
	`tux3_˛ór_buf„r_dúty
(
buf„r
, 
dñè
);

277 
	`disˇrd_buf„r
(
buf„r
);

278 
	}
}

280 
	~"buf„r_wrôeback.c
"

281 
	~"buf„r_f‹k.c
"

	@kernel/buffer.h

1 #i‚de‡
TUX3_BUFFER_H


2 
	#TUX3_BUFFER_H


	)

4 #ifde‡
__KERNEL__


5 
	~"lök.h
"

15 sig√d 
	tblock_t
;

18 
	#TUX3_MAX_DELTA
 2

	)

19 
	#TUX3_INIT_DELTA
 0

	)

22 
	mBUFFER_FREED
, 
	mBUFFER_EMPTY
, 
	mBUFFER_CLEAN
, 
	mBUFFER_DIRTY
,

23 
	mBUFFER_STATES
 = 
BUFFER_DIRTY
 + 
TUX3_MAX_DELTA


26 
	gsb
;

27 
	gtux3_üâr_d©a
;

28 
ölöe
 
block_t
 
bufödex
(
buf„r_hód
 *
buf„r
);

30 
ölöe
 *
	$bufd©a
(
buf„r_hód
 *
buf„r
)

32  
buf„r
->
b_d©a
;

33 
	}
}

35 
ölöe
 
size_t
 
	$bufsize
(
buf„r_hód
 *
buf„r
)

37  
buf„r
->
b_size
;

38 
	}
}

40 
ölöe
 
	$bufcou¡
(
buf„r_hód
 *
buf„r
)

42  
	`©omic_ªad
(&
buf„r
->
b_cou¡
);

43 
	}
}

45 
ölöe
 
	$buf„r_˛ón
(
buf„r_hód
 *
buf„r
)

47  !
	`buf„r_dúty
(
buf„r
Ë|| 
	`buf„r_u±od©e
(buffer);

48 
	}
}

50 
ölöe
 
	$blockput
(
buf„r_hód
 *
buf„r
)

52 
	`put_bh
(
buf„r
);

53 
	}
}

55 
ölöe
 
	$buf„r_em±y
(
buf„r_hód
 *
buf„r
)

58 
	}
}

60 
ölöe
 
buf„r_hód
 *
	$£t_buf„r_em±y
(
buf„r_hód
 *
buf„r
)

62  
buf„r
;

63 
	}
}

65 
buf„r_Æªady_dúty
(
buf„r_hód
 *
buf„r
, 
dñè
);

66 
buf„r_ˇn_modify
(
buf„r_hód
 *
buf„r
, 
dñè
);

67 
tux3_£t_buf„r_dúty_li°
(
addªss_•a˚
 *
m≠pög
,

68 
buf„r_hód
 *
buf„r
, 
dñè
,

69 
li°_hód
 *
hód
);

70 
tux3_£t_buf„r_dúty
(
addªss_•a˚
 *
m≠pög
,

71 
buf„r_hód
 *
buf„r
, 
dñè
);

72 
tux3_˛ór_buf„r_dúty
(
buf„r_hód
 *
buf„r
, 
dñè
);

73 
blockput_‰ì
(
sb
 *sb, 
buf„r_hód
 *
buf„r
);

74 
blockput_‰ì_unify
(
sb
 *sb, 
buf„r_hód
 *
buf„r
);

75 
tux3_övÆid©e_buf„r
(
buf„r_hód
 *
buf„r
);

79 
	siowaô
 {

80 
©omic_t
 
	möÊight
;

81 
com∂ëi⁄
 
	md⁄e
;

85 
	#BUFS_PER_PAGE_CACHE
 (
PAGE_CACHE_SIZE
 / 512)

	)

86 
	sbufvec
 {

87 
li°_hód
 *
	mbuf„rs
;

88 
li°_hód
 
	mc⁄tig
;

89 
	mc⁄tig_cou¡
;

90 
tux3_üâr_d©a
 *
	mid©a
;

91 
addªss_•a˚
 *
	mm≠pög
;

94 
buf„r_hód
 *
	mbuf„r
;

95 
block_t
 
	mblock
;

96 } 
	m⁄_∑ge
[
BUFS_PER_PAGE_CACHE
];

97 
	m⁄_∑ge_idx
;

99 
bio
 *
	mbio
;

100 
buf„r_hód
 *
	mbio_œ°buf
;

103 
ölöe
 
öode
 *
	$bufvec_öode
(
bufvec
 *bufvec)

105  
bufvec
->
m≠pög
->
ho°
;

106 
	}
}

108 
ölöe
 
	$bufvec_c⁄tig_cou¡
(
bufvec
 *bufvec)

110  
bufvec
->
c⁄tig_cou¡
;

111 
	}
}

113 
ölöe
 
buf„r_hód
 *
	$bufvec_c⁄tig_buf
(
bufvec
 *bufvec)

115 
li°_hód
 *
fú°
 = 
bufvec
->
c⁄tig
.
√xt
;

116 
	`as£π
(!
	`li°_em±y
(&
bufvec
->
c⁄tig
));

117  
	`li°_íåy
(
fú°
, 
buf„r_hód
, 
b_assoc_buf„rs
);

118 
	}
}

121 
	#bufvec_buf„r_f‹_óch_c⁄tig
(
b
, 
v
) \

122 
	`li°_f‹_óch_íåy
(
b
, &(
v
)->
c⁄tig
, 
b_assoc_buf„rs
)

	)

124 
ölöe
 
block_t
 
	$bufvec_c⁄tig_ödex
(
bufvec
 *bufvec)

126  
	`bufödex
(
	`bufvec_c⁄tig_buf
(
bufvec
));

127 
	}
}

129 
ölöe
 
block_t
 
	$bufvec_c⁄tig_œ°_ödex
(
bufvec
 *bufvec)

131  
	`bufvec_c⁄tig_ödex
(
bufvec
Ë+ 
	`bufvec_c⁄tig_cou¡
(bufvec) - 1;

132 
	}
}

134 
tux3_iowaô_öô
(
iowaô
 *iowait);

135 
tux3_iowaô_waô
(
iowaô
 *iowait);

136 
bufvec_io
(
rw
, 
bufvec
 *bufvec, 
block_t
 
physiˇl
, 
cou¡
);

137 
bufvec_c⁄tig_add
(
bufvec
 *bufvec, 
buf„r_hód
 *
buf„r
);

138 
Êush_li°
(
addªss_•a˚
 *
m≠pög
, 
tux3_üâr_d©a
 *
id©a
,

139 
li°_hód
 *
hód
);

140 
__tux3_vﬁm≠_io
(
rw
, 
bufvec
 *bufvec, 
block_t
 
physiˇl
,

141 
cou¡
);

142 
tux3_vﬁm≠_io
(
rw
, 
bufvec
 *bufvec);

145 
	#PageF‹ked
(
x
Ë
	`PageChecked
(x)

	)

146 
	#SëPageF‹ked
(
x
Ë
	`SëPageChecked
(x)

	)

149 
ölöe
 
	$buf„r_f‹ked
(
buf„r_hód
 *
buf„r
)

151  
	`PageF‹ked
(
buf„r
->
b_∑ge
);

152 
	}
}

154 
‰ì_f‹ked_buf„rs
(
sb
 *sb, 
öode
 *öode, 
f‹˚
);

155 
buf„r_hód
 *
blockdúty
(buf„r_hód *
buf„r
, 
√wdñè
);

156 
∑ge
 *
∑gef‹k_f‹_blockdúty
(∑gê*
ﬁd∑ge
, 
√wdñè
);

157 
buf„rf‹k_to_övÆid©e
(
addªss_•a˚
 *
m≠pög
, 
∑ge
 *page);

	@kernel/buffer_fork.c

6 
	~<löux/hugëlb.h
>

7 
	~<löux/sw≠.h
>

8 
	~<löux/˛ónˇche.h
>

23 
	#buf„r_lök
(
x
Ë((
lök
 *)&(x)->
b_íd_io
)

	)

24 
	#buf„r_lök_íåy
(
x
Ë
	`__lök_íåy
(x, 
buf„r_hód
, 
b_íd_io
)

	)

30 
	$f‹ked_buf„r_add
(
sb
 *sb, 
buf„r_hód
 *
buf„r
)

32 if(
DEBUG_MODE_K
==1)

34 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

37 
	`gë_bh
(
buf„r
);

39 
	`•ö_lock
(&
sb
->
f‹ked_buf„rs_lock
);

40 
	`lök_add
(
	`buf„r_lök
(
buf„r
), &
sb
->
f‹ked_buf„rs
);

41 
	`•ö_u∆ock
(&
sb
->
f‹ked_buf„rs_lock
);

42 
	}
}

44 
	$f‹ked_buf„r_dñ
(
lök
 *
¥ev
, 
buf„r_hód
 *
buf„r
)

46 if(
DEBUG_MODE_K
==1)

48 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

50 
	`lök_dñ_√xt
(
¥ev
);

52 
	`put_bh
(
buf„r
);

53 
	}
}

56 
	$‰ì_f‹ked_∑ge
(
∑ge
 *page)

58 if(
DEBUG_MODE_K
==1)

60 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

62 
addªss_•a˚
 *
m≠pög
 = 
∑ge
->mapping;

64 
	`as£π
(
	`PageF‹ked
(
∑ge
));

66 
	`lock_∑ge
(
∑ge
);

67 i‡(
	`∑ge_has_buf„rs
(
∑ge
)) {

68 
ªt
 = 
	`åy_to_‰ì_buf„rs
(
∑ge
);

69 
	`as£π
(
ªt
);

72 
	`•ö_lock_úq
(&
m≠pög
->
åì_lock
);

73 
∑ge
->
m≠pög
 = 
NULL
;

74 
	`•ö_u∆ock_úq
(&
m≠pög
->
åì_lock
);

75 
	`u∆ock_∑ge
(
∑ge
);

78 
	`∑ge_ˇche_ªÀa£
(
∑ge
);

80 
	`åa˚_⁄
("∑gê%p, cou¡ %u", 
∑ge
, 
	`∑ge_cou¡
(page));

81 
	`∑ge_ˇche_ªÀa£
(
∑ge
);

82 
	}
}

85 
	#buf„r_‰ìabÀ
(
x
Ë
	`ã°_bô
(
BH_Priv©eSèπ
, &(x)->
b_°©e
)

	)

86 
	#£t_buf„r_‰ìabÀ
(
x
Ë
	`£t_bô
(
BH_Priv©eSèπ
, &(x)->
b_°©e
)

	)

87 
	#˛ór_buf„r_‰ìabÀ
(
x
Ë
	`˛ór_bô
(
BH_Priv©eSèπ
, &(x)->
b_°©e
)

	)

89 
ölöe
 
	$buf„r_busy
(
buf„r_hód
 *
buf„r
, 
ªfcou¡
)

91 if(
DEBUG_MODE_K
==1)

93 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

99 
	`as£π
(!
	`buf„r_dúty
(
buf„r
));

100 
	`as£π
(!
	`buf„r_async_wrôe
(
buf„r
));

101 
	`as£π
(!
	`buf„r_async_ªad
(
buf„r
));

103  
	`©omic_ªad
(&
buf„r
->
b_cou¡
Ë> 
ªfcou¡
 ||

104 
	`buf„r_locked
(
buf„r
);

105 
	}
}

108 
	$is_‰ìabÀ_f‹ked
(
buf„r_hód
 *
buf„r
, 
∑ge
 *page)

110 if(
DEBUG_MODE_K
==1)

112 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

118 i‡(!
	`buf„r_‰ìabÀ
(
buf„r
)) {

119 
buf„r_hód
 *
tmp
 = 
buf„r
->
b_this_∑ge
;

120 
tmp
 !
buf„r
) {

121 i‡(
	`buf„r_busy
(
tmp
, 0))

123 
tmp
 =Åmp->
b_this_∑ge
;

126 i‡(
	`buf„r_busy
(
buf„r
, 1))

129 
	`£t_buf„r_‰ìabÀ
(
buf„r
);

133  
	`∑ge_cou¡
(
∑ge
) == 3;

134 
	}
}

147 
	$‰ì_f‹ked_buf„rs
(
sb
 *sb, 
öode
 *öode, 
f‹˚
)

149 if(
DEBUG_MODE_K
==1)

151 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

153 
lök
 
‰ì_li°
, *
node
, *
¥ev
, *
n
;

155 
	`öô_lök_cúcuœr
(&
‰ì_li°
);

158 
	`•ö_lock
(&
sb
->
f‹ked_buf„rs_lock
);

159 
	`lök_f‹_óch_ß„
(
node
, 
¥ev
, 
n
, &
sb
->
f‹ked_buf„rs
) {

160 
buf„r_hód
 *
buf„r
 = 
	`buf„r_lök_íåy
(
node
);

161 
∑ge
 *∑gê
buf„r
->
b_∑ge
;

163 
	`åa˚_⁄
("buffer %p,Öage %p, count %u",

164 
buf„r
, 
∑ge
, 
	`∑ge_cou¡
(page));

166 i‡(
öode
) {

168 i‡(
∑ge
->
m≠pög
 !
öode
->
i_m≠pög
)

172 #i‡
TUX3_FLUSHER
 =
TUX3_FLUSHER_SYNC


174 
	`as£π
(!
	`PageDúty
(
∑ge
));

176 
	`as£π
(!
f‹˚
 || (!
	`PageDúty
(
∑ge
Ë&& !
	`PageWrôeback
(page)));

197 i‡(!
	`PageDúty
(
∑ge
Ë&& !
	`PageWrôeback
(page)) {

199 i‡(
f‹˚
 || 
	`is_‰ìabÀ_f‹ked
(
buf„r
, 
∑ge
)) {

200 
	`˛ór_buf„r_‰ìabÀ
(
buf„r
);

202 
	`lök_dñ_√xt
(
¥ev
);

203 
	`lök_add
(
	`buf„r_lök
(
buf„r
), &
‰ì_li°
);

207 
	`•ö_u∆ock
(&
sb
->
f‹ked_buf„rs_lock
);

210 !
	`lök_em±y
(&
‰ì_li°
)) {

211 
buf„r_hód
 *
buf„r
 = 
	`buf„r_lök_íåy
(
‰ì_li°
.
√xt
);

212 
∑ge
 *∑gê
buf„r
->
b_∑ge
;

214 
	`f‹ked_buf„r_dñ
(&
‰ì_li°
, 
buf„r
);

215 
	`‰ì_f‹ked_∑ge
(
∑ge
);

217 
	}
}

229 
	$tux3_ª∂a˚_∑ge_ˇche
(
∑ge
 *
ﬁd∑ge
, ∑gê*
√w∑ge
)

231 if(
DEBUG_MODE_K
==1)

233 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

235 
addªss_•a˚
 *
m≠pög
 = 
ﬁd∑ge
->mapping;

236 **
p¶Ÿ
;

239 
	`∑ge_ˇche_gë
(
√w∑ge
);

242 
	`•ö_lock_úq
(&
m≠pög
->
åì_lock
);

244 i‡(
	`PageDúty
(
ﬁd∑ge
))

245 
	`ødix_åì_èg_˛ór
(&
m≠pög
->
∑ge_åì
, 
	`∑ge_ödex
(
ﬁd∑ge
),

246 
PAGECACHE_TAG_DIRTY
);

248 
p¶Ÿ
 = 
	`ødix_åì_lookup_¶Ÿ
(&
m≠pög
->
∑ge_åì
, 
ﬁd∑ge
->
ödex
);

249 
	`ødix_åì_ª∂a˚_¶Ÿ
(
p¶Ÿ
, 
√w∑ge
);

250 
	`__öc_z⁄e_∑ge_°©e
(
√w∑ge
, 
NR_FILE_PAGES
);

251 
	`__dec_z⁄e_∑ge_°©e
(
ﬁd∑ge
, 
NR_FILE_PAGES
);

252 
	`•ö_u∆ock_úq
(&
m≠pög
->
åì_lock
);

256 
	`mem_cgroup_ª∂a˚_∑ge_ˇche
(
ﬁd∑ge
, 
√w∑ge
);

259 
	`∑ge_ˇche_ªÀa£
(
ﬁd∑ge
);

262 
	}
}

270 
	$tux3_dñëe_‰om_∑ge_ˇche
(
∑ge
 *page)

272 if(
DEBUG_MODE_K
==1)

274 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

276 
addªss_•a˚
 *
m≠pög
 = 
∑ge
->mapping;

279 
	`•ö_lock_úq
(&
m≠pög
->
åì_lock
);

285 i‡(
	`PageU±od©e
(
∑ge
Ë&& 
	`PageM≠≥dToDisk
(page))

286 
	`˛ónˇche_put_∑ge
(
∑ge
);

288 
	`˛ónˇche_övÆid©e_∑ge
(
m≠pög
, 
∑ge
);

290 
	`ødix_åì_dñëe
(&
m≠pög
->
∑ge_åì
, 
∑ge
->
ödex
);

292 
∑ge
->
m≠pög
 = 
NULL
;

295 
m≠pög
->
ƒ∑ges
--;

296 
	`__dec_z⁄e_∑ge_°©e
(
∑ge
, 
NR_FILE_PAGES
);

299 
	`•ö_u∆ock_úq
(&
m≠pög
->
åì_lock
);

302 
	`mem_cgroup_unch¨ge_ˇche_∑ge
(
∑ge
);

304 
	`∑ge_ˇche_ªÀa£
(
∑ge
);

305 
	}
}

311 
	$˛⁄e_buf„rs
(
∑ge
 *
ﬁd∑ge
, ∑gê*
√w∑ge
)

313 if(
DEBUG_MODE_K
==1)

315 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

317 
sb
 *sb = 
	`tux_sb
(
ﬁd∑ge
->
m≠pög
->
ho°
->
i_sb
);

318 
buf„r_hód
 *
hód
, *
√wbuf
, *
ﬁdbuf
;

320 
	#USE_FOR_IO
 \

321 ((1UL << 
BH_U±od©e_Lock
Ë| (1UL << 
BH_Async_Wrôe
))

	)

323 
	#USE_FOR_IO
 \

324 ((1UL << 
BH_Lock
Ë| (1UL << 
BH_U±od©e_Lock
Ë| (1UL << 
BH_Async_Wrôe
))

	)

327 
ﬁdbuf
 = 
	`∑ge_buf„rs
(
ﬁd∑ge
);

328 
√wbuf
 = 
	`∑ge_buf„rs
(
√w∑ge
);

329 
hód
 = 
√wbuf
;

331 
	`as£π
(!
	`buf„r_locked
(
ﬁdbuf
));

332 
	`as£π
(!
	`buf„r_async_ªad
(
ﬁdbuf
));

334 
√wbuf
->
b_°©e
 = 
ﬁdbuf
->b_state;

336 
√wbuf
->
b_°©e
 &~
USE_FOR_IO
;

337 i‡(
	`buf„r_dúty
(
√wbuf
))

338 
	`tux3_˛ór_buf„r_dúty_f‹_io
(
√wbuf
, 
sb
, 0);

340 
ﬁdbuf
 = oldbuf->
b_this_∑ge
;

341 
√wbuf
 =Çewbuf->
b_this_∑ge
;

342 } 
√wbuf
 !
hód
);

343 
	}
}

346 
∑ge
 *
	$˛⁄e_∑ge
(
∑ge
 *
ﬁd∑ge
, 
blocksize
)

348 if(
DEBUG_MODE_K
==1)

350 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

352 
addªss_•a˚
 *
m≠pög
 = 
ﬁd∑ge
->mapping;

353 
gÂ_t
 
gÂ_mask
 = 
	`m≠pög_gÂ_mask
(
m≠pög
Ë& ~
__GFP_FS
;

354 
∑ge
 *
√w∑ge
 = 
	`__∑ge_ˇche_Æloc
(
gÂ_mask
);

356 
√w∑ge
->
m≠pög
 = 
ﬁd∑ge
->mapping;

357 
√w∑ge
->
ödex
 = 
ﬁd∑ge
->index;

358 
	`c›y_high∑ge
(
√w∑ge
, 
ﬁd∑ge
);

361 
	`BUG_ON
(
	`PageF‹ked
(
ﬁd∑ge
));

364 
	`BUG_ON
(
	`PageU√vi˘abÀ
(
ﬁd∑ge
));

365 
	`BUG_ON
(
	`PageHuge
(
ﬁd∑ge
));

366 i‡(
	`PageEº‹
(
ﬁd∑ge
))

367 
	`SëPageEº‹
(
√w∑ge
);

368 i‡(
	`PageRe„ªn˚d
(
ﬁd∑ge
))

369 
	`SëPageRe„ªn˚d
(
√w∑ge
);

370 i‡(
	`PageU±od©e
(
ﬁd∑ge
))

371 
	`SëPageU±od©e
(
√w∑ge
);

372 i‡(
	`PageA˘ive
(
ﬁd∑ge
))

373 
	`SëPageA˘ive
(
√w∑ge
);

374 i‡(
	`PageM≠≥dToDisk
(
ﬁd∑ge
))

375 
	`SëPageM≠≥dToDisk
(
√w∑ge
);

378 
	`mlock_migøã_∑ge
(
√w∑ge
, 
∑ge
);

379 
	`ksm_migøã_∑ge
(
√w∑ge
, 
∑ge
);

383 
	`as£π
(!
	`PageLocked
(
√w∑ge
));

384 
	`__£t_∑ge_locked
(
√w∑ge
);

386 
	`¸óã_em±y_buf„rs
(
√w∑ge
, 
blocksize
, 0);

387 
	`˛⁄e_buf„rs
(
ﬁd∑ge
, 
√w∑ge
);

389  
√w∑ge
;

390 
	}
}

393 
	$ﬁd∑ge_åy_ªmove_‰om_Ãu
(
∑ge
 *page)

396 
	}
}

399 
	$√w∑ge_add_Ãu
(
∑ge
 *page)

401 if(
DEBUG_MODE_K
==1)

403 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

405 i‡(
	`Te°CÀ¨PageA˘ive
(
∑ge
))

406 
	`__Ãu_ˇche_add
(
∑ge
, 
LRU_ACTIVE_FILE
);

408 
	`__Ãu_ˇche_add
(
∑ge
, 
LRU_INACTIVE_FILE
);

409 
	}
}

411 
	eªt_√edf‹k
 {

412 
	mRET_FORKED
 = 1,

413 
	mRET_NEED_FORK
,

414 
	mRET_CAN_DIRTY
,

415 
	mRET_ALREADY_DIRTY
,

418 
ªt_√edf‹k


419 
	$√ed_f‹k
(
∑ge
 *∑ge, 
buf„r_hód
 *
buf„r
, 
dñè
)

421 if(
DEBUG_MODE_K
==1)

423 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

425 
buf„r_hód
 *
tmp
;

426 
bufdñè
;

429 i‡(
	`PageF‹ked
(
∑ge
))

430  
RET_FORKED
;

432 i‡(
	`PageWrôeback
(
∑ge
))

433  
RET_NEED_FORK
;

439 i‡(!
	`PageDúty
(
∑ge
)) {

440 
	`as£π
(!
buf„r
 || !
	`buf„r_dúty
(buffer));

441  
RET_CAN_DIRTY
;

443 i‡(
buf„r
 =
NULL
) {

445 
	`as£π
(
	`∑ge_has_buf„rs
(
∑ge
));

446 
buf„r
 = 
	`∑ge_buf„rs
(
∑ge
);

453 
bufdñè
 = 
	`buf„r_check_dúty_dñè
(
buf„r
->
b_°©e
);

454 i‡(
bufdñè
 >= 0) {

456 i‡(
bufdñè
 =
	`tux3_dñè
(
dñè
))

457  
RET_ALREADY_DIRTY
;

460  
RET_NEED_FORK
;

466 
tmp
 = 
buf„r
->
b_this_∑ge
;

467 
tmp
 !
buf„r
) {

468 i‡(!
	`buf„r_ˇn_modify
(
tmp
, 
dñè
)) {

470  
RET_NEED_FORK
;

473 
tmp
 =Åmp->
b_this_∑ge
;

477  
RET_CAN_DIRTY
;

478 
	}
}

480 
buf„r_hód
 *
	$blockdúty
(
buf„r_hód
 *
buf„r
, 
√wdñè
)

482 if(
DEBUG_MODE_K
==1)

484 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

486 
∑ge
 *
√w∑ge
, *
ﬁd∑ge
 = 
buf„r
->
b_∑ge
;

487 
sb
 *sb;

488 
buf„r_hód
 *
√wbuf
;

489 
ªt_√edf‹k
Ñet_needfork;

490 
îr
;

492 
	`åa˚
("buffer %p,Öage %p, index %lx, count %u",

493 
buf„r
, 
ﬁd∑ge
, old∑ge->
ödex
, 
	`∑ge_cou¡
(oldpage));

494 
	`åa˚
("forked %u, dirty %u, writeback %u",

495 
	`PageF‹ked
(
ﬁd∑ge
), 
	`PageDúty
(ﬁd∑ge), 
	`PageWrôeback
(oldpage));

498 i‡(
	`buf„r_Æªady_dúty
(
buf„r
, 
√wdñè
))

499  
buf„r
;

502 
	`lock_∑ge
(
ﬁd∑ge
);

507 (
ªt_√edf‹k
 = 
	`√ed_f‹k
(
ﬁd∑ge
, 
buf„r
, 
√wdñè
))) {

508 
RET_FORKED
:

510 
buf„r
 = 
	`ERR_PTR
(-
EAGAIN
);

511 
	`WARN_ON
(1);

513 
RET_ALREADY_DIRTY
:

515 
out
;

516 
RET_CAN_DIRTY
:

517 
RET_NEED_FORK
:

520 
	`BUG
();

525 
sb
 = 
	`tux_sb
(
ﬁd∑ge
->
m≠pög
->
ho°
->
i_sb
);

527 i‡(
ªt_√edf‹k
 =
RET_CAN_DIRTY
) {

529 
dúty_buf„r
;

535 
√w∑ge
 = 
	`˛⁄e_∑ge
(
ﬁd∑ge
, 
sb
->
blocksize
);

536 i‡(
	`IS_ERR
(
√w∑ge
)) {

537 
buf„r
 = 
	`ERR_CAST
(
√w∑ge
);

538 
out
;

541 
√wbuf
 = 
	`__gë_buf„r
(
√w∑ge
, 
	`bh_off£t
(
buf„r
Ë>> 
sb
->
blockbôs
);

543 
	`gë_bh
(
√wbuf
);

544 
	`∑ge_ˇche_ªÀa£
(
√w∑ge
);

547 
	`∑ge_ˇche_gë
(
ﬁd∑ge
);

550 
îr
 = 
	`tux3_ª∂a˚_∑ge_ˇche
(
ﬁd∑ge
, 
√w∑ge
);

552 
	`√w∑ge_add_Ãu
(
√w∑ge
);

563 
	`åa˚
("ﬁd∑gêcou¡ %u", 
	`∑ge_cou¡
(
ﬁd∑ge
));

564 
	`as£π
(
	`∑ge_cou¡
(
ﬁd∑ge
) >= 2);

565 
	`∑ge_ˇche_gë
(
ﬁd∑ge
);

566 
	`ﬁd∑ge_åy_ªmove_‰om_Ãu
(
ﬁd∑ge
);

572 
	`SëPageF‹ked
(
ﬁd∑ge
);

573 
	`u∆ock_∑ge
(
ﬁd∑ge
);

576 
	`f‹ked_buf„r_add
(
sb
, 
buf„r
);

577 
	`bªl£
(
buf„r
);

579 
	`åa˚
("˛⁄edÖagê%p, buf„∏%p", 
√w∑ge
, 
√wbuf
);

580 
buf„r
 = 
√wbuf
;

581 
ﬁd∑ge
 = 
√w∑ge
;

583 
dúty_buf„r
:

584 
	`as£π
(!
	`buf„r_dúty
(
buf„r
));

585 
	`__tux3_m¨k_buf„r_dúty
(
buf„r
, 
√wdñè
);

587 
out
:

588 
	`u∆ock_∑ge
(
ﬁd∑ge
);

590  
buf„r
;

591 
	}
}

601 
∑ge
 *
	$∑gef‹k_f‹_blockdúty
(
∑ge
 *
ﬁd∑ge
, 
√wdñè
)

603 if(
DEBUG_MODE_K
==1)

605 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

607 
∑ge
 *
√w∑ge
 = 
ﬁd∑ge
;

608 
sb
 *sb;

609 
ªt_√edf‹k
Ñet_needfork;

610 
îr
;

613 
	`as£π
(
	`PageLocked
(
ﬁd∑ge
));

615 
	`åa˚
("page %p, index %lx, count %u",

616 
ﬁd∑ge
, old∑ge->
ödex
, 
	`∑ge_cou¡
(oldpage));

617 
	`åa˚
("forked %u, dirty %u, writeback %u",

618 
	`PageF‹ked
(
ﬁd∑ge
), 
	`PageDúty
(ﬁd∑ge), 
	`PageWrôeback
(oldpage));

623 (
ªt_√edf‹k
 = 
	`√ed_f‹k
(
ﬁd∑ge
, 
NULL
, 
√wdñè
))) {

624 
RET_FORKED
:

626 
√w∑ge
 = 
	`ERR_PTR
(-
EAGAIN
);

627 
	`WARN_ON
(1);

628 
RET_ALREADY_DIRTY
:

630 
out
;

631 
RET_CAN_DIRTY
:

632 
RET_NEED_FORK
:

635 
	`BUG
();

640 
sb
 = 
	`tux_sb
(
ﬁd∑ge
->
m≠pög
->
ho°
->
i_sb
);

642 i‡(
ªt_√edf‹k
 =
RET_CAN_DIRTY
) {

644 
out
;

650 
√w∑ge
 = 
	`˛⁄e_∑ge
(
ﬁd∑ge
, 
sb
->
blocksize
);

651 i‡(
	`IS_ERR
(
√w∑ge
))

652 
out
;

661 
îr
 = 
	`tux3_ª∂a˚_∑ge_ˇche
(
ﬁd∑ge
, 
√w∑ge
);

663 
	`√w∑ge_add_Ãu
(
√w∑ge
);

674 
	`åa˚
("ﬁd∑gêcou¡ %u", 
	`∑ge_cou¡
(
ﬁd∑ge
));

675 
	`as£π
(
	`∑ge_cou¡
(
ﬁd∑ge
) >= 2);

676 
	`∑ge_ˇche_gë
(
ﬁd∑ge
);

677 
	`ﬁd∑ge_åy_ªmove_‰om_Ãu
(
ﬁd∑ge
);

683 
	`SëPageF‹ked
(
ﬁd∑ge
);

684 
	`u∆ock_∑ge
(
ﬁd∑ge
);

687 
	`f‹ked_buf„r_add
(
sb
, 
	`∑ge_buf„rs
(
ﬁd∑ge
));

689 
	`åa˚
("˛⁄edÖagê%p", 
√w∑ge
);

691 
out
:

692  
√w∑ge
;

693 
	}
}

703 
	$buf„rf‹k_to_övÆid©e
(
addªss_•a˚
 *
m≠pög
, 
∑ge
 *page)

705 if(
DEBUG_MODE_K
==1)

707 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

709 
sb
 *sb = 
	`tux_sb
(
m≠pög
->
ho°
->
i_sb
);

710 
dñè
 = 
	`tux3_öode_dñè
(
m≠pög
->
ho°
);

712 
	`as£π
(
	`PageLocked
(
∑ge
));

714 
	`√ed_f‹k
(
∑ge
, 
NULL
, 
dñè
)) {

715 
RET_NEED_FORK
:

718 
RET_ALREADY_DIRTY
:

719 
RET_CAN_DIRTY
:

722 
RET_FORKED
:

723 
	`åa˚_⁄
("m≠pög %p,Öagê%p", 
m≠pög
, 
∑ge
);

726 
	`BUG
();

731 
	`∑ge_ˇche_gë
(
∑ge
);

734 
	`tux3_dñëe_‰om_∑ge_ˇche
(
∑ge
);

745 
	`åa˚
("∑gêcou¡ %u", 
	`∑ge_cou¡
(
∑ge
));

746 
	`as£π
(
	`∑ge_cou¡
(
∑ge
) >= 2);

747 
	`∑ge_ˇche_gë
(
∑ge
);

748 
	`ﬁd∑ge_åy_ªmove_‰om_Ãu
(
∑ge
);

754 
	`SëPageF‹ked
(
∑ge
);

757 
	`f‹ked_buf„r_add
(
sb
, 
	`∑ge_buf„rs
(
∑ge
));

760 
	}
}

	@kernel/buffer_writeback.c

6 
	~"buf„r_wrôebacklib.c
"

12 
	$iowaô_öÊight_öc
(
iowaô
 *iowait)

14 if(
DEBUG_MODE_K
==1)

16 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

18 
	`©omic_öc
(&
iowaô
->
öÊight
);

19 
	}
}

21 
	$iowaô_öÊight_dec
(
iowaô
 *iowait)

23 if(
DEBUG_MODE_K
==1)

25 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

27 i‡(
	`©omic_dec_™d_ã°
(&
iowaô
->
öÊight
))

28 
	`com∂ëe
(&
iowaô
->
d⁄e
);

29 
	}
}

31 
	$tux3_iowaô_öô
(
iowaô
 *iowait)

33 if(
DEBUG_MODE_K
==1)

35 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

41 
	`öô_com∂ëi⁄
(&
iowaô
->
d⁄e
);

42 
	`©omic_£t
(&
iowaô
->
öÊight
, 1);

43 
	}
}

45 
	$tux3_iowaô_waô
(
iowaô
 *iowait)

47 if(
DEBUG_MODE_K
==1)

49 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

52 
	`iowaô_öÊight_dec
(
iowaô
);

53 
	`waô_f‹_com∂ëi⁄
(&
iowaô
->
d⁄e
);

54 
	}
}

60 
	#buf„rs_íåy
(
x
) \

61 
	`li°_íåy
(
x
, 
buf„r_hód
, 
b_assoc_buf„rs
)

	)

62 
	#MAX_BUFVEC_COUNT
 
UINT_MAX


	)

65 
	$bufvec_öô
(
bufvec
 *bufvec, 
addªss_•a˚
 *
m≠pög
,

66 
li°_hód
 *
hód
, 
tux3_üâr_d©a
 *
id©a
)

68 if(
DEBUG_MODE_K
==1)

70 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

72 
	`INIT_LIST_HEAD
(&
bufvec
->
c⁄tig
);

73 
bufvec
->
buf„rs
 = 
hód
;

74 
bufvec
->
c⁄tig_cou¡
 = 0;

75 
bufvec
->
id©a
 = idata;

76 
bufvec
->
m≠pög
 = mapping;

77 
bufvec
->
⁄_∑ge_idx
 = 0;

78 
bufvec
->
bio
 = 
NULL
;

79 
bufvec
->
bio_œ°buf
 = 
NULL
;

80 
	}
}

82 
	$bufvec_‰ì
(
bufvec
 *bufvec)

84 if(
DEBUG_MODE_K
==1)

86 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

89 
	`as£π
(!
bufvec
->
buf„rs
 || 
	`li°_em±y
(bufvec->buffers));

90 
	`as£π
(
	`li°_em±y
(&
bufvec
->
c⁄tig
));

91 
	`as£π
(
bufvec
->
bio
 =
NULL
);

92 
	}
}

94 
ölöe
 
	$bufvec_buf„r_move_to_c⁄tig
(
bufvec
 *bufvec,

95 
buf„r_hód
 *
buf„r
)

97 if(
DEBUG_MODE_K
==1)

99 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

108 
	`li°_move_èû
(&
buf„r
->
b_assoc_buf„rs
, &
bufvec
->
c⁄tig
);

109 
bufvec
->
c⁄tig_cou¡
++;

110 
	}
}

115 
	$bufvec_bio_add_buf„r
(
bufvec
 *bufvec,

116 
buf„r_hód
 *
√w
)

118 if(
DEBUG_MODE_K
==1)

120 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

122 
√w
->
b_¥iv©e
 = 
NULL
;

124 i‡(
bufvec
->
bio_œ°buf
)

125 
bufvec
->
bio_œ°buf
->
b_¥iv©e
 = 
√w
;

127 
bufvec
->
bio
->
bi_¥iv©e
 = 
√w
;

129 
bufvec
->
bio_œ°buf
 = 
√w
;

130 
	}
}

132 
buf„r_hód
 *
	$bufvec_bio_dñ_buf„r
(
bio
 *bio)

134 if(
DEBUG_MODE_K
==1)

136 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

138 
buf„r_hód
 *
buf„r
 = 
bio
->
bi_¥iv©e
;

140 i‡(
buf„r
) {

141 
bio
->
bi_¥iv©e
 = 
buf„r
->
b_¥iv©e
;

142 
buf„r
->
b_¥iv©e
 = 
NULL
;

145  
buf„r
;

146 
	}
}

148 
addªss_•a˚
 *
	$bufvec_bio_m≠pög
(
bio
 *bio)

150 if(
DEBUG_MODE_K
==1)

152 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

154 
buf„r_hód
 *
buf„r
 = 
bio
->
bi_¥iv©e
;

155 
	`as£π
(
buf„r
);

157  
buf„r
->
b_assoc_m≠
;

158 
	}
}

160 
bio
 *
bufvec_bio_Æloc
(
sb
 *sb, 
cou¡
,

161 
block_t
 
physiˇl
,

162 (*
íd_io
)(
bio
 *, ))

164 if(
DEBUG_MODE_K
==1)

166 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

168 
gÂ_t
 
gÂ_Êags
 = 
GFP_NOFS
;

169 
bio
 *bio;

171 
cou¡
 = 
	`mö_t
(, cou¡, 
	`bio_gë_ƒ_vecs
(
	`vfs_sb
(
sb
)->
s_bdev
));

173 
bio
 = 
	`bio_Æloc
(
gÂ_Êags
, 
cou¡
);

175 i‡(
bio
 =
NULL
 && (
cuºít
->
Êags
 & 
PF_MEMALLOC
)) {

176 !
bio
 && (
cou¡
 /= 2))

177 
bio
 = 
	`bio_Æloc
(
gÂ_Êags
, 
cou¡
);

179 
	`as£π
(
bio
);

181 
bio
->
bi_bdev
 = 
	`vfs_sb
(
sb
)->
s_bdev
;

182 
bio
->
bi_£˘‹
 = 
physiˇl
 << (
sb
->
blockbôs
 - 9);

183 
bio
->
bi_íd_io
 = 
íd_io
;

185  
bio
;

186 
	}
}

188 
	$bufvec_submô_bio
(
rw
, 
bufvec
 *bufvec)

190 if(
DEBUG_MODE_K
==1)

192 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

194 
sb
 *sb = 
	`tux_sb
(
	`bufvec_öode
(
bufvec
)->
i_sb
);

195 
bio
 *biÿ
bufvec
->bio;

197 
bufvec
->
bio
 = 
NULL
;

198 
bufvec
->
bio_œ°buf
 = 
NULL
;

200 
	`åa˚
("biÿ%p,Öhysiˇ»%Lu, cou¡ %u", 
bio
,

201 (
block_t
)
bio
->
bi_£˘‹
 >> (
sb
->
blockbôs
 - 9),

202 
bio
->
bi_size
 >> 
sb
->
blockbôs
);

204 
	`iowaô_öÊight_öc
(
sb
->
iowaô
);

205 
	`submô_bio
(
rw
, 
bio
);

206 
	}
}

216 
	$kìp_∑ge_dúty
(
bufvec
 *bufvec, 
∑ge
 *page)

218 if(
DEBUG_MODE_K
==1)

220 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

222 
buf„r_hód
 *
fú°
 = 
	`∑ge_buf„rs
(
∑ge
);

223 
öode
 *öodê
	`bufvec_öode
(
bufvec
);

225 i‡(
	`tux_öode
(
öode
)->
öum
 =
TUX_VOLMAP_INO
) {

226 
buf„r_hód
 *
tmp
 = 
fú°
;

227 
cou¡
 = 0;

229 i‡(
	`buf„r_dúty
(
tmp
)) {

230 
cou¡
++;

232 i‡(
cou¡
 > 
bufvec
->
⁄_∑ge_idx
)

235 
tmp
 =Åmp->
b_this_∑ge
;

236 } 
tmp
 !
fú°
);

240 
	}
}

244 
	$bufvec_¥ï¨e_™d_lock_∑ge
(
bufvec
 *bufvec, 
∑ge
 *page)

246 if(
DEBUG_MODE_K
==1)

248 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

250 
tux3_üâr_d©a
 *
id©a
 = 
bufvec
->idata;

251 
pgoff_t
 
œ°_ödex
;

252 
off£t
;

253 
ﬁd_Êag
, 
ﬁd_wrôeback
;

255 
	`lock_∑ge
(
∑ge
);

256 
	`as£π
(
	`PageDúty
(
∑ge
));

257 
	`as£π
(!
	`PageWrôeback
(
∑ge
));

267 
ﬁd_wrôeback
 = 
	`Te°SëPageWrôeback
(
∑ge
);

268 
	`as£π
(!
ﬁd_wrôeback
);

281 i‡(!
	`kìp_∑ge_dúty
(
bufvec
, 
∑ge
)) {

282 
ﬁd_Êag
 = 
	`tux3_˛ór_∑ge_dúty_f‹_io
(
∑ge
);

283 
	`as£π
(
ﬁd_Êag
);

293 
	`__tux3_ã°_£t_∑ge_wrôeback
(
∑ge
, 
ﬁd_wrôeback
);

304 
off£t
 = 
id©a
->
i_size
 & (
PAGE_CACHE_SIZE
 - 1);

305 
œ°_ödex
 = 
id©a
->
i_size
 >> 
PAGE_CACHE_SHIFT
;

306 i‡(
off£t
 && 
œ°_ödex
 =
∑ge
->
ödex
)

307 
	`zîo_u£r_£gmít
(
∑ge
, 
off£t
, 
PAGE_CACHE_SIZE
);

308 
	}
}

310 
	$bufvec_¥ï¨e_™d_u∆ock_∑ge
(
∑ge
 *page)

312 if(
DEBUG_MODE_K
==1)

314 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

316 
	`u∆ock_∑ge
(
∑ge
);

317 
	}
}

320 
	$bufvec_∑ge_íd_io
(
∑ge
 *∑ge, 
u±od©e
, 
quõt
)

322 if(
DEBUG_MODE_K
==1)

324 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

326 
	`íd_∑ge_wrôeback
(
∑ge
);

327 
	`tux3_accout_˛ór_wrôeback
(
∑ge
);

328 
	}
}

331 
	$bufvec_buf„r_íd_io
(
buf„r_hód
 *
buf„r
, 
u±od©e
,

332 
quõt
)

334 if(
DEBUG_MODE_K
==1)

336 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

338 
b
[
BDEVNAME_SIZE
];

340 i‡(
u±od©e
)

341 
	`£t_buf„r_u±od©e
(
buf„r
);

343 i‡(!
quõt
) {

344 
	`¥ötk
(
KERN_WARNING
 "lostÖage write dueÅo "

346 
	`bdev«me
(
buf„r
->
b_bdev
, 
b
));

348 
	`£t_buf„r_wrôe_io_îr‹
(
buf„r
);

349 
	`˛ór_buf„r_u±od©e
(
buf„r
);

351 
	}
}

354 
	$bufvec_is_mu…ùÀ_ønges
(
bufvec
 *bufvec)

356 if(
DEBUG_MODE_K
==1)

358 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

360 
block_t
 
logiˇl
, 
physiˇl
;

361 
i
;

363 
logiˇl
 = 
	`bufödex
(
bufvec
->
⁄_∑ge
[0].
buf„r
);

364 
physiˇl
 = 
bufvec
->
⁄_∑ge
[0].
block
;

365 
i
 = 1; i < 
bufvec
->
⁄_∑ge_idx
; i++) {

366 i‡(
logiˇl
 + 
i
 !
	`bufödex
(
bufvec
->
⁄_∑ge
[i].
buf„r
) ||

367 
physiˇl
 + 
i
 !
bufvec
->
⁄_∑ge
[i].
block
) {

373 
	}
}

380 
	$bufvec_íd_io_mu…ùÀ
(
bio
 *bio, 
îr
)

382 if(
DEBUG_MODE_K
==1)

384 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

386 c⁄° 
u±od©e
 = 
	`ã°_bô
(
BIO_UPTODATE
, &
bio
->
bi_Êags
);

387 c⁄° 
quõt
 = 
	`ã°_bô
(
BIO_QUIET
, &
bio
->
bi_Êags
);

388 
addªss_•a˚
 *
m≠pög
;

389 
∑ge
 *page;

390 
buf„r_hód
 *
buf„r
, *
fú°
, *
tmp
;

391 
Êags
;

393 
	`åa˚
("biÿ%p,Éº %d", 
bio
, 
îr
);

396 
m≠pög
 = 
	`bufvec_bio_m≠pög
(
bio
);

398 
buf„r
 = 
	`bufvec_bio_dñ_buf„r
(
bio
);

399 
∑ge
 = 
buf„r
->
b_∑ge
;

400 
fú°
 = 
	`∑ge_buf„rs
(
∑ge
);

402 
	`åa˚
("buf„∏%p", 
buf„r
);

403 
	`tux3_˛ór_buf„r_dúty_f‹_io_hack
(
buf„r
);

404 
	`bufvec_buf„r_íd_io
(
buf„r
, 
u±od©e
, 
quõt
);

405 
	`put_bh
(
buf„r
);

407 
	`iowaô_öÊight_dec
(
	`tux_sb
(
m≠pög
->
ho°
->
i_sb
)->
iowaô
);

408 
	`bio_put
(
bio
);

411 
	`loˇl_úq_ßve
(
Êags
);

412 
	`bô_•ö_lock
(
BH_U±od©e_Lock
, &
fú°
->
b_°©e
);

414 
	`˛ór_buf„r_async_wrôe
(
buf„r
);

415 
tmp
 = 
buf„r
->
b_this_∑ge
;

416 
tmp
 !
buf„r
) {

417 i‡(
	`buf„r_async_wrôe
(
tmp
))

418 
°ûl_busy
;

419 
tmp
 =Åmp->
b_this_∑ge
;

421 
	`bô_•ö_u∆ock
(
BH_U±od©e_Lock
, &
fú°
->
b_°©e
);

422 
	`loˇl_úq_ª°‹e
(
Êags
);

424 
	`bufvec_∑ge_íd_io
(
∑ge
, 
u±od©e
, 
quõt
);

427 
°ûl_busy
:

428 
	`bô_•ö_u∆ock
(
BH_U±od©e_Lock
, &
fú°
->
b_°©e
);

429 
	`loˇl_úq_ª°‹e
(
Êags
);

430 
	}
}

442 
	$bufvec_bio_add_mu…ùÀ
(
rw
, 
bufvec
 *bufvec)

444 if(
DEBUG_MODE_K
==1)

446 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

449 
sb
 *sb = 
	`tux_sb
(
	`bufvec_öode
(
bufvec
)->
i_sb
);

450 
∑ge
 *page;

451 
i
;

454 i‡(
bufvec
->
bio
)

455 
	`bufvec_submô_bio
(
rw
, 
bufvec
);

457 
∑ge
 = 
bufvec
->
⁄_∑ge
[0].
buf„r
->
b_∑ge
;

460 
	`bufvec_¥ï¨e_™d_lock_∑ge
(
bufvec
, 
∑ge
);

462 
i
 = 0; i < 
bufvec
->
⁄_∑ge_idx
; i++) {

463 
buf„r_hód
 *
buf„r
 = 
bufvec
->
⁄_∑ge
[
i
].buffer;

464 
block_t
 
physiˇl
 = 
bufvec
->
⁄_∑ge
[
i
].
block
;

465 
	`gë_bh
(
buf„r
);

466 
	`tux3_˛ór_buf„r_dúty_f‹_io
(
buf„r
, 
sb
, 
physiˇl
);

470 
	`£t_buf„r_async_wrôe
(
buf„r
);

473 
i
 = 0; i < 
bufvec
->
⁄_∑ge_idx
; i++) {

474 
buf„r_hód
 *
buf„r
 = 
bufvec
->
⁄_∑ge
[
i
].buffer;

475 
block_t
 
physiˇl
 = 
bufvec
->
⁄_∑ge
[
i
].
block
;

476 
Àngth
 = 
	`bufsize
(
buf„r
);

477 
off£t
 = 
	`bh_off£t
(
buf„r
);

479 
bufvec
->
bio
 = 
	`bufvec_bio_Æloc
(
sb
, 1, 
physiˇl
,

480 
bufvec_íd_io_mu…ùÀ
);

482 
	`åa˚
("page %p, index %Lu,Öhysical %Lu,Üength %u, offset %u",

483 
∑ge
, 
	`bufödex
(
bufvec
->
⁄_∑ge
[
i
].
buf„r
), 
physiˇl
,

484 
Àngth
, 
off£t
);

485 i‡(!
	`bio_add_∑ge
(
bufvec
->
bio
, 
∑ge
, 
Àngth
, 
off£t
))

486 
	`as£π
(0);

488 
	`bufvec_bio_add_buf„r
(
bufvec
, 
buf„r
);

490 
	`bufvec_submô_bio
(
rw
, 
bufvec
);

492 
	`bufvec_¥ï¨e_™d_u∆ock_∑ge
(
∑ge
);

494 
bufvec
->
⁄_∑ge_idx
 = 0;

495 
	}
}

500 
	$bufvec_íd_io
(
bio
 *bio, 
îr
)

502 if(
DEBUG_MODE_K
==1)

504 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

506 c⁄° 
u±od©e
 = 
	`ã°_bô
(
BIO_UPTODATE
, &
bio
->
bi_Êags
);

507 c⁄° 
quõt
 = 
	`ã°_bô
(
BIO_QUIET
, &
bio
->
bi_Êags
);

508 
addªss_•a˚
 *
m≠pög
;

509 
∑ge
 *∑ge, *
œ°_∑ge
;

511 
	`åa˚
("biÿ%p,Éº %d", 
bio
, 
îr
);

514 
m≠pög
 = 
	`bufvec_bio_m≠pög
(
bio
);

517 
œ°_∑ge
 = 
NULL
;

519 
buf„r_hód
 *
buf„r
 = 
	`bufvec_bio_dñ_buf„r
(
bio
);

520 i‡(!
buf„r
)

523 
∑ge
 = 
buf„r
->
b_∑ge
;

525 
	`åa˚
("buf„∏%p", 
buf„r
);

526 
	`tux3_˛ór_buf„r_dúty_f‹_io_hack
(
buf„r
);

527 
	`put_bh
(
buf„r
);

529 i‡(
∑ge
 !
œ°_∑ge
) {

530 
	`bufvec_∑ge_íd_io
(
∑ge
, 
u±od©e
, 
quõt
);

531 
œ°_∑ge
 = 
∑ge
;

535 
	`iowaô_öÊight_dec
(
	`tux_sb
(
m≠pög
->
ho°
->
i_sb
)->
iowaô
);

536 
	`bio_put
(
bio
);

537 
	}
}

546 
	$bufvec_bio_add_∑ge
(
rw
, 
bufvec
 *bufvec)

548 if(
DEBUG_MODE_K
==1)

550 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

553 
sb
 *sb = 
	`tux_sb
(
	`bufvec_öode
(
bufvec
)->
i_sb
);

554 
∑ge
 *page;

555 
block_t
 
physiˇl
;

556 
i
, 
Àngth
, 
off£t
;

558 
∑ge
 = 
bufvec
->
⁄_∑ge
[0].
buf„r
->
b_∑ge
;

559 
physiˇl
 = 
bufvec
->
⁄_∑ge
[0].
block
;

560 
off£t
 = 
	`bh_off£t
(
bufvec
->
⁄_∑ge
[0].
buf„r
);

561 
Àngth
 = 
bufvec
->
⁄_∑ge_idx
 << 
sb
->
blockbôs
;

563 
	`åa˚
("page %p, index %Lu,Öhysical %Lu,Üength %u, offset %u",

564 
∑ge
, 
	`bufödex
(
bufvec
->
⁄_∑ge
[0].
buf„r
), 
physiˇl
,

565 
Àngth
, 
off£t
);

568 i‡(!
bufvec
->
bio
 || !
	`bio_add_∑ge
(bufvec->bio, 
∑ge
, 
Àngth
, 
off£t
)) {

570 i‡(
bufvec
->
bio
)

571 
	`bufvec_submô_bio
(
rw
, 
bufvec
);

573 
bufvec
->
bio
 =

574 
	`bufvec_bio_Æloc
(
sb
, 
	`bufvec_c⁄tig_cou¡
(
bufvec
) + 1,

575 
physiˇl
, 
bufvec_íd_io
);

577 i‡(!
	`bio_add_∑ge
(
bufvec
->
bio
, 
∑ge
, 
Àngth
, 
off£t
))

578 
	`as£π
(0);

582 
	`bufvec_¥ï¨e_™d_lock_∑ge
(
bufvec
, 
∑ge
);

583 
i
 = 0; i < 
bufvec
->
⁄_∑ge_idx
; i++) {

584 
buf„r_hód
 *
buf„r
 = 
bufvec
->
⁄_∑ge
[
i
].buffer;

585 
block_t
 
physiˇl
 = 
bufvec
->
⁄_∑ge
[
i
].
block
;

586 
	`gë_bh
(
buf„r
);

587 
	`tux3_˛ór_buf„r_dúty_f‹_io
(
buf„r
, 
sb
, 
physiˇl
);

588 
	`bufvec_bio_add_buf„r
(
bufvec
, 
buf„r
);

590 
	`bufvec_¥ï¨e_™d_u∆ock_∑ge
(
∑ge
);

592 
bufvec
->
⁄_∑ge_idx
 = 0;

593 
	}
}

596 
	$bufvec_bio_is_c⁄tiguous
(
bufvec
 *bufvec, 
block_t
 
physiˇl
)

598 if(
DEBUG_MODE_K
==1)

600 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

602 
sb
 *sb = 
	`tux_sb
(
	`bufvec_öode
(
bufvec
)->
i_sb
);

603 
bio
 *biÿ
bufvec
->bio;

604 
block_t
 
√xt
;

606 
√xt
 = (
block_t
)
bio
->
bi_£˘‹
 + (bio->
bi_size
 >> 9);

607  
√xt
 =(
physiˇl
 << (
sb
->
blockbôs
 - 9));

608 
	}
}

611 
∑ge
 *
	$bufvec_√xt_buf„r_∑ge
(
bufvec
 *bufvec)

613 if(
DEBUG_MODE_K
==1)

615 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

617 i‡(!
	`li°_em±y
(&
bufvec
->
c⁄tig
))

618  
	`bufvec_c⁄tig_buf
(
bufvec
)->
b_∑ge
;

620 i‡(
bufvec
->
buf„rs
 && !
	`li°_em±y
(bufvec->buffers))

621  
	`buf„rs_íåy
(
bufvec
->
buf„rs
->
√xt
)->
b_∑ge
;

623  
NULL
;

624 
	}
}

645 
	$bufvec_io
(
rw
, 
bufvec
 *bufvec, 
block_t
 
physiˇl
, 
cou¡
)

647 if(
DEBUG_MODE_K
==1)

649 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

651 
i
;

652 
√ed_check
 = 0;

654 
	`åa˚
("index %Lu, contig_count %u,Öhysical %Lu, count %u",

655 
	`bufvec_c⁄tig_ödex
(
bufvec
), 
	`bufvec_c⁄tig_cou¡
(bufvec),

656 
physiˇl
, 
cou¡
);

658 
	`as£π
(
rw
 & 
WRITE
);

659 
	`as£π
(
	`bufvec_c⁄tig_cou¡
(
bufvec
Ë>
cou¡
);

661 i‡(
bufvec
->
⁄_∑ge_idx
) {

666 
√ed_check
 = 1;

667 } i‡(
bufvec
->
bio
 && !
	`bufvec_bio_is_c⁄tiguous
(bufvec, 
physiˇl
)) {

672 
	`bufvec_submô_bio
(
rw
, 
bufvec
);

676 
i
 = 0; i < 
cou¡
; i++) {

677 
buf„r_hód
 *
buf„r
 = 
	`bufvec_c⁄tig_buf
(
bufvec
);

680 
bufvec
->
c⁄tig_cou¡
--;

681 
	`li°_dñ_öô
(&
buf„r
->
b_assoc_buf„rs
);

684 
bufvec
->
⁄_∑ge
[bufvec->
⁄_∑ge_idx
].
buf„r
 = buffer;

685 
bufvec
->
⁄_∑ge
[bufvec->
⁄_∑ge_idx
].
block
 = 
physiˇl
 + 
i
;

686 
bufvec
->
⁄_∑ge_idx
++;

689 i‡(
buf„r
->
b_∑ge
 !
	`bufvec_√xt_buf„r_∑ge
(
bufvec
)) {

690 
mu…ùÀ
 = 0;

691 i‡(
√ed_check
) {

692 
√ed_check
 = 0;

693 
mu…ùÀ
 = 
	`bufvec_is_mu…ùÀ_ønges
(
bufvec
);

696 i‡(
mu…ùÀ
)

697 
	`bufvec_bio_add_mu…ùÀ
(
rw
, 
bufvec
);

699 
	`bufvec_bio_add_∑ge
(
rw
, 
bufvec
);

704 i‡(
bufvec
->
bio
 && !
	`bufvec_√xt_buf„r_∑ge
(bufvec))

705 
	`bufvec_submô_bio
(
rw
, 
bufvec
);

708 
	}
}

710 
	$bufvec_ˇn˚l_™d_u∆ock_∑ge
(
∑ge
 *page,

711 c⁄° 
pgoff_t
 
outside_ödex
)

713 if(
DEBUG_MODE_K
==1)

715 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

723 i‡(
∑ge
->
ödex
 < 
outside_ödex
)

724 
	`tux3_åy_ˇn˚l_dúty_∑ge
(
∑ge
);

726 
	`ˇn˚l_dúty_∑ge
(
∑ge
, 
PAGE_CACHE_SIZE
);

728 
	`u∆ock_∑ge
(
∑ge
);

729 
	}
}

732 
	$bufvec_ˇn˚l_dúty_outside
(
bufvec
 *bufvec)

734 if(
DEBUG_MODE_K
==1)

736 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

738 
sb
 *sb = 
	`tux_sb
(
	`bufvec_öode
(
bufvec
)->
i_sb
);

739 
tux3_üâr_d©a
 *
id©a
 = 
bufvec
->idata;

740 
∑ge
 *∑ge, *
¥ev_∑ge
;

741 
buf„r_hód
 *
buf„r
;

742 
pgoff_t
 
outside_ödex
;

744 
outside_ödex
 = (
id©a
->
i_size
+(
PAGE_CACHE_SIZE
-1)Ë>> 
PAGE_CACHE_SHIFT
;

746 
buf„r
 = 
	`buf„rs_íåy
(
bufvec
->
buf„rs
->
√xt
);

747 
∑ge
 = 
¥ev_∑ge
 = 
buf„r
->
b_∑ge
;

748 
	`lock_∑ge
(
∑ge
);

750 
	`åa˚
("cancel dirty: buffer %p, block %Lu",

751 
buf„r
, 
	`bufödex
(buffer));

754 
	`li°_dñ_öô
(&
buf„r
->
b_assoc_buf„rs
);

755 
	`tux3_˛ór_buf„r_dúty_f‹_io
(
buf„r
, 
sb
, 0);

756 
	`tux3_˛ór_buf„r_dúty_f‹_io_hack
(
buf„r
);

758 i‡(
	`li°_em±y
(
bufvec
->
buf„rs
))

761 
buf„r
 = 
	`buf„rs_íåy
(
bufvec
->
buf„rs
->
√xt
);

762 i‡(
buf„r
->
b_∑ge
 !
¥ev_∑ge
) {

763 
	`bufvec_ˇn˚l_™d_u∆ock_∑ge
(
∑ge
, 
outside_ödex
);

765 
¥ev_∑ge
 = 
∑ge
;

766 
∑ge
 = 
buf„r
->
b_∑ge
;

767 
	`lock_∑ge
(
∑ge
);

770 
	`bufvec_ˇn˚l_™d_u∆ock_∑ge
(
∑ge
, 
outside_ödex
);

771 
	}
}

780 
	$bufvec_c⁄tig_add
(
bufvec
 *bufvec, 
buf„r_hód
 *
buf„r
)

782 if(
DEBUG_MODE_K
==1)

784 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

786 
c⁄tig_cou¡
 = 
	`bufvec_c⁄tig_cou¡
(
bufvec
);

788 i‡(
c⁄tig_cou¡
) {

789 
block_t
 
œ°
;

792 i‡(
	`bufvec_c⁄tig_cou¡
(
bufvec
Ë=
MAX_BUFVEC_COUNT
)

796 
œ°
 = 
	`bufvec_c⁄tig_œ°_ödex
(
bufvec
);

797 i‡(
œ°
 !
	`bufödex
(
buf„r
) - 1)

801 
	`bufvec_buf„r_move_to_c⁄tig
(
bufvec
, 
buf„r
);

804 
	}
}

813 
	$bufvec_c⁄tig_cﬁÀ˘
(
bufvec
 *bufvec)

815 if(
DEBUG_MODE_K
==1)

817 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

819 
sb
 *sb = 
	`tux_sb
(
	`bufvec_öode
(
bufvec
)->
i_sb
);

820 
tux3_üâr_d©a
 *
id©a
 = 
bufvec
->idata;

821 
buf„r_hód
 *
buf„r
;

822 
block_t
 
œ°_ödex
, 
√xt_ödex
, 
outside_block
;

825 i‡(
	`bufvec_c⁄tig_cou¡
(
bufvec
))

827 
	`as£π
(!
	`li°_em±y
(
bufvec
->
buf„rs
));

829 
outside_block
 = (
id©a
->
i_size
 + 
sb
->
blockmask
Ë>> sb->
blockbôs
;

831 
buf„r
 = 
	`buf„rs_íåy
(
bufvec
->
buf„rs
->
√xt
);

832 
√xt_ödex
 = 
	`bufödex
(
buf„r
);

834 i‡(
√xt_ödex
 >
outside_block
) {

835 
	`bufvec_ˇn˚l_dúty_outside
(
bufvec
);

841 i‡(
	`bufvec_c⁄tig_cou¡
(
bufvec
Ë=
MAX_BUFVEC_COUNT
)

843 
	`bufvec_buf„r_move_to_c⁄tig
(
bufvec
, 
buf„r
);

844 
	`åa˚
("buf„∏%p", 
buf„r
);

846 i‡(
	`li°_em±y
(
bufvec
->
buf„rs
))

849 
buf„r
 = 
	`buf„rs_íåy
(
bufvec
->
buf„rs
->
√xt
);

850 
œ°_ödex
 = 
√xt_ödex
;

851 
√xt_ödex
 = 
	`bufödex
(
buf„r
);

854 i‡(
√xt_ödex
 >
outside_block
) {

855 
	`bufvec_ˇn˚l_dúty_outside
(
bufvec
);

858 } 
œ°_ödex
 =
√xt_ödex
 - 1);

860  !!
	`bufvec_c⁄tig_cou¡
(
bufvec
);

861 
	}
}

863 
	$buf„r_ödex_cmp
(*
¥iv
, 
li°_hód
 *
a
,

864 
li°_hód
 *
b
)

866 if(
DEBUG_MODE_K
==1)

868 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

870 
buf„r_hód
 *
buf_a
, *
buf_b
;

872 
buf_a
 = 
	`li°_íåy
(
a
, 
buf„r_hód
, 
b_assoc_buf„rs
);

873 
buf_b
 = 
	`li°_íåy
(
b
, 
buf„r_hód
, 
b_assoc_buf„rs
);

883 i‡(
buf_a
->
b_∑ge
->
ödex
 < 
buf_b
->b_page->index)

885 i‡(
buf_a
->
b_∑ge
->
ödex
 > 
buf_b
->b_page->index)

889 i‡(
buf_a
->
b_d©a
 < 
buf_b
->b_data)

891 i‡(
buf_a
->
b_d©a
 > 
buf_b
->b_data)

896 
	}
}

901 
	$Êush_li°
(
addªss_•a˚
 *
m≠pög
, 
tux3_üâr_d©a
 *
id©a
,

902 
li°_hód
 *
hód
)

904 if(
DEBUG_MODE_K
==1)

906 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

908 
öode
 *öodê
m≠pög
->
ho°
;

909 
bufvec
 bufvec;

910 
îr
 = 0;

914 i‡(
	`li°_em±y
(
hód
))

917 
	`bufvec_öô
(&
bufvec
, 
m≠pög
, 
hód
, 
id©a
);

920 
	`li°_s‹t
(
NULL
, 
hód
, 
buf„r_ödex_cmp
);

922 
	`bufvec_√xt_buf„r_∑ge
(&
bufvec
)) {

924 i‡(
	`bufvec_c⁄tig_cﬁÀ˘
(&
bufvec
)) {

926 
îr
 = 
	`tux_öode
(
öode
)->
	`io
(
WRITE
, &
bufvec
);

927 i‡(
îr
)

932 
	`bufvec_‰ì
(&
bufvec
);

934  
îr
;

935 
	}
}

940 
	$__tux3_vﬁm≠_io
(
rw
, 
bufvec
 *bufvec, 
block_t
 
physiˇl
,

941 
cou¡
)

943 if(
DEBUG_MODE_K
==1)

945 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

947  
	`blockio_vec
(
rw
, 
bufvec
, 
physiˇl
, 
cou¡
);

948 
	}
}

950 
	$tux3_vﬁm≠_io
(
rw
, 
bufvec
 *bufvec)

952 if(
DEBUG_MODE_K
==1)

954 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

956 
block_t
 
physiˇl
 = 
	`bufvec_c⁄tig_ödex
(
bufvec
);

957 
cou¡
 = 
	`bufvec_c⁄tig_cou¡
(
bufvec
);

960 
	`as£π
(
rw
 & 
WRITE
);

962  
	`__tux3_vﬁm≠_io
(
rw
, 
bufvec
, 
physiˇl
, 
cou¡
);

963 
	}
}

	@kernel/buffer_writebacklib.c

8 
	~<löux/rm≠.h
>

24 
	$tux3_˛ór_∑ge_dúty_f‹_io
(
∑ge
 *page)

26 if(
DEBUG_MODE_K
==1)

28 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

30 
addªss_•a˚
 *
m≠pög
 = 
∑ge
->mapping;

32 
	`BUG_ON
(!
	`PageLocked
(
∑ge
));

34 i‡(
m≠pög
 && 
	`m≠pög_ˇp_accou¡_dúty
(mapping)) {

61 i‡(!
	`PageF‹ked
(
∑ge
Ë&& 
	`∑ge_mk˛ón
(page))

62 
	`£t_∑ge_dúty
(
∑ge
);

73 i‡(
	`Te°CÀ¨PageDúty
(
∑ge
)) {

74 
	`dec_z⁄e_∑ge_°©e
(
∑ge
, 
NR_FILE_DIRTY
);

75 
	`dec_bdi_°©
(
m≠pög
->
backög_dev_öfo
,

76 
BDI_RECLAIMABLE
);

81  
	`Te°CÀ¨PageDúty
(
∑ge
);

82 
	}
}

84 
	$__tux3_ã°_£t_∑ge_wrôeback
(
∑ge
 *∑ge, 
ﬁd_wrôeback
)

86 if(
DEBUG_MODE_K
==1)

88 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

90 
addªss_•a˚
 *
m≠pög
 = 
∑ge
->mapping;

92 i‡(
m≠pög
) {

93 
backög_dev_öfo
 *
bdi
 = 
m≠pög
->backing_dev_info;

94 
Êags
;

96 
	`•ö_lock_úqßve
(&
m≠pög
->
åì_lock
, 
Êags
);

97 i‡(!
ﬁd_wrôeback
) {

99 i‡(!
	`PageF‹ked
(
∑ge
))

100 
	`ødix_åì_èg_£t
(&
m≠pög
->
∑ge_åì
,

101 
	`∑ge_ödex
(
∑ge
),

102 
PAGECACHE_TAG_WRITEBACK
);

103 i‡(
	`bdi_ˇp_accou¡_wrôeback
(
bdi
))

104 
	`__öc_bdi_°©
(
bdi
, 
BDI_WRITEBACK
);

107 i‡(!
	`PageDúty
(
∑ge
Ë&& !
	`PageF‹ked
(page))

108 
	`ødix_åì_èg_˛ór
(&
m≠pög
->
∑ge_åì
,

109 
	`∑ge_ödex
(
∑ge
),

110 
PAGECACHE_TAG_DIRTY
);

111 
	`ødix_åì_èg_˛ór
(&
m≠pög
->
∑ge_åì
,

112 
	`∑ge_ödex
(
∑ge
),

113 
PAGECACHE_TAG_TOWRITE
);

114 
	`•ö_u∆ock_úqª°‹e
(&
m≠pög
->
åì_lock
, 
Êags
);

116 i‡(!
ﬁd_wrôeback
) {

117 
	`accou¡_∑ge_wrôeback
(
∑ge
);

118 
	`tux3_accout_£t_wrôeback
(
∑ge
);

120 
	}
}

	@kernel/commit.c

7 
	~"tux3.h
"

8 #ifde‡
__KERNEL__


9 
	~<löux/kthªad.h
>

10 
	~<löux/‰ìzî.h
>

13 #i‚de‡
åa˚


14 
	#åa˚
 
åa˚_⁄


	)

17 
__dñè_å™sôi⁄
(
sb
 *sb, 
dñè_ªf
 *delta_ref);

18 
scheduÀ_Êush_dñè
(
sb
 *sb);

27 
	#ALLOW_FRONTEND_MODIFY


	)

30 
	$öô_sb
(
sb
 *sb)

32 if(
DEBUG_MODE_K
==1)

34 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

36 
i
;

39 
i
 = 0; i < 
	`ARRAY_SIZE
(
sb
->
dñè_ªfs
); i++)

40 
	`©omic_£t
(&
sb
->
dñè_ªfs
[0].
ªfcou¡
, 0);

42 #i‡
TUX3_FLUSHER
 =
TUX3_FLUSHER_SYNC


43 
	`öô_rw£m
(&
sb
->
dñè_lock
);

45 
	`öô_waôqueue_hód
(&
sb
->
dñè_evít_wq
);

46 
	`INIT_LIST_HEAD
(&
sb
->
‹ph™_add
);

47 
	`INIT_LIST_HEAD
(&
sb
->
‹ph™_dñ
);

48 
	`°ash_öô
(&
sb
->
de‰ì
);

49 
	`°ash_öô
(&
sb
->
deunify
);

50 
	`INIT_LIST_HEAD
(&
sb
->
unify_buf„rs
);

52 
	`INIT_LIST_HEAD
(&
sb
->
Æloc_öodes
);

53 
	`•ö_lock_öô
(&
sb
->
f‹ked_buf„rs_lock
);

54 
	`öô_lök_cúcuœr
(&
sb
->
f‹ked_buf„rs
);

55 
	`•ö_lock_öô
(&
sb
->
dúty_öodes_lock
);

58 
i
 = 0; i < 
	`ARRAY_SIZE
(
sb
->
s_ddc
); i++)

59 
	`INIT_LIST_HEAD
(&
sb
->
s_ddc
[
i
].
dúty_öodes
);

60 
	}
}

62 
	$£tup_roŸs
(
sb
 *sb, 
disksu≥r
 *
su≥r
)

64 if(
DEBUG_MODE_K
==1)

66 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

68 
u64
 
úoŸ_vÆ
 = 
	`be64_to_˝u
(
su≥r
->
úoŸ
);

69 
u64
 
‹oŸ_vÆ
 = 
	`be64_to_˝u
(
sb
->
su≥r
.
‹oŸ
);

70 
	`öô_båì
(
	`ôªe_båì
(
sb
), sb, 
	`u≈ack_roŸ
(
úoŸ_vÆ
), &
ôªe_›s
);

71 
	`öô_båì
(
	`Ÿªe_båì
(
sb
), sb, 
	`u≈ack_roŸ
(
‹oŸ_vÆ
), &
Ÿªe_›s
);

72 
	}
}

74 
loff_t
 
	$ˇlc_maxbyãs
(
loff_t
 
blocksize
)

76 if(
DEBUG_MODE_K
==1)

78 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

80  
	`mö_t
(
loff_t
, 
blocksize
 << 
MAX_BLOCKS_BITS
, 
MAX_LFS_FILESIZE
);

81 
	}
}

84 
	$__£tup_sb
(
sb
 *sb, 
disksu≥r
 *
su≥r
)

86 if(
DEBUG_MODE_K
==1)

88 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

90 
sb
->
√xt_dñè
 = 
TUX3_INIT_DELTA
;

91 
sb
->
unify
 = 
TUX3_INIT_DELTA
;

92 
sb
->
m¨shÆ_dñè
 = 
TUX3_INIT_DELTA
 - 1;

93 
sb
->
commôãd_dñè
 = 
TUX3_INIT_DELTA
 - 1;

96 
	`__dñè_å™sôi⁄
(
sb
, &sb->
dñè_ªfs
[0]);

98 
sb
->
blockbôs
 = 
	`be16_to_˝u
(
su≥r
->blockbits);

99 
sb
->
vﬁblocks
 = 
	`be64_to_˝u
(
su≥r
->volblocks);

100 
sb
->
vîsi⁄
 = 0;

102 
sb
->
blocksize
 = 1 << sb->
blockbôs
;

103 
sb
->
blockmask
 = (1 << sb->
blockbôs
) - 1;

104 
sb
->
íåõs_≥r_node
 = 
	`ˇlc_íåõs_≥r_node
(sb->
blocksize
);

106 
	`©abÀ_öô_ba£
(
sb
);

109 
	`vfs_sb
(
sb
)->
s_maxbyãs
 = 
	`ˇlc_maxbyãs
(sb->
blocksize
);

112 
sb
->
‰ìöodes
 = 
MAX_INODES
 - 
	`be64_to_˝u
(
su≥r
->
u£döodes
);

113 
sb
->
‰ìblocks
 = sb->
vﬁblocks
;

114 
sb
->
√xtblock
 = 
	`be64_to_˝u
(
su≥r
->nextblock);

115 
sb
->
√xtöum
 = 
TUX_NORMAL_INO
;

116 
sb
->
©omdi˘size
 = 
	`be64_to_˝u
(
su≥r
->atomdictsize);

117 
sb
->
©omgí
 = 
	`be32_to_˝u
(
su≥r
->atomgen);

118 
sb
->
‰ì©om
 = 
	`be32_to_˝u
(
su≥r
->freeatom);

120 
	`åa˚
("blocksize %u, blockbits %u, blockmask %08x",

121 
sb
->
blocksize
, sb->
blockbôs
, sb->
blockmask
);

122 
	`åa˚
("volblocks %Lu, freeblocks %Lu, freeinodes %Lu,Çextblock %Lu",

123 
sb
->
vﬁblocks
, sb->
‰ìblocks
, sb->
‰ìöodes
, sb->
√xtblock
);

124 
	`åa˚
("atom_dictsize %Lu, freeatom %u,átomgen %u",

125 (
s64
)
sb
->
©omdi˘size
, sb->
‰ì©om
, sb->
©omgí
);

126 
	`åa˚
("logchain %Lu,Üogcount %u",

127 
	`be64_to_˝u
(
su≥r
->
logchaö
), 
	`be32_to_˝u
(su≥r->
logcou¡
));

129 
	`£tup_roŸs
(
sb
, 
su≥r
);

130 
	}
}

133 
	$£tup_sb
(
sb
 *sb, 
disksu≥r
 *
su≥r
)

135 if(
DEBUG_MODE_K
==1)

137 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

139 
	`öô_sb
(
sb
);

140 
	`__£tup_sb
(
sb
, 
su≥r
);

141 
	}
}

144 
	$lﬂd_sb
(
sb
 *sb)

146 if(
DEBUG_MODE_K
==1)

148 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

150 
disksu≥r
 *
su≥r
 = &
sb
->super;

151 
îr
;

154 
	`öô_sb
(
sb
);

156 
îr
 = 
	`devio
(
READ
, 
	`sb_dev
(
sb
), 
SB_LOC
, 
su≥r
, 
SB_LEN
);

157 i‡(
îr
)

158  
îr
;

159 i‡(
	`memcmp
(
su≥r
->
magic
, 
TUX3_MAGIC_STR
, (super->magic)))

160  -
EINVAL
;

162 
	`__£tup_sb
(
sb
, 
su≥r
);

165 
	}
}

167 
	$ßve_sb
(
sb
 *sb)

169 if(
DEBUG_MODE_K
==1)

171 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

173 
disksu≥r
 *
su≥r
 = &
sb
->super;

175 
su≥r
->
blockbôs
 = 
	`˝u_to_be16
(
sb
->blockbits);

176 
su≥r
->
vﬁblocks
 = 
	`˝u_to_be64
(
sb
->volblocks);

179 
su≥r
->
úoŸ
 = 
	`˝u_to_be64
(
	`∑ck_roŸ
(&
	`ôªe_båì
(
sb
)->
roŸ
));

180 
su≥r
->
‹oŸ
 = 
	`˝u_to_be64
(
	`∑ck_roŸ
(&
	`Ÿªe_båì
(
sb
)->
roŸ
));

181 
su≥r
->
√xtblock
 = 
	`˝u_to_be64
(
sb
->nextblock);

182 
su≥r
->
©omdi˘size
 = 
	`˝u_to_be64
(
sb
->atomdictsize);

183 
su≥r
->
‰ì©om
 = 
	`˝u_to_be32
(
sb
->freeatom);

184 
su≥r
->
©omgí
 = 
	`˝u_to_be32
(
sb
->atomgen);

187  
	`devio
(
WRITE_SYNC
, 
	`sb_dev
(
sb
), 
SB_LOC
, 
su≥r
, 
SB_LEN
);

188 
	}
}

192 
	$ªlog_‰⁄ãnd_de„r_as_b‰ì
(
sb
 *sb, 
u64
 
vÆ
)

194 if(
DEBUG_MODE_K
==1)

196 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

198 
	`log_b‰ì_ªlog
(
sb
, 
vÆ
 & ~(-1ULL << 48), val >> 48);

200 
	}
}

202 
	$ªlog_as_b‰ì
(
sb
 *sb, 
u64
 
vÆ
)

204 if(
DEBUG_MODE_K
==1)

206 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

208 
	`log_b‰ì_ªlog
(
sb
, 
vÆ
 & ~(-1ULL << 48), val >> 48);

209  
	`°ash_vÆue
(&
sb
->
de‰ì
, 
vÆ
);

210 
	}
}

213 
	$√w_cy˛e_log
(
sb
 *sb)

215 if(
DEBUG_MODE_K
==1)

217 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

227 
	`log_föish
(
sb
);

228 
	`log_föish_cy˛e
(
sb
, 1);

231 
sb
->
su≥r
.
logcou¡
 = 0;

232 
	}
}

240 
	$unify_log
(
sb
 *sb)

242 if(
DEBUG_MODE_K
==1)

244 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

247 
unify
 = 
sb
->unify++;

248 
	`LIST_HEAD
(
‹ph™_add
);

249 
	`LIST_HEAD
(
‹ph™_dñ
);

251 
	`åa˚
(">>>>>>>>> commô unify %u", 
unify
);

259 
	`li°_•li˚_öô
(&
sb
->
‹ph™_add
, &orphan_add);

260 
	`li°_•li˚_öô
(&
sb
->
‹ph™_dñ
, &orphan_del);

263 
	`√w_cy˛e_log
(
sb
);

265 
	`log_unify
(
sb
);

267 
	`log_‰ìblocks
(
sb
, sb->
‰ìblocks
);

268 #ifde‡
ALLOW_FRONTEND_MODIFY


274 
	`°ash_wÆk
(
sb
, &sb->
de‰ì
, 
ªlog_‰⁄ãnd_de„r_as_b‰ì
);

281 
	`un°ash
(
sb
, &sb->
deunify
, 
ªlog_as_b‰ì
);

289 
	`li°_•li˚_öô
(&
sb
->
unify_buf„rs
,

290 
	`tux3_dúty_buf„rs
(
sb
->
vﬁm≠
, 
TUX3_INIT_DELTA
));

297 
	`__tux3_m¨k_öode_dúty
(
sb
->
vﬁm≠
, 
I_DIRTY_PAGES
);

300 
	`åa˚
("> flush bôm≠ %u", 
unify
);

301 
	`tux3_Êush_öode_öã∫Æ
(
sb
->
bôm≠
, 
unify
);

302 
	`åa˚
("< d⁄êbôm≠ %u", 
unify
);

304 
	`åa˚
(">áµly oΩh™ inode†%u", 
unify
);

306 
îr
;

313 
îr
 = 
	`tux3_unify_‹ph™_dñ
(
sb
, &
‹ph™_dñ
);

314 i‡(
îr
)

315  
îr
;

320 
îr
 = 
	`tux3_unify_‹ph™_add
(
sb
, &
‹ph™_add
);

321 i‡(
îr
)

322  
îr
;

324 
	`åa˚
("<áµly oΩh™ inode†%u", 
unify
);

325 
	`as£π
(
	`li°_em±y
(&
‹ph™_add
));

326 
	`as£π
(
	`li°_em±y
(&
‹ph™_dñ
));

327 
	`åa˚
("<<<<<<<<< commô unify d⁄ê%u", 
unify
);

330 
	}
}

333 
	$°age_dñè
(
sb
 *sb, 
dñè
)

335 if(
DEBUG_MODE_K
==1)

337 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

339 
îr
;

342 
îr
 = 
	`tux3_Êush_öodes
(
sb
, 
dñè
);

343 i‡(
îr
)

344  
îr
;

347 
îr
 = 
	`tux3_Êush_öode_öã∫Æ
(
sb
->
©abÀ
, 
dñè
);

348 i‡(
îr
)

349  
îr
;

352 
îr
 = 
	`tux3_Êush_öode_öã∫Æ
(
sb
->
vèbÀ
, 
dñè
);

353 i‡(
îr
)

354  
îr
;

356  
îr
;

357 
	}
}

359 
	$wrôe_båì
(
sb
 *sb, 
dñè
)

361 if(
DEBUG_MODE_K
==1)

363 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

370  
	`tux3_Êush_öode_öã∫Æ
(
sb
->
vﬁm≠
, 
TUX3_INIT_DELTA
);

371 
	}
}

374 
	$wrôe_log
(
sb
 *sb)

376 if(
DEBUG_MODE_K
==1)

378 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

381 
	`log_föish
(
sb
);

382 
	`log_föish_cy˛e
(
sb
, 0);

384  
	`tux3_Êush_öode_öã∫Æ
(
sb
->
logm≠
, 
TUX3_INIT_DELTA
);

385 
	}
}

388 
	$≠∂y_de„ªd_b‰ì
(
sb
 *sb, 
u64
 
vÆ
)

390 if(
DEBUG_MODE_K
==1)

392 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

394  
	`b‰ì
(
sb
, 
vÆ
 & ~(-1ULL << 48), val >> 48);

395 
	}
}

397 
	$commô_dñè
(
sb
 *sb)

399 if(
DEBUG_MODE_K
==1)

401 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

403 
	`åa˚
("commô %òlogblocks", 
	`be32_to_˝u
(
sb
->
su≥r
.
logcou¡
));

404 
îr
 = 
	`ßve_sb
(
sb
);

405 i‡(
îr
)

406  
îr
;

409  
	`un°ash
(
sb
, &sb->
de‰ì
, 
≠∂y_de„ªd_b‰ì
);

410 
	}
}

412 
	$po°_commô
(
sb
 *sb, 
dñè
)

414 if(
DEBUG_MODE_K
==1)

416 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

422 
	`‰ì_f‹ked_buf„rs
(
sb
, 
NULL
, 0);

424 
	`tux3_˛ór_dúty_öodes
(
sb
, 
dñè
);

425 
	}
}

427 
	$√ed_unify
(
sb
 *sb)

429 if(
DEBUG_MODE_K
==1)

431 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

433 
¸udehack
;

434  !(++
¸udehack
 % 3);

435 
	}
}

437 
	eunify_Êags
 { 
	mNO_UNIFY
, 
	mALLOW_UNIFY
, 
	mFORCE_UNIFY
, };

440 
	$tux3_°¨t_backíd
(
sb
 *sb)

442 if(
DEBUG_MODE_K
==1)

444 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

446 
	`as£π
(
cuºít
->
jou∫Æ_öfo
 =
NULL
);

447 
cuºít
->
jou∫Æ_öfo
 = 
sb
;

448 
	}
}

450 
	$tux3_íd_backíd
()

452 if(
DEBUG_MODE_K
==1)

454 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

456 
	`as£π
(
cuºít
->
jou∫Æ_öfo
);

457 
cuºít
->
jou∫Æ_öfo
 = 
NULL
;

458 
	}
}

461 
	$tux3_undî_backíd
(
sb
 *sb)

463 if(
DEBUG_MODE_K
==1)

465 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

467  
cuºít
->
jou∫Æ_öfo
 =
sb
;

468 
	}
}

470 
	$do_commô
(
sb
 *sb, 
unify_Êags
 
unify_Êag
)

472 if(
DEBUG_MODE_K
==1)

474 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

476 
dñè
 = 
sb
->
m¨shÆ_dñè
;

477 
iowaô
 iowait;

478 
îr
 = 0;

480 
	`åa˚
(">>>>>>>>> commô dñè %u", 
dñè
);

482 
	`tux3_°¨t_backíd
(
sb
);

485 
	`tux3_iowaô_öô
(&
iowaô
);

486 
sb
->
iowaô
 = &iowait;

489 
	`log_dñè
(
sb
);

503 
îr
 = 
	`°age_dñè
(
sb
, 
dñè
);

504 i‡(
îr
)

505  
îr
;

507 i‡((
unify_Êag
 =
ALLOW_UNIFY
 && 
	`√ed_unify
(
sb
)) ||

508 
unify_Êag
 =
FORCE_UNIFY
) {

509 
îr
 = 
	`unify_log
(
sb
);

510 i‡(
îr
)

511  
îr
;

514 
	`log_dñè
(
sb
);

517 
	`wrôe_båì
(
sb
, 
dñè
);

518 
	`wrôe_log
(
sb
);

521 
	`tux3_iowaô_waô
(&
iowaô
);

531 
	`commô_dñè
(
sb
);

532 
	`tux3_íd_backíd
();

533 
	`åa˚
("<<<<<<<<< commô d⁄ê%u", 
dñè
);

535 
	`po°_commô
(
sb
, 
dñè
);

536 
	`åa˚
("<<<<<<<<<Öo° commô d⁄ê%u", 
dñè
);

538  
îr
;

539 
	}
}

545 
	$Êush_dñè
(
sb
 *sb)

547 if(
DEBUG_MODE_K
==1)

549 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

551 
dñè
 = 
sb
->
m¨shÆ_dñè
;

552 
îr
;

553 #i‚de‡
UNIFY_DEBUG


554 
unify_Êags
 
unify_Êag
 = 
ALLOW_UNIFY
;

556 
dñè_ªf
 *dñè_ª‡
sb
->
≥ndög_dñè
;

557 
unify_Êags
 
unify_Êag
 = 
dñè_ªf
->unify_flag;

558 
sb
->
≥ndög_dñè
 = 
NULL
;

561 
îr
 = 
	`do_commô
(
sb
, 
unify_Êag
);

563 
sb
->
commôãd_dñè
 = 
dñè
;

564 
	`˛ór_bô
(
TUX3_COMMIT_RUNNING_BIT
, &
sb
->
backíd_°©e
);

567 
	`wake_up_Æl
(&
sb
->
dñè_evít_wq
);

569  
îr
;

570 
	}
}

577 
dñè_ªf
 *
	$dñè_gë
(
sb
 *sb)

579 if(
DEBUG_MODE_K
==1)

581 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

583 
dñè_ªf
 *delta_ref;

591 
dñè_ªf
 = 
	`rcu_dîe„ªn˚_check
(
sb
->
cuºít_dñè
, 1);

592 } !
	`©omic_öc_nŸ_zîo
(&
dñè_ªf
->
ªfcou¡
));

594 
	`åa˚
("delta %u,Ñefcount %u",

595 
dñè_ªf
->
dñè
, 
	`©omic_ªad
(&dñè_ªf->
ªfcou¡
));

597  
dñè_ªf
;

598 
	}
}

601 
	$dñè_put
(
sb
 *sb, 
dñè_ªf
 *delta_ref)

603 if(
DEBUG_MODE_K
==1)

605 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

607 i‡(
	`©omic_dec_™d_ã°
(&
dñè_ªf
->
ªfcou¡
)) {

608 
	`åa˚
("set TUX3_COMMIT_PENDING_BIT");

609 
	`£t_bô
(
TUX3_COMMIT_PENDING_BIT
, &
sb
->
backíd_°©e
);

610 
	`scheduÀ_Êush_dñè
(
sb
);

613 
	`åa˚
("delta %u,Ñefcount %u",

614 
dñè_ªf
->
dñè
, 
	`©omic_ªad
(&dñè_ªf->
ªfcou¡
));

615 
	}
}

618 
	$__dñè_å™sôi⁄
(
sb
 *sb, 
dñè_ªf
 *delta_ref)

620 if(
DEBUG_MODE_K
==1)

622 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

625 
	`as£π
(
	`©omic_ªad
(&
dñè_ªf
->
ªfcou¡
) == 0);

626 
	`©omic_£t
(&
dñè_ªf
->
ªfcou¡
, 1);

628 
dñè_ªf
->
dñè
 = 
sb
->
√xt_dñè
++;

629 #ifde‡
UNIFY_DEBUG


630 
dñè_ªf
->
unify_Êag
 = 
ALLOW_UNIFY
;

638 
	`rcu_assign_poöãr
(
sb
->
cuºít_dñè
, 
dñè_ªf
);

639 
	}
}

647 
	$dñè_å™sôi⁄
(
sb
 *sb)

649 if(
DEBUG_MODE_K
==1)

651 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

657 
dñè_ªf
 *
¥ev
 = 
	`rcu_dîe„ªn˚_check
(
sb
->
cuºít_dñè
, 1);

658 
dñè_ªf
 *delta_ref;

661 
dñè_ªf
 = 
¥ev
 + 1;

662 i‡(
dñè_ªf
 =&
sb
->
dñè_ªfs
[
TUX3_MAX_DELTA
])

663 
dñè_ªf
 = &
sb
->
dñè_ªfs
[0];

666 
	`__dñè_å™sôi⁄
(
sb
, 
dñè_ªf
);

669 
sb
->
m¨shÆ_dñè
 = 
¥ev
->
dñè
;

670 #ifde‡
UNIFY_DEBUG


671 
sb
->
≥ndög_dñè
 = 
¥ev
;

675 
	`dñè_put
(
sb
, 
¥ev
);

677 
	`åa˚
("¥ev %u,Çexà%u", 
¥ev
->
dñè
, 
dñè_ªf
->delta);

680 
	`wake_up_Æl
(&
sb
->
dñè_evít_wq
);

682 #i‡
TUX3_FLUSHER
 =
TUX3_FLUSHER_SYNC


683 
	`waô_evít
(
sb
->
dñè_evít_wq
,

684 
	`ã°_bô
(
TUX3_COMMIT_PENDING_BIT
, &
sb
->
backíd_°©e
));

686 
	}
}

688 
	#dñè_a·î_eq
(
a
, 
b
) \

689 (
	`ty≥check
(, 
a
) && \

690 
	`ty≥check
(, 
b
) && \

691 (()(
a
Ë- ()(
b
Ë>0))

	)

693 
	~"commô_Êushî.c
"

694 
	~"commô_Êushî_hack.c
"

696 
	$f‹˚_unify
(
sb
 *sb)

698 if(
DEBUG_MODE_K
==1)

700 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

702  
	`sync_cuºít_dñè
(
sb
, 
FORCE_UNIFY
);

703 
	}
}

705 
	$f‹˚_dñè
(
sb
 *sb)

707 if(
DEBUG_MODE_K
==1)

709 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

711  
	`sync_cuºít_dñè
(
sb
, 
NO_UNIFY
);

712 
	}
}

714 
	$tux3_gë_cuºít_dñè
()

716 if(
DEBUG_MODE_K
==1)

718 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

720 
dñè_ªf
 *dñè_ª‡
cuºít
->
jou∫Æ_öfo
;

721 
	`as£π
(
dñè_ªf
 !
NULL
);

722  
dñè_ªf
->
dñè
;

723 
	}
}

726 
	$tux3_öode_dñè
(
öode
 *inode)

728 if(
DEBUG_MODE_K
==1)

730 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

732 
dñè
;

734 
	`tux_öode
(
öode
)->
öum
) {

735 
TUX_VOLMAP_INO
:

736 
TUX_LOGMAP_INO
:

744 
dñè
 = 
TUX3_INIT_DELTA
;

746 
TUX_BITMAP_INO
:

747 
dñè
 = 
	`tux_sb
(
öode
->
i_sb
)->
unify
;

750 
dñè
 = 
	`tux3_gë_cuºít_dñè
();

754  
dñè
;

755 
	}
}

762 
	$ch™ge_begö_©omic
(
sb
 *sb)

764 if(
DEBUG_MODE_K
==1)

766 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

768 
	`as£π
(
cuºít
->
jou∫Æ_öfo
 =
NULL
);

769 
cuºít
->
jou∫Æ_öfo
 = 
	`dñè_gë
(
sb
);

770 
	}
}

773 
	$ch™ge_íd_©omic
(
sb
 *sb)

775 if(
DEBUG_MODE_K
==1)

777 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

779 
dñè_ªf
 *dñè_ª‡
cuºít
->
jou∫Æ_öfo
;

780 
	`as£π
(
dñè_ªf
 !
NULL
);

781 
cuºít
->
jou∫Æ_öfo
 = 
NULL
;

782 
	`dñè_put
(
sb
, 
dñè_ªf
);

783 
	}
}

791 
	$ch™ge_begö_©omic_√°ed
(
sb
 *sb, **
±r
)

793 if(
DEBUG_MODE_K
==1)

795 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

797 *
±r
 = 
cuºít
->
jou∫Æ_öfo
;

798 
cuºít
->
jou∫Æ_öfo
 = 
NULL
;

799 
	`ch™ge_begö_©omic
(
sb
);

800 
	}
}

802 
	$ch™ge_íd_©omic_√°ed
(
sb
 *sb, *
±r
)

804 if(
DEBUG_MODE_K
==1)

806 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

808 
	`ch™ge_íd_©omic
(
sb
);

809 
cuºít
->
jou∫Æ_öfo
 = 
±r
;

810 
	}
}

812 
	$√ed_dñè
(
sb
 *sb)

814 if(
DEBUG_MODE_K
==1)

816 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

818 
¸udehack
;

819  !(++
¸udehack
 % 10);

820 
	}
}

830 
	$ch™ge_begö
(
sb
 *sb)

832 if(
DEBUG_MODE_K
==1)

834 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

836 #i‡
TUX3_FLUSHER
 =
TUX3_FLUSHER_SYNC


837 
	`down_ªad
(&
sb
->
dñè_lock
);

839 
	`ch™ge_begö_©omic
(
sb
);

840 
	}
}

842 
	$ch™ge_íd
(
sb
 *sb)

844 if(
DEBUG_MODE_K
==1)

846 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

848 
îr
 = 0;

850 
	`ch™ge_íd_©omic
(
sb
);

851 #i‡
TUX3_FLUSHER
 =
TUX3_FLUSHER_SYNC


852 
	`up_ªad
(&
sb
->
dñè_lock
);

854 
	`down_wrôe
(&
sb
->
dñè_lock
);

856 i‡(
	`√ed_dñè
(
sb
))

857 
	`åy_dñè_å™sôi⁄
(
sb
);

859 #i‡
TUX3_FLUSHER
 =
TUX3_FLUSHER_SYNC


860 
îr
 = 
	`Êush_≥ndög_dñè
(
sb
);

861 
	`up_wrôe
(&
sb
->
dñè_lock
);

864  
îr
;

865 
	}
}

882 
	$ch™ge_begö_if_√eded
(
sb
 *sb)

884 if(
DEBUG_MODE_K
==1)

886 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

888 i‡(
cuºít
->
jou∫Æ_öfo
 =
NULL
)

889 
	`ch™ge_begö
(
sb
);

890 
	}
}

892 
	$ch™ge_íd_if_√eded
(
sb
 *sb)

894 if(
DEBUG_MODE_K
==1)

896 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

898 i‡(
cuºít
->
jou∫Æ_öfo
)

899 
	`ch™ge_íd
(
sb
);

900 
	}
}

	@kernel/commit_flusher.c

3 #i‡
TUX3_FLUSHER
 !
TUX3_FLUSHER_ASYNC_HACK


4 
	~"tux3.h
"

6 
	$__tux3_öô_Êushî
(
sb
 *sb)

8 if(
DEBUG_MODE_K
==1)

10 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

12 #ifde‡
__KERNEL__


14 
	`vfs_sb
(
sb
)->
s_bdi
 = &
no›_backög_dev_öfo
;

16 
	}
}

18 #i‡
TUX3_FLUSHER
 =
TUX3_FLUSHER_ASYNC_OWN


19 
	$Êush_dñè_w‹k
(*
d©a
)

21 if(
DEBUG_MODE_K
==1)

23 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

25 
sb
 *sb = 
d©a
;

26 
îr
;

28 
	`£t_‰ìzabÀ
();

33 
	`£t_u£r_ni˚
(
cuºít
, 0);

35 !
	`kthªad_‰ìzabÀ_should_°›
(
NULL
)) {

36 i‡(
	`ã°_bô
(
TUX3_COMMIT_PENDING_BIT
, &
sb
->
backíd_°©e
)) {

37 
	`˛ór_bô
(
TUX3_COMMIT_PENDING_BIT
, &
sb
->
backíd_°©e
);

39 
îr
 = 
	`Êush_dñè
(
sb
);

43 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

44 i‡(!
	`ã°_bô
(
TUX3_COMMIT_PENDING_BIT
, &
sb
->
backíd_°©e
) &&

45 !
	`kthªad_should_°›
())

46 
	`scheduÀ
();

47 
	`__£t_cuºít_°©e
(
TASK_RUNNING
);

51 
	}
}

53 
	$tux3_öô_Êushî
(
sb
 *sb)

55 if(
DEBUG_MODE_K
==1)

57 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

59 
èsk_°ru˘
 *
èsk
;

60 
b
[
BDEVNAME_SIZE
];

62 
	`__tux3_öô_Êushî
(
sb
);

64 
	`bdev«me
(
	`vfs_sb
(
sb
)->
s_bdev
, 
b
);

67 
èsk
 = 
	`kthªad_run
(
Êush_dñè_w‹k
, 
sb
, "tux3/%s", 
b
);

68 i‡(
	`IS_ERR
(
èsk
))

69  
	`PTR_ERR
(
èsk
);

71 
sb
->
Êush_èsk
 = 
èsk
;

74 
	}
}

76 
	$tux3_exô_Êushî
(
sb
 *sb)

78 if(
DEBUG_MODE_K
==1)

80 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

82 i‡(
sb
->
Êush_èsk
) {

83 
	`kthªad_°›
(
sb
->
Êush_èsk
);

84 
sb
->
Êush_èsk
 = 
NULL
;

86 
	}
}

88 
	$scheduÀ_Êush_dñè
(
sb
 *sb)

90 if(
DEBUG_MODE_K
==1)

92 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

95 
	`wake_up_¥o˚ss
(
sb
->
Êush_èsk
);

96 
	}
}

100 
	$tux3_öô_Êushî
(
sb
 *sb)

102 if(
DEBUG_MODE_K
==1)

104 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

106 
	`__tux3_öô_Êushî
(
sb
);

108 
	}
}

110 
	$tux3_exô_Êushî
(
sb
 *sb)

112 
	}
}

114 
	$scheduÀ_Êush_dñè
(
sb
 *sb)

116 if(
DEBUG_MODE_K
==1)

118 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

121 
	`wake_up_Æl
(&
sb
->
dñè_evít_wq
);

122 
	}
}

124 
	$Êush_≥ndög_dñè
(
sb
 *sb)

126 if(
DEBUG_MODE_K
==1)

128 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

130 
îr
 = 0;

132 i‡(!
	`ã°_bô
(
TUX3_COMMIT_PENDING_BIT
, &
sb
->
backíd_°©e
))

133 
out
;

135 i‡(
	`ã°_™d_˛ór_bô
(
TUX3_COMMIT_PENDING_BIT
, &
sb
->
backíd_°©e
))

136 
îr
 = 
	`Êush_dñè
(
sb
);

137 
out
:

138  
îr
;

139 
	}
}

143 
	$åy_dñè_å™sôi⁄
(
sb
 *sb)

145 if(
DEBUG_MODE_K
==1)

147 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

149 
	`åa˚
("marshal %u, backend_state %lx",

150 
sb
->
m¨shÆ_dñè
, sb->
backíd_°©e
);

151 i‡(!
	`ã°_™d_£t_bô
(
TUX3_COMMIT_RUNNING_BIT
, &
sb
->
backíd_°©e
))

152 
	`dñè_å™sôi⁄
(
sb
);

153 
	}
}

156 
	$åy_dñè_å™sôi⁄_u¡û_dñè
(
sb
 *sb, 
dñè
)

158 if(
DEBUG_MODE_K
==1)

160 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

162 
	`åa˚
("delta %u, marshal %u, backend_state %lx",

163 
dñè
, 
sb
->
m¨shÆ_dñè
, sb->
backíd_°©e
);

166 i‡(
	`dñè_a·î_eq
(
sb
->
m¨shÆ_dñè
, 
dñè
))

169 i‡(!
	`ã°_™d_£t_bô
(
TUX3_COMMIT_RUNNING_BIT
, &
sb
->
backíd_°©e
)) {

171 i‡(
	`dñè_a·î_eq
(
sb
->
m¨shÆ_dñè
, 
dñè
)) {

172 
	`˛ór_bô
(
TUX3_COMMIT_RUNNING_BIT
, &
sb
->
backíd_°©e
);

176 
	`dñè_å™sôi⁄
(
sb
);

179  
	`dñè_a·î_eq
(
sb
->
m¨shÆ_dñè
, 
dñè
);

180 
	}
}

183 
	$waô_f‹_å™sôi⁄
(
sb
 *sb, 
dñè
)

185 if(
DEBUG_MODE_K
==1)

187 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

189  
	`waô_evít_kûœbÀ
(
sb
->
dñè_evít_wq
,

190 
	`åy_dñè_å™sôi⁄_u¡û_dñè
(
sb
, 
dñè
));

191 
	}
}

193 
	$åy_Êush_≥ndög_u¡û_dñè
(
sb
 *sb, 
dñè
)

195 if(
DEBUG_MODE_K
==1)

197 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

199 
	`åa˚
("delta %u, committed %u, backend_state %lx",

200 
dñè
, 
sb
->
commôãd_dñè
, sb->
backíd_°©e
);

202 #i‡
TUX3_FLUSHER
 =
TUX3_FLUSHER_SYNC


203 i‡(!
	`dñè_a·î_eq
(
sb
->
commôãd_dñè
, 
dñè
))

204 
	`Êush_≥ndög_dñè
(
sb
);

207  
	`dñè_a·î_eq
(
sb
->
commôãd_dñè
, 
dñè
);

208 
	}
}

210 
	$waô_f‹_commô
(
sb
 *sb, 
dñè
)

212 if(
DEBUG_MODE_K
==1)

214 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

216  
	`waô_evít_kûœbÀ
(
sb
->
dñè_evít_wq
,

217 
	`åy_Êush_≥ndög_u¡û_dñè
(
sb
, 
dñè
));

218 
	}
}

220 
	$sync_cuºít_dñè
(
sb
 *sb, 
unify_Êags
 
unify_Êag
)

222 if(
DEBUG_MODE_K
==1)

224 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

226 
dñè_ªf
 *delta_ref;

227 
dñè
;

228 
îr
 = 0;

230 #i‡
TUX3_FLUSHER
 =
TUX3_FLUSHER_SYNC


231 
	`down_wrôe
(&
sb
->
dñè_lock
);

234 
dñè_ªf
 = 
	`dñè_gë
(
sb
);

235 #ifde‡
UNIFY_DEBUG


236 
dñè_ªf
->
unify_Êag
 = unify_flag;

238 
dñè
 = 
dñè_ªf
->delta;

239 
	`dñè_put
(
sb
, 
dñè_ªf
);

241 
	`åa˚
("dñè %u", 
dñè
);

244 
îr
 = 
	`waô_f‹_å™sôi⁄
(
sb
, 
dñè
);

245 i‡(
îr
)

246  
îr
;

247 
	`as£π
(
	`dñè_a·î_eq
(
sb
->
m¨shÆ_dñè
, 
dñè
));

250 
îr
 = 
	`waô_f‹_commô
(
sb
, 
dñè
);

251 
	`as£π
(
îr
 || 
	`dñè_a·î_eq
(
sb
->
commôãd_dñè
, 
dñè
));

252 #i‡
TUX3_FLUSHER
 =
TUX3_FLUSHER_SYNC


253 
	`up_wrôe
(&
sb
->
dñè_lock
);

256  
îr
;

257 
	}
}

	@kernel/commit_flusher.h

1 #i‚de‡
TUX3_COMMIT_FLUSHER_H


2 
	#TUX3_COMMIT_FLUSHER_H


	)

6 #i‡
TUX3_FLUSHER
 =
TUX3_FLUSHER_ASYNC_HACK


8 
tux3_accout_£t_wrôeback
(
∑ge
 *page);

9 
tux3_accout_˛ór_wrôeback
(
∑ge
 *page);

10 
tux3_£t_m≠pög_bdi
(
öode
 *inode);

11 
tux3_°¨t_≥riodiˇl_Êushî
(
sb
 *sb);

13 
ölöe
 
	$tux3_accout_£t_wrôeback
(
∑ge
 *∑geË{ 
	}
}

14 
ölöe
 
	$tux3_accout_˛ór_wrôeback
(
∑ge
 *∑geË{ 
	}
}

15 
ölöe
 
	$tux3_£t_m≠pög_bdi
(
öode
 *öodeË{ 
	}
}

16 
ölöe
 
	$tux3_°¨t_≥riodiˇl_Êushî
(
sb
 *sbË{ 
	}
}

19 
tux3_öô_Êushî
(
sb
 *sb);

20 
tux3_exô_Êushî
(
sb
 *sb);

	@kernel/commit_flusher_hack.c

3 #i‡
TUX3_FLUSHER
 =
TUX3_FLUSHER_ASYNC_HACK


4 
	~"tux3.h
"

5 
	~<löux/kthªad.h
>

6 
	~<löux/‰ìzî.h
>

14 
	$tux3_£t_m≠pög_bdi
(
öode
 *inode)

19 
öode
->
i_m≠pög
->
backög_dev_öfo
 = inode->
i_sb
->
s_bdi
;

20 
	}
}

26 
	swb_wrôeback_w‹k
 {

27 
	mƒ_∑ges
;

28 
su≥r_block
 *
	msb
;

29 *
	mﬁdî_th™_this
;

30 
wrôeback_sync_modes
 
	msync_mode
;

31 
	mègged_wrôïages
:1;

32 
	mf‹_kupd©e
:1;

33 
	mønge_cy˛ic
:1;

34 
	mf‹_background
:1;

35 
wb_ªas⁄
 
	mªas⁄
;

37 
li°_hód
 
	mli°
;

38 
com∂ëi⁄
 *
	md⁄e
;

42 
	$åy_dñè_å™sôi⁄_u¡û_dñè
(
sb
 *sb, 
dñè
)

44 if(
DEBUG_MODE_K
==1)

46 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

48 
	`åa˚
("delta %u, marshal %u, backend_state %lx",

49 
dñè
, 
sb
->
m¨shÆ_dñè
, sb->
backíd_°©e
);

52 i‡(
	`dñè_a·î_eq
(
sb
->
m¨shÆ_dñè
, 
dñè
))

55 i‡(!
	`ã°_™d_£t_bô
(
TUX3_COMMIT_RUNNING_BIT
, &
sb
->
backíd_°©e
)) {

57 i‡(
	`dñè_a·î_eq
(
sb
->
m¨shÆ_dñè
, 
dñè
)) {

58 
	`˛ór_bô
(
TUX3_COMMIT_RUNNING_BIT
, &
sb
->
backíd_°©e
);

62 
	`dñè_å™sôi⁄
(
sb
);

65  
	`dñè_a·î_eq
(
sb
->
m¨shÆ_dñè
, 
dñè
);

66 
	}
}

69 
	$waô_f‹_å™sôi⁄
(
sb
 *sb, 
dñè
)

71 if(
DEBUG_MODE_K
==1)

73 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

75  
	`waô_evít_kûœbÀ
(
sb
->
dñè_evít_wq
,

76 
	`åy_dñè_å™sôi⁄_u¡û_dñè
(
sb
, 
dñè
));

77 
	}
}

79 
	$tux3_wb_wrôeback
(
bdi_wrôeback
 *
wb
,

80 
wb_wrôeback_w‹k
 *
w‹k
)

82 if(
DEBUG_MODE_K
==1)

84 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

86 
sb
 *sb = 
	`c⁄èöî_of
(
wb
->
bdi
, sb, bdi);

87 
dñè_ªf
 *delta_ref;

88 
dñè
;

89 
îr
;

92 i‡(!(
	`vfs_sb
(
sb
)->
s_Êags
 & 
MS_ACTIVE
))

96 
dñè_ªf
 = 
	`dñè_gë
(
sb
);

97 #ifde‡
UNIFY_DEBUG


99 
dñè_ªf
->
unify_Êag
 = 
ALLOW_UNIFY
;

101 
dñè
 = 
dñè_ªf
->delta;

102 
	`dñè_put
(
sb
, 
dñè_ªf
);

105 
îr
 = 
	`waô_f‹_å™sôi⁄
(
sb
, 
dñè
);

106 i‡(
îr
)

107  
îr
;

108 
	`as£π
(
	`dñè_a·î_eq
(
sb
->
m¨shÆ_dñè
, 
dñè
));

111 
	`waô_evít
(
sb
->
dñè_evít_wq
,

112 
	`ã°_bô
(
TUX3_COMMIT_PENDING_BIT
, &
sb
->
backíd_°©e
));

114 i‡(
	`ã°_bô
(
TUX3_COMMIT_PENDING_BIT
, &
sb
->
backíd_°©e
)) {

115 
	`˛ór_bô
(
TUX3_COMMIT_PENDING_BIT
, &
sb
->
backíd_°©e
);

117 
îr
 = 
	`Êush_dñè
(
sb
);

121 
	`wb_upd©e_b™dwidth
(
wb
, 
wb_°¨t
);

126 
	}
}

128 
boﬁ
 
	$öode_dútõd_a·î
(
öode
 *öode, 
t
)

130 if(
DEBUG_MODE_K
==1)

132 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

134 
boﬁ
 
ªt
 = 
	`time_a·î
(
öode
->
dútõd_whí
, 
t
);

135 #i‚de‡
CONFIG_64BIT


142 
ªt
 =Ñë && 
	`time_bef‹e_eq
(
öode
->
dútõd_whí
, 
jiffõs
);

144  
ªt
;

145 
	}
}

147 
	$tux3_has_ﬁd_d©a
(
bdi_wrôeback
 *
wb
)

149 if(
DEBUG_MODE_K
==1)

151 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

153 
tux3_dúty_expúe_öãrvÆ
 = 30 * 100;

155 
has_ﬁd
 = 0;

163 
	`•ö_lock
(&
wb
->
li°_lock
);

164 i‡(
	`wb_has_dúty_io
(
wb
)) {

165 
ﬁdî_th™_this
 = 
jiffõs
 -

166 
	`m£cs_to_jiffõs
(
tux3_dúty_expúe_öãrvÆ
 * 10);

167 
öode
 *inode =

168 
	`li°_íåy
(
wb
->
b_dúty
.
¥ev
, 
öode
, 
i_wb_li°
);

170 i‡(!
	`öode_dútõd_a·î
(
öode
, 
ﬁdî_th™_this
))

171 
has_ﬁd
 = 1;

173 
	`•ö_u∆ock
(&
wb
->
li°_lock
);

175  
has_ﬁd
;

176 
	}
}

178 
	$tux3_wb_check_ﬁd_d©a_Êush
(
bdi_wrôeback
 *
wb
)

180 if(
DEBUG_MODE_K
==1)

182 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

185 
expúed
;

190 i‡(!
dúty_wrôeback_öãrvÆ
)

193 
expúed
 = 
wb
->
œ°_ﬁd_Êush
 +

194 
	`m£cs_to_jiffõs
(
dúty_wrôeback_öãrvÆ
 * 10);

195 i‡(
	`time_bef‹e
(
jiffõs
, 
expúed
))

198 
wb
->
œ°_ﬁd_Êush
 = 
jiffõs
;

200 i‡(!
	`tux3_has_ﬁd_d©a
(
wb
)) {

208 
wb_wrôeback_w‹k
 
w‹k
 = {

209 .
ƒ_∑ges
 = 0,

210 .
sync_mode
 = 
WB_SYNC_NONE
,

211 .
f‹_kupd©e
 = 1,

212 .
ønge_cy˛ic
 = 1,

213 .
ªas⁄
 = 
WB_REASON_PERIODIC
,

216  
	`tux3_wb_wrôeback
(
wb
, &
w‹k
);

217 
	}
}

219 
ölöe
 
	$tux3_ovî_bground_thªsh
(
backög_dev_öfo
 *
bdi
,

220 
wrŸe
)

222 if(
DEBUG_MODE_K
==1)

224 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

232  !
wrŸe
;

233 
	}
}

235 
	$tux3_wb_check_background_Êush
(
bdi_wrôeback
 *
wb
, 
wrŸe
)

237 if(
DEBUG_MODE_K
==1)

239 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

241 i‡(
	`tux3_ovî_bground_thªsh
(
wb
->
bdi
, 
wrŸe
)) {

243 
wb_wrôeback_w‹k
 
w‹k
 = {

244 .
ƒ_∑ges
 = 
LONG_MAX
,

245 .
sync_mode
 = 
WB_SYNC_NONE
,

246 .
f‹_background
 = 1,

247 .
ønge_cy˛ic
 = 1,

248 .
ªas⁄
 = 
WB_REASON_BACKGROUND
,

251  
	`tux3_wb_wrôeback
(
wb
, &
w‹k
);

255 
	}
}

257 
wb_wrôeback_w‹k
 *

258 
	$gë_√xt_w‹k_ôem
(
backög_dev_öfo
 *
bdi
)

260 if(
DEBUG_MODE_K
==1)

262 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

264 
wb_wrôeback_w‹k
 *
w‹k
 = 
NULL
;

266 
	`•ö_lock_bh
(&
bdi
->
wb_lock
);

267 i‡(!
	`li°_em±y
(&
bdi
->
w‹k_li°
)) {

268 
w‹k
 = 
	`li°_íåy
(
bdi
->
w‹k_li°
.
√xt
,

269 
wb_wrôeback_w‹k
, 
li°
);

270 
	`li°_dñ_öô
(&
w‹k
->
li°
);

272 
	`•ö_u∆ock_bh
(&
bdi
->
wb_lock
);

273  
w‹k
;

274 
	}
}

276 
	$tux3_do_wrôeback
(
bdi_wrôeback
 *
wb
, 
f‹˚_waô
)

278 if(
DEBUG_MODE_K
==1)

280 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

282 
backög_dev_öfo
 *
bdi
 = 
wb
->bdi;

283 
wb_wrôeback_w‹k
 *
w‹k
 = 
NULL
;

284 
wrŸe
 = 0;

286 
	`£t_bô
(
BDI_wrôeback_ru¬ög
, &
wb
->
bdi
->
°©e
);

287 (
w‹k
 = 
	`gë_√xt_w‹k_ôem
(
bdi
)Ë!
NULL
) {

288 
	`åa˚
("nr_pages %ld, sb %p, sync_mode %d, "

291 
w‹k
->
ƒ_∑ges
, w‹k->
sb
, w‹k->
sync_mode
,

292 
w‹k
->
ègged_wrôïages
, w‹k->
f‹_kupd©e
,

293 
w‹k
->
ønge_cy˛ic
, w‹k->
f‹_background
,

294 
w‹k
->
ªas⁄
, w‹k->
d⁄e
);

300 i‡(
f‹˚_waô
)

301 
w‹k
->
sync_mode
 = 
WB_SYNC_ALL
;

303 
wrŸe
 +
	`tux3_wb_wrôeback
(
wb
, 
w‹k
);

309 i‡(
w‹k
->
d⁄e
)

310 
	`com∂ëe
(
w‹k
->
d⁄e
);

312 
	`k‰ì
(
w‹k
);

314 
	`åa˚
("flush done");

319 
wrŸe
 +
	`tux3_wb_check_ﬁd_d©a_Êush
(
wb
);

320 
wrŸe
 +
	`tux3_wb_check_background_Êush
(
wb
, wrote);

321 
	`˛ór_bô
(
BDI_wrôeback_ru¬ög
, &
wb
->
bdi
->
°©e
);

323  
wrŸe
;

324 
	}
}

326 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,10,0)

327 
	#TUX3_BDI_CAP
 (
BDI_CAP_NO_WRITEBACK
 | 
BDI_CAP_MAP_COPY
)

	)

339 
	$tux3_accout_£t_wrôeback
(
∑ge
 *page)

341 if(
DEBUG_MODE_K
==1)

343 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

349 
addªss_•a˚
 *
m≠pög
 = 
∑ge
->mapping;

350 i‡(
m≠pög
)

351 
	`öc_bdi_°©
(
m≠pög
->
backög_dev_öfo
, 
BDI_WRITEBACK
);

352 
	}
}

354 
	$tux3_accout_˛ór_wrôeback
(
∑ge
 *page)

356 if(
DEBUG_MODE_K
==1)

358 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

364 
addªss_•a˚
 *
m≠pög
 = 
∑ge
->mapping;

365 i‡(
m≠pög
) {

366 
	`dec_bdi_°©
(
m≠pög
->
backög_dev_öfo
, 
BDI_WRITEBACK
);

367 
	`bdi_wrôeout_öc
(
m≠pög
->
backög_dev_öfo
);

369 
	}
}

378 
	$tux3_°¨t_≥riodiˇl_Êushî
(
sb
 *sb)

380 if(
DEBUG_MODE_K
==1)

382 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

384 
backög_dev_öfo
 *
bdi
 = 
	`vfs_sb
(
sb
)->
s_bdi
;

385 
timeout
;

387 
timeout
 = 
	`m£cs_to_jiffõs
(
dúty_wrôeback_öãrvÆ
 * 10);

388 
	`mod_timî
(&
bdi
->
wb
.
wakeup_timî
, 
jiffõs
 + 
timeout
);

389 
	}
}

395 
	$tux3_wrôeback_thªad
(*
d©a
)

397 if(
DEBUG_MODE_K
==1)

399 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

401 
bdi_wrôeback
 *
wb
 = 
d©a
;

402 
backög_dev_öfo
 *
bdi
 = 
wb
->bdi;

403 
∑ges_wrôãn
;

405 
cuºít
->
Êags
 |
PF_SWAPWRITE
;

406 
	`£t_‰ìzabÀ
();

407 
wb
->
œ°_a˘ive
 = 
jiffõs
;

412 
	`£t_u£r_ni˚
(
cuºít
, 0);

414 !
	`kthªad_‰ìzabÀ_should_°›
(
NULL
)) {

419 
	`dñ_timî
(&
wb
->
wakeup_timî
);

422 
öode
 *inode;

423 
	`•ö_lock
(&
wb
->
li°_lock
);

424 
	`li°_f‹_óch_íåy
(
öode
, &
wb
->
b_dúty
, 
i_wb_li°
) {

425 
	`åa˚
("öum %Lx", 
	`tux_öode
(
öode
)->
öum
);

427 
	`•ö_u∆ock
(&
wb
->
li°_lock
);

430 
∑ges_wrôãn
 = 
	`tux3_do_wrôeback
(
wb
, 0);

432 i‡(
∑ges_wrôãn
)

433 
wb
->
œ°_a˘ive
 = 
jiffõs
;

435 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

436 i‡(!
	`li°_em±y
(&
bdi
->
w‹k_li°
Ë|| 
	`kthªad_should_°›
()) {

437 
	`__£t_cuºít_°©e
(
TASK_RUNNING
);

441 i‡(
	`wb_has_dúty_io
(
wb
Ë&& 
dúty_wrôeback_öãrvÆ
)

442 
	`scheduÀ_timeout
(
	`m£cs_to_jiffõs
(
dúty_wrôeback_öãrvÆ
 * 10));

449 
	`scheduÀ
();

454 i‡(!
	`li°_em±y
(&
bdi
->
w‹k_li°
))

455 
	`tux3_do_wrôeback
(
wb
, 1);

458 
	}
}

460 
	$tux3_£tup_wrôeback
(
sb
 *sb, 
backög_dev_öfo
 *
bdi
)

462 if(
DEBUG_MODE_K
==1)

464 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

466 
dev_t
 
dev
 = 
	`vfs_sb
(
sb
)->
s_bdev
->
bd_dev
;

467 
èsk_°ru˘
 *
èsk
;

469 
èsk
 = 
	`kthªad_¸óã
(
tux3_wrôeback_thªad
, &
bdi
->
wb
,

471 
bdi
->
«me
, 
	`MAJOR
(
dev
), 
	`MINOR
(dev));

472 i‡(
	`IS_ERR
(
èsk
))

473  
	`PTR_ERR
(
èsk
);

480 
	`•ö_lock_bh
(&
bdi
->
wb_lock
);

481 
bdi
->
wb
.
èsk
 =Åask;

482 
	`•ö_u∆ock_bh
(&
bdi
->
wb_lock
);

485 
	}
}

487 
	$tux3_wakeup_wrôeback
(
backög_dev_öfo
 *
bdi
)

489 if(
DEBUG_MODE_K
==1)

491 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

493 
	`wake_up_¥o˚ss
(
bdi
->
wb
.
èsk
);

494 
	}
}

496 
	$tux3_de°roy_wrôeback
(
backög_dev_öfo
 *
bdi
)

498 if(
DEBUG_MODE_K
==1)

500 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

506 
bdi
->
ˇ∑bûôõs
 &~
BDI_CAP_NO_WRITEBACK
;

507 
	`bdi_de°roy
(
bdi
);

508 
	}
}

510 
	#TUX3_BDI_CAP
 
BDI_CAP_MAP_COPY


	)

512 
	$tux3_accout_£t_wrôeback
(
∑ge
 *page)

514 
	}
}

516 
	$tux3_accout_˛ór_wrôeback
(
∑ge
 *page)

518 
	}
}

520 
	$tux3_°¨t_≥riodiˇl_Êushî
(
sb
 *sb)

522 
	}
}

525 
w‹kqueue_°ru˘
 *
	gkî√l_bdi_wq
;

531 
	$tux3_wrôeback_w‹k‚
(
w‹k_°ru˘
 *
w‹k
)

533 if(
DEBUG_MODE_K
==1)

535 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

537 
bdi_wrôeback
 *
wb
 = 
	`c⁄èöî_of
(
	`to_dñayed_w‹k
(
w‹k
),

538 
bdi_wrôeback
, 
dw‹k
);

539 
backög_dev_öfo
 *
bdi
 = 
wb
->bdi;

540 
∑ges_wrôãn
;

544 
	`£t_w‹kî_desc
("Êush-tux3-%s", 
	`dev_«me
(
bdi
->
dev
));

546 
cuºít
->
Êags
 |
PF_SWAPWRITE
;

550 i‡(
	`likñy
(!
	`cuºít_is_w‹kqueue_ªscuî
() ||

551 
	`li°_em±y
(&
bdi
->
bdi_li°
)))

561 
∑ges_wrôãn
 = 
	`tux3_do_wrôeback
(
wb
, 0);

563 } !
	`li°_em±y
(&
bdi
->
w‹k_li°
));

572 
∑ges_wrôãn
 = 
	`wrôeback_öodes_wb
(&
bdi
->
wb
, 1024,

573 
WB_REASON_FORKER_THREAD
);

574 
	`åa˚_wrôeback_∑ges_wrôãn
(
∑ges_wrôãn
);

577 i‡(!
	`li°_em±y
(&
bdi
->
w‹k_li°
) ||

578 (
	`wb_has_dúty_io
(
wb
Ë&& 
dúty_wrôeback_öãrvÆ
))

579 
	`queue_dñayed_w‹k
(
kî√l_bdi_wq
, &
wb
->
dw‹k
,

580 
	`m£cs_to_jiffõs
(
dúty_wrôeback_öãrvÆ
 * 10));

582 
cuºít
->
Êags
 &~
PF_SWAPWRITE
;

583 
	}
}

585 
	~<löux/kÆlsyms.h
>

586 
	$tux3_£tup_wrôeback
(
sb
 *sb, 
backög_dev_öfo
 *
bdi
)

588 if(
DEBUG_MODE_K
==1)

590 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

593 i‡(
kî√l_bdi_wq
 =
NULL
) {

594 
wq_addr
;

596 
wq_addr
 = 
	`kÆlsyms_lookup_«me
("bdi_wq");

597 i‡(!
wq_addr
) {

598 
	`tux3_îr
(
sb
, "couldn't find bdi_wqáddress\n");

599  -
EINVAL
;

601 
kî√l_bdi_wq
 = *(
w‹kqueue_°ru˘
 **)
wq_addr
;

602 
	`tux3_msg
(
sb
, "u£ bdi_wq %p", 
kî√l_bdi_wq
);

606 
	`INIT_DELAYED_WORK
(&
bdi
->
wb
.
dw‹k
, 
tux3_wrôeback_w‹k‚
);

609 
	}
}

611 
	$tux3_wakeup_wrôeback
(
backög_dev_öfo
 *
bdi
)

613 
	}
}

615 
	$tux3_de°roy_wrôeback
(
backög_dev_öfo
 *
bdi
)

617 if(
DEBUG_MODE_K
==1)

619 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

621 
	`bdi_de°roy
(
bdi
);

622 
	}
}

625 
	$tux3_c⁄ge°ed_‚
(*
c⁄ge°ed_d©a
, 
bdi_bôs
)

627 if(
DEBUG_MODE_K
==1)

629 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

631  
	`bdi_c⁄ge°ed
(
c⁄ge°ed_d©a
, 
bdi_bôs
);

632 
	}
}

639 
	$tux3_öô_Êushî
(
sb
 *sb)

641 if(
DEBUG_MODE_K
==1)

643 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

645 
backög_dev_öfo
 *
bdi
 = &
sb
->bdi;

646 
îr
;

648 
bdi
->
ø_∑ges
 = 
	`vfs_sb
(
sb
)->
s_bdi
->ra_pages;

649 
bdi
->
c⁄ge°ed_‚
 = 
tux3_c⁄ge°ed_‚
;

650 
bdi
->
c⁄ge°ed_d©a
 = 
	`vfs_sb
(
sb
)->
s_bdi
;

652 
îr
 = 
	`bdi_£tup_™d_ªgi°î
(
bdi
, "tux3", 
TUX3_BDI_CAP
);

653 i‡(
îr
)

654  
îr
;

656 
îr
 = 
	`tux3_£tup_wrôeback
(
sb
, 
bdi
);

657 i‡(
îr
) {

658 
	`bdi_de°roy
(
bdi
);

659  
îr
;

662 
	`vfs_sb
(
sb
)->
s_bdi
 = 
bdi
;

664 
	`tux3_wakeup_wrôeback
(
bdi
);

667 
	}
}

669 
	$tux3_exô_Êushî
(
sb
 *sb)

671 if(
DEBUG_MODE_K
==1)

673 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

675 
backög_dev_öfo
 *
bdi
 = 
	`vfs_sb
(
sb
)->
s_bdi
;

676 
	`tux3_de°roy_wrôeback
(
bdi
);

677 
	}
}

679 
	$scheduÀ_Êush_dñè
(
sb
 *sb)

681 if(
DEBUG_MODE_K
==1)

683 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

686 
	`wake_up_Æl
(&
sb
->
dñè_evít_wq
);

687 
	}
}

689 
	$åy_dñè_å™sôi⁄
(
sb
 *sb)

691 if(
DEBUG_MODE_K
==1)

693 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

696 
	`åa˚
("marshal %u, backend_state %lx",

697 
sb
->
m¨shÆ_dñè
, sb->
backíd_°©e
);

698 
	`sync_öodes_sb
(
	`vfs_sb
(
sb
));

700 
	}
}

702 
	$sync_cuºít_dñè
(
sb
 *sb, 
unify_Êags
 
unify_Êag
)

704 if(
DEBUG_MODE_K
==1)

706 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

709 
	`WARN_ON
(
unify_Êag
 =
FORCE_UNIFY
);

711 
	`down_ªad
(&
	`vfs_sb
(
sb
)->
s_umou¡
);

712 
	`sync_öodes_sb
(
	`vfs_sb
(
sb
));

713 
	`up_ªad
(&
	`vfs_sb
(
sb
)->
s_umou¡
);

715 
	}
}

	@kernel/dir.c

26 
	~"tux3.h
"

27 
	~"kcom∑t.h
"

29 
	#TUX_DIR_ALIGN
 (
öum_t
)

	)

30 
	#TUX_DIR_HEAD
 (
	`off£tof
(
tux_dúít
, 
«me
))

	)

31 
	#TUX_REC_LEN
(
«me_Àn
Ë
	`ALIGN
(“ame_ÀnË+ 
TUX_DIR_HEAD
, 
TUX_DIR_ALIGN
)

	)

32 
	#TUX_MAX_REC_LEN
 ((1 << 16Ë- 1)

	)

34 
ölöe
 
	$tux_ªc_Àn_‰om_disk
(
__be16
 
dÀn
)

36 if(
DEBUG_MODE_K
==1)

38 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

40 
Àn
 = 
	`be16_to_˝u
(
dÀn
);

42 i‡(
Àn
 =
TUX_MAX_REC_LEN
)

44  
Àn
;

45 
	}
}

47 
ölöe
 
__be16
 
	$tux_ªc_Àn_to_disk
(
Àn
)

49 if(
DEBUG_MODE_K
==1)

51 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

53 
	`as£π
(
Àn
 <= (1 << 16));

54 i‡(
Àn
 == (1 << 16))

55  
	`˝u_to_be16
(
TUX_MAX_REC_LEN
);

56  
	`˝u_to_be16
(
Àn
);

57 
	}
}

59 
ölöe
 
	$is_dñëed
(
tux_dúít
 *
íåy
)

61 if(
DEBUG_MODE_K
==1)

63 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

65  !
íåy
->
«me_Àn
;

66 
	}
}

68 
ölöe
 
	$tux_m©ch
(
tux_dúít
 *
íåy
, c⁄° *c⁄° 
«me
,

69 
Àn
)

71 if(
DEBUG_MODE_K
==1)

73 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

75 i‡(
Àn
 !
íåy
->
«me_Àn
)

77 i‡(
	`is_dñëed
(
íåy
))

79  !
	`memcmp
(
«me
, 
íåy
->«me, 
Àn
);

80 
	}
}

82 
ölöe
 
tux_dúít
 *
	$√xt_íåy
(
tux_dúít
 *
íåy
)

84 if(
DEBUG_MODE_K
==1)

86 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

88  (*)
íåy
 + 
	`tux_ªc_Àn_‰om_disk
”¡ry->
ªc_Àn
);

89 
	}
}

92 
	mTUX_UNKNOWN
,

93 
	mTUX_REG
,

94 
	mTUX_DIR
,

95 
	mTUX_CHR
,

96 
	mTUX_BLK
,

97 
	mTUX_FIFO
,

98 
	mTUX_SOCK
,

99 
	mTUX_LNK
,

100 
	mTUX_TYPES


103 
	#STAT_SHIFT
 12

	)

105 
	gtux_ty≥_by_mode
[
S_IFMT
 >> 
STAT_SHIFT
] = {

106 [
S_IFREG
 >> 
STAT_SHIFT
] = 
TUX_REG
,

107 [
S_IFDIR
 >> 
STAT_SHIFT
] = 
TUX_DIR
,

108 [
S_IFCHR
 >> 
STAT_SHIFT
] = 
TUX_CHR
,

109 [
S_IFBLK
 >> 
STAT_SHIFT
] = 
TUX_BLK
,

110 [
S_IFIFO
 >> 
STAT_SHIFT
] = 
TUX_FIFO
,

111 [
S_IFSOCK
 >> 
STAT_SHIFT
] = 
TUX_SOCK
,

112 [
S_IFLNK
 >> 
STAT_SHIFT
] = 
TUX_LNK
,

115 
	#tux_zîo_Àn_îr‹
(
dú
, 
block
) \

116 
	`tux3_fs_îr‹
(
	`tux_sb
((
dú
)->
i_sb
), \

118 
	`tux_öode
(
dú
)->
öum
, 
block
)

	)

120 
	$tux_upd©e_íåy
(
buf„r_hód
 *
buf„r
, 
tux_dúít
 *
íåy
,

121 
öum_t
 
öum
, 
umode_t
 
mode
)

123 if(
DEBUG_MODE_K
==1)

125 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

127 
íåy
->
öum
 = 
	`˝u_to_be64
(inum);

128 
íåy
->
ty≥
 = 
tux_ty≥_by_mode
[(
mode
 & 
S_IFMT
Ë>> 
STAT_SHIFT
];

129 
	`m¨k_buf„r_dúty_n⁄
(
buf„r
);

130 
	`blockput
(
buf„r
);

131 
	}
}

137 
	$tux_upd©e_dúít
(
öode
 *
dú
, 
buf„r_hód
 *
buf„r
,

138 
tux_dúít
 *
íåy
, 
öode
 *
√w_öode
)

140 if(
DEBUG_MODE_K
==1)

142 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

144 
öum_t
 
√w_öum
 = 
	`tux_öode
(
√w_öode
)->
öum
;

146 
	`tux_upd©e_íåy
(
buf„r
, 
íåy
, 
√w_öum
, 
√w_öode
->
i_mode
);

148 
	`tux3_üârdúty
(
dú
);

149 
dú
->
i_mtime
 = dú->
i_˘ime
 = 
	`gëtime
();

150 
	`tux3_m¨k_öode_dúty
(
dú
);

151 
	}
}

153 
loff_t
 
	$tux_¸óã_íåy
(
öode
 *
dú
, c⁄° *
«me
, 
Àn
,

154 
öum_t
 
öum
, 
umode_t
 
mode
, 
loff_t
 *
size
)

156 if(
DEBUG_MODE_K
==1)

158 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

160 
dñè
 = 
	`tux3_gë_cuºít_dñè
();

161 
sb
 *sb = 
	`tux_sb
(
dú
->
i_sb
);

162 
tux_dúít
 *
íåy
;

163 
buf„r_hód
 *
buf„r
, *
˛⁄e
;

164 
ª˛í
 = 
	`TUX_REC_LEN
(
Àn
), 
ªc_Àn
, 
off£t
;

165 
	`unöôülized_v¨
(
«me_Àn
);

166 
blocksize
 = 
sb
->blocksize;

167 
block_t
 
block
, 
blocks
 = *
size
 >> 
sb
->
blockbôs
;

168 *
ﬁdd©a
;

170 
block
 = 0; block < 
blocks
; block++) {

171 
buf„r
 = 
	`blockªad
(
	`m≠pög
(
dú
), 
block
);

172 i‡(!
buf„r
)

173  -
EIO
;

174 
íåy
 = 
	`bufd©a
(
buf„r
);

175 
tux_dúít
 *
limô
 = 
	`bufd©a
(
buf„r
Ë+ 
blocksize
 - 
ª˛í
;

176 
íåy
 <
limô
) {

177 i‡(
íåy
->
ªc_Àn
 == 0) {

178 
	`blockput
(
buf„r
);

179 
	`tux_zîo_Àn_îr‹
(
dú
, 
block
);

180  -
EIO
;

182 
«me_Àn
 = 
	`TUX_REC_LEN
(
íåy
->name_len);

183 
ªc_Àn
 = 
	`tux_ªc_Àn_‰om_disk
(
íåy
->rec_len);

184 i‡(
	`is_dñëed
(
íåy
Ë&& 
ªc_Àn
 >
ª˛í
)

185 
¸óã
;

186 i‡(
ªc_Àn
 >
«me_Àn
 + 
ª˛í
)

187 
¸óã
;

188 
íåy
 = (*Î¡ry + 
ªc_Àn
;

190 
	`blockput
(
buf„r
);

192 
íåy
 = 
NULL
;

193 
buf„r
 = 
	`blockgë
(
	`m≠pög
(
dú
), 
block
);

194 
	`as£π
(!
	`buf„r_dúty
(
buf„r
));

196 
¸óã
:

201 
ﬁdd©a
 = 
	`bufd©a
(
buf„r
);

202 
˛⁄e
 = 
	`blockdúty
(
buf„r
, 
dñè
);

203 i‡(
	`IS_ERR
(
˛⁄e
)) {

204 
	`as£π
(
	`PTR_ERR
(
˛⁄e
Ë!-
EAGAIN
);

205 
	`blockput
(
buf„r
);

206  
	`PTR_ERR
(
˛⁄e
);

208 i‡(!
íåy
) {

210 
íåy
 = 
	`bufd©a
(
˛⁄e
);

211 
	`mem£t
(
íåy
, 0, 
blocksize
);

212 
íåy
->
ªc_Àn
 = 
	`tux_ªc_Àn_to_disk
(
blocksize
);

213 
	`as£π
(
	`is_dñëed
(
íåy
));

215 *
size
 +
blocksize
;

217 
íåy
 = 
	`±r_ªdúe˘
”¡ry, 
ﬁdd©a
, 
	`bufd©a
(
˛⁄e
));

219 i‡(!
	`is_dñëed
(
íåy
)) {

220 
tux_dúít
 *
√wít
 = (*)
íåy
 + 
«me_Àn
;

221 
ª°_ªc_Àn
 = 
ªc_Àn
 - 
«me_Àn
;

222 
√wít
->
ªc_Àn
 = 
	`tux_ªc_Àn_to_disk
(
ª°_ªc_Àn
);

223 
íåy
->
ªc_Àn
 = 
	`tux_ªc_Àn_to_disk
(
«me_Àn
);

224 
íåy
 = 
√wít
;

228 
íåy
->
«me_Àn
 = 
Àn
;

229 
	`mem˝y
(
íåy
->
«me
,Çame, 
Àn
);

230 
off£t
 = (*)
íåy
 - 
	`bufd©a
(
˛⁄e
);

232 
	`tux_upd©e_íåy
(
˛⁄e
, 
íåy
, 
öum
, 
mode
);

234  (
block
 << 
sb
->
blockbôs
Ë+ 
off£t
;

235 
	}
}

237 
	$tux_¸óã_dúít
(
öode
 *
dú
, c⁄° 
q°r
 *q°r, 
öum_t
 
öum
,

238 
umode_t
 
mode
)

240 if(
DEBUG_MODE_K
==1)

242 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

244 
loff_t
 
whîe
;

246 
	`tux3_üârdúty
(
dú
);

248 
whîe
 = 
	`tux_¸óã_íåy
(
dú
, (c⁄° *)
q°r
->
«me
, q°r->
Àn
, 
öum
,

249 
mode
, &
dú
->
i_size
);

250 i‡(
whîe
 < 0)

251  
whîe
;

253 
dú
->
i_mtime
 = dú->
i_˘ime
 = 
	`gëtime
();

254 
	`tux3_m¨k_öode_dúty
(
dú
);

257 
	}
}

259 
tux_dúít
 *
	$tux_föd_íåy
(
öode
 *
dú
, c⁄° *
«me
, 
Àn
,

260 
buf„r_hód
 **
ªsu…
, 
loff_t
 
size
)

262 if(
DEBUG_MODE_K
==1)

264 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

266 
sb
 *sb = 
	`tux_sb
(
dú
->
i_sb
);

267 
ª˛í
 = 
	`TUX_REC_LEN
(
Àn
);

268 
block_t
 
block
, 
blocks
 = 
size
 >> 
sb
->
blockbôs
;

269 
îr
 = -
ENOENT
;

271 
block
 = 0; block < 
blocks
; block++) {

272 
buf„r_hód
 *
buf„r
 = 
	`blockªad
(
	`m≠pög
(
dú
), 
block
);

273 i‡(!
buf„r
) {

274 
îr
 = -
EIO
;

275 
îr‹
;

277 
tux_dúít
 *
íåy
 = 
	`bufd©a
(
buf„r
);

278 
tux_dúít
 *
limô
 = (*)
íåy
 + 
sb
->
blocksize
 - 
ª˛í
;

279 
íåy
 <
limô
) {

280 i‡(
íåy
->
ªc_Àn
 == 0) {

281 
	`blockput
(
buf„r
);

282 
	`tux_zîo_Àn_îr‹
(
dú
, 
block
);

283 
îr
 = -
EIO
;

284 
îr‹
;

286 i‡(
	`tux_m©ch
(
íåy
, 
«me
, 
Àn
)) {

287 *
ªsu…
 = 
buf„r
;

288  
íåy
;

290 
íåy
 = 
	`√xt_íåy
(entry);

292 
	`blockput
(
buf„r
);

294 
îr‹
:

295 *
ªsu…
 = 
NULL
;

296  
	`ERR_PTR
(
îr
);

297 
	}
}

299 
tux_dúít
 *
	$tux_föd_dúít
(
öode
 *
dú
, c⁄° 
q°r
 *qstr,

300 
buf„r_hód
 **
ªsu…
)

302 if(
DEBUG_MODE_K
==1)

304 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

306  
	`tux_föd_íåy
(
dú
, (c⁄° *)
q°r
->
«me
, q°r->
Àn
,

307 
ªsu…
, 
dú
->
i_size
);

308 
	}
}

310 
	gfûëy≥
[
TUX_TYPES
] = {

311 [
TUX_UNKNOWN
] = 
DT_UNKNOWN
,

312 [
TUX_REG
] = 
DT_REG
,

313 [
TUX_DIR
] = 
DT_DIR
,

314 [
TUX_CHR
] = 
DT_CHR
,

315 [
TUX_BLK
] = 
DT_BLK
,

316 [
TUX_FIFO
] = 
DT_FIFO
,

317 [
TUX_SOCK
] = 
DT_SOCK
,

318 [
TUX_LNK
] = 
DT_LNK
,

321 
	$tux_ªaddú
(
fûe
 *fûe, *
°©e
, 
fûldú_t
 
fûldú
)

323 if(
DEBUG_MODE_K
==1)

325 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

327 
loff_t
 
pos
 = 
fûe
->
f_pos
;

328 
öode
 *
dú
 = 
	`fûe_öode
(
fûe
);

329 
ªvÆid©e
 = 
fûe
->
f_vîsi⁄
 !
dú
->
i_vîsi⁄
;

330 
sb
 *sb = 
	`tux_sb
(
dú
->
i_sb
);

331 
blockbôs
 = 
sb
->blockbits;

332 
block_t
 
block
, 
blocks
 = 
dú
->
i_size
 >> 
blockbôs
;

333 
off£t
 = 
pos
 & 
sb
->
blockmask
;

335 
	`as£π
(!(
dú
->
i_size
 & 
sb
->
blockmask
));

337 
block
 = 
pos
 >> 
blockbôs
 ; block < 
blocks
; block++) {

338 
buf„r_hód
 *
buf„r
 = 
	`blockªad
(
	`m≠pög
(
dú
), 
block
);

339 i‡(!
buf„r
)

340  -
EIO
;

341 *
ba£
 = 
	`bufd©a
(
buf„r
);

342 i‡(
ªvÆid©e
) {

343 i‡(
off£t
) {

344 
tux_dúít
 *
íåy
 = 
ba£
 + 
off£t
;

345 
tux_dúít
 *
p
 = 
ba£
 + (
off£t
 & 
sb
->
blockmask
);

346 
p
 < 
íåy
 &&Ö->
ªc_Àn
)

347 
p
 = 
	`√xt_íåy
(p);

348 
off£t
 = (*)
p
 - 
ba£
;

349 
fûe
->
f_pos
 = (
block
 << 
blockbôs
Ë+ 
off£t
;

351 
fûe
->
f_vîsi⁄
 = 
dú
->
i_vîsi⁄
;

352 
ªvÆid©e
 = 0;

354 
tux_dúít
 *
limô
 = 
ba£
 + 
sb
->
blocksize
 - 
	`TUX_REC_LEN
(1);

355 
tux_dúít
 *
íåy
 = 
ba£
 + 
off£t
;É¡ry <
limô
;É¡ry = 
	`√xt_íåy
(entry)) {

356 i‡(
íåy
->
ªc_Àn
 == 0) {

357 
	`blockput
(
buf„r
);

358 
	`tux_zîo_Àn_îr‹
(
dú
, 
block
);

359  -
EIO
;

361 i‡(!
	`is_dñëed
(
íåy
)) {

362 
ty≥
 = (
íåy
->ty≥ < 
TUX_TYPES
Ë? 
fûëy≥
[íåy->ty≥] : 
DT_UNKNOWN
;

363 
œme
 = 
	`fûldú
(

364 
°©e
, 
íåy
->
«me
,É¡ry->
«me_Àn
,

365 (
block
 << 
blockbôs
Ë| ((*)
íåy
 - 
ba£
),

366 
	`be64_to_˝u
(
íåy
->
öum
), 
ty≥
);

367 i‡(
œme
) {

368 
	`blockput
(
buf„r
);

372 
fûe
->
f_pos
 +
	`tux_ªc_Àn_‰om_disk
(
íåy
->
ªc_Àn
);

374 
	`blockput
(
buf„r
);

375 
off£t
 = 0;

378 
	}
}

380 
	$tux_dñëe_íåy
(
öode
 *
dú
, 
buf„r_hód
 *
buf„r
,

381 
tux_dúít
 *
íåy
)

383 if(
DEBUG_MODE_K
==1)

385 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

387 
dñè
 = 
	`tux3_gë_cuºít_dñè
();

388 
tux_dúít
 *
¥ev
 = 
NULL
, *
this
 = 
	`bufd©a
(
buf„r
);

389 
buf„r_hód
 *
˛⁄e
;

390 *
ﬁdd©a
;

392 (*)
this
 < (*)
íåy
) {

393 i‡(
this
->
ªc_Àn
 == 0) {

394 
	`blockput
(
buf„r
);

395 
	`tux_zîo_Àn_îr‹
(
dú
, 
	`bufödex
(
buf„r
));

396  -
EIO
;

398 
¥ev
 = 
this
;

399 
this
 = 
	`√xt_íåy
(this);

406 
ﬁdd©a
 = 
	`bufd©a
(
buf„r
);

407 
˛⁄e
 = 
	`blockdúty
(
buf„r
, 
dñè
);

408 i‡(
	`IS_ERR
(
˛⁄e
)) {

409 
	`as£π
(
	`PTR_ERR
(
˛⁄e
Ë!-
EAGAIN
);

410 
	`blockput
(
buf„r
);

411  
	`PTR_ERR
(
˛⁄e
);

413 
íåy
 = 
	`±r_ªdúe˘
”¡ry, 
ﬁdd©a
, 
	`bufd©a
(
˛⁄e
));

414 
¥ev
 = 
	`±r_ªdúe˘
’ªv, 
ﬁdd©a
, 
	`bufd©a
(
˛⁄e
));

416 i‡(
¥ev
)

417 
¥ev
->
ªc_Àn
 = 
	`tux_ªc_Àn_to_disk
((*)
	`√xt_íåy
(
íåy
) - (*)prev);

418 
	`mem£t
(
íåy
->
«me
, 0,É¡ry->
«me_Àn
);

419 
íåy
->
«me_Àn
 =É¡ry->
ty≥
 = 0;

420 
íåy
->
öum
 = 0;

422 
	`m¨k_buf„r_dúty_n⁄
(
˛⁄e
);

423 
	`blockput
(
˛⁄e
);

426 
	}
}

428 
	$tux_dñëe_dúít
(
öode
 *
dú
, 
buf„r_hód
 *
buf„r
,

429 
tux_dúít
 *
íåy
)

431 if(
DEBUG_MODE_K
==1)

433 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

435 
îr
;

437 
îr
 = 
	`tux_dñëe_íåy
(
dú
, 
buf„r
, 
íåy
);

438 i‡(!
îr
) {

439 
	`tux3_üârdúty
(
dú
);

440 
dú
->
i_˘ime
 = dú->
i_mtime
 = 
	`gëtime
();

441 
	`tux3_m¨k_öode_dúty
(
dú
);

444  
îr
;

445 
	}
}

447 
	$tux_dú_is_em±y
(
öode
 *
dú
)

449 if(
DEBUG_MODE_K
==1)

451 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

453 
sb
 *sb = 
	`tux_sb
(
dú
->
i_sb
);

454 
block_t
 
block
, 
blocks
 = 
dú
->
i_size
 >> 
sb
->
blockbôs
;

455 
__be64
 
£lf
 = 
	`˝u_to_be64
(
	`tux_öode
(
dú
)->
öum
);

456 
buf„r_hód
 *
buf„r
;

458 
block
 = 0; block < 
blocks
; block++) {

459 
buf„r
 = 
	`blockªad
(
	`m≠pög
(
dú
), 
block
);

460 i‡(!
buf„r
)

461  -
EIO
;

463 
tux_dúít
 *
íåy
 = 
	`bufd©a
(
buf„r
);

464 
tux_dúít
 *
limô
 = 
	`bufd©a
(
buf„r
Ë+ 
sb
->
blocksize
 - 
	`TUX_REC_LEN
(1);

465 ; 
íåy
 <
limô
;É¡ry = 
	`√xt_íåy
(entry)) {

466 i‡(!
íåy
->
ªc_Àn
) {

467 
	`blockput
(
buf„r
);

468 
	`tux_zîo_Àn_îr‹
(
dú
, 
block
);

469  -
EIO
;

471 i‡(
	`is_dñëed
(
íåy
))

473 i‡(
íåy
->
«me
[0] != '.')

474 
nŸ_em±y
;

475 i‡(
íåy
->
«me_Àn
 > 2)

476 
nŸ_em±y
;

477 i‡(
íåy
->
«me_Àn
 < 2) {

478 i‡(
íåy
->
öum
 !
£lf
)

479 
nŸ_em±y
;

480 } i‡(
íåy
->
«me
[1] != '.')

481 
nŸ_em±y
;

483 
	`blockput
(
buf„r
);

486 
nŸ_em±y
:

487 
	`blockput
(
buf„r
);

488  -
ENOTEMPTY
;

489 
	}
}

	@kernel/dirty-buffer.h

1 #i‚de‡
ATOMIC_COMMIT_H


2 
	#ATOMIC_COMMIT_H


	)

4 
	~"buf„r.h
"

14 
ölöe
 
	$m¨k_buf„r_dúty_©omic
(
buf„r_hód
 *
buf„r
)

16 
	`tux3_m¨k_buf„r_dúty
(
buf„r
);

17 
	}
}

20 
ölöe
 
	$m¨k_buf„r_dúty_n⁄
(
buf„r_hód
 *
buf„r
)

22 
	`as£π
(
	`buf„r_dúty
(
buf„r
));

23 
	}
}

26 
ölöe
 
	$m¨k_buf„r_unify_©omic
(
buf„r_hód
 *
buf„r
)

28 
	`tux3_m¨k_buf„r_unify
(
buf„r
);

29 
	}
}

32 
ölöe
 
	$m¨k_buf„r_unify_n⁄
(
buf„r_hód
 *
buf„r
)

34 
	`as£π
(
	`buf„r_dúty
(
buf„r
));

35 
	}
}

	@kernel/dleaf.c

12 
	~"tux3.h
"

13 
	~"dÀaf.h
"

15 #i‚de‡
åa˚


16 
	#åa˚
 
åa˚_⁄


	)

68 
	$dÀaf_båì_öô
(
båì
 *btree)

70 if(
DEBUG_MODE_K
==1)

72 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

74 
båì
->
íåõs_≥r_Àaf
 = 64;

75 
	}
}

77 
	$dÀaf_öô
(
båì
 *båì, *
Àaf
)

79 if(
DEBUG_MODE_K
==1)

81 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

83 
dÀaf
 *dÀa‡
Àaf
;

84 *
dÀaf
 = (dleaf){

85 .
magic
 = 
	`˝u_to_be16
(
TUX3_MAGIC_DLEAF
),

86 .
‰ì
 = 
	`˝u_to_be16
((
dÀaf
)),

87 .
u£d
 = 
	`˝u_to_be16
(
båì
->
sb
->
blocksize
)

90 
	}
}

92 
	$dÀaf_‰ì
(
båì
 *båì, *
Àaf
)

94 if(
DEBUG_MODE_K
==1)

96 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

98 
dÀaf
 *dÀa‡
Àaf
;

99  
	`be16_to_˝u
(
dÀaf
->
u£d
Ë- be16_to_˝u(dÀaf->
‰ì
);

100 
	}
}

102 
	$dÀaf_√ed
(
båì
 *båì, *
vÀaf
)

104 if(
DEBUG_MODE_K
==1)

106 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

108 
dÀaf
 *
Àaf
 = 
vÀaf
;

109  
båì
->
sb
->
blocksize
 - 
	`dÀaf_‰ì
(båì, 
Àaf
Ë- (
dÀaf
);

110 
	}
}

112 
ölöe
 
tuxkey_t
 
	$gë_ödex
(
group
 *group, 
íåy
 *entry)

114 if(
DEBUG_MODE_K
==1)

116 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

118  ((
tuxkey_t
)
	`group_keyhi
(
group
Ë<< 24Ë| 
	`íåy_keylo
(
íåy
);

119 
	}
}

121 
	$dÀaf_¢iff
(
båì
 *båì, *
Àaf
)

123 if(
DEBUG_MODE_K
==1)

125 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

127 
dÀaf
 *dÀa‡
Àaf
;

128  
dÀaf
->
magic
 =
	`˝u_to_be16
(
TUX3_MAGIC_DLEAF
);

129 
	}
}

131 
	$dÀaf_ˇn_‰ì
(
båì
 *båì, *
vÀaf
)

133 if(
DEBUG_MODE_K
==1)

135 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

137  
	`dÀaf_√ed
(
båì
, 
vÀaf
) == 0;

138 
	}
}

140 
	$dÀaf_dump
(
båì
 *båì, *
vÀaf
)

142 if(
DEBUG_MODE_K
==1)

144 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

146 i‡(!
tux3_åa˚
)

149 
blocksize
 = 
båì
->
sb
->blocksize;

150 
dÀaf
 *
Àaf
 = 
vÀaf
;

151 
group
 *
gdi˘
 = (*)
Àaf
 + 
blocksize
, *
gba£
 = --gdi˘ - 
	`dÀaf_groups
(leaf);

152 
íåy
 *
edi˘
 = (*)(
gba£
 + 1), *entry =Édict;

153 
diskexã¡
 *
exã¡s
 = 
Àaf
->
èbÀ
;

155 
	`__tux3_dbg
("%òíåy groups:\n", 
	`dÀaf_groups
(
Àaf
));

156 
group
 *grou∞
gdi˘
; grou∞> 
gba£
; group--) {

157 
	`__tux3_dbg
(" %ti/%i:", 
gdi˘
 - 
group
, 
	`group_cou¡
(group));

159 
íåy
 *
eba£
 =É¡ry - 
	`group_cou¡
(
group
);

160 
íåy
 > 
eba£
) {

161 --
íåy
;

162 
off£t
 = 
íåy
 =
edi˘
 - 1 ? 0 : 
	`íåy_limô
(entry + 1);

163 
cou¡
 = 
	`íåy_limô
(
íåy
Ë- 
off£t
;

164 
	`__tux3_dbg
(" %Lx =>", 
	`gë_ödex
(
group
, 
íåy
));

166 i‡(
cou¡
 < 0)

167 
	`__tux3_dbg
(" <corrupt>");

168 
i
 = 0; i < 
cou¡
; i++) {

169 
diskexã¡
 
exã¡
 = 
exã¡s
[
off£t
 + 
i
];

170 
	`__tux3_dbg
(" %Lx", 
	`exã¡_block
(
exã¡
));

171 i‡(
	`exã¡_cou¡
(
exã¡
))

172 
	`__tux3_dbg
("/%x", 
	`exã¡_cou¡
(
exã¡
));

175 
	`__tux3_dbg
(";");

177 
	`__tux3_dbg
("\n");

178 
exã¡s
 +
	`íåy_limô
(
íåy
);

179 
edi˘
 -
	`group_cou¡
(
group
);

181 
	}
}

183 
	$dÀaf_‰ì2
(
dÀaf
 *
Àaf
, 
blocksize
)

185 if(
DEBUG_MODE_K
==1)

187 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

189 
group
 *
gdi˘
 = (*)
Àaf
 + 
blocksize
, *
g°›
 = gdi˘ - 
	`dÀaf_groups
(leaf);

190 
íåy
 *
edi˘
 = (*)
g°›
, *entry =Édict;

191 
diskexã¡
 *
exã¡s
 = 
Àaf
->
èbÀ
;

193 
group
 *grou∞
gdi˘
; group-- > 
g°›
;)

194 
exã¡s
 +
	`íåy_limô
(
íåy
 -
	`group_cou¡
(
group
));

195  (*)
íåy
 - (*)
exã¡s
;

196 
	}
}

198 
	$dÀaf_check
(
dÀaf
 *
Àaf
, 
blocksize
)

200 if(
DEBUG_MODE_K
==1)

202 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

204 
group
 *
gdi˘
 = (*)
Àaf
 + 
blocksize
, *
g°›
 = gdi˘ - 
	`dÀaf_groups
(leaf);

205 
íåy
 *
edi˘
 = (*)
g°›
, *
e°›
 =Édict;

206 
diskexã¡
 *
exã¡s
 = 
Àaf
->
èbÀ
;

207 
excou¡
 = 0, 
ícou¡
 = 0;

208 *
why
;

210 i‡(!
	`dÀaf_groups
(
Àaf
))

213 
keyhi
 = 0;

214 
diskexã¡
 *
exba£
 = 
Àaf
->
èbÀ
;

215 
group
 *grou∞
gdi˘
 - 1; grou∞>
g°›
; group--) {

216 
	`as£π
(
	`group_keyhi
(
group
Ë>
keyhi
);

217 
	`as£π
(
	`group_cou¡
(
group
) > 0);

218 
	`as£π
(
	`group_cou¡
(
group
Ë<
MAX_GROUP_ENTRIES
);

219 
keyhi
 = 
	`group_keyhi
(
group
);

220 
íåy
 *íåy = 
e°›
;

221 
e°›
 -
	`group_cou¡
(
group
);

222 
limô
 = 0, 
keylo
 = -1;

223 --
íåy
 >
e°›
) {

224 
	`as£π
(()
	`íåy_keylo
(
íåy
Ë> ()
keylo
);

225 
	`as£π
(
	`íåy_limô
(
íåy
Ë> 
limô
);

226 
keylo
 = 
	`íåy_keylo
(
íåy
);

227 
limô
 = 
	`íåy_limô
(
íåy
);

229 
diskexã¡
 *
ex°›
 = 
exba£
 + 
	`íåy_limô
(
e°›
);

230 
block_t
 
block
 = 0;

231 
exba£
 < 
ex°›
) {

232 
	`as£π
(
	`exã¡_block
(*
exba£
Ë!
block
);

233 
exba£
++;

235 
excou¡
 +
	`íåy_limô
(
e°›
);

236 
ícou¡
 +
	`group_cou¡
(
group
);

239 
why
 = "used count wrong";

240 i‡(
	`be16_to_˝u
(
Àaf
->
u£d
Ë!(*)(
edi˘
 - 
ícou¡
) - (*)leaf)

241 
ìk
;

242 
why
 = "free count wrong";

243 i‡(
	`be16_to_˝u
(
Àaf
->
‰ì
Ë!(*)(
exã¡s
 + 
excou¡
) - (*)leaf)

244 
ìk
;

245 
why
 = "free check mismatch";

246 i‡(
	`be16_to_˝u
(
Àaf
->
u£d
Ë- be16_to_˝u÷óf->
‰ì
Ë!
	`dÀaf_‰ì2
÷óf, 
blocksize
))

247 
ìk
;

250 
ìk
:

251 
	`tux3_dbg
("îr‹: fªê%i, u£d %i", 
	`be16_to_˝u
(
Àaf
->
‰ì
), be16_to_˝u÷óf->
u£d
));

252 
	`tux3_dbg
("îr‹: %s!", 
why
);

254 
	}
}

256 
	$dÀaf_•lô_©
(*
‰om
, *
öto
, 
•lô
, 
blocksize
)

258 if(
DEBUG_MODE_K
==1)

260 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

262 
dÀaf
 *
Àaf
 = 
‰om
, *
Àaf2
 = 
öto
;

263 
groups
 = 
	`dÀaf_groups
(
Àaf
), 
groups2
;

264 
group
 *
gdi˘
 = 
‰om
 + 
blocksize
, *
gba£
 = gdi˘ - 
groups
;

265 
íåy
 *
edi˘
 = (*)
gba£
, *
eba£
 = (*)
Àaf
 + 
	`be16_to_˝u
÷óf->
u£d
);

266 
ªcou¡
 = 0, 
gr•lô
 = 0, 
ex•lô
 = 0;

267 
íåõs
 = 
edi˘
 - 
eba£
;

269 
	`åa˚
("•lô %∞ötÿ%∞© %x", 
Àaf
, 
Àaf2
, 
•lô
);

270 i‡(!
groups
)

272 
	`as£π
(
•lô
 < 
íåõs
);

273 
group
 *grou∞
gdi˘
 - 1; grou∞>
gba£
; group--, 
gr•lô
++) {

274 i‡(
ªcou¡
 + 
	`group_cou¡
(
group
Ë> 
•lô
)

276 
edi˘
 -
	`group_cou¡
(
group
);

277 
ex•lô
 +
	`íåy_limô
(
edi˘
);

278 
ªcou¡
 +
	`group_cou¡
(
group
);

282 
cut
 = 
•lô
 - 
ªcou¡
;

283 i‡(
cut
)

284 
ex•lô
 +
	`íåy_limô
(
edi˘
 - 
cut
);

285 
edi˘
 = (*)
gba£
;

286 
	`åa˚
("•lô %òíåõ†© grou∞%i,É¡ry %x", 
íåõs
, 
gr•lô
, 
cut
);

287 
	`åa˚
("•lôÉxã¡†© %i", 
ex•lô
);

289 
size
 = 
‰om
 + 
	`be16_to_˝u
(
Àaf
->
‰ì
Ë- (*)÷óf->
èbÀ
 + 
ex•lô
);

290 
	`mem˝y
(
Àaf2
->
èbÀ
, 
Àaf
->èbÀ + 
ex•lô
, 
size
);

293 
group
 *
gdi˘2
 = (*)
Àaf2
 + 
blocksize
;

294 
	`£t_dÀaf_groups
(
Àaf2
, 
groups2
 = (
groups
 - 
gr•lô
));

295 
	`vecc›y
(
gdi˘2
 - 
	`dÀaf_groups
(
Àaf2
), 
gba£
, dleaf_groups(leaf2));

296 
	`öc_group_cou¡
(
gdi˘2
 - 1, -
cut
);

297 
	`£t_dÀaf_groups
(
Àaf
, 
groups
 = (
gr•lô
 + !!
cut
));

298 
gba£
 = 
gdi˘
 - 
groups
;

299 i‡(
cut
)

300 
	`£t_group_cou¡
(
gdi˘
 - 
groups
, 
cut
);

303 
íåy
 *
edi˘2
 = (*)(
gdi˘2
 - 
groups2
);

305 
	`as£π
((
íåy
 *)((*)
Àaf
 + 
	`be16_to_˝u
÷óf->
u£d
)Ë=
edi˘
 - 
íåõs
);

307 
íc›y
 = 
íåõs
 - 
•lô
;

308 
	`vecc›y
(
edi˘2
 - 
íc›y
, 
eba£
,Éncopy);

309 i‡(
cut
)

310 
i
 = 1; i <
	`group_cou¡
((
gdi˘2
 - 1)); i++)

311 
	`öc_íåy_limô
(
edi˘2
 - 
i
, -
	`íåy_limô
(
edi˘
 - 
•lô
));

312 
	`vecmove
(
gdi˘
 - 
groups
 - 
•lô
, 
edi˘
 - split, split);

315 
Àaf
->
‰ì
 = 
	`˝u_to_be16
((*)÷óf->
èbÀ
 + 
ex•lô
Ë- 
‰om
);

316 
Àaf
->
u£d
 = 
	`˝u_to_be16
((*)(
gba£
 - 
•lô
Ë- 
‰om
);

317 
Àaf2
->
‰ì
 = 
	`˝u_to_be16
((*)
Àaf
->
èbÀ
 + 
size
 - 
‰om
);

318 
Àaf2
->
u£d
 = 
	`˝u_to_be16
((*)(
gdi˘
 - 
groups2
 - 
íc›y
Ë- 
‰om
);

319 
	`mem£t
(
‰om
 + 
	`be16_to_˝u
(
Àaf
->
‰ì
), 0, be16_to_˝u÷óf->
u£d
) - be16_to_cpu(leaf->free));

320 
	`as£π
(!
	`dÀaf_check
(
Àaf
, 
blocksize
));

321 
	`as£π
(!
	`dÀaf_check
(
Àaf2
, 
blocksize
));

322  
groups2
;

323 
	}
}

329 
tuxkey_t
 
	$dÀaf_•lô
(
båì
 *båì, 
tuxkey_t
 
höt
, *
‰om
, *
öto
)

331 if(
DEBUG_MODE_K
==1)

333 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

335 
dÀaf
 *
Àaf
 = 
‰om
, *
Àaf2
 = 
öto
;

336 
	`as£π
(
	`dÀaf_¢iff
(
båì
, 
‰om
));

337 
blocksize
 = 
båì
->
sb
->blocksize;

338 
group
 *
gdi˘
 = 
‰om
 + 
blocksize
, *
gba£
 = gdi˘ - 
	`dÀaf_groups
(
Àaf
);

339 
íåy
 *
edi˘
 = (*)
gba£
;

340 
íåy
 *
eba£
 = (*)
Àaf
 + 
	`be16_to_˝u
÷óf->
u£d
);

341 
íåõs
 = 
edi˘
 - 
eba£
;

342 
	`as£π
(
íåõs
 >= 2);

343 
groups2
 = 
	`dÀaf_•lô_©
(
‰om
, 
öto
, 
íåõs
 / 2, 
blocksize
);

344 
group
 *
gdi˘2
 = (*)
Àaf2
 + 
blocksize
;

346  
	`gë_ödex
(
gdi˘2
 - 1, (
íåy
 *)(gdi˘2 - 
groups2
) - 1);

347 
	}
}

356 
	$dÀaf_mîge
(
båì
 *båì, *
vöto
, *
v‰om
)

358 if(
DEBUG_MODE_K
==1)

360 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

362 
dÀaf
 *
Àaf
 = 
vöto
, *
‰om
 = 
v‰om
;

363 
group
 *
gdi˘
 = (*)
Àaf
 + 
båì
->
sb
->
blocksize
;

364 
group
 *
g°›
 = 
gdi˘
 - 
	`dÀaf_groups
(
Àaf
);

365 
íåy
 *
edi˘
 = (íåy *)
g°›
;

366 
‰ì
 = 
	`be16_to_˝u
(
Àaf
->free);

367 
group
 *
gdi˘2
 = (*)
‰om
 + 
båì
->
sb
->
blocksize
;

368 
group
 *
group2
 = 
gdi˘2
 - 1;

369 
group
 *
g°›2
 = 
gdi˘2
 - 
	`dÀaf_groups
(
‰om
);

370 
íåy
 *
edi˘2
 = (íåy *)
g°›2
;

371 
mîge_gcou¡
 = 0, 
ª°_gcou¡
 = 0;

372 
ˇn_mîge_group
 = 0;

375 i‡(
	`dÀaf_groups
(
‰om
) == 0)

379 i‡(
	`dÀaf_groups
(
Àaf
) == 0) {

380 
u£d
 = 
	`be16_to_˝u
(
‰om
->used);

381 
	`mem˝y
(
Àaf
, 
‰om
, 
	`be16_to_˝u
(‰om->
‰ì
));

382 
	`mem˝y
((*)
Àaf
 + 
u£d
, (*)
‰om
 + u£d, 
båì
->
sb
->
blocksize
 - used);

390 i‡(
	`dÀaf_√ed
(
båì
, 
v‰om
Ë> 
	`dÀaf_‰ì
(båì, 
vöto
))

394 i‡(
	`group_keyhi
(
g°›
Ë=group_keyhi(
group2
) &&

395 
	`group_cou¡
(
g°›
Ë< 
MAX_GROUP_ENTRIES
) {

396 
gcou¡2
 = 
	`group_cou¡
(
group2
);

397 
room
 = 
MAX_GROUP_ENTRIES
 - 
	`group_cou¡
(
g°›
);

399 i‡(
room
 < 
gcou¡2
) {

401 
ª°_gcou¡
 = 
gcou¡2
 - 
room
;

402 
gcou¡2
 = 
room
;

404 
ˇn_mîge_group
 = 1;

407 
mîge_gcou¡
 = 
gcou¡2
;

411 
size
 = 
	`be16_to_˝u
(
‰om
->
‰ì
Ë- (
dÀaf
);

412 
	`mem˝y
((*)
Àaf
 + 
‰ì
, 
‰om
->
èbÀ
, 
size
);

413 
Àaf
->
‰ì
 = 
	`˝u_to_be16
(‰ì + 
size
);

416 
	`as£π
((
group
Ë=(
íåy
));

417 
addgroups
 = 
	`dÀaf_groups
(
‰om
Ë- 
ˇn_mîge_group
;

418 
íåy
 *
eba£2
 = (*)
‰om
 + 
	`be16_to_˝u
(‰om->
u£d
);

419 
íåy
 *
eba£
 = (*)
Àaf
 + 
	`be16_to_˝u
÷óf->
u£d
);

420 
	`vecmove
(
eba£
 - 
addgroups
,Éba£, 
edi˘
 -Ébase);

421 
	`vecc›y
(
g°›
 - 
addgroups
, 
g°›2
,áddgroups);

422 
eba£
 -
addgroups
;

423 
	`öc_dÀaf_groups
(
Àaf
, 
addgroups
);

426 
size
 = (*)
edi˘2
 - (*)
eba£2
;

427 
	`mem˝y
((*)
eba£
 - 
size
, 
eba£2
, size);

428 
Àaf
->
u£d
 = 
	`˝u_to_be16
((*)
eba£
 - 
size
 - (*)leaf);

430 i‡(
mîge_gcou¡
) {

432 
íåy
 *
e°›
 = 
eba£
 - 
mîge_gcou¡
;

433 
limô_adju°
 = 
	`íåy_limô
(
eba£
);

434 
	`öc_group_cou¡
(
g°›
, 
mîge_gcou¡
);

435 --
eba£
 >
e°›
)

436 
	`öc_íåy_limô
(
eba£
, 
limô_adju°
);

437 i‡(
ª°_gcou¡
) {

439 
eba£
 = 
e°›
;

440 
e°›
 = 
eba£
 - 
ª°_gcou¡
;

441 
limô_adju°
 = 
	`íåy_limô
(
edi˘2
 - 
mîge_gcou¡
);

442 
	`£t_group_cou¡
(
g°›
 - 1, 
ª°_gcou¡
);

443 --
eba£
 >
e°›
)

444 
	`öc_íåy_limô
(
eba£
, -
limô_adju°
);

447 
	`as£π
(!
	`dÀaf_check
(
Àaf
, 
båì
->
sb
->
blocksize
));

450 
	}
}

486 
	$dwÆk_ªdúe˘
(
dwÆk
 *
wÆk
, 
dÀaf
 *
§c
, dÀa‡*
d°
)

488 if(
DEBUG_MODE_K
==1)

490 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

492 
wÆk
->
Àaf
 = 
d°
;

493 
wÆk
->
group
 = 
	`±r_ªdúe˘
(wÆk->group, 
§c
, 
d°
);

494 
wÆk
->
g°›
 = 
	`±r_ªdúe˘
(wÆk->g°›, 
§c
, 
d°
);

495 
wÆk
->
gdi˘
 = 
	`±r_ªdúe˘
(wÆk->gdi˘, 
§c
, 
d°
);

496 
wÆk
->
íåy
 = 
	`±r_ªdúe˘
(wÆk->íåy, 
§c
, 
d°
);

497 
wÆk
->
e°›
 = 
	`±r_ªdúe˘
(wÆk->e°›, 
§c
, 
d°
);

498 
wÆk
->
exba£
 = 
	`±r_ªdúe˘
(wÆk->exba£, 
§c
, 
d°
);

499 
wÆk
->
exã¡
 = 
	`±r_ªdúe˘
(wÆk->exã¡, 
§c
, 
d°
);

500 
wÆk
->
ex°›
 = 
	`±r_ªdúe˘
(wÆk->ex°›, 
§c
, 
d°
);

501 
	}
}

506 
	$dwÆk_fú°
(
dwÆk
 *
wÆk
)

508 if(
DEBUG_MODE_K
==1)

510 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

512  
wÆk
->
Àaf
->
èbÀ
 =wÆk->
exã¡
;

513 
	}
}

516 
	$dwÆk_íd
(
dwÆk
 *
wÆk
)

518 if(
DEBUG_MODE_K
==1)

520 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

522  
wÆk
->
exã¡
 =wÆk->
ex°›
;

523 
	}
}

525 
tuxkey_t
 
	$dwÆk_ödex
(
dwÆk
 *
wÆk
)

527 if(
DEBUG_MODE_K
==1)

529 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

531  
	`gë_ödex
(
wÆk
->
group
, wÆk->
íåy
);

532 
	}
}

534 
block_t
 
	$dwÆk_block
(
dwÆk
 *
wÆk
)

536 if(
DEBUG_MODE_K
==1)

538 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

540  
	`exã¡_block
(*
wÆk
->
exã¡
);

541 
	}
}

543 
	$dwÆk_cou¡
(
dwÆk
 *
wÆk
)

545 if(
DEBUG_MODE_K
==1)

547 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

549  
	`exã¡_cou¡
(*
wÆk
->
exã¡
);

550 
	}
}

553 
	$dwÆk_dump
(
dwÆk
 *
wÆk
)

555 if(
DEBUG_MODE_K
==1)

557 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

559 i‡(
wÆk
->
Àaf
->
èbÀ
 =wÆk->
ex°›
) {

560 
	`åa˚_⁄
("emptyÜeaf");

563 i‡(
	`dwÆk_íd
(
wÆk
)) {

564 
	`åa˚_⁄
("end ofÉxtent");

567 
diskexã¡
 *
íåy_exba£
;

568 i‡(
wÆk
->
íåy
 + 1 =wÆk->
e°›
 + 
	`group_cou¡
(wÆk->
group
))

569 
íåy_exba£
 = 
wÆk
->
exba£
;

571 
íåy_exba£
 = 
wÆk
->
exba£
 + 
	`íåy_limô
(wÆk->
íåy
 + 1);

572 
	`åa˚_⁄
("Àa‡%p", 
wÆk
->
Àaf
);

573 
	`åa˚_⁄
("grou∞%tu/%tu", (
wÆk
->
gdi˘
 - wÆk->
group
Ë- 1, wÆk->gdi˘ - wÆk->
g°›
);

574 
	`åa˚_⁄
("íåy %tu/%u", 
	`group_cou¡
(
wÆk
->
group
Ë- (wÆk->
íåy
 - wÆk->
e°›
) - 1, group_count(walk->group));

575 
	`åa˚_⁄
("exã¡ %tu/%tu", 
wÆk
->
exã¡
 - 
íåy_exba£
, wÆk->
ex°›
 -Éntry_exbase);

576 
	}
}

578 
	$dwÆk_check
(
dwÆk
 *
wÆk
)

580 if(
DEBUG_MODE_K
==1)

582 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

584 i‡(!
	`dÀaf_groups
(
wÆk
->
Àaf
)) {

585 
	`as£π
(
wÆk
->
group
 =wÆk->
g°›
);

586 
	`as£π
(
wÆk
->
íåy
 =wÆk->
e°›
);

587 
	`as£π
(
wÆk
->
exba£
 =wÆk->
exã¡
);

588 
	`as£π
(
wÆk
->
exã¡
 =wÆk->
ex°›
);

589 
	`as£π
(
wÆk
->
Àaf
->
èbÀ
 =wÆk->
ex°›
);

590 } i‡(
	`dwÆk_íd
(
wÆk
)) {

591 
	`as£π
(
wÆk
->
group
 =wÆk->
g°›
);

592 
	`as£π
(
wÆk
->
íåy
 =wÆk->
e°›
);

593 
	`as£π
(
wÆk
->
exba£
 < wÆk->
exã¡
);

594 
	`as£π
(
wÆk
->
exã¡
 =wÆk->
ex°›
);

596 
	`as£π
(
wÆk
->
group
 >wÆk->
g°›
);

597 
	`as£π
(
wÆk
->
íåy
 >wÆk->
e°›
);

598 
	`as£π
(
wÆk
->
exba£
 <wÆk->
exã¡
);

599 
	`as£π
(
wÆk
->
exã¡
 < wÆk->
ex°›
);

605 i‡(
wÆk
->
íåy
 + 1 =wÆk->
e°›
 + 
	`group_cou¡
(wÆk->
group
))

606 
	`as£π
(
	`íåy_limô
(
wÆk
->
íåy
) == 1);

608 
	`as£π
(
	`íåy_limô
(
wÆk
->
íåy
) -Éntry_limit(walk->entry + 1) == 1);

610 
	}
}

613 
	$dwÆk_√xt
(
dwÆk
 *
wÆk
)

615 if(
DEBUG_MODE_K
==1)

617 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

620 i‡(
	`dwÆk_íd
(
wÆk
))

622 
wÆk
->
exã¡
++;

623 i‡(
wÆk
->
exã¡
 =wÆk->
ex°›
) {

624 i‡(
wÆk
->
íåy
 =wÆk->
e°›
) {

625 i‡(
wÆk
->
group
 =wÆk->
g°›
)

627 
wÆk
->
group
--;

628 
wÆk
->
exba£
 +
	`íåy_limô
(wÆk->
e°›
);

629 
wÆk
->
e°›
 -
	`group_cou¡
(wÆk->
group
);

631 
wÆk
->
íåy
--;

632 
wÆk
->
ex°›
 = wÆk->
exba£
 + 
	`íåy_limô
(wÆk->
íåy
);

634 
	`dwÆk_check
(
wÆk
);

636 
	}
}

639 
	$dwÆk_back
(
dwÆk
 *
wÆk
)

641 if(
DEBUG_MODE_K
==1)

643 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

646 i‡(
	`dwÆk_fú°
(
wÆk
))

648 
diskexã¡
 *
íåy_exba£
;

650 i‡(
wÆk
->
íåy
 + 1 =wÆk->
e°›
 + 
	`group_cou¡
(wÆk->
group
))

651 
íåy_exba£
 = 
wÆk
->
exba£
;

653 
íåy_exba£
 = 
wÆk
->
exba£
 + 
	`íåy_limô
(wÆk->
íåy
 + 1);

654 
wÆk
->
exã¡
--;

655 i‡(
wÆk
->
exã¡
 < 
íåy_exba£
) {

656 i‡(
wÆk
->
exã¡
 < wÆk->
exba£
) {

657 i‡(
wÆk
->
group
 =wÆk->
gdi˘
)

659 
wÆk
->
group
++;

660 
wÆk
->
e°›
 = wÆk->
íåy
 + 1;

661 
wÆk
->
exba£
 -
	`íåy_limô
(wÆk->
íåy
 + 1);

663 
wÆk
->
íåy
++;

664 
wÆk
->
ex°›
 = wÆk->
exba£
 + 
	`íåy_limô
(wÆk->
íåy
);

666 
	`dwÆk_check
(
wÆk
);

668 
	}
}

675 
	$dwÆk_¥obe
(
dÀaf
 *
Àaf
, 
blocksize
, 
dwÆk
 *
wÆk
, 
tuxkey_t
 
key
)

677 if(
DEBUG_MODE_K
==1)

679 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

681 
	`åa˚
("¥obêf‹ 0x%Lx", 
key
);

682 
keylo
 = 
key
 & 0xffffff, 
keyhi
 = key >> 24;

684 
wÆk
->
Àaf
 =Üeaf;

685 
wÆk
->
gdi˘
 = (*)
Àaf
 + 
blocksize
;

686 
wÆk
->
g°›
 = wÆk->
gdi˘
 - 
	`dÀaf_groups
(
Àaf
);

687 
wÆk
->
group
 = wÆk->
gdi˘
;

688 
wÆk
->
e°›
 = (
íåy
 *)wÆk->
g°›
;

689 
wÆk
->
exba£
 = 
Àaf
->
èbÀ
;

690 i‡(!
	`dÀaf_groups
(
Àaf
)) {

692 
wÆk
->
íåy
 = (íåy *)wÆk->
g°›
;

693 
wÆk
->
exã¡
 = 
Àaf
->
èbÀ
;

694 
wÆk
->
ex°›
 = 
Àaf
->
èbÀ
;

695 
	`dwÆk_check
(
wÆk
);

699 
wÆk
->
group
 > wÆk->
g°›
) {

700 
wÆk
->
group
--;

701 
wÆk
->
íåy
 = wÆk->
e°›
 - 1;

702 
wÆk
->
e°›
 -
	`group_cou¡
(wÆk->
group
);

703 i‡(
	`group_keyhi
(
wÆk
->
group
Ë> 
keyhi
)

704 
no_group
;

705 i‡(
	`group_keyhi
(
wÆk
->
group
Ë=
keyhi
) {

706 i‡(
	`íåy_keylo
(
wÆk
->
íåy
Ë> 
keylo
)

707 
no_group
;

708 i‡(
wÆk
->
group
 =wÆk->
g°›
)

709 
¥obe_íåy
;

710 i‡(
	`group_keyhi
(
wÆk
->
group
 - 1Ë> 
keyhi
)

711 
¥obe_íåy
;

712 i‡(
	`íåy_keylo
(
wÆk
->
e°›
 - 1Ë> 
keylo
)

713 
¥obe_íåy
;

715 
wÆk
->
exba£
 +
	`íåy_limô
(wÆk->
e°›
);

718 
wÆk
->
íåy
 = wÆk->
e°›
;

719 
wÆk
->
ex°›
 = wÆk->
exba£
;

720 
wÆk
->
exã¡
 = wÆk->
exba£
;

721 
wÆk
->
exba£
 = wÆk->exba£ - 
	`íåy_limô
(wÆk->
e°›
);

722 
	`dwÆk_check
(
wÆk
);

725 
no_group
:

727 
wÆk
->
exã¡
 = wÆk->
exba£
;

728 
wÆk
->
ex°›
 = wÆk->
exba£
 + 
	`íåy_limô
(wÆk->
íåy
);

729 
	`dwÆk_check
(
wÆk
);

732 
¥obe_íåy
:

734 
wÆk
->
exã¡
 = wÆk->
exba£
;

735 
wÆk
->
ex°›
 = wÆk->
exba£
 + 
	`íåy_limô
(wÆk->
íåy
);

736 
wÆk
->
íåy
 > wÆk->
e°›
) {

737 i‡(
	`íåy_keylo
(
wÆk
->
íåy
 - 1Ë> 
keylo
)

739 
wÆk
->
íåy
--;

740 
wÆk
->
exã¡
 = wÆk->
ex°›
;

741 
wÆk
->
ex°›
 = wÆk->
exba£
 + 
	`íåy_limô
(wÆk->
íåy
);

745 i‡(
key
 < 
	`dwÆk_ödex
(
wÆk
Ë+ 
	`dwÆk_cou¡
(walk))

748 
	`dwÆk_√xt
(
wÆk
);

749  !
	`dwÆk_íd
(
wÆk
);

750 
	}
}

752 
	$dwÆk_mock
(
dwÆk
 *
wÆk
, 
tuxkey_t
 
ödex
, 
diskexã¡
 
exã¡
)

754 if(
DEBUG_MODE_K
==1)

756 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

758 i‡(!
	`dÀaf_groups
(
wÆk
->
Àaf
Ë|| wÆk->
íåy
 =wÆk->
e°›
 || 
	`dwÆk_ödex
(wÆkË!
ödex
) {

759 
	`åa˚
("addÉ¡ry 0x%Lx", 
ödex
);

760 
keylo
 = 
ödex
 & 0xffffff, 
keyhi
 = index >> 24;

761 i‡(!
wÆk
->
mock
.
groups
 || 
	`group_keyhi
(&wÆk->mock.
group
Ë!
keyhi
 || 
	`group_cou¡
(&wÆk->mock.groupË>
MAX_GROUP_ENTRIES
) {

762 
	`åa˚
("add grou∞%i", 
wÆk
->
mock
.
groups
);

763 
wÆk
->
exba£
 +
	`íåy_limô
(&wÆk->
mock
.
íåy
);

764 
wÆk
->
mock
.
group
 = 
	`make_group
(
keyhi
, 0);

765 
wÆk
->
mock
.
u£d
 -(
group
);

766 
wÆk
->
mock
.
groups
++;

768 
wÆk
->
mock
.
u£d
 -(
íåy
);

769 
wÆk
->
mock
.
íåy
 = 
	`make_íåy
(
keylo
, wÆk->
exã¡
 - wÆk->
exba£
);

770 
	`öc_group_cou¡
(&
wÆk
->
mock
.
group
, 1);

772 
	`åa˚
("addÉxã¡ 0x%Lx => 0x%Lx/%x", 
ödex
, 
	`exã¡_block
(
exã¡
), 
	`exã¡_cou¡
(extent));

773 
wÆk
->
mock
.
‰ì
 +(*wÆk->
exã¡
);

774 
wÆk
->
exã¡
++;

775 
	`öc_íåy_limô
(&
wÆk
->
mock
.
íåy
, 1);

777 
	}
}

780 
	$dwÆk_c›y
(
dwÆk
 *
wÆk
, 
dÀaf
 *
de°
)

782 if(
DEBUG_MODE_K
==1)

784 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

786 
dÀaf
 *
Àaf
 = 
wÆk
->leaf;

787 
blocksize
 = (*)
wÆk
->
gdi˘
 - (*)
Àaf
;

789 
	`as£π
(
	`dÀaf_groups
(
de°
) == 0);

790 i‡(
	`dwÆk_íd
(
wÆk
))

792 i‡(
	`dwÆk_fú°
(
wÆk
)) {

793 
	`mem˝y
(
de°
, 
Àaf
, 
blocksize
);

797 
group
 *
gdi˘2
 = (*)
de°
 + 
blocksize
;

798 
groups2
 = 
wÆk
->
group
 + 1 - wÆk->
g°›
;

799 
íåy
 *
eba£
 = (*)
Àaf
 + 
	`be16_to_˝u
÷óf->
u£d
);

800 
íåõs
 = (
wÆk
->
íåy
 + 1Ë- 
eba£
;

801 
íåy
 *
edi˘2
 = (íåy *)(
gdi˘2
 - 
groups2
);

802 
diskexã¡
 *
exíd
 = (*)
Àaf
 + 
	`be16_to_˝u
÷óf->
‰ì
);

803 
diskexã¡
 *
íåy_exba£
;

804 
limô_adju°
, 
exã¡s
;

806 i‡(
wÆk
->
íåy
 + 1 =wÆk->
e°›
 + 
	`group_cou¡
(wÆk->
group
)) {

807 
íåy_exba£
 = 
wÆk
->
exba£
;

808 
limô_adju°
 = 0;

810 
íåy_exba£
 = 
wÆk
->
exba£
 + 
	`íåy_limô
(wÆk->
íåy
 + 1);

811 
limô_adju°
 = 
	`íåy_limô
(
wÆk
->
íåy
 + 1);

813 
exã¡s
 = 
exíd
 - 
íåy_exba£
;

815 
	`vecc›y
(
gdi˘2
 - 
groups2
, 
wÆk
->
g°›
, groups2);

816 
	`vecc›y
(
edi˘2
 - 
íåõs
, 
eba£
,Éntries);

817 
	`vecc›y
(
de°
->
èbÀ
, 
íåy_exba£
, 
exã¡s
);

819 
gcou¡2
 = (
wÆk
->
íåy
 + 1Ë- wÆk->
e°›
;

820 
	`£t_dÀaf_groups
(
de°
, 
groups2
);

821 
de°
->
‰ì
 = 
	`˝u_to_be16
((*)(de°->
èbÀ
 + 
exã¡s
) - (*)dest);

822 
de°
->
u£d
 = 
	`˝u_to_be16
((*)(
edi˘2
 - 
íåõs
) - (*)dest);

823 
	`£t_group_cou¡
(
gdi˘2
 - 1, 
gcou¡2
);

824 
íåy
 *
íåy2
 = 
edi˘2
 - 1, *
e°›2
 =Édi˘2 - 
gcou¡2
;

825 
íåy2
 >
e°›2
) {

826 
	`öc_íåy_limô
(
íåy2
, -
limô_adju°
);

827 
íåy2
--;

829 
	`as£π
(!
	`dÀaf_check
(
de°
, 
blocksize
));

830 
	}
}

833 
	$dwÆk_ch›
(
dwÆk
 *
wÆk
)

835 if(
DEBUG_MODE_K
==1)

837 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

839 
	`åa˚
(" ");

840 i‡(
	`dwÆk_íd
(
wÆk
))

842 
dÀaf
 *
Àaf
 = 
wÆk
->leaf;

844 i‡(
	`dwÆk_fú°
(
wÆk
)) {

845 
blocksize
 = (*)
wÆk
->
gdi˘
 - (*)
Àaf
;

846 
	`£t_dÀaf_groups
(
Àaf
, 0);

847 
Àaf
->
‰ì
 = 
	`˝u_to_be16
((
dÀaf
));

848 
Àaf
->
u£d
 = 
	`˝u_to_be16
(
blocksize
);

850 
	`dwÆk_¥obe
(
Àaf
, 
blocksize
, 
wÆk
, 0);

855 
	`dwÆk_back
(
wÆk
);

857 
íåy
 *
eba£
 = 
wÆk
->
e°›
 + 
	`group_cou¡
(wÆk->
group
);

858 *
íåy
 = 
wÆk
->entry;

859 
	`£t_dÀaf_groups
(
Àaf
, 
wÆk
->
gdi˘
 - wÆk->
group
);

860 
	`£t_group_cou¡
(
wÆk
->
group
, 
eba£
 - wÆk->
íåy
);

861 
íåy
 +(*)
wÆk
->
group
 - (*)wÆk->
g°›
;

862 
	`memmove
(
íåy
, 
wÆk
->íåy, (*)wÆk->
g°›
 - (*)walk->entry);

863 
wÆk
->
e°›
 = wÆk->
íåy
 =Éntry;

864 
wÆk
->
g°›
 = wÆk->
group
;

865 
wÆk
->
ex°›
 = wÆk->
exba£
 + 
	`íåy_limô
(wÆk->
íåy
);

866 
wÆk
->
exã¡
 = wÆk->
ex°›
;

867 
Àaf
->
‰ì
 = 
	`˝u_to_be16
((*)
wÆk
->
ex°›
 - (*)leaf);

868 
Àaf
->
u£d
 = 
	`˝u_to_be16
((*)
wÆk
->
e°›
 - (*)leaf);

869 
	`dwÆk_check
(
wÆk
);

870 
	`as£π
(!
	`dÀaf_check
(
Àaf
, (*)
wÆk
->
gdi˘
 - (*)leaf));

871 
	}
}

878 
	$dwÆk_add
(
dwÆk
 *
wÆk
, 
tuxkey_t
 
ödex
, 
diskexã¡
 
exã¡
)

880 if(
DEBUG_MODE_K
==1)

882 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

884 
dÀaf
 *
Àaf
 = 
wÆk
->leaf;

885 
groups
 = 
	`dÀaf_groups
(
Àaf
);

886 
‰ì
 = 
	`be16_to_˝u
(
Àaf
->free);

887 
u£d
 = 
	`be16_to_˝u
(
Àaf
->used);

890 
	`as£π
(!
groups
 || 
	`dwÆk_ödex
(
wÆk
Ë!
ödex
);

891 
	`as£π
(
	`exã¡_block
(
exã¡
Ë> 0 && 
	`exã¡_cou¡
(extent) > 0);

893 
	`åa˚
("grou∞%ti/%i", 
wÆk
->
g°›
 + 
groups
 - 1 - wÆk->
group
, groups);

894 i‡(!
groups
 || 
	`dwÆk_ödex
(
wÆk
Ë!
ödex
) {

895 
	`åa˚
("addÉ¡ry 0x%Lx", 
ödex
);

896 
keylo
 = 
ödex
 & 0xffffff, 
keyhi
 = index >> 24;

897 i‡(!
groups
 || 
	`group_keyhi
(
wÆk
->
group
Ë!
keyhi
 || 
	`group_cou¡
(wÆk->groupË>
MAX_GROUP_ENTRIES
) {

898 
	`åa˚
("add grou∞%i", 
groups
);

900 
	`as£π
((*
wÆk
->
íåy
Ë=(*wÆk->
group
));

901 
	`as£π
(
‰ì
 <
u£d
 - (*
wÆk
->
íåy
));

904 
	`vecmove
(
wÆk
->
íåy
 - 1, wÆk->íåy, (íåy *)wÆk->
group
 - walk->entry);

905 
wÆk
->
íåy
--;

906 
wÆk
->
exba£
 +
groups
 ? 
	`íåy_limô
(wÆk->
íåy
) : 0;

907 *--
wÆk
->
group
 = 
	`make_group
(
keyhi
, 0);

908 
u£d
 -(*
wÆk
->
group
);

909 
	`£t_dÀaf_groups
(
Àaf
, ++
groups
);

911 
	`as£π
(
‰ì
 <
u£d
 - (*
wÆk
->
íåy
));

912 
u£d
 -(*
wÆk
->
íåy
);

913 
Àaf
->
u£d
 = 
	`˝u_to_be16
(used);

914 *--
wÆk
->
íåy
 = 
	`make_íåy
(
keylo
, wÆk->
exã¡
 - wÆk->
exba£
);

915 
	`öc_group_cou¡
(
wÆk
->
group
, 1);

917 
	`åa˚
("addÉxã¡ %ti", 
wÆk
->
exã¡
 - 
Àaf
->
èbÀ
);

918 
	`as£π
(
‰ì
 + (*
wÆk
->
exã¡
Ë<
u£d
);

919 
‰ì
 +(*
wÆk
->
exã¡
);

920 
Àaf
->
‰ì
 = 
	`˝u_to_be16
(free);

921 *
wÆk
->
exã¡
++ =Éxtent;

922 
	`öc_íåy_limô
(
wÆk
->
íåy
, 1);

924 
	`as£π
(!
	`dÀaf_check
(
Àaf
, (*)
wÆk
->
gdi˘
 - (*)walk->leaf));

927 
	}
}

930 
	$dwÆk_upd©e
(
dwÆk
 *
wÆk
, 
diskexã¡
 
exã¡
)

932 if(
DEBUG_MODE_K
==1)

934 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

936 *
wÆk
->
exã¡
 =Éxtent;

937 
	}
}

956 
	$dÀaf_ch›
(
båì
 *båì, 
tuxkey_t
 
°¨t
, 
u64
 
Àn
, *
vÀaf
)

958 if(
DEBUG_MODE_K
==1)

960 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

962 
sb
 *sb = 
båì
->sb;

963 
dÀaf
 *
Àaf
 = 
vÀaf
;

964 
dwÆk
 
wÆk
;

967 
	`as£π
(
Àn
 =
TUXKEY_LIMIT
);

969 i‡(!
	`dwÆk_¥obe
(
Àaf
, 
sb
->
blocksize
, &
wÆk
, 
°¨t
))

973 i‡(
	`dwÆk_ödex
(&
wÆk
Ë< 
°¨t
) {

974 
block_t
 
block
 = 
	`dwÆk_block
(&
wÆk
);

975 
cou¡
 = 
°¨t
 - 
	`dwÆk_ödex
(&
wÆk
);

977 
	`de„r_b‰ì
(&
sb
->
de‰ì
, 
block
 + 
cou¡
, 
	`dwÆk_cou¡
(&
wÆk
) - count);

978 
	`log_b‰ì
(
sb
, 
block
 + 
cou¡
, 
	`dwÆk_cou¡
(&
wÆk
) - count);

980 
	`dwÆk_upd©e
(&
wÆk
, 
	`make_exã¡
(
block
, 
cou¡
));

981 i‡(!
	`dwÆk_√xt
(&
wÆk
))

982 
out
;

984 
dwÆk
 
ªwöd
 = 
wÆk
;

986 
	`de„r_b‰ì
(&
sb
->
de‰ì
, 
	`dwÆk_block
(&
wÆk
), 
	`dwÆk_cou¡
(&walk));

987 
	`log_b‰ì
(
sb
, 
	`dwÆk_block
(&
wÆk
), 
	`dwÆk_cou¡
(&walk));

988 } 
	`dwÆk_√xt
(&
wÆk
));

989 
	`dwÆk_ch›
(&
ªwöd
);

990 
out
:

991 
	`as£π
(!
	`dÀaf_check
(
Àaf
, 
sb
->
blocksize
));

993 
	}
}

995 
båì_›s
 
	gdåì1_›s
 = {

996 .
båì_öô
 = 
dÀaf_båì_öô
,

997 .
	gÀaf_öô
 = 
dÀaf_öô
,

998 .
	gÀaf_•lô
 = 
dÀaf_•lô
,

1000 .
	gÀaf_ch›
 = 
dÀaf_ch›
,

1001 .
	gÀaf_mîge
 = 
dÀaf_mîge
,

1002 .
	gbÆloc
 = 
bÆloc
,

1003 .
	gb‰ì
 = 
b‰ì
,

1005 .
	gÀaf_¢iff
 = 
dÀaf_¢iff
,

1006 .
	gÀaf_ˇn_‰ì
 = 
dÀaf_ˇn_‰ì
,

1007 .
	gÀaf_dump
 = 
dÀaf_dump
,

	@kernel/dleaf.h

1 #i‚de‡
TUX3_DLEAF_H


2 
	#TUX3_DLEAF_H


	)

5 
	sdiskexã¡
 { 
__be64
 
	mblock_cou¡_vîsi⁄
; };

6 
	#MAX_GROUP_ENTRIES
 255

	)

8 
	sgroup
 { 
__be32
 
	mcou¡_™d_keyhi
; };

10 
	síåy
 { 
__be32
 
	mlimô_™d_keylo
; };

11 
	sdÀaf
 { 
__be16
 
	mmagic
, 
	mgroups
, 
	m‰ì
, 
	mu£d
; 
diskexã¡
 
	mèbÀ
[]; };

14 
	#DLEAF_MAX_EXTENT_SIZE
 \

15 ((
group
)+(
íåy
)+(
diskexã¡
))

	)

17 
	sdwÆk
 {

18 
dÀaf
 *
	mÀaf
;

19 
group
 *
	mgroup
, *
	mg°›
, *
	mgdi˘
;

20 
íåy
 *
	míåy
, *
	me°›
;

21 
diskexã¡
 *
	mexba£
, *
	mexã¡
, *
	mex°›
;

23 
group
 
	mgroup
;

24 
íåy
 
	míåy
;

25 
	mu£d
, 
	m‰ì
, 
	mgroups
;

26 } 
	mmock
;

31 
ölöe
 
group
 
	$make_group
(
tuxkey_t
 
keyhi
, 
cou¡
)

33  (
group
){ 
	`˝u_to_be32
(
keyhi
 | (
cou¡
 << 24)) };

34 
	}
}

36 
ölöe
 
	$group_keyhi
(
group
 *group)

38  
	`be32_to_˝up
((
__be32
 *)
group
) & 0xffffff;

39 
	}
}

41 
ölöe
 
	$group_cou¡
(
group
 *group)

43  *(*)
group
;

44 
	}
}

46 
ölöe
 
	$£t_group_cou¡
(
group
 *group, 
n
)

48 *(*)
group
 = 
n
;

49 
	}
}

51 
ölöe
 
	$öc_group_cou¡
(
group
 *group, 
n
)

53 *(*)
group
 +
n
;

54 
	}
}

58 
ölöe
 
íåy
 
	$make_íåy
(
tuxkey_t
 
keylo
, 
limô
)

60  (
íåy
){ 
	`˝u_to_be32
(
keylo
 | (
limô
 << 24)) };

61 
	}
}

63 
ölöe
 
	$íåy_keylo
(
íåy
 *entry)

65  
	`be32_to_˝up
((
__be32
 *)
íåy
) & ~(-1 << 24);

66 
	}
}

68 
ölöe
 
	$íåy_limô
(
íåy
 *entry)

70  *(*)
íåy
;

71 
	}
}

73 
ölöe
 
	$öc_íåy_limô
(
íåy
 *íåy, 
n
)

75 *(*)
íåy
 +
n
;

76 
	}
}

80 
ölöe
 
diskexã¡
 
	$make_exã¡
(
block_t
 
block
, 
cou¡
)

82 
	`as£π
(
block
 < (1ULL << 48Ë&& 
cou¡
 - 1 < (1 << 6));

83  (
diskexã¡
){ 
	`˝u_to_be64
(((
u64
)(
cou¡
 - 1Ë<< 48Ë| 
block
) };

84 
	}
}

86 
ölöe
 
block_t
 
	$exã¡_block
(
diskexã¡
 
exã¡
)

88  
	`be64_to_˝up
((
__be64
 *)&
exã¡
) & ~(-1LL << 48);

89 
	}
}

91 
ölöe
 
	$exã¡_cou¡
(
diskexã¡
 
exã¡
)

93  ((
	`be64_to_˝up
((
__be64
 *)&
exã¡
) >> 48) & 0x3f) + 1;

94 
	}
}

96 
ölöe
 
	$exã¡_vîsi⁄
(
diskexã¡
 
exã¡
)

98  
	`be64_to_˝u
(*(
__be64
 *)&
exã¡
) >> 54;

99 
	}
}

103 
ölöe
 
	$dÀaf_groups
(
dÀaf
 *
Àaf
)

105  
	`be16_to_˝u
(
Àaf
->
groups
);

106 
	}
}

108 
ölöe
 
	$£t_dÀaf_groups
(
dÀaf
 *
Àaf
, 
n
)

110 
Àaf
->
groups
 = 
	`˝u_to_be16
(
n
);

111 
	}
}

113 
ölöe
 
	$öc_dÀaf_groups
(
dÀaf
 *
Àaf
, 
n
)

115 
	`be16_add_˝u
(&
Àaf
->
groups
, 
n
);

116 
	}
}

118 
dÀaf_öô
(
båì
 *båì, *
Àaf
);

119 
dÀaf_‰ì
(
båì
 *båì, *
Àaf
);

120 
dÀaf_dump
(
båì
 *båì, *
vÀaf
);

121 
dÀaf_mîge
(
båì
 *båì, *
vöto
, *
v‰om
);

122 
båì_›s
 
dåì1_›s
;

124 
dwÆk_ªdúe˘
(
dwÆk
 *
wÆk
, 
dÀaf
 *
§c
, dÀa‡*
d°
);

125 
dwÆk_íd
(
dwÆk
 *
wÆk
);

126 
block_t
 
dwÆk_block
(
dwÆk
 *
wÆk
);

127 
dwÆk_cou¡
(
dwÆk
 *
wÆk
);

128 
tuxkey_t
 
dwÆk_ödex
(
dwÆk
 *
wÆk
);

129 
dwÆk_√xt
(
dwÆk
 *
wÆk
);

130 
dwÆk_back
(
dwÆk
 *
wÆk
);

131 
dwÆk_¥obe
(
dÀaf
 *
Àaf
, 
blocksize
, 
dwÆk
 *
wÆk
, 
tuxkey_t
 
key
);

132 
dwÆk_mock
(
dwÆk
 *
wÆk
, 
tuxkey_t
 
ödex
, 
diskexã¡
 
exã¡
);

133 
dwÆk_c›y
(
dwÆk
 *
wÆk
, 
dÀaf
 *
de°
);

134 
dwÆk_ch›
(
dwÆk
 *
wÆk
);

135 
dwÆk_add
(
dwÆk
 *
wÆk
, 
tuxkey_t
 
ödex
, 
diskexã¡
 
exã¡
);

	@kernel/dleaf2.c

32 
	~"tux3.h
"

33 
	~"dÀaf2.h
"

34 
öô_°ride
();

35 
add_°ride
();

36 
is_fú°
;

43 
	su±ag
 {

44 
__be32
 
	möum
;

45 
__be32
 
	moff£t
;

46 
__be16
 
	mfutuª
;

47 
__be16
 
	mdñè
;

52 
	#VER_BITS
 16

	)

53 
	#VER_MASK
 ((1 << 
VER_BITS
))

	)

54 
	#ADDR_BITS
 48

	)

55 
	#ADDR_MASK
 ((1ULL << 
ADDR_BITS
Ë- 1)

	)

57 
	sdÀaf2
 {

58 
__be16
 
	mmagic
;

59 
__be16
 
	mcou¡
;

61 
__be32
 
	m__unu£d
;

62 
	sdiskexã¡2
 {

63 
__be64
 
	mvîhi_logiˇl
;

64 
__be64
 
	mvîlo_physiˇl
;

65 } 
	mèbÀ
[];

68 
	sexã¡
 {

69 
u32
 
	mvîsi⁄
;

70 
block_t
 
	mlogiˇl
;

71 
block_t
 
	mphysiˇl
;

74 
ölöe
 
block_t
 
	$gë_logiˇl
(
diskexã¡2
 *
dex
)

76 if(
DEBUG_MODE_K
==1)

78 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

80  
	`be64_to_˝u
(
dex
->
vîhi_logiˇl
Ë& 
ADDR_MASK
;

81 
	}
}

83 
ölöe
 
	$gë_exã¡
(
diskexã¡2
 *
dex
, 
exã¡
 *
ex
)

85 if(
DEBUG_MODE_K
==1)

87 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

89 
u64
 
vÆ
;

91 
vÆ
 = 
	`be64_to_˝u
(
dex
->
vîhi_logiˇl
);

92 
ex
->
vîsi⁄
 = 
vÆ
 >> 
ADDR_BITS
;

93 
ex
->
logiˇl
 = 
vÆ
 & 
ADDR_MASK
;

95 
vÆ
 = 
	`be64_to_˝u
(
dex
->
vîlo_physiˇl
);

96 
ex
->
vîsi⁄
 = (ex->vîsi⁄ << 
VER_BITS
Ë| (
vÆ
 >> 
ADDR_BITS
);

97 
ex
->
physiˇl
 = 
vÆ
 & 
ADDR_MASK
;

98 
	}
}

100 
ölöe
 
	$put_exã¡
(
diskexã¡2
 *
dex
, 
u32
 
vîsi⁄
,

101 
block_t
 
logiˇl
, block_à
physiˇl
)

103 if(
DEBUG_MODE_K
==1)

105 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

107 
	`¥ötf
("\nLogiˇ»: %Lx\nPhysiˇ»: %Lx\n",
logiˇl
,
physiˇl
);

109 
u64
 
vîhi
 = 
vîsi⁄
 >> 
VER_BITS
, 
vîlo
 = vîsi⁄ & 
VER_MASK
;

110 
dex
->
vîhi_logiˇl
 = 
	`˝u_to_be64
(
vîhi
 << 
ADDR_BITS
 | 
logiˇl
);

111 
dex
->
vîlo_physiˇl
 = 
	`˝u_to_be64
(
vîlo
 << 
ADDR_BITS
 | 
physiˇl
);

113 
	}
}

115 
	$dÀaf2_båì_öô
(
båì
 *btree)

117 if(
DEBUG_MODE_K
==1)

119 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

121 
sb
 *sb = 
båì
->sb;

122 
d©asize
 = 
sb
->
blocksize
 - (
dÀaf2
);

123 
båì
->
íåõs_≥r_Àaf
 = 
d©asize
 / (
diskexã¡2
);

125 
	}
}

127 
	$dÀaf2_öô
(
båì
 *båì, *
Àaf
)

129 if(
DEBUG_MODE_K
==1)

131 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

133 
dÀaf2
 *
dÀaf
 = 
Àaf
;

134 *
dÀaf
 = (
dÀaf2
){

135 .
magic
 = 
	`˝u_to_be16
(
TUX3_MAGIC_DLEAF2
),

136 .
cou¡
 = 0,

139 
	}
}

141 
	$dÀaf2_¢iff
(
båì
 *båì, *
Àaf
)

143 if(
DEBUG_MODE_K
==1)

145 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

147 
dÀaf2
 *
dÀaf
 = 
Àaf
;

148 i‡(
dÀaf
->
magic
 !
	`˝u_to_be16
(
TUX3_MAGIC_DLEAF2
))

150 i‡(!
dÀaf
->
cou¡
)

153 
exã¡
 
ex
;

154 
	`gë_exã¡
(
dÀaf
->
èbÀ
 + 
	`be16_to_˝u
(dÀaf->
cou¡
Ë- 1, &
ex
);

155 i‡(
ex
.
physiˇl
 == 0)

158 
	}
}

160 
	$dÀaf2_ˇn_‰ì
(
båì
 *båì, *
Àaf
)

162 if(
DEBUG_MODE_K
==1)

164 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

166 
dÀaf2
 *
dÀaf
 = 
Àaf
;

167 
cou¡
 = 
	`be16_to_˝u
(
dÀaf
->count);

169 
	`as£π
(
	`dÀaf2_¢iff
(
båì
, 
dÀaf
));

170 i‡(
cou¡
 > 1)

173 
	}
}

175 
	$dÀaf2_dump
(
båì
 *båì, *
Àaf
)

177 
	}
}

180 
diskexã¡2
 *

181 
	$dÀaf2_lookup_ödex
(
båì
 *båì, 
dÀaf2
 *
dÀaf
, 
tuxkey_t
 
ödex
)

183 if(
DEBUG_MODE_K
==1)

185 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

187 
diskexã¡2
 *
dex
 = 
dÀaf
->
èbÀ
;

188 
diskexã¡2
 *
limô
 = 
dex
 + 
	`be16_to_˝u
(
dÀaf
->
cou¡
);

191 
dex
 < 
limô
) {

192 i‡(
ödex
 =
	`gë_logiˇl
(
dex
))

193  
dex
;

194 i‡(
ödex
 < 
	`gë_logiˇl
(
dex
)) {

196 
	`as£π
(
dÀaf
->
èbÀ
 < 
dex
);

197  
dex
 - 1;

199 
dex
++;

203 i‡(
dÀaf
->
cou¡
) {

204 
exã¡
 
ex
;

205 
	`gë_exã¡
(
dex
 - 1, &
ex
);

206 
	`as£π
(
ex
.
physiˇl
 == 0);

209  
dex
;

210 
	}
}

215 
tuxkey_t
 
	$dÀaf2_•lô
(
båì
 *båì, 
tuxkey_t
 
höt
,

216 *
v‰om
, *
vöto
)

218 if(
DEBUG_MODE_K
==1)

220 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

222 
dÀaf2
 *
‰om
 = 
v‰om
, *
öto
 = 
vöto
;

223 
diskexã¡2
 *
dex
;

224 
exã¡
 
ex
;

225 
•lô_©
, 
cou¡
 = 
	`be16_to_˝u
(
‰om
->count);

228 
	`as£π
(
cou¡
 >= 3);

234 
dex
 = 
	`dÀaf2_lookup_ödex
(
båì
, 
‰om
, 
höt
);

235 i‡(
dex
 =
‰om
->
èbÀ
 + 
cou¡
) {

237 
	`gë_exã¡
(
dex
 - 1, &
ex
);

238 
	`as£π
(
ex
.
physiˇl
 == 0);

239  
ex
.
logiˇl
;

242  
höt
;

246 
•lô_©
 = 
dex
 - 
‰om
->
èbÀ
;

248 
‰om
->
cou¡
 = 
	`˝u_to_be16
(
•lô_©
 + 1);

249 
öto
->
cou¡
 = 
	`˝u_to_be16
(cou¡ - 
•lô_©
);

251 
dex
 = 
‰om
->
èbÀ
 + 
•lô_©
;

253 
	`mem˝y
(
öto
->
èbÀ
, 
dex
, (*dexË* (
cou¡
 - 
•lô_©
));

255 
	`gë_exã¡
(
dex
, &
ex
);

256 
	`put_exã¡
(
dex
, 
ex
.
vîsi⁄
,Éx.
logiˇl
, 0);

258  
ex
.
logiˇl
;

259 
	}
}

267 
	$dÀaf2_mîge
(
båì
 *båì, *
vöto
, *
v‰om
)

269 if(
DEBUG_MODE_K
==1)

271 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

273 
dÀaf2
 *
öto
 = 
vöto
, *
‰om
 = 
v‰om
;

274 
exã¡
 
öto_ex
, 
‰om_ex
;

275 
öto_cou¡
, 
‰om_cou¡
;

276 
ˇn_mîge
, 
‰om_size
;

279 
‰om_cou¡
 = 
	`be16_to_˝u
(
‰om
->
cou¡
);

280 i‡(
‰om_cou¡
 <= 1)

283 
‰om_size
 = (
‰om
->
èbÀ
[0]Ë* 
‰om_cou¡
;

285 
öto_cou¡
 = 
	`be16_to_˝u
(
öto
->
cou¡
);

286 i‡(!
öto_cou¡
) {

287 
öto
->
cou¡
 = 
‰om
->count;

288 
‰om
->
cou¡
 = 0;

289 
	`mem˝y
(
öto
->
èbÀ
, 
‰om
->èbÀ, 
‰om_size
);

294 
	`gë_exã¡
(
öto
->
èbÀ
 + 
öto_cou¡
 - 1, &
öto_ex
);

295 
	`gë_exã¡
(
‰om
->
èbÀ
, &
‰om_ex
);

296 
	`as£π
(
öto_ex
.
logiˇl
 <
‰om_ex
.logical);

297 
	`as£π
(
öto_ex
.
physiˇl
 == 0);

298 
ˇn_mîge
 = 0;

300 i‡(!
‰om_ex
.
physiˇl
)

301 
ˇn_mîge
 = 1;

303 i‡(
öto_ex
.
logiˇl
 =
‰om_ex
.logical)

304 
ˇn_mîge
 = 1;

306 i‡(
öto_cou¡
 + 
‰om_cou¡
 - 
ˇn_mîge
 > 
båì
->
íåõs_≥r_Àaf
)

309 i‡(!
‰om_ex
.
physiˇl
) {

311 
‰om_size
 -(
‰om
->
èbÀ
[0]Ë* 
ˇn_mîge
;

312 
	`mem˝y
(
öto
->
èbÀ
 + 
öto_cou¡
, 
‰om
->èbÀ + 1, 
‰om_size
);

313 } i‡(
öto_ex
.
logiˇl
 =
‰om_ex
.logical) {

315 
	`mem˝y
(
öto
->
èbÀ
 + 
öto_cou¡
 - 1, 
‰om
->èbÀ, 
‰om_size
);

318 
	`mem˝y
(
öto
->
èbÀ
 + 
öto_cou¡
, 
‰om
->èbÀ, 
‰om_size
);

320 
öto
->
cou¡
 = 
	`˝u_to_be16
(
öto_cou¡
 + 
‰om_cou¡
 - 
ˇn_mîge
);

321 
‰om
->
cou¡
 = 0;

324 
	}
}

333 
	$dÀaf2_ch›
(
båì
 *båì, 
tuxkey_t
 
°¨t
, 
u64
 
Àn
, *
Àaf
)

335 if(
DEBUG_MODE_K
==1)

337 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

339 
sb
 *sb = 
båì
->sb;

340 
dÀaf2
 *
dÀaf
 = 
Àaf
;

341 
diskexã¡2
 *
dex
, *
dex_limô
;

342 
exã¡
 
ex
;

343 
block_t
 
block
;

344 
√ed_£¡öñ
;

347 
	`as£π
(
Àn
 =
TUXKEY_LIMIT
);

349 i‡(!
dÀaf
->
cou¡
)

352 
dex_limô
 = 
dÀaf
->
èbÀ
 + 
	`be16_to_˝u
(dÀaf->
cou¡
);

354 
dex
 = 
	`dÀaf2_lookup_ödex
(
båì
, 
dÀaf
, 
°¨t
);

355 i‡(
dex
 >
dex_limô
 - 1)

358 
√ed_£¡öñ
 = 1;

359 
	`gë_exã¡
(
dex
, &
ex
);

360 i‡(
°¨t
 =
ex
.
logiˇl
) {

361 i‡(
dex
 > 
dÀaf
->
èbÀ
) {

363 
exã¡
 
¥ev
;

364 
	`gë_exã¡
(
dex
 - 1, &
¥ev
);

365 i‡(
¥ev
.
physiˇl
 == 0) {

366 
dex
--;

367 
√ed_£¡öñ
 = 0;

370 i‡(
√ed_£¡öñ
) {

372 
	`put_exã¡
(
dex
, 
sb
->
vîsi⁄
, 
°¨t
, 0);

374 
√ed_£¡öñ
 = 0;

375 } i‡(
ex
.
physiˇl
 == 0) {

377 
°¨t
 = 
ex
.
logiˇl
;

378 
√ed_£¡öñ
 = 0;

381 
dÀaf
->
cou¡
 = 
	`˝u_to_be16
((
dex
 - dÀaf->
èbÀ
Ë+ 1 + 
√ed_£¡öñ
);

383 
block
 = 
ex
.
physiˇl
 + (
°¨t
 -Éx.
logiˇl
);

384 
dex
++;

386 
dex
 < 
dex_limô
) {

387 
cou¡
;

390 
	`gë_exã¡
(
dex
, &
ex
);

391 
cou¡
 = 
ex
.
logiˇl
 - 
°¨t
;

392 i‡(
block
 && 
cou¡
) {

393 
	`de„r_b‰ì
(&
sb
->
de‰ì
, 
block
, 
cou¡
);

394 
	`log_b‰ì
(
sb
, 
block
, 
cou¡
);

397 i‡(
√ed_£¡öñ
) {

399 
	`put_exã¡
(
dex
, 
sb
->
vîsi⁄
, 
°¨t
, 0);

400 
√ed_£¡öñ
 = 0;

402 
°¨t
 = 
ex
.
logiˇl
;

403 
block
 = 
ex
.
physiˇl
;

404 
dex
++;

408 
	}
}

411 
	$dÀaf2_ªsize
(
dÀaf2
 *
dÀaf
, 
diskexã¡2
 *
hód
,

412 
diff
)

414 if(
DEBUG_MODE_K
==1)

416 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

418 *
limô
 = 
dÀaf
->
èbÀ
 + 
	`be16_to_˝u
(dÀaf->
cou¡
);

420 i‡(
diff
 == 0)

423 i‡(
diff
 > 0)

424 
	`memmove
(
hód
 + 
diff
, hód, 
limô
 - (*)head);

426 
	`memmove
(
hód
, hód - 
diff
, 
limô
 - (*)(head - diff));

427 
	`be16_add_˝u
(&
dÀaf
->
cou¡
, 
diff
);

428 
	}
}

431 
ölöe
 
	$dÀaf2_öô_£¡öñ
(
sb
 *sb, 
dÀaf2
 *
dÀaf
,

432 
tuxkey_t
 
key_bŸtom
)

434 if(
DEBUG_MODE_K
==1)

436 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

438 i‡(!
dÀaf
->
cou¡
) {

439 
dÀaf
->
cou¡
 = 
	`˝u_to_be16
(1);

440 
	`put_exã¡
(
dÀaf
->
èbÀ
, 
sb
->
vîsi⁄
, 
key_bŸtom
, 0);

442 
	}
}

445 
tuxkey_t
 
	$dÀaf2_•lô_©_˚¡î
(
dÀaf2
 *
dÀaf
)

447 if(
DEBUG_MODE_K
==1)

449 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

451 
exã¡
 
ex
;

452 
	`gë_exã¡
(
dÀaf
->
èbÀ
 + 
	`be16_to_˝u
(dÀaf->
cou¡
Ë/ 2, &
ex
);

453  
ex
.
logiˇl
;

454 
	}
}

459 
	$dÀaf2_wrôe
(
båì
 *båì, 
tuxkey_t
 
key_bŸtom
,

460 
tuxkey_t
 
key_limô
,

461 *
Àaf
, 
båì_key_ønge
 *
key
,

462 
tuxkey_t
 *
•lô_höt
)

464 if(
DEBUG_MODE_K
==1)

466 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

468 
dÀaf_ªq
 *
rq
 = 
	`c⁄èöî_of
(
key
, dleaf_req, key);

469 
sb
 *sb = 
båì
->sb;

470 
dÀaf2
 *
dÀaf
 = 
Àaf
;

471 
diskexã¡2
 *
dex_°¨t
, *
dex_íd
, *
dex_limô
;

472 
exã¡
 
ex
;

473 
tuxkey_t
 
limô
;

474 
block_t
 
íd_physiˇl
;

475 
√ed
, 
bëwìn
, 
wrôe_£gs
, 
ª°_£gs
;

476 
√ed_•lô
, 
ªt
, 
i
;

478 
ªcheck
:

480 
	`as£π
(
key
->
Àn
 =
	`£g_tŸÆ_cou¡
(
rq
->
£g
 +Ñq->
£g_idx
,

481 
rq
->
£g_˙t
 -Ñq->
£g_idx
));

491 
	`dÀaf2_öô_£¡öñ
(
sb
, 
dÀaf
, 
key_bŸtom
);

493 
limô
 = 
key
->
°¨t
 + key->
Àn
;

494 
wrôe_£gs
 = 
rq
->
£g_˙t
 -Ñq->
£g_idx
;

495 
dex_limô
 = 
dÀaf
->
èbÀ
 + 
	`be16_to_˝u
(dÀaf->
cou¡
);

497 
√ed
 = 
wrôe_£gs
 + 1;

500 
dex_°¨t
 = 
	`dÀaf2_lookup_ödex
(
båì
, 
dÀaf
, 
key
->
°¨t
);

501 i‡(
dex_°¨t
 < 
dex_limô
) {

503 
	`gë_exã¡
(
dex_°¨t
, &
ex
);

504 
	`as£π
(
ex
.
logiˇl
 <
key
->
°¨t
);

505 i‡(
ex
.
logiˇl
 < 
key
->
°¨t
)

506 
dex_°¨t
++;

509 
√ed
 +
dex_°¨t
 - 
dÀaf
->
èbÀ
;

512 
dex_íd
 = 
	`dÀaf2_lookup_ödex
(
båì
, 
dÀaf
, 
limô
);

513 i‡(
dex_íd
 < 
dex_limô
) {

514 i‡(
dex_íd
 < 
dex_°¨t
) {

516 
bëwìn
 = 0;

518 
bëwìn
 = (
dex_íd
 - 
dex_°¨t
) + 1;

521 
	`gë_exã¡
(
dex_íd
, &
ex
);

522 
íd_physiˇl
 = 
ex
.
physiˇl
;

523 i‡(
íd_physiˇl
)

524 
íd_physiˇl
 +
limô
 - 
ex
.
logiˇl
;

527 
√ed
 +(
dex_limô
 - 
dex_íd
) - 1;

529 
bëwìn
 = 
dex_íd
 - 
dex_°¨t
;

531 
íd_physiˇl
 = 0;

534 
√ed_•lô
 = 0;

535 
ª°_£gs
 = 0;

537 i‡(
√ed
 > 
båì
->
íåõs_≥r_Àaf
) {

538 
√ed_•lô
 = 1;

546 
ª°_£gs
 = 
√ed
 - 
båì
->
íåõs_≥r_Àaf
;

548 i‡(
ª°_£gs
 >
wrôe_£gs
) {

550 i‡(
dex_°¨t
 + 1 < 
dex_limô
 - 1) {

551 
	`gë_exã¡
(
dex_°¨t
 + 1, &
ex
);

552 *
•lô_höt
 = 
ex
.
logiˇl
;

554 *
•lô_höt
 = 
key
->
°¨t
;

556  
√ed_•lô
;

559 
wrôe_£gs
 -
ª°_£gs
;

562 
√ed
 -
ª°_£gs
;

565 
ª°_£gs
++;

574 
	`¥ötf
("\nWrôe_£g†: %u",
wrôe_£gs
);

575 
ªt
 = 
rq
->
	`£g_Æloc
(
båì
,Ñq, 
wrôe_£gs
);

576 
	`¥ötf
("\nkey : %Lx, Lí : %u",
rq
->
key
.
°¨t
,rq->key.
Àn
);

577 
i
=
rq
->
£g_idx
;i<rq->
£g_˙t
;i++)

578 
	`¥ötf
("\n\nSEG DATA\nBlock : %Lu | Cou¡ : %u\n",
rq
->
£g
[
i
].
block
,rq->£g[i].
cou¡
);

580 
	`¥ötf
("\nAlloc done!?\n");

582 i‡(
ªt
 < 0) {

583 
	`as£π
(
ªt
 !-
ENOSPC
);

584 
	`tux3_îr
(
sb
, "exã¡áŒoˇti⁄ faûed: %d", 
ªt
);

585  
ªt
;

586 } i‡(
ªt
) {

592 
key
->
Àn
 = 
	`£g_tŸÆ_cou¡
(
rq
->
£g
 +Ñq->
£g_idx
,

593 
rq
->
£g_˙t
 -Ñq->
£g_idx
);

594 
ªcheck
;

598 
	`dÀaf2_ªsize
(
dÀaf
, 
dex_°¨t
, (
wrôe_£gs
 + 1Ë- 
bëwìn
);

599 
	`as£π
(
√ed
 =
	`be16_to_˝u
(
dÀaf
->
cou¡
));

602 
rq
->
£g_idx
 <Ñq->
£g_˙t
 - 
ª°_£gs
) {

603 
block_£gmít
 *
£g
 = 
rq
->£g +Ñq->
£g_idx
;

605 
	`put_exã¡
(
dex_°¨t
, 
sb
->
vîsi⁄
, 
key
->
°¨t
, 
£g
->
block
);

607 
key
->
°¨t
 +
£g
->
cou¡
;

608 
key
->
Àn
 -
£g
->
cou¡
;

609 
rq
->
£g_idx
++;

610 
dex_°¨t
++;

612 i‡(
ª°_£gs
) {

613 
	`as£π
(
√ed_•lô
);

615 
	`put_exã¡
(
dex_°¨t
, 
sb
->
vîsi⁄
, 
key
->
°¨t
, 0);

616 
dex_°¨t
++;

619 *
•lô_höt
 = 
	`dÀaf2_•lô_©_˚¡î
(
dÀaf
);

622 
	`put_exã¡
(
dex_°¨t
, 
sb
->
vîsi⁄
, 
limô
, 
íd_physiˇl
);

624  
√ed_•lô
;

625 
	}
}

628 
	$dÀaf2_ªad
(
båì
 *båì, 
tuxkey_t
 
key_bŸtom
,

629 
tuxkey_t
 
key_limô
,

630 *
Àaf
, 
båì_key_ønge
 *
key
)

632 if(
DEBUG_MODE_K
==1)

634 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

636 
dÀaf_ªq
 *
rq
 = 
	`c⁄èöî_of
(
key
, dleaf_req, key);

637 
dÀaf2
 *
dÀaf
 = 
Àaf
;

638 
diskexã¡2
 *
dex
, *
dex_limô
;

639 
exã¡
 
√xt
;

640 
block_t
 
physiˇl
;

642 i‡(
rq
->
£g_idx
 >rq->
£g_max
)

645 
dex_limô
 = 
dÀaf
->
èbÀ
 + 
	`be16_to_˝u
(dÀaf->
cou¡
);

648 
dex
 = 
	`dÀaf2_lookup_ödex
(
båì
, 
dÀaf
, 
key
->
°¨t
);

649 i‡(
dex
 >
dex_limô
 - 1) {

651 i‡(
dex
 < 
dex_limô
) {

652 
	`gë_exã¡
(
dex_limô
 - 1, &
√xt
);

653 
	`as£π
(
√xt
.
physiˇl
 == 0);

656 
fûl_£g
;

660 
	`gë_exã¡
(
dex
, &
√xt
);

661 
is_fú°
=!()
key
->
°¨t
;

662 if(
is_fú°
)

663 
	`öô_°ride
();

664 
	`¥ötf
("\n****Logiˇ»: %Lx\nPhysiˇ»: %Lx\n",
√xt
.
logiˇl
,√xt.
physiˇl
);

665 if(
is_fú°
)

666 
	`add_°ride
(
√xt
.
logiˇl
);

667 
physiˇl
 = 
√xt
.physical;

668 i‡(
physiˇl
)

669 
physiˇl
 +
key
->
°¨t
 - 
√xt
.
logiˇl
;

670 
dex
++;

672 
block_£gmít
 *
£g
 = 
rq
->£g +Ñq->
£g_idx
;

674 
	`gë_exã¡
(
dex
, &
√xt
);

675 
	`¥ötf
("\n****Logiˇ»: %Lx\nPhysiˇ»: %Lx\n",
√xt
.
logiˇl
,√xt.
physiˇl
);

676 if(
is_fú°
)

677 
	`add_°ride
(
√xt
.
logiˇl
);

679 
£g
->
cou¡
 = 
	`mö_t
(
u64
, 
key
->
Àn
, 
√xt
.
logiˇl
 - key->
°¨t
);

680 i‡(
physiˇl
) {

681 
£g
->
block
 = 
physiˇl
;

682 
£g
->
°©e
 = 0;

684 
£g
->
block
 = 0;

685 
£g
->
°©e
 = 
BLOCK_SEG_HOLE
;

688 
physiˇl
 = 
√xt
.physical;

689 
key
->
°¨t
 +
£g
->
cou¡
;

690 
key
->
Àn
 -
£g
->
cou¡
;

691 
rq
->
£g_idx
++;

692 
dex
++;

693 } 
key
->
Àn
 && 
rq
->
£g_idx
 <Ñq->
£g_max
 && 
dex
 < 
dex_limô
);

694 
fûl_£g
:

696 i‡(
key
->
°¨t
 < 
key_limô
 && key->
Àn
 && 
rq
->
£g_idx
 <Ñq->
£g_max
) {

697 
block_£gmít
 *
£g
 = 
rq
->£g +Ñq->
£g_idx
;

699 
£g
->
cou¡
 = 
	`mö_t
(
tuxkey_t
, 
key
->
Àn
, 
key_limô
 - key->
°¨t
);

700 
£g
->
block
 = 0;

701 
£g
->
°©e
 = 
BLOCK_SEG_HOLE
;

703 
key
->
°¨t
 +
£g
->
cou¡
;

704 
key
->
Àn
 -
£g
->
cou¡
;

705 
rq
->
£g_idx
++;

709 
	}
}

711 
båì_›s
 
	gdåì2_›s
 = {

712 .
båì_öô
 = 
dÀaf2_båì_öô
,

713 .
	gÀaf_öô
 = 
dÀaf2_öô
,

714 .
	gÀaf_•lô
 = 
dÀaf2_•lô
,

715 .
	gÀaf_mîge
 = 
dÀaf2_mîge
,

716 .
	gÀaf_ch›
 = 
dÀaf2_ch›
,

717 .
	gÀaf_wrôe
 = 
dÀaf2_wrôe
,

718 .
	gÀaf_ªad
 = 
dÀaf2_ªad
,

719 .
	gbÆloc
 = 
bÆloc
,

720 .
	gb‰ì
 = 
b‰ì
,

722 .
	gÀaf_¢iff
 = 
dÀaf2_¢iff
,

723 .
	gÀaf_ˇn_‰ì
 = 
dÀaf2_ˇn_‰ì
,

724 .
	gÀaf_dump
 = 
dÀaf2_dump
,

	@kernel/dleaf2.h

1 #i‚de‡
TUX3_DLEAF2_H


2 
	#TUX3_DLEAF2_H


	)

4 
	sdÀaf_ªq
 {

5 
båì_key_ønge
 
	mkey
;

7 
	m£g_idx
;

8 
	m£g_˙t
;

9 
	m£g_max
;

10 
block_£gmít
 *
	m£g
;

13 (*
	m£g_Æloc
)(
	mbåì
 *, 
	mdÀaf_ªq
 *, );

16 
ölöe
 
	$£g_tŸÆ_cou¡
(
block_£gmít
 *
£g
, 
ƒ_£gs
)

18 
tŸÆ
 = 0;

19 
i
;

20 
i
 = 0; i < 
ƒ_£gs
; i++)

21 
tŸÆ
 +
£g
[
i
].
cou¡
;

22  
tŸÆ
;

23 
	}
}

	@kernel/filemap.c

49 
	~"tux3.h
"

50 
	~"dÀaf2.h
"

52 #i‚de‡
åa˚


53 
	#åa˚
 
åa˚_⁄


	)

56 
	em≠_mode
 {

57 
	mMAP_READ
 = 0,

58 
	mMAP_WRITE
 = 1,

59 
	mMAP_REDIRECT
 = 2,

61 
	mMAX_MAP_MODE
,

64 
	~"fûem≠_hﬁe.c
"

67 
	$show_£gs
(
block_£gmít
 
£g
[], 
£gs
)

69 if(
DEBUG_MODE_K
==1)

71 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

73 
	`__tux3_dbg
("%ò£gs: ", 
£gs
);

74 
i
 = 0; i < 
£gs
; i++)

75 
	`__tux3_dbg
("%Lx/%ò", 
£g
[
i
].
block
, seg[i].
cou¡
);

76 
	`__tux3_dbg
("\n");

77 
	}
}

79 
	$m≠_b‰ì
(
öode
 *öode, 
block_t
 
block
, 
cou¡
)

81 if(
DEBUG_MODE_K
==1)

83 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

85 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

86 i‡(
öode
 =
sb
->
bôm≠
) {

87 
	`log_b‰ì_⁄_unify
(
sb
, 
block
, 
cou¡
);

88 
	`de„r_b‰ì
(&
sb
->
deunify
, 
block
, 
cou¡
);

90 
	`log_b‰ì
(
sb
, 
block
, 
cou¡
);

91 
	`de„r_b‰ì
(&
sb
->
de‰ì
, 
block
, 
cou¡
);

94 
	}
}

97 
	$m≠_ªgi⁄1
(
öode
 *öode, 
block_t
 
°¨t
, 
cou¡
,

98 
block_£gmít
 
£g
[], 
£g_max
,

99 
m≠_mode
 
mode
)

101 if(
DEBUG_MODE_K
==1)

103 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

105 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

106 
båì
 *båì = &
	`tux_öode
(
öode
)->btree;

107 
curs‹
 *curs‹ = 
NULL
;

108 
îr
, 
£gs
 = 0;

110 
	`as£π
(
£g_max
 > 0);

125 i‡(
	`tux_öode
(
öode
)->
öum
 !
TUX_BITMAP_INO
) {

126 i‡(
mode
 =
MAP_READ
)

127 
	`down_ªad
(&
båì
->
lock
);

130 
	`as£π
(
	`tux3_undî_backíd
(
sb
));

131 
	`down_wrôe
(&
båì
->
lock
);

135 
	`as£π
(
	`tux3_undî_backíd
(
sb
));

138 i‡(!
	`has_roŸ
(
båì
Ë&& 
mode
 !
MAP_READ
) {

143 
îr
 = 
	`Æloc_em±y_båì
(
båì
);

144 i‡(
îr
) {

145 
£gs
 = 
îr
;

146 
out_u∆ock
;

151 
dwÆk
 *
wÆk
 = &(dwalk){ };

152 
dÀaf
 *
Àaf
 = 
NULL
;

153 i‡(
	`has_roŸ
(
båì
)) {

154 
curs‹
 = 
	`Æloc_curs‹
(
båì
, 1);

155 i‡(!
curs‹
) {

156 
£gs
 = -
ENOMEM
;

157 
out_u∆ock
;

160 i‡((
îr
 = 
	`båì_¥obe
(
curs‹
, 
°¨t
))) {

161 
£gs
 = 
îr
;

162 
out_u∆ock
;

164 
Àaf
 = 
	`bufd©a
(
	`curs‹_Àafbuf
(
curs‹
));

165 
	`dÀaf_dump
(
båì
, 
Àaf
);

166 
	`dwÆk_¥obe
(
Àaf
, 
sb
->
blocksize
, 
wÆk
, 
°¨t
);

168 
	`as£π
(
mode
 =
MAP_READ
);

172 
block_t
 
limô
 = 
°¨t
 + 
cou¡
;

173 i‡(
curs‹
) {

174 
	`as£π
(
°¨t
 >
	`curs‹_this_key
(
curs‹
));

176 i‡(
limô
 > 
	`curs‹_√xt_key
(
curs‹
))

177 
limô
 = 
	`curs‹_√xt_key
(
curs‹
);

179 
	`åa˚
("--- index %Lx,Üimô %Lx ---", 
°¨t
, 
limô
);

181 
block_t
 
ödex
 = 
°¨t
, 
£g_°¨t
, 
block
;

182 
dwÆk
 
hódwÆk
 = *
wÆk
;

183 i‡(!
	`dwÆk_íd
(
wÆk
Ë&& 
	`dwÆk_ödex
(wÆkË< 
°¨t
)

184 
£g_°¨t
 = 
	`dwÆk_ödex
(
wÆk
);

186 
£g_°¨t
 = 
ödex
;

187 
ödex
 < 
limô
 && 
£gs
 < 
£g_max
) {

188 
block_t
 
ex_ödex
;

189 i‡(!
	`dwÆk_íd
(
wÆk
))

190 
ex_ödex
 = 
	`dwÆk_ödex
(
wÆk
);

192 
ex_ödex
 = 
limô
;

194 i‡(
ödex
 < 
ex_ödex
) {

196 
ex_ödex
 = 
	`mö
”x_ödex, 
limô
);

197 
g≠
 = 
ex_ödex
 - 
ödex
;

198 
ödex
 = 
ex_ödex
;

199 
£g
[
£gs
++] = (
block_£gmít
){

200 .
cou¡
 = 
g≠
,

201 .
°©e
 = 
BLOCK_SEG_HOLE
,

204 
block
 = 
	`dwÆk_block
(
wÆk
);

205 
cou¡
 = 
	`dwÆk_cou¡
(
wÆk
);

206 
	`åa˚
("emô %Lx/%x", 
block
, 
cou¡
);

207 
£g
[
£gs
++] = (
block_£gmít
){

208 .
block
 = block,

209 .
cou¡
 = count,

211 
ödex
 = 
ex_ödex
 + 
cou¡
;

212 
	`dwÆk_√xt
(
wÆk
);

215 
	`as£π
(
£gs
);

216 
bñow
 = 
°¨t
 - 
£g_°¨t
, 
above
 = 
ödex
 - 
	`mö
(ödex, 
limô
);

217 
£g
[0].
block
 +
bñow
;

218 
£g
[0].
cou¡
 -
bñow
;

219 
£g
[
£gs
 - 1].
cou¡
 -
above
;

221 i‡(
mode
 =
MAP_READ
)

222 
out_ªÀa£
;

225 
block_t
 
bñow_block
, 
above_block
;

226 
bñow_block
 = 
£g
[0].
block
 - 
bñow
;

227 
above_block
 = 
£g
[
£gs
 - 1].
block
 + seg[£g†- 1].
cou¡
;

228 i‡(
mode
 =
MAP_REDIRECT
) {

230 
cou¡
 = 0;

231 
i
 = 0; i < 
£gs
; i++) {

233 i‡(
£g
[
i
].
°©e
 !
BLOCK_SEG_HOLE
)

234 
	`m≠_b‰ì
(
öode
, 
£g
[
i
].
block
, seg[i].
cou¡
);

235 
cou¡
 +
£g
[
i
].count;

237 
£gs
 = 1;

238 
£g
[0].
block
 = 0;

239 
£g
[0].
cou¡
 = count;

240 
£g
[0].
°©e
 = 
BLOCK_SEG_HOLE
;

242 
i
 = 0; i < 
£gs
; i++) {

243 i‡(
£g
[
i
].
°©e
 !
BLOCK_SEG_HOLE
)

246 
cou¡
 = 
£g
[
i
].count;

247 i‡((
îr
 = 
	`bÆloc
(
sb
, 
cou¡
, &
£g
[
i
], 1))) {

262 
£gs
 = 
îr
;

263 
out_ªÀa£
;

265 
	`log_bÆloc
(
sb
, 
£g
[
i
].
block
, seg[i].
cou¡
);

266 
	`åa˚
("fû»ö %Lx/%ò", 
£g
[
i
].
block
, seg[i].
cou¡
);

269 
£g
[
i
].
°©e
 = (
mode
 =
MAP_REDIRECT
Ë? 0 : 
BLOCK_SEG_NEW
;

273 i‡((
îr
 = 
	`curs‹_ªdúe˘
(
curs‹
))) {

274 
£gs
 = 
îr
;

275 
out_ªÀa£
;

278 
	`dwÆk_ªdúe˘
(
wÆk
, 
Àaf
, 
	`bufd©a
(
	`curs‹_Àafbuf
(
curs‹
)));

279 
	`dwÆk_ªdúe˘
(&
hódwÆk
, 
Àaf
, 
	`bufd©a
(
	`curs‹_Àafbuf
(
curs‹
)));

280 
Àaf
 = 
	`bufd©a
(
	`curs‹_Àafbuf
(
curs‹
));

282 
dÀaf
 *
èû
 = 
NULL
;

283 
tuxkey_t
 
èûkey
 = 0;

284 i‡(!
	`dwÆk_íd
(
wÆk
)) {

285 
èû
 = 
	`mÆloc
(
sb
->
blocksize
);

286 
	`dÀaf_öô
(
båì
, 
èû
);

287 
èûkey
 = 
	`dwÆk_ödex
(
wÆk
);

288 
	`dwÆk_c›y
(
wÆk
, 
èû
);

291 
	`dwÆk_ch›
(&
hódwÆk
);

292 
ödex
 = 
°¨t
;

293 
i
 = -!!
bñow
; i < 
£gs
 + !!
above
; i++) {

294 i‡(
	`dÀaf_‰ì
(
båì
, 
Àaf
Ë< 
DLEAF_MAX_EXTENT_SIZE
) {

295 
	`m¨k_buf„r_dúty_n⁄
(
	`curs‹_Àafbuf
(
curs‹
));

296 
buf„r_hód
 *
√wbuf
 = 
	`√w_Àaf
(
båì
);

297 i‡(
	`IS_ERR
(
√wbuf
)) {

298 
£gs
 = 
	`PTR_ERR
(
√wbuf
);

299 
out_¸óã
;

301 
	`log_bÆloc
(
sb
, 
	`bufödex
(
√wbuf
), 1);

310 
	`båì_ö£π_Àaf
(
curs‹
, 
ödex
, 
√wbuf
);

311 
Àaf
 = 
	`bufd©a
(
	`curs‹_Àafbuf
(
curs‹
));

312 
	`dwÆk_¥obe
(
Àaf
, 
sb
->
blocksize
, &
hódwÆk
, 
ödex
);

314 i‡(
i
 < 0) {

315 
	`åa˚
("emit below");

316 
	`dwÆk_add
(&
hódwÆk
, 
£g_°¨t
, 
	`make_exã¡
(
bñow_block
, 
bñow
));

319 i‡(
i
 =
£gs
) {

320 
	`åa˚
("emitábove");

321 
	`dwÆk_add
(&
hódwÆk
, 
ödex
, 
	`make_exã¡
(
above_block
, 
above
));

324 
	`åa˚
("∑ck 0x%Lx => %Lx/%x", 
ödex
, 
£g
[
i
].
block
, seg[i].
cou¡
);

325 
	`dÀaf_dump
(
båì
, 
Àaf
);

326 
	`dwÆk_add
(&
hódwÆk
, 
ödex
, 
	`make_exã¡
(
£g
[
i
].
block
, seg[i].
cou¡
));

327 
	`dÀaf_dump
(
båì
, 
Àaf
);

328 
ödex
 +
£g
[
i
].
cou¡
;

330 i‡(
èû
) {

331 i‡(!
	`dÀaf_mîge
(
båì
, 
Àaf
, 
èû
)) {

332 
	`m¨k_buf„r_dúty_n⁄
(
	`curs‹_Àafbuf
(
curs‹
));

333 
	`as£π
(
	`dÀaf_groups
(
èû
) >= 1);

335 
buf„r_hód
 *
√wbuf
 = 
	`√w_Àaf
(
båì
);

336 i‡(
	`IS_ERR
(
√wbuf
)) {

337 
£gs
 = 
	`PTR_ERR
(
√wbuf
);

338 
out_¸óã
;

340 
	`mem˝y
(
	`bufd©a
(
√wbuf
), 
èû
, 
sb
->
blocksize
);

341 
	`log_bÆloc
(
sb
, 
	`bufödex
(
√wbuf
), 1);

342 i‡((
îr
 = 
	`båì_ö£π_Àaf
(
curs‹
, 
èûkey
, 
√wbuf
))) {

343 
£gs
 = 
îr
;

344 
out_¸óã
;

348 
	`m¨k_buf„r_dúty_n⁄
(
	`curs‹_Àafbuf
(
curs‹
));

349 
out_¸óã
:

350 i‡(
èû
)

351 
	`‰ì
(
èû
);

352 
out_ªÀa£
:

353 i‡(
curs‹
)

354 
	`ªÀa£_curs‹
(
curs‹
);

355 
out_u∆ock
:

356 i‡(
	`tux_öode
(
öode
)->
öum
 !
TUX_BITMAP_INO
) {

357 i‡(
mode
 =
MAP_READ
)

358 
	`up_ªad
(&
båì
->
lock
);

360 
	`up_wrôe
(&
båì
->
lock
);

362 i‡(
curs‹
)

363 
	`‰ì_curs‹
(
curs‹
);

365  
£gs
;

366 
	}
}

372 
	$£g_Æloc
(
båì
 *båì, 
dÀaf_ªq
 *
rq
,

373 
wrôe_£gs
, 
£g_°©e
)

375 if(
DEBUG_MODE_K
==1)

377 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

379 
sb
 *sb = 
båì
->sb;

380 
block_£gmít
 
tmp
, *
£g
 = 
rq
->seg;

381 
i
, 
∑πül
 = 0;

383 
	`as£π
(
rq
->
£g_idx
 + 
wrôe_£gs
 <rq->
£g_max
);

385 
i
 = 
rq
->
£g_idx
; i <Ñq->£g_idx + 
wrôe_£gs
; i++) {

386 
îr
;

388 i‡(
£g
[
i
].
°©e
 !
BLOCK_SEG_HOLE
)

391 
îr
 = 
	`bÆloc_∑πül
(
sb
, 
£g
[
i
].
cou¡
, &
tmp
, 1);

392 i‡(
îr
) {

410  
îr
;

417 i‡(
tmp
.
cou¡
 !
£g
[
i
].count) {

418 
size
;

420 i‡(
rq
->
£g_˙t
 =rq->
£g_max
)

421 
size
 = (
rq
->
£g_˙t
 - 
i
 - 1Ë* (*
£g
);

423 
size
 = (
rq
->
£g_˙t
 - 
i
Ë* (*
£g
);

424 
rq
->
£g_˙t
++;

425 
wrôe_£gs
++;

427 
	`memmove
(&
£g
[
i
 + 1], &£g[i], 
size
);

429 
£g
[
i
 + 1].
cou¡
 = seg[i].cou¡ - 
tmp
.count;

431 
∑πül
 = 1;

433 
£g
[
i
] = 
tmp
;

435 
	`log_bÆloc
(
sb
, 
£g
[
i
].
block
, seg[i].
cou¡
);

437 
£g
[
i
].
°©e
 = 
£g_°©e
;

440  
∑πül
;

441 
	}
}

443 
	$ovîwrôe_£g_Æloc
(
båì
 *båì, 
dÀaf_ªq
 *
rq
,

444 
wrôe_£gs
)

446 if(
DEBUG_MODE_K
==1)

448 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

451  
	`£g_Æloc
(
båì
, 
rq
, 
wrôe_£gs
, 
BLOCK_SEG_NEW
);

452 
	}
}

454 
	$ªdúe˘_£g_Æloc
(
båì
 *båì, 
dÀaf_ªq
 *
rq
,

455 
wrôe_£gs
)

457 if(
DEBUG_MODE_K
==1)

459 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

462  
	`£g_Æloc
(
båì
, 
rq
, 
wrôe_£gs
, 0);

463 
	}
}

465 (*
£g_Æloc_funs
[])(
båì
 *, 
dÀaf_ªq
 *, ) = {

466 [
MAP_WRITE
] = 
ovîwrôe_£g_Æloc
,

467 [
MAP_REDIRECT
] = 
ªdúe˘_£g_Æloc
,

468 
	}
};

471 
	$m≠_ªgi⁄2
(
öode
 *öode, 
block_t
 
°¨t
, 
cou¡
,

472 
block_£gmít
 
£g
[], 
£g_max
,

473 
m≠_mode
 
mode
)

475 if(
DEBUG_MODE_K
==1)

477 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

479 
båì
 *båì = &
	`tux_öode
(
öode
)->btree;

480 
curs‹
 *curs‹ = 
NULL
;

481 
îr
, 
£gs
 = 0;

483 
	`as£π
(
£g_max
 > 0);

498 i‡(
	`tux_öode
(
öode
)->
öum
 !
TUX_BITMAP_INO
) {

499 i‡(
mode
 =
MAP_READ
)

500 
	`down_ªad
(&
båì
->
lock
);

502 
	`down_wrôe
(&
båì
->
lock
);

505 i‡(!
	`has_roŸ
(
båì
Ë&& 
mode
 !
MAP_READ
) {

510 
îr
 = 
	`Æloc_em±y_båì
(
båì
);

511 i‡(
îr
) {

512 
£gs
 = 
îr
;

513 
out_u∆ock
;

517 i‡(
	`has_roŸ
(
båì
)) {

518 
dÀaf_ªq
 
rq
 = {

519 .
key
 = {

520 .
°¨t
 = start,

521 .
Àn
 = 
cou¡
,

523 .
£g_max
 = seg_max,

524 .
£g
 = seg,

527 
curs‹
 = 
	`Æloc_curs‹
(
båì
, 1);

528 i‡(!
curs‹
) {

529 
£gs
 = -
ENOMEM
;

530 
out_u∆ock
;

533 
îr
 = 
	`båì_¥obe
(
curs‹
, 
°¨t
);

534 i‡(
îr
) {

535 
£gs
 = 
îr
;

536 
out_u∆ock
;

539 
îr
 = 
	`båì_ªad
(
curs‹
, &
rq
.
key
);

540 i‡(
îr
) {

541 
£gs
 = 
îr
;

542 
out_u∆ock
;

544 
£gs
 = 
rq
.
£g_idx
;

549 
cou¡
 = 
	`£g_tŸÆ_cou¡
(
£g
, 
£gs
);

551 
	`as£π
(
mode
 =
MAP_READ
);

553 
£gs
 = 1;

554 
£g
[0].
block
 = 0;

555 
£g
[0].
cou¡
 = count;

556 
£g
[0].
°©e
 = 
BLOCK_SEG_HOLE
;

558 
	`as£π
(
£gs
);

560 i‡(
mode
 =
MAP_READ
)

561 
out_ªÀa£
;

563 i‡(
mode
 =
MAP_REDIRECT
) {

565 
tŸÆ
 = 0;

566 
i
 = 0; i < 
£gs
; i++) {

568 i‡(
£g
[
i
].
°©e
 !
BLOCK_SEG_HOLE
)

569 
	`m≠_b‰ì
(
öode
, 
£g
[
i
].
block
, seg[i].
cou¡
);

570 
tŸÆ
 +
£g
[
i
].
cou¡
;

572 
	`as£π
(
tŸÆ
 =
cou¡
);

573 
£gs
 = 1;

574 
£g
[0].
block
 = 0;

575 
£g
[0].
cou¡
 = 
tŸÆ
;

576 
£g
[0].
°©e
 = 
BLOCK_SEG_HOLE
;

580 
dÀaf_ªq
 
rq
 = {

581 .
key
 = {

582 .
°¨t
 = start,

583 .
Àn
 = 
cou¡
,

585 .
£g_˙t
 = 
£gs
,

586 .
£g_max
 = seg_max,

587 .
£g
 = seg,

588 .
£g_Æloc
 = 
£g_Æloc_funs
[
mode
],

590 
îr
 = 
	`båì_wrôe
(
curs‹
, &
rq
.
key
);

591 i‡(
îr
) {

592 
£gs
 = 
îr
;

593 
out_ªÀa£
;

595 
£gs
 = 
rq
.
£g_˙t
;

597 
out_ªÀa£
:

598 i‡(
curs‹
)

599 
	`ªÀa£_curs‹
(
curs‹
);

600 
out_u∆ock
:

601 i‡(
	`tux_öode
(
öode
)->
öum
 !
TUX_BITMAP_INO
) {

602 i‡(
mode
 =
MAP_READ
)

603 
	`up_ªad
(&
båì
->
lock
);

605 
	`up_wrôe
(&
båì
->
lock
);

607 i‡(
curs‹
)

608 
	`‰ì_curs‹
(
curs‹
);

610  
£gs
;

611 
	}
}

620 
	$m≠_ªgi⁄
(
öode
 *öode, 
block_t
 
°¨t
, 
cou¡
,

621 
block_£gmít
 
£g
[], 
£g_max
,

622 
m≠_mode
 
mode
)

624 if(
DEBUG_MODE_K
==1)

626 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

628 
båì
 *båì = &
	`tux_öode
(
öode
)->btree;

629 
£gs
;

636 i‡(
mode
 =
MAP_READ
) {

638 i‡(
	`tux3_is_hﬁe
(
öode
, 
°¨t
, 
cou¡
)) {

639 
	`as£π
(
£g_max
 >= 1);

640 
£g
[0].
°©e
 = 
BLOCK_SEG_HOLE
;

641 
£g
[0].
block
 = 0;

642 
£g
[0].
cou¡
 = count;

647 i‡(
båì
->
›s
 =&
dåì1_›s
)

648 
£gs
 = 
	`m≠_ªgi⁄1
(
öode
, 
°¨t
, 
cou¡
, 
£g
, 
£g_max
, 
mode
);

650 
£gs
 = 
	`m≠_ªgi⁄2
(
öode
, 
°¨t
, 
cou¡
, 
£g
, 
£g_max
, 
mode
);

652 i‡(
mode
 =
MAP_READ
) {

654 
£gs
 = 
	`tux3_m≠_hﬁe
(
öode
, 
°¨t
, 
cou¡
, 
£g
, segs, 
£g_max
);

657  
£gs
;

658 
	}
}

660 
fûem≠_exã¡_io
(
m≠_mode
 
mode
, 
rw
, 
bufvec
 *bufvec);

661 
	$tux3_fûem≠_ovîwrôe_io
(
rw
, 
bufvec
 *bufvec)

663 if(
DEBUG_MODE_K
==1)

665 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

667 
m≠_mode
 
mode
 = (
rw
 & 
WRITE
Ë? 
MAP_WRITE
 : 
MAP_READ
;

668  
	`fûem≠_exã¡_io
(
mode
, 
rw
, 
bufvec
);

669 
	}
}

671 
	$tux3_fûem≠_ªdúe˘_io
(
rw
, 
bufvec
 *bufvec)

673 if(
DEBUG_MODE_K
==1)

675 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

677 
m≠_mode
 
mode
 = (
rw
 & 
WRITE
Ë? 
MAP_REDIRECT
 : 
MAP_READ
;

678  
	`fûem≠_exã¡_io
(
mode
, 
rw
, 
bufvec
);

679 
	}
}

681 #ifde‡
__KERNEL__


682 
	~<löux/m∑ge.h
>

683 
	~<löux/sw≠.h
>

684 
	~<löux/aio.h
>

686 
	$fûem≠_exã¡_io
(
m≠_mode
 
mode
, 
rw
, 
bufvec
 *bufvec)

688 if(
DEBUG_MODE_K
==1)

690 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

692 
öode
 *öodê
	`bufvec_öode
(
bufvec
);

693 
block_t
 
block
, 
ödex
 = 
	`bufvec_c⁄tig_ödex
(
bufvec
);

694 
cou¡
 = 
	`bufvec_c⁄tig_cou¡
(
bufvec
);

695 
îr
;

696 
block_£gmít
 
£g
[10];

699 
	`as£π
(
mode
 !
MAP_READ
);

700 
	`¥ötf
("\nIndex : %Lx , Cou¡ : %u\n",
ödex
,
cou¡
);

701 
£gs
 = 
	`m≠_ªgi⁄
(
öode
, 
ödex
, 
cou¡
, 
£g
, 
	`ARRAY_SIZE
(£g), 
mode
);

702 i‡(
£gs
 < 0)

703  
£gs
;

704 
	`as£π
(
£gs
);

706 
i
 = 0; i < 
£gs
; i++) {

707 
block
 = 
£g
[
i
].block;

708 
cou¡
 = 
£g
[
i
].count;

710 
	`åa˚
("exã¡ 0x%Lx/%x => %Lx", 
ödex
, 
cou¡
, 
block
);

712 
îr
 = 
	`blockio_vec
(
rw
, 
bufvec
, 
block
, 
cou¡
);

713 i‡(
îr
)

716 
ödex
 +
cou¡
;

719  
îr
;

720 
	}
}

722 
	$£g_to_buf„r
(
sb
 *sb, 
buf„r_hód
 *
buf„r
,

723 
block_£gmít
 *
£g
, 
dñÆloc
)

725 if(
DEBUG_MODE_K
==1)

727 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

729 
£g
->
°©e
) {

730 
BLOCK_SEG_HOLE
:

731 i‡(
dñÆloc
 && !
	`buf„r_dñay
(
buf„r
)) {

732 
	`m≠_bh
(
buf„r
, 
	`vfs_sb
(
sb
), 0);

733 
	`£t_buf„r_√w
(
buf„r
);

734 
	`£t_buf„r_dñay
(
buf„r
);

735 
buf„r
->
b_size
 = 
£g
->
cou¡
 << 
sb
->
blockbôs
;

738 
BLOCK_SEG_NEW
:

739 
	`as£π
(!
dñÆloc
);

740 
	`as£π
(
£g
->
block
);

741 i‡(
	`buf„r_dñay
(
buf„r
)) {

744 
buf„r
->
b_blockƒ
 = 
£g
->
block
;

752 
	`£t_buf„r_√w
(
buf„r
);

755 
	`m≠_bh
(
buf„r
, 
	`vfs_sb
(
sb
), 
£g
->
block
);

756 
buf„r
->
b_size
 = 
£g
->
cou¡
 << 
sb
->
blockbôs
;

759 
	}
}

762 
	$__tux3_gë_block
(
öode
 *öode, 
£˘‹_t
 
iblock
,

763 
buf„r_hód
 *
bh_ªsu…
, 
¸óã
)

765 if(
DEBUG_MODE_K
==1)

767 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

769 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

770 
size_t
 
max_blocks
 = 
bh_ªsu…
->
b_size
 >> 
sb
->
blockbôs
;

771 
m≠_mode
 
mode
;

772 
block_£gmít
 
£g
;

773 
£gs
, 
dñÆloc
;

775 
	`åa˚
("==> inum %Lu, iblock %Lu, b_size %zu, create %d",

776 
	`tux_öode
(
öode
)->
öum
, (
u64
)
iblock
, 
bh_ªsu…
->
b_size
, 
¸óã
);

778 i‡(
¸óã
 == 3) {

779 
dñÆloc
 = 1;

780 
mode
 = 
MAP_READ
;

782 
dñÆloc
 = 0;

783 
mode
 = 
¸óã
;

785 
	`as£π
(
mode
 < 
MAX_MAP_MODE
);

787 
£gs
 = 
	`m≠_ªgi⁄
(
öode
, 
iblock
, 
max_blocks
, &
£g
, 1, 
mode
);

788 i‡(
£gs
 < 0) {

789 
	`tux3_îr
(
sb
, "m≠_ªgi⁄ faûed: %d", 
£gs
);

790  -
EIO
;

792 
	`as£π
(
£gs
 == 1);

793 
	`as£π
(
£g
.
cou¡
 <
max_blocks
);

800 
	`as£π
(
£g
.
°©e
 !
BLOCK_SEG_NEW
 );

803 
	`£g_to_buf„r
(
sb
, 
bh_ªsu…
, &
£g
, 
dñÆloc
);

805 
	`åa˚
("<== inum %Lu, mapped %d, block %Lu, size %zu",

806 
	`tux_öode
(
öode
)->
öum
, 
	`buf„r_m≠≥d
(
bh_ªsu…
),

807 (
u64
)
bh_ªsu…
->
b_blockƒ
, bh_ªsu…->
b_size
);

810 
	}
}

813 
	$tux3_da_gë_block
(
öode
 *öode, 
£˘‹_t
 
iblock
,

814 
buf„r_hód
 *
bh_ªsu…
, 
¸óã
)

816 if(
DEBUG_MODE_K
==1)

818 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

823 
	`as£π
(!
	`buf„r_m≠≥d
(
bh_ªsu…
));

825 
	`as£π
(!
	`PageU±od©e
(
bh_ªsu…
->
b_∑ge
Ë|| 
	`buf„r_u±od©e
(bh_result));

832 i‡(
	`buf„r_u±od©e
(
bh_ªsu…
)) {

833 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

834 
block_£gmít
 
£g
 = {

835 .
°©e
 = 
BLOCK_SEG_HOLE
,

836 .
block
 = 0,

837 .
cou¡
 = 1,

839 
	`as£π
(
bh_ªsu…
->
b_size
 =
sb
->
blocksize
);

841 
	`£g_to_buf„r
(
sb
, 
bh_ªsu…
, &
£g
, 1);

843 
	`åa˚
("inum %Lu, mapped %d, block %Lu, size %zu",

844 
	`tux_öode
(
öode
)->
öum
, 
	`buf„r_m≠≥d
(
bh_ªsu…
),

845 (
u64
)
bh_ªsu…
->
b_blockƒ
, bh_ªsu…->
b_size
);

850  
	`__tux3_gë_block
(
öode
, 
iblock
, 
bh_ªsu…
, 3);

851 
	}
}

853 
	$tux3_gë_block
(
öode
 *öode, 
£˘‹_t
 
iblock
,

854 
buf„r_hód
 *
bh_ªsu…
, 
¸óã
)

856 if(
DEBUG_MODE_K
==1)

858 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

860  
	`__tux3_gë_block
(
öode
, 
iblock
, 
bh_ªsu…
, 
¸óã
);

861 
	}
}

863 
buf„r_hód
 *
	$__gë_buf„r
(
∑ge
 *∑ge, 
off£t
)

865 if(
DEBUG_MODE_K
==1)

867 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

869 
buf„r_hód
 *
buf„r
 = 
	`∑ge_buf„rs
(
∑ge
);

870 
off£t
--)

871 
buf„r
 = buf„r->
b_this_∑ge
;

872  
buf„r
;

873 
	}
}

875 
buf„r_hód
 *
	$gë_buf„r
(
∑ge
 *∑ge, 
off£t
)

877 if(
DEBUG_MODE_K
==1)

879 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

881 
buf„r_hód
 *
buf„r
 = 
	`__gë_buf„r
(
∑ge
, 
off£t
);

882 
	`gë_bh
(
buf„r
);

883  
buf„r
;

884 
	}
}

886 
buf„r_hód
 *
	$__föd_gë_buf„r
(
addªss_•a˚
 *
m≠pög
,

887 
pgoff_t
 
ödex
, 
off£t
,

888 
√ed_u±od©e
)

890 if(
DEBUG_MODE_K
==1)

892 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

894 
buf„r_hód
 *
bh
 = 
NULL
;

895 
∑ge
 *page;

897 
∑ge
 = 
	`föd_gë_∑ge
(
m≠pög
, 
ödex
);

898 i‡(
∑ge
) {

899 i‡(!
√ed_u±od©e
 || 
	`PageU±od©e
(
∑ge
)) {

900 
	`•ö_lock
(&
m≠pög
->
¥iv©e_lock
);

901 i‡(
	`∑ge_has_buf„rs
(
∑ge
)) {

902 
bh
 = 
	`gë_buf„r
(
∑ge
, 
off£t
);

903 
	`as£π
(!
√ed_u±od©e
 || 
	`buf„r_u±od©e
(
bh
));

905 
	`•ö_u∆ock
(&
m≠pög
->
¥iv©e_lock
);

907 
	`∑ge_ˇche_ªÀa£
(
∑ge
);

909  
bh
;

910 
	}
}

912 
buf„r_hód
 *
	$föd_gë_buf„r
(
addªss_•a˚
 *
m≠pög
,

913 
pgoff_t
 
ödex
, 
off£t
)

915 if(
DEBUG_MODE_K
==1)

917 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

919  
	`__föd_gë_buf„r
(
m≠pög
, 
ödex
, 
off£t
, 1);

920 
	}
}

922 
buf„r_hód
 *
	$≥ekblk
(
addªss_•a˚
 *
m≠pög
, 
block_t
 
iblock
)

924 if(
DEBUG_MODE_K
==1)

926 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

928 
öode
 *öodê
m≠pög
->
ho°
;

929 
pgoff_t
 
ödex
;

930 
off£t
;

932 
ödex
 = 
iblock
 >> (
PAGE_CACHE_SHIFT
 - 
öode
->
i_blkbôs
);

933 
off£t
 = 
iblock
 & ((1 << (
PAGE_CACHE_SHIFT
 - 
öode
->
i_blkbôs
)) - 1);

935  
	`__föd_gë_buf„r
(
m≠pög
, 
ödex
, 
off£t
, 0);

936 
	}
}

938 
buf„r_hód
 *
	$blockªad
(
addªss_•a˚
 *
m≠pög
, 
block_t
 
iblock
)

940 if(
DEBUG_MODE_K
==1)

942 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

944 
öode
 *öodê
m≠pög
->
ho°
;

945 
gÂ_t
 
gÂ_mask
 = 
	`m≠pög_gÂ_mask
(
m≠pög
Ë| 
__GFP_COLD
;

946 
pgoff_t
 
ödex
;

947 
∑ge
 *page;

948 
buf„r_hód
 *
bh
;

949 
îr
, 
off£t
;

951 
ödex
 = 
iblock
 >> (
PAGE_CACHE_SHIFT
 - 
öode
->
i_blkbôs
);

952 
off£t
 = 
iblock
 & ((1 << (
PAGE_CACHE_SHIFT
 - 
öode
->
i_blkbôs
)) - 1);

954 
bh
 = 
	`föd_gë_buf„r
(
m≠pög
, 
ödex
, 
off£t
);

955 i‡(
bh
)

956 
out
;

958 
îr
 = -
ENOMEM
;

960 
∑ge
 = 
	`föd_‹_¸óã_∑ge
(
m≠pög
, 
ödex
, 
gÂ_mask
);

961 i‡(!
∑ge
)

962 
îr‹
;

964 i‡(!
	`∑ge_has_buf„rs
(
∑ge
))

965 
	`¸óã_em±y_buf„rs
(
∑ge
, 
	`tux_sb
(
öode
->
i_sb
)->
blocksize
, 0);

966 
bh
 = 
	`gë_buf„r
(
∑ge
, 
off£t
);

968 i‡(
	`PageU±od©e
(
∑ge
))

969 
	`u∆ock_∑ge
(
∑ge
);

971 
îr
 = 
m≠pög
->
a_›s
->
	`ªad∑ge
(
NULL
, 
∑ge
);

972 i‡(
îr
)

973 
îr‹_ªad∑ge
;

974 
	`waô_⁄_∑ge_locked
(
∑ge
);

975 i‡(!
	`PageU±od©e
(
∑ge
)) {

976 
îr
 = -
EIO
;

977 
îr‹_ªad∑ge
;

980 
	`∑ge_ˇche_ªÀa£
(
∑ge
);

981 
	`as£π
(
	`buf„r_u±od©e
(
bh
));

983 
out
:

984 
	`touch_buf„r
(
bh
);

986  
bh
;

988 
îr‹_ªad∑ge
:

989 
	`put_bh
(
bh
);

990 
	`∑ge_ˇche_ªÀa£
(
∑ge
);

991 
îr‹
:

992  
NULL
;

993 
	}
}

995 
buf„r_hód
 *
	$blockgë
(
addªss_•a˚
 *
m≠pög
, 
block_t
 
iblock
)

997 if(
DEBUG_MODE_K
==1)

999 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1001 
öode
 *öodê
m≠pög
->
ho°
;

1002 
pgoff_t
 
ödex
;

1003 
∑ge
 *page;

1004 
buf„r_hód
 *
bh
;

1005 *
fsd©a
;

1006 
îr
, 
off£t
;

1007 
a›_Êags
 = 
AOP_FLAG_UNINTERRUPTIBLE
;

1009 
ödex
 = 
iblock
 >> (
PAGE_CACHE_SHIFT
 - 
öode
->
i_blkbôs
);

1010 
off£t
 = 
iblock
 & ((1 << (
PAGE_CACHE_SHIFT
 - 
öode
->
i_blkbôs
)) - 1);

1013 i‡(!(
	`m≠pög_gÂ_mask
(
m≠pög
Ë& 
__GFP_FS
))

1014 
a›_Êags
 |
AOP_FLAG_NOFS
;

1016 
îr
 = 
m≠pög
->
a_›s
->
	`wrôe_begö
(
NULL
, mapping,

1017 
iblock
 << 
öode
->
i_blkbôs
,

1018 1 << 
öode
->
i_blkbôs
,

1019 
a›_Êags
, &
∑ge
, &
fsd©a
);

1020 i‡(
îr
)

1021  
NULL
;

1023 
	`as£π
(
	`∑ge_has_buf„rs
(
∑ge
));

1025 
bh
 = 
	`gë_buf„r
(
∑ge
, 
off£t
);

1027 
	`˛ór_buf„r_√w
(
bh
);

1058 
	`£t_buf„r_u±od©e
(
bh
);

1060 
	`u∆ock_∑ge
(
∑ge
);

1061 
	`∑ge_ˇche_ªÀa£
(
∑ge
);

1063 
	`touch_buf„r
(
bh
);

1065  
bh
;

1066 
	}
}

1068 
	$tux3_ªad∑ge
(
fûe
 *fûe, 
∑ge
 *page)

1070 if(
DEBUG_MODE_K
==1)

1072 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1074 
îr
 = 
	`m∑ge_ªad∑ge
(
∑ge
, 
tux3_gë_block
);

1075 
	`as£π
(!
	`PageF‹ked
(
∑ge
));

1076  
îr
;

1077 
	}
}

1079 
	$tux3_ªad∑ges
(
fûe
 *fûe, 
addªss_•a˚
 *
m≠pög
,

1080 
li°_hód
 *
∑ges
, 
ƒ_∑ges
)

1082 if(
DEBUG_MODE_K
==1)

1084 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1086  
	`m∑ge_ªad∑ges
(
m≠pög
, 
∑ges
, 
ƒ_∑ges
, 
tux3_gë_block
);

1087 
	}
}

1089 
	~"fûem≠_blocklib.c
"

1091 
	$tux3_wrôe_Áûed
(
addªss_•a˚
 *
m≠pög
, 
loff_t
 
to
)

1093 if(
DEBUG_MODE_K
==1)

1095 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1097 
öode
 *öodê
m≠pög
->
ho°
;

1099 i‡(
to
 > 
öode
->
i_size
) {

1107 
	`åunˇã_∑geˇche
(
öode
, 
to
, inode->
i_size
);

1109 
	}
}

1112 
	$__tux3_fûe_wrôe_begö
(
fûe
 *file,

1113 
addªss_•a˚
 *
m≠pög
,

1114 
loff_t
 
pos
, 
Àn
, 
Êags
,

1115 
∑ge
 **
∑gï
, **
fsd©a
,

1116 
check_f‹k
)

1118 if(
DEBUG_MODE_K
==1)

1120 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1122 
ªt
;

1124 
ªt
 = 
	`tux3_wrôe_begö
(
m≠pög
, 
pos
, 
Àn
, 
Êags
, 
∑gï
,

1125 
tux3_da_gë_block
, 
check_f‹k
);

1126 i‡(
ªt
 < 0)

1127 
	`tux3_wrôe_Áûed
(
m≠pög
, 
pos
 + 
Àn
);

1128  
ªt
;

1129 
	}
}

1131 
	$__tux3_fûe_wrôe_íd
(
fûe
 *file,

1132 
addªss_•a˚
 *
m≠pög
,

1133 
loff_t
 
pos
, 
Àn
, 
c›õd
,

1134 
∑ge
 *∑ge, *
fsd©a
)

1136 if(
DEBUG_MODE_K
==1)

1138 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1140 
ªt
;

1142 
ªt
 = 
	`tux3_wrôe_íd
(
fûe
, 
m≠pög
, 
pos
, 
Àn
, 
c›õd
, 
∑ge
, 
fsd©a
);

1143 i‡(
ªt
 < 
Àn
)

1144 
	`tux3_wrôe_Áûed
(
m≠pög
, 
pos
 + 
Àn
);

1145  
ªt
;

1146 
	}
}

1149 
	$tux3_fûe_wrôe_begö
(
fûe
 *file,

1150 
addªss_•a˚
 *
m≠pög
,

1151 
loff_t
 
pos
, 
Àn
, 
Êags
,

1152 
∑ge
 **
∑gï
, **
fsd©a
)

1154 if(
DEBUG_MODE_K
==1)

1156 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1159 
	`as£π
(
	`S_ISREG
(
m≠pög
->
ho°
->
i_mode
));

1160 
	`ch™ge_begö_if_√eded
(
	`tux_sb
(
m≠pög
->
ho°
->
i_sb
));

1162  
	`__tux3_fûe_wrôe_begö
(
fûe
, 
m≠pög
, 
pos
, 
Àn
, 
Êags
, 
∑gï
,

1163 
fsd©a
, 1);

1164 
	}
}

1166 
	$tux3_fûe_wrôe_íd
(
fûe
 *fûe, 
addªss_•a˚
 *
m≠pög
,

1167 
loff_t
 
pos
, 
Àn
, 
c›õd
,

1168 
∑ge
 *∑ge, *
fsd©a
)

1170 if(
DEBUG_MODE_K
==1)

1172 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1174 
ªt
;

1176 
ªt
 = 
	`__tux3_fûe_wrôe_íd
(
fûe
, 
m≠pög
, 
pos
, 
Àn
, 
c›õd
, 
∑ge
,

1177 
fsd©a
);

1180 
	`as£π
(
	`S_ISREG
(
m≠pög
->
ho°
->
i_mode
));

1181 
	`ch™ge_íd_if_√eded
(
	`tux_sb
(
m≠pög
->
ho°
->
i_sb
));

1183  
ªt
;

1184 
	}
}

1187 
	$tux3_wrôïage
(
∑ge
 *∑ge, 
wrôeback_c⁄åﬁ
 *
wbc
)

1189 if(
DEBUG_MODE_K
==1)

1191 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1193 
sb
 *sb = 
	`tux_sb
(
∑ge
->
m≠pög
->
ho°
->
i_sb
);

1194 
	`ch™ge_begö
(
sb
);

1195 
îr
 = 
	`block_wrôe_fuŒ_∑ge
(
∑ge
, 
tux3_gë_block
, 
wbc
);

1196 
	`ch™ge_íd
(
sb
);

1197  
îr
;

1198 
	}
}

1202 
	$tux3_wrôïages
(
addªss_•a˚
 *
m≠pög
,

1203 
wrôeback_c⁄åﬁ
 *
wbc
)

1205 if(
DEBUG_MODE_K
==1)

1207 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1209  
	`m∑ge_wrôïages
(
m≠pög
, 
wbc
, 
tux3_gë_block
);

1210 
	}
}

1213 
	$tux3_dißbÀ_wrôïage
(
∑ge
 *page,

1214 
wrôeback_c⁄åﬁ
 *
wbc
)

1216 if(
DEBUG_MODE_K
==1)

1218 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1226 
	`åa˚
("wrôïagêdißbÀd f‹Çow (%d)", 
wbc
->
sync_mode
);

1227 
	`ªdúty_∑ge_f‹_wrôïage
(
wbc
, 
∑ge
);

1229 i‡(
wbc
->
f‹_ª˛aim
)

1230  
AOP_WRITEPAGE_ACTIVATE
;

1232 
	`u∆ock_∑ge
(
∑ge
);

1234 
	}
}

1236 
	$tux3_dißbÀ_wrôïages
(
addªss_•a˚
 *
m≠pög
,

1237 
wrôeback_c⁄åﬁ
 *
wbc
)

1239 if(
DEBUG_MODE_K
==1)

1241 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1247 
	`åa˚
("wrôïage†dißbÀd f‹Çow (%d)", 
wbc
->
sync_mode
);

1249 
	}
}

1251 #ifde‡
TUX3_DIRECT_IO


1256 
ssize_t
 
	$tux3_dúe˘_IO
(
rw
, 
kiocb
 *
iocb
,

1257 c⁄° 
iovec
 *
iov
,

1258 
loff_t
 
off£t
, 
ƒ_£gs
)

1260 if(
DEBUG_MODE_K
==1)

1262 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1264 
fûe
 *fûê
iocb
->
ki_fûp
;

1265 
addªss_•a˚
 *
m≠pög
 = 
fûe
->
f_m≠pög
;

1266 
öode
 *öodê
m≠pög
->
ho°
;

1267 
ssize_t
 
ªt
;

1269 
ªt
 = 
	`blockdev_dúe˘_IO
(
rw
, 
iocb
, 
öode
, 
iov
, 
off£t
, 
ƒ_£gs
,

1270 
tux3_gë_block
);

1271 i‡(
ªt
 < 0 && (
rw
 & 
WRITE
))

1272 
	`tux3_wrôe_Áûed
(
m≠pög
, 
off£t
 + 
	`iov_Àngth
(
iov
, 
ƒ_£gs
));

1273  
ªt
;

1274 
	}
}

1277 
£˘‹_t
 
	$tux3_bm≠
(
addªss_•a˚
 *
m≠pög
, 
£˘‹_t
 
iblock
)

1279 if(
DEBUG_MODE_K
==1)

1281 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1283 
£˘‹_t
 
blockƒ
;

1285 
	`muãx_lock
(&
m≠pög
->
ho°
->
i_muãx
);

1286 
blockƒ
 = 
	`gíîic_block_bm≠
(
m≠pög
, 
iblock
, 
tux3_gë_block
);

1287 
	`muãx_u∆ock
(&
m≠pög
->
ho°
->
i_muãx
);

1289  
blockƒ
;

1290 
	}
}

1292 c⁄° 
addªss_•a˚_›î©i⁄s
 
	gtux_fûe_a›s
 = {

1293 .
ªad∑ge
 = 
tux3_ªad∑ge
,

1294 .
	gªad∑ges
 = 
tux3_ªad∑ges
,

1297 .
	gwrôïage
 = 
tux3_dißbÀ_wrôïage
,

1298 .
	gwrôïages
 = 
tux3_dißbÀ_wrôïages
,

1299 .
	gwrôe_begö
 = 
tux3_fûe_wrôe_begö
,

1300 .
	gwrôe_íd
 = 
tux3_fûe_wrôe_íd
,

1301 .
	gbm≠
 = 
tux3_bm≠
,

1302 .
	gövÆid©ïage
 = 
tux3_övÆid©ïage
,

1304 #ifde‡
TUX3_DIRECT_IO


1305 .
	gdúe˘_IO
 = 
tux3_dúe˘_IO
,

1311 
	$tux3_symlök_wrôe_begö
(
fûe
 *file,

1312 
addªss_•a˚
 *
m≠pög
,

1313 
loff_t
 
pos
, 
Àn
, 
Êags
,

1314 
∑ge
 **
∑gï
, **
fsd©a
)

1316 if(
DEBUG_MODE_K
==1)

1318 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1320  
	`__tux3_fûe_wrôe_begö
(
fûe
, 
m≠pög
, 
pos
, 
Àn
, 
Êags
, 
∑gï
,

1321 
fsd©a
, 1);

1322 
	}
}

1325 c⁄° 
addªss_•a˚_›î©i⁄s
 
	gtux_symlök_a›s
 = {

1326 .
ªad∑ge
 = 
tux3_ªad∑ge
,

1327 .
	gªad∑ges
 = 
tux3_ªad∑ges
,

1330 .
	gwrôïage
 = 
tux3_dißbÀ_wrôïage
,

1331 .
	gwrôïages
 = 
tux3_dißbÀ_wrôïages
,

1332 .
	gwrôe_begö
 = 
tux3_symlök_wrôe_begö
,

1333 .
	gwrôe_íd
 = 
__tux3_fûe_wrôe_íd
,

1334 .
	gbm≠
 = 
tux3_bm≠
,

1335 .
	gövÆid©ïage
 = 
tux3_övÆid©ïage
,

1337 #ifde‡
TUX3_DIRECT_IO


1338 .
	gdúe˘_IO
 = 
tux3_dúe˘_IO
,

1344 
	$tux3_blk_ªad∑ge
(
fûe
 *fûe, 
∑ge
 *page)

1346 if(
DEBUG_MODE_K
==1)

1348 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1350 
îr
 = 
	`block_ªad_fuŒ_∑ge
(
∑ge
, 
tux3_gë_block
);

1351 
	`as£π
(!
	`PageF‹ked
(
∑ge
));

1352  
îr
;

1353 
	}
}

1356 
	$tux3_blk_wrôe_begö
(
fûe
 *file,

1357 
addªss_•a˚
 *
m≠pög
,

1358 
loff_t
 
pos
, 
Àn
, 
Êags
,

1359 
∑ge
 **
∑gï
, **
fsd©a
)

1361 if(
DEBUG_MODE_K
==1)

1363 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1365  
	`__tux3_fûe_wrôe_begö
(
fûe
, 
m≠pög
, 
pos
, 
Àn
, 
Êags
, 
∑gï
,

1366 
fsd©a
, 0);

1367 
	}
}

1370 
	$tux3_blk_wrôïage
(
∑ge
 *∑ge, 
wrôeback_c⁄åﬁ
 *
wbc
)

1372 if(
DEBUG_MODE_K
==1)

1374 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1376  
	`block_wrôe_fuŒ_∑ge
(
∑ge
, 
tux3_gë_block
, 
wbc
);

1377 
	}
}

1380 c⁄° 
addªss_•a˚_›î©i⁄s
 
	gtux_blk_a›s
 = {

1381 .
ªad∑ge
 = 
tux3_blk_ªad∑ge
,

1384 .
	gwrôïage
 = 
tux3_dißbÀ_wrôïage
,

1385 .
	gwrôïages
 = 
tux3_dißbÀ_wrôïages
,

1386 .
	gwrôe_begö
 = 
tux3_blk_wrôe_begö
,

1387 .
	gbm≠
 = 
tux3_bm≠
,

1388 .
	gövÆid©ïage
 = 
tux3_övÆid©ïage
,

1392 
	$tux3_vﬁ_gë_block
(
öode
 *öode, 
£˘‹_t
 
iblock
,

1393 
buf„r_hód
 *
bh_ªsu…
, 
¸óã
)

1395 if(
DEBUG_MODE_K
==1)

1397 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1399 i‡(
iblock
 >
	`tux_sb
(
öode
->
i_sb
)->
vﬁblocks
) {

1400 
	`as£π
(!
¸óã
);

1403 
	`m≠_bh
(
bh_ªsu…
, 
öode
->
i_sb
, 
iblock
);

1405 
	}
}

1407 
	$tux3_vﬁ_ªad∑ge
(
fûe
 *fûe, 
∑ge
 *page)

1409 if(
DEBUG_MODE_K
==1)

1411 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1413  
	`block_ªad_fuŒ_∑ge
(
∑ge
, 
tux3_vﬁ_gë_block
);

1414 
	}
}

1417 
	$tux3_vﬁ_wrôïage
(
∑ge
 *∑ge, 
wrôeback_c⁄åﬁ
 *
wbc
)

1419 if(
DEBUG_MODE_K
==1)

1421 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1423  
	`block_wrôe_fuŒ_∑ge
(
∑ge
, 
tux3_vﬁ_gë_block
, 
wbc
);

1424 
	}
}

1428 
	$tux3_vﬁ_wrôe_begö
(
fûe
 *file,

1429 
addªss_•a˚
 *
m≠pög
,

1430 
loff_t
 
pos
, 
Àn
, 
Êags
,

1431 
∑ge
 **
∑gï
, **
fsd©a
)

1433 if(
DEBUG_MODE_K
==1)

1435 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1437  
	`tux3_wrôe_begö
(
m≠pög
, 
pos
, 
Àn
, 
Êags
, 
∑gï
,

1438 
tux3_vﬁ_gë_block
, 0);

1439 
	}
}

1441 c⁄° 
addªss_•a˚_›î©i⁄s
 
	gtux_vﬁ_a›s
 = {

1442 .
ªad∑ge
 = 
tux3_vﬁ_ªad∑ge
,

1444 .
	gwrôïage
 = 
tux3_dißbÀ_wrôïage
,

1445 .
	gwrôïages
 = 
tux3_dißbÀ_wrôïages
,

1446 .
	gwrôe_begö
 = 
tux3_vﬁ_wrôe_begö
,

1447 .
	gövÆid©ïage
 = 
tux3_övÆid©ïage
,

	@kernel/filemap_blocklib.c

11 
	~<löux/∑gevec.h
>

12 
	~<löux/˛ónˇche.h
>

18 
	$tux3_∑ge_zîo_√w_buf„rs
(
∑ge
 *∑ge, 
‰om
,

19 
to
)

21 if(
DEBUG_MODE_K
==1)

23 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

25 
block_°¨t
, 
block_íd
;

26 
buf„r_hód
 *
hód
, *
bh
;

28 
	`BUG_ON
(!
	`PageLocked
(
∑ge
));

29 i‡(!
	`∑ge_has_buf„rs
(
∑ge
))

32 
bh
 = 
hód
 = 
	`∑ge_buf„rs
(
∑ge
);

33 
block_°¨t
 = 0;

35 
block_íd
 = 
block_°¨t
 + 
bh
->
b_size
;

37 i‡(
	`buf„r_√w
(
bh
)) {

38 i‡(
block_íd
 > 
‰om
 && 
block_°¨t
 < 
to
) {

39 
dñè
 = 
	`tux3_gë_cuºít_dñè
();

41 i‡(!
	`PageU±od©e
(
∑ge
)) {

42 
°¨t
, 
size
;

44 
°¨t
 = 
	`max
(
‰om
, 
block_°¨t
);

45 
size
 = 
	`mö
(
to
, 
block_íd
Ë- 
°¨t
;

47 
	`zîo_u£r
(
∑ge
, 
°¨t
, 
size
);

48 
	`£t_buf„r_u±od©e
(
bh
);

51 
	`˛ór_buf„r_√w
(
bh
);

52 
	`__tux3_m¨k_buf„r_dúty
(
bh
, 
dñè
);

56 
block_°¨t
 = 
block_íd
;

57 
bh
 = bh->
b_this_∑ge
;

58 } 
bh
 !
hód
);

59 
	}
}

65 
	$__tux3_wrôe_begö
(
∑ge
 *∑ge, 
loff_t
 
pos
, 
Àn
,

66 
gë_block_t
 *
gë_block
)

68 if(
DEBUG_MODE_K
==1)

70 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

72 
‰om
 = 
pos
 & (
PAGE_CACHE_SIZE
 - 1);

73 
to
 = 
‰om
 + 
Àn
;

74 
öode
 *öodê
∑ge
->
m≠pög
->
ho°
;

75 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

76 
block_°¨t
, 
block_íd
;

77 
£˘‹_t
 
block
;

78 
îr
 = 0;

79 
blocksize
, 
bbôs
;

80 
buf„r_hód
 *
bh
, *
hód
, *
waô
[2], **
waô_bh
=wait;

82 
	`BUG_ON
(!
	`PageLocked
(
∑ge
));

83 
	`BUG_ON
(
‰om
 > 
PAGE_CACHE_SIZE
);

84 
	`BUG_ON
(
to
 > 
PAGE_CACHE_SIZE
);

85 
	`BUG_ON
(
‰om
 > 
to
);

88 
blocksize
 = 
sb
->blocksize;

89 
bbôs
 = 
sb
->
blockbôs
;

90 i‡(!
	`∑ge_has_buf„rs
(
∑ge
))

91 
	`¸óã_em±y_buf„rs
(
∑ge
, 
blocksize
, 0);

92 
hód
 = 
	`∑ge_buf„rs
(
∑ge
);

94 
block
 = (
£˘‹_t
)
∑ge
->
ödex
 << (
PAGE_CACHE_SHIFT
 - 
bbôs
);

96 
bh
 = 
hód
, 
block_°¨t
 = 0; bh != head || !block_start;

97 
block
++, 
block_°¨t
=
block_íd
, 
bh
 = bh->
b_this_∑ge
) {

98 
block_íd
 = 
block_°¨t
 + 
blocksize
;

99 i‡(
block_íd
 <
‰om
 || 
block_°¨t
 >
to
) {

100 i‡(
	`PageU±od©e
(
∑ge
)) {

101 i‡(!
	`buf„r_u±od©e
(
bh
))

102 
	`£t_buf„r_u±od©e
(
bh
);

106 i‡(
	`buf„r_√w
(
bh
))

107 
	`˛ór_buf„r_√w
(
bh
);

108 i‡(!
	`buf„r_m≠≥d
(
bh
)) {

115 
	`WARN_ON
(
bh
->
b_size
 !
blocksize
);

116 
îr
 = 
	`gë_block
(
öode
, 
block
, 
bh
, 1);

117 i‡(
îr
)

119 i‡(
	`buf„r_√w
(
bh
)) {

121 
	`unm≠_undîlyög_mëad©a
(
bh
->
b_bdev
,

122 
bh
->
b_blockƒ
);

124 i‡(
	`PageU±od©e
(
∑ge
)) {

128 
	`£t_buf„r_u±od©e
(
bh
);

132 i‡(
block_íd
 > 
to
 || 
block_°¨t
 < 
‰om
)

133 
	`zîo_u£r_£gmíts
(
∑ge
,

134 
to
, 
block_íd
,

135 
block_°¨t
, 
‰om
);

139 i‡(
	`PageU±od©e
(
∑ge
)) {

140 i‡(!
	`buf„r_u±od©e
(
bh
))

141 
	`£t_buf„r_u±od©e
(
bh
);

144 i‡(!
	`buf„r_u±od©e
(
bh
Ë&& !
	`buf„r_dñay
(bh) &&

145 !
	`buf„r_unwrôãn
(
bh
) &&

146 (
block_°¨t
 < 
‰om
 || 
block_íd
 > 
to
)) {

147 
	`Œ_rw_block
(
READ
, 1, &
bh
);

148 *
waô_bh
++=
bh
;

154 
waô_bh
 > 
waô
) {

155 
	`waô_⁄_buf„r
(*--
waô_bh
);

156 i‡(!
	`buf„r_u±od©e
(*
waô_bh
))

157 
îr
 = -
EIO
;

159 i‡(
	`u∆ikñy
(
îr
))

160 
	`tux3_∑ge_zîo_√w_buf„rs
(
∑ge
, 
‰om
, 
to
);

161  
îr
;

162 
	}
}

168 
	$tux3_wrôe_begö
(
addªss_•a˚
 *
m≠pög
, 
loff_t
 
pos
,

169 
Àn
, 
Êags
,

170 
∑ge
 **
∑gï
, 
gë_block_t
 *
gë_block
,

171 
check_f‹k
)

173 if(
DEBUG_MODE_K
==1)

175 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

177 
pgoff_t
 
ödex
 = 
pos
 >> 
PAGE_CACHE_SHIFT
;

178 
∑ge
 *page;

179 
°©us
;

181 
ªåy
:

182 
∑ge
 = 
	`gøb_ˇche_∑ge_wrôe_begö
(
m≠pög
, 
ödex
, 
Êags
);

183 i‡(!
∑ge
)

184  -
ENOMEM
;

191 i‡(
check_f‹k
) {

192 
∑ge
 *
tmp
;

194 
tmp
 = 
	`∑gef‹k_f‹_blockdúty
(
∑ge
, 
	`tux3_gë_cuºít_dñè
());

195 i‡(
	`IS_ERR
(
tmp
)) {

196 
îr
;

197 
	`u∆ock_∑ge
(
∑ge
);

198 
	`∑ge_ˇche_ªÀa£
(
∑ge
);

200 
îr
 = 
	`PTR_ERR
(
tmp
);

201 i‡(
îr
 =-
EAGAIN
)

202 
ªåy
;

203  
îr
;

205 
∑ge
 = 
tmp
;

208 
°©us
 = 
	`__tux3_wrôe_begö
(
∑ge
, 
pos
, 
Àn
, 
gë_block
);

209 i‡(
	`u∆ikñy
(
°©us
)) {

210 
	`u∆ock_∑ge
(
∑ge
);

211 
	`∑ge_ˇche_ªÀa£
(
∑ge
);

212 
∑ge
 = 
NULL
;

215 *
∑gï
 = 
∑ge
;

216  
°©us
;

217 
	}
}

223 
	$__tux3_commô_wrôe
(
öode
 *öode, 
∑ge
 *page,

224 
‰om
, 
to
)

226 if(
DEBUG_MODE_K
==1)

228 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

230 
block_°¨t
, 
block_íd
;

231 
∑πül
 = 0;

232 
blocksize
;

233 
buf„r_hód
 *
bh
, *
hód
;

235 
bh
 = 
hód
 = 
	`∑ge_buf„rs
(
∑ge
);

236 
blocksize
 = 
bh
->
b_size
;

238 
block_°¨t
 = 0;

240 
block_íd
 = 
block_°¨t
 + 
blocksize
;

241 i‡(
block_íd
 <
‰om
 || 
block_°¨t
 >
to
) {

242 i‡(!
	`buf„r_u±od©e
(
bh
))

243 
∑πül
 = 1;

245 
	`£t_buf„r_u±od©e
(
bh
);

246 
	`__tux3_m¨k_buf„r_dúty
(
bh
, 
	`tux3_gë_cuºít_dñè
());

248 
	`˛ór_buf„r_√w
(
bh
);

250 
block_°¨t
 = 
block_íd
;

251 
bh
 = bh->
b_this_∑ge
;

252 } 
bh
 !
hód
);

260 i‡(!
∑πül
)

261 
	`SëPageU±od©e
(
∑ge
);

263 
	}
}

266 
	$__tux3_wrôe_íd
(
fûe
 *fûe, 
addªss_•a˚
 *
m≠pög
,

267 
loff_t
 
pos
, 
Àn
, 
c›õd
,

268 
∑ge
 *∑ge, *
fsd©a
)

270 if(
DEBUG_MODE_K
==1)

272 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

274 
öode
 *öodê
m≠pög
->
ho°
;

275 
°¨t
;

277 
°¨t
 = 
pos
 & (
PAGE_CACHE_SIZE
 - 1);

279 i‡(
	`u∆ikñy
(
c›õd
 < 
Àn
)) {

292 i‡(!
	`PageU±od©e
(
∑ge
))

293 
c›õd
 = 0;

295 
	`tux3_∑ge_zîo_√w_buf„rs
(
∑ge
, 
°¨t
+
c›õd
, sèπ+
Àn
);

297 
	`Êush_dˇche_∑ge
(
∑ge
);

300 
	`__tux3_commô_wrôe
(
öode
, 
∑ge
, 
°¨t
, sèπ+
c›õd
);

302  
c›õd
;

303 
	}
}

306 
	$tux3_wrôe_íd
(
fûe
 *fûe, 
addªss_•a˚
 *
m≠pög
,

307 
loff_t
 
pos
, 
Àn
, 
c›õd
,

308 
∑ge
 *∑ge, *
fsd©a
)

310 if(
DEBUG_MODE_K
==1)

312 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

314 
öode
 *öodê
m≠pög
->
ho°
;

315 
i_size_ch™ged
 = 0;

317 
c›õd
 = 
	`__tux3_wrôe_íd
(
fûe
, 
m≠pög
, 
pos
, 
Àn
, c›õd, 
∑ge
, 
fsd©a
);

326 i‡(
pos
+
c›õd
 > 
öode
->
i_size
) {

327 
	`tux3_üârdúty
(
öode
);

328 
	`i_size_wrôe
(
öode
, 
pos
+
c›õd
);

329 
i_size_ch™ged
 = 1;

332 
	`u∆ock_∑ge
(
∑ge
);

333 
	`∑ge_ˇche_ªÀa£
(
∑ge
);

341 i‡(
i_size_ch™ged
)

342 
	`tux3_m¨k_öode_dúty
(
öode
);

344  
c›õd
;

345 
	}
}

361 
	$tux3_åy_ˇn˚l_dúty_∑ge
(
∑ge
 *page)

363 if(
DEBUG_MODE_K
==1)

365 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

367 
buf„r_hód
 *
tmp
, *
hód
;

369 
tmp
 = 
hód
 = 
	`∑ge_buf„rs
(
∑ge
);

371 i‡(
	`buf„r_dúty
(
tmp
))

374 
tmp
 =Åmp->
b_this_∑ge
;

375 } 
tmp
 !
hód
);

377 
	`ˇn˚l_dúty_∑ge
(
∑ge
, 
PAGE_CACHE_SIZE
);

378 
	}
}

392 
	$tux3_övÆid©ïage
(
∑ge
 *∑ge, 
off£t
)

394 if(
DEBUG_MODE_K
==1)

396 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

398 
buf„r_hód
 *
hód
, *
bh
, *
√xt
;

399 
cuº_off
 = 0;

400 
has_dúty
 = 0;

402 
	`BUG_ON
(!
	`PageLocked
(
∑ge
));

404 i‡(!
	`∑ge_has_buf„rs
(
∑ge
))

405 
out
;

407 
hód
 = 
	`∑ge_buf„rs
(
∑ge
);

408 
bh
 = 
hód
;

410 
√xt_off
 = 
cuº_off
 + 
bh
->
b_size
;

411 
√xt
 = 
bh
->
b_this_∑ge
;

414 i‡(
off£t
 <
cuº_off
)

415 
	`tux3_övÆid©e_buf„r
(
bh
);

418 i‡(
	`buf„r_dúty
(
bh
))

419 
has_dúty
 = 1;

421 
cuº_off
 = 
√xt_off
;

422 
bh
 = 
√xt
;

423 } 
bh
 !
hód
);

425 i‡(!
has_dúty
)

426 
	`ˇn˚l_dúty_∑ge
(
∑ge
, 
PAGE_CACHE_SIZE
 - 
off£t
);

433 i‡(
off£t
 == 0)

434 
	`åy_to_ªÀa£_∑ge
(
∑ge
, 0);

435 
out
:

437 
	}
}

450 
	$__tux3_åunˇã_∑πül_block
(
addªss_•a˚
 *
m≠pög
,

451 
loff_t
 
‰om
, 
gë_block_t
 *
gë_block
)

453 if(
DEBUG_MODE_K
==1)

455 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

457 
öode
 *öodê
m≠pög
->
ho°
;

458 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

459 
dñè
 = 
	`tux3_gë_cuºít_dñè
();

460 
pgoff_t
 
ödex
 = 
‰om
 >> 
PAGE_CACHE_SHIFT
;

461 
off£t
 = 
‰om
 & (
PAGE_CACHE_SIZE
 - 1);

462 
£˘‹_t
 
iblock
;

463 
pos
, 
övÆid_‰om
;

464 
∑ge
 *∑ge, *
tmp
;

465 
buf„r_hód
 *
bh
 = 
NULL
;

466 
îr
, 
f‹ked
;

469 i‡(!
off£t
)

472 
iblock
 = 
‰om
 >> 
sb
->
blockbôs
;

473 
pos
 = 
off£t
 >> 
sb
->
blockbôs
;

474 
övÆid_‰om
 = 
off£t
;

479 i‡(!(
off£t
 & 
sb
->
blockmask
)) {

499 
ªåy_föd
:

500 
∑ge
 = 
	`föd_lock_∑ge
(
m≠pög
, 
ödex
);

501 i‡(
∑ge
) {

502 
tmp
 = 
	`∑gef‹k_f‹_blockdúty
(
∑ge
, 
dñè
);

503 i‡(
	`IS_ERR
(
tmp
)) {

504 
	`u∆ock_∑ge
(
∑ge
);

505 
	`∑ge_ˇche_ªÀa£
(
∑ge
);

507 
îr
 = 
	`PTR_ERR
(
tmp
);

508 i‡(
îr
 =-
EAGAIN
)

509 
ªåy_föd
;

510 
out
;

512 
f‹ked
 = 
tmp
 !
∑ge
;

513 
∑ge
 = 
tmp
;

515 
dúty_buf„r_outside
:

519 
f‹ked
 = 1;

520 i‡(
f‹ked
 && 
	`∑ge_has_buf„rs
(
∑ge
)) {

521 
	`as£π
(
	`∑ge_has_buf„rs
(
∑ge
));

523 
bh
 = 
	`__gë_buf„r
(
∑ge
, 
pos
);

524 
	`__tux3_m¨k_buf„r_dúty
(
bh
, 
dñè
);

526 
övÆid_‰om
 = (
pos
 + 1Ë<< 
sb
->
blockbôs
;

527 
övÆid_‰om
 &
PAGE_CACHE_SIZE
 - 1;

530 
zîo_fûl_∑ge
;

537 
ªåy_gøb
:

538 
∑ge
 = 
	`gøb_ˇche_∑ge
(
m≠pög
, 
ödex
);

539 
îr
 = -
ENOMEM
;

540 i‡(!
∑ge
)

541 
out
;

543 
tmp
 = 
	`∑gef‹k_f‹_blockdúty
(
∑ge
, 
dñè
);

544 i‡(
	`IS_ERR
(
tmp
)) {

545 
	`u∆ock_∑ge
(
∑ge
);

546 
	`∑ge_ˇche_ªÀa£
(
∑ge
);

548 
îr
 = 
	`PTR_ERR
(
tmp
);

549 i‡(
îr
 =-
EAGAIN
)

550 
ªåy_gøb
;

551 
out
;

553 
f‹ked
 = 
tmp
 !
∑ge
;

554 
∑ge
 = 
tmp
;

556 i‡(!
	`∑ge_has_buf„rs
(
∑ge
))

557 
	`¸óã_em±y_buf„rs
(
∑ge
, 
sb
->
blocksize
, 0);

560 
bh
 = 
	`__gë_buf„r
(
∑ge
, 
pos
);

562 
îr
 = 0;

567 i‡(!
	`buf„r_m≠≥d
(
bh
)) {

568 
	`WARN_ON
(
bh
->
b_size
 !
sb
->
blocksize
);

569 
îr
 = 
	`gë_block
(
öode
, 
iblock
, 
bh
, 0);

570 i‡(
îr
)

571 
u∆ock
;

573 i‡(!
	`buf„r_m≠≥d
(
bh
)) {

579 i‡(
pos
 + 1 < 
PAGE_CACHE_SIZE
 >> 
sb
->
blockbôs
) {

580 
pos
++;

581 
dúty_buf„r_outside
;

583 
u∆ock
;

588 i‡(
	`PageU±od©e
(
∑ge
))

589 
	`£t_buf„r_u±od©e
(
bh
);

591 i‡(!
	`buf„r_u±od©e
(
bh
Ë&& !
	`buf„r_dñay
(bhË&& !
	`buf„r_unwrôãn
(bh)) {

592 
îr
 = -
EIO
;

593 
	`Œ_rw_block
(
READ
, 1, &
bh
);

594 
	`waô_⁄_buf„r
(
bh
);

596 i‡(!
	`buf„r_u±od©e
(
bh
))

597 
u∆ock
;

600 
	`__tux3_m¨k_buf„r_dúty
(
bh
, 
dñè
);

607 
zîo_fûl_∑ge
:

608 
	`zîo_u£r_£gmít
(
∑ge
, 
off£t
, 
PAGE_CACHE_SIZE
);

609 
	`˛ónˇche_övÆid©e_∑ge
(
m≠pög
, 
∑ge
);

610 i‡(
övÆid_‰om
 && 
	`∑ge_has_buf„rs
(
∑ge
))

611 
m≠pög
->
a_›s
->
	`övÆid©ïage
(
∑ge
, 
övÆid_‰om
);

613 
îr
 = 0;

615 
u∆ock
:

616 
	`u∆ock_∑ge
(
∑ge
);

617 
	`∑ge_ˇche_ªÀa£
(
∑ge
);

618 
out
:

619  
îr
;

620 
	}
}

623 
	$tux3_åunˇã_∑πül_block
(
öode
 *öode, 
loff_t
 
√wsize
)

625 if(
DEBUG_MODE_K
==1)

627 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

629  
	`__tux3_åunˇã_∑πül_block
(
öode
->
i_m≠pög
, 
√wsize
,

630 
tux3_gë_block
);

631 
	}
}

645 
	$tux3_åunˇã_öode_∑ges_ønge
(
addªss_•a˚
 *
m≠pög
,

646 
loff_t
 
l°¨t
,Üoff_à
Ànd
)

648 if(
DEBUG_MODE_K
==1)

650 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

652 c⁄° 
pgoff_t
 
°¨t
 = (
l°¨t
 + 
PAGE_CACHE_SIZE
-1Ë>> 
PAGE_CACHE_SHIFT
;

654 c⁄° 
∑πül
 = 
l°¨t
 & (
PAGE_CACHE_SIZE
 - 1);

656 
∑gevec
 
pvec
;

657 
pgoff_t
 
ödex
;

658 
pgoff_t
 
íd
;

659 
i
;

662 
	`˛ónˇche_övÆid©e_öode
(
m≠pög
);

664 i‡(
m≠pög
->
ƒ∑ges
 == 0)

667 
	`BUG_ON
((
Ànd
 & (
PAGE_CACHE_SIZE
 - 1)) != (PAGE_CACHE_SIZE - 1));

668 
íd
 = (
Ànd
 >> 
PAGE_CACHE_SHIFT
);

670 
	`∑gevec_öô
(&
pvec
, 0);

671 
ödex
 = 
°¨t
;

672 
ödex
 <
íd
 && 
	`∑gevec_lookup
(&
pvec
, 
m≠pög
, index,

673 
	`mö
(
íd
 - 
ödex
, (
pgoff_t
)
PAGEVEC_SIZE
 - 1) + 1)) {

675 
	`mem_cgroup_unch¨ge_°¨t
();

677 
i
 = 0; i < 
	`∑gevec_cou¡
(&
pvec
); i++) {

678 
∑ge
 *∑gê
pvec
.
∑ges
[
i
];

681 
ödex
 = 
∑ge
->index;

682 i‡(
ödex
 > 
íd
)

685 i‡(!
	`åylock_∑ge
(
∑ge
))

687 
	`WARN_ON
(
∑ge
->
ödex
 != index);

689 i‡(
	`PageWrôeback
(
∑ge
)) {

690 
	`u∆ock_∑ge
(
∑ge
);

694 
	`buf„rf‹k_to_övÆid©e
(
m≠pög
, 
∑ge
);

695 
	`u∆ock_∑ge
(
∑ge
);

697 
	`∑gevec_ªÀa£
(&
pvec
);

699 
	`mem_cgroup_unch¨ge_íd
();

701 
	`c⁄d_ªsched
();

702 
ödex
++;

706 i‡(
∑πül
) {

707 
∑ge
 *∑gê
	`föd_lock_∑ge
(
m≠pög
, 
°¨t
 - 1);

708 i‡(
∑ge
) {

709 
	`waô_⁄_∑ge_wrôeback
(
∑ge
);

710 
	`tux3_åunˇã_∑πül_∑ge
(
∑ge
, 
∑πül
);

711 
	`u∆ock_∑ge
(
∑ge
);

712 
	`∑ge_ˇche_ªÀa£
(
∑ge
);

716 
ödex
 = 
°¨t
;

718 
	`c⁄d_ªsched
();

719 i‡(!
	`∑gevec_lookup
(&
pvec
, 
m≠pög
, 
ödex
,

720 
	`mö
(
íd
 - 
ödex
, (
pgoff_t
)
PAGEVEC_SIZE
 - 1) + 1)) {

722 i‡(
ödex
 =
°¨t
)

724 
ödex
 = 
°¨t
;

734 i‡(
ödex
 =
°¨t
 && 
pvec
.
∑ges
[0]->ödex > 
íd
) {

735 
	`∑gevec_ªÀa£
(&
pvec
);

739 
	`mem_cgroup_unch¨ge_°¨t
();

741 
i
 = 0; i < 
	`∑gevec_cou¡
(&
pvec
); i++) {

742 
∑ge
 *∑gê
pvec
.
∑ges
[
i
];

745 
ödex
 = 
∑ge
->index;

746 i‡(
ödex
 > 
íd
)

749 
	`lock_∑ge
(
∑ge
);

750 
	`WARN_ON
(
∑ge
->
ödex
 != index);

752 
	`waô_⁄_∑ge_wrôeback
(
∑ge
);

754 
	`buf„rf‹k_to_övÆid©e
(
m≠pög
, 
∑ge
);

755 
	`u∆ock_∑ge
(
∑ge
);

757 
	`∑gevec_ªÀa£
(&
pvec
);

759 
	`mem_cgroup_unch¨ge_íd
();

761 
ödex
++;

764 
	`˛ónˇche_övÆid©e_öode
(
m≠pög
);

766 
	}
}

	@kernel/filemap_hole.c

19 
	~"tux3.h
"

20 
	~"fûem≠_hﬁe.h
"

23 
	shﬁe_exã¡
 {

24 
li°_hód
 
	mli°
;

25 
li°_hód
 
	mdúty_li°
;

26 
block_t
 
	m°¨t
;

27 
block_t
 
	mcou¡
;

30 
kmem_ˇche
 *
	gtux_hﬁe_ˇchï
;

32 
	$tux3_hﬁe_öô_⁄˚
(*
mem
)

34 if(
DEBUG_MODE_K
==1)

36 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

38 
hﬁe_exã¡
 *
hﬁe
 = 
mem
;

40 
	`INIT_LIST_HEAD
(&
hﬁe
->
li°
);

41 
	`INIT_LIST_HEAD
(&
hﬁe
->
dúty_li°
);

42 
	}
}

44 
__öô
 
	$tux3_öô_hﬁe_ˇche
()

46 if(
DEBUG_MODE_K
==1)

48 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

50 
tux_hﬁe_ˇchï
 = 
	`kmem_ˇche_¸óã
("tux3_hole_cache",

51 (
hﬁe_exã¡
), 0,

52 (
SLAB_RECLAIM_ACCOUNT
|
SLAB_MEM_SPREAD
),

53 
tux3_hﬁe_öô_⁄˚
);

54 i‡(
tux_hﬁe_ˇchï
 =
NULL
)

55  -
ENOMEM
;

57 
	}
}

59 
	$tux3_de°roy_hﬁe_ˇche
()

61 if(
DEBUG_MODE_K
==1)

63 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

65 
	`kmem_ˇche_de°roy
(
tux_hﬁe_ˇchï
);

66 
	}
}

68 
hﬁe_exã¡
 *
	$tux3_Æloc_hﬁe
()

70 if(
DEBUG_MODE_K
==1)

72 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

74 
hﬁe_exã¡
 *
hﬁe
;

76 
hﬁe
 = 
	`kmem_ˇche_Æloc
(
tux_hﬁe_ˇchï
, 
GFP_NOFS
);

77 i‡(!
hﬁe
)

78  
NULL
;

80  
hﬁe
;

81 
	}
}

83 
	$tux3_de°roy_hﬁe
(
hﬁe_exã¡
 *
hﬁe
)

85 if(
DEBUG_MODE_K
==1)

87 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

89 
	`as£π
(
	`li°_em±y
(&
hﬁe
->
li°
));

90 
	`as£π
(
	`li°_em±y
(&
hﬁe
->
dúty_li°
));

91 
	`kmem_ˇche_‰ì
(
tux_hﬁe_ˇchï
, 
hﬁe
);

92 
	}
}

99 
	$tux3_Êush_hﬁe
(
öode
 *öode, 
dñè
)

101 if(
DEBUG_MODE_K
==1)

103 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

105 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

106 
öode_dñè_dúty
 *
i_ddc
 = 
	`tux3_öode_ddc
(
öode
, 
dñè
);

107 
hﬁe_exã¡
 *
hﬁe
, *
ß„
;

108 
îr
 = 0;

114 
	`li°_f‹_óch_íåy_ß„
(
hﬁe
, 
ß„
, &
i_ddc
->
dúty_hﬁes
, 
dúty_li°
) {

115 
ªt
;

117 
	`as£π
(
hﬁe
->
°¨t
 + hﬁe->
cou¡
 =
MAX_BLOCKS
);

119 
ªt
 = 
	`båì_ch›
(&
tuxnode
->
båì
, 
hﬁe
->
°¨t
, 
TUXKEY_LIMIT
);

120 i‡(
ªt
 && !
îr
)

121 
îr
 = 
ªt
;

127 
	`•ö_lock
(&
tuxnode
->
hﬁe_exã¡s_lock
);

128 
	`li°_dñ_öô
(&
hﬁe
->
li°
);

129 
	`•ö_u∆ock
(&
tuxnode
->
hﬁe_exã¡s_lock
);

131 
	`li°_dñ_öô
(&
hﬁe
->
dúty_li°
);

132 
	`tux3_de°roy_hﬁe
(
hﬁe
);

135  
îr
;

136 
	}
}

149 
	$tux3_add_hﬁe
(
öode
 *öode, 
block_t
 
°¨t
, block_à
cou¡
)

151 if(
DEBUG_MODE_K
==1)

153 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

155 
dñè
 = 
	`tux3_gë_cuºít_dñè
();

156 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

157 
öode_dñè_dúty
 *
i_ddc
 = 
	`tux3_öode_ddc
(
öode
, 
dñè
);

158 
hﬁe_exã¡
 *
hﬁe
, *
ß„
, *
mîged
 = 
NULL
, *
ªmoved
 = NULL;

161 
	`as£π
(
°¨t
 + 
cou¡
 =
MAX_BLOCKS
);

167 
	`li°_f‹_óch_íåy_ß„
(
hﬁe
, 
ß„
, &
i_ddc
->
dúty_hﬁes
, 
dúty_li°
) {

168 
block_t
 
íd
 = 
°¨t
 + 
cou¡
;

170 i‡(
íd
 < 
hﬁe
->
°¨t
 || hﬁe->°¨à+ hﬁe->
cou¡
 < start)

174 
°¨t
 = 
	`mö
(°¨t, 
hﬁe
->start);

175 
cou¡
 = 
	`max
(
íd
, 
hﬁe
->
°¨t
 + hole->count) - start;

178 
	`•ö_lock
(&
tuxnode
->
hﬁe_exã¡s_lock
);

179 i‡(!
mîged
)

180 
mîged
 = 
hﬁe
;

183 
	`li°_dñ_öô
(&
hﬁe
->
dúty_li°
);

184 
	`li°_dñ_öô
(&
hﬁe
->
li°
);

185 
ªmoved
 = 
hﬁe
;

187 
mîged
->
°¨t
 = start;

188 
mîged
->
cou¡
 = count;

189 
	`•ö_u∆ock
(&
tuxnode
->
hﬁe_exã¡s_lock
);

191 i‡(
ªmoved
)

192 
	`tux3_de°roy_hﬁe
(
hﬁe
);

194 i‡(
mîged
)

197 
hﬁe
 = 
	`tux3_Æloc_hﬁe
();

198 i‡(!
hﬁe
)

199  -
ENOMEM
;

201 
hﬁe
->
°¨t
 = start;

202 
hﬁe
->
cou¡
 = count;

203 
	`li°_add
(&
hﬁe
->
dúty_li°
, &
i_ddc
->
dúty_hﬁes
);

205 
	`•ö_lock
(&
tuxnode
->
hﬁe_exã¡s_lock
);

206 
	`li°_add
(&
hﬁe
->
li°
, &
	`tux_öode
(
öode
)->
hﬁe_exã¡s
);

207 
	`•ö_u∆ock
(&
tuxnode
->
hﬁe_exã¡s_lock
);

210 
	}
}

212 
	$tux3_add_åunˇã_hﬁe
(
öode
 *öode, 
loff_t
 
√wsize
)

214 if(
DEBUG_MODE_K
==1)

216 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

218 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

219 
block_t
 
°¨t
 = (
√wsize
 + 
sb
->
blockmask
Ë>> sb->
blockbôs
;

221  
	`tux3_add_hﬁe
(
öode
, 
°¨t
, 
MAX_BLOCKS
 - start);

222 
	}
}

225 
	$tux3_˛ór_hﬁe
(
öode
 *öode, 
dñè
)

227 if(
DEBUG_MODE_K
==1)

229 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

231 
öode_dñè_dúty
 *
i_ddc
 = 
	`tux3_öode_ddc
(
öode
, 
dñè
);

232 
hﬁe_exã¡
 *
hﬁe
, *
ß„
;

233 
has_hﬁe
 = 0;

236 
	`li°_f‹_óch_íåy_ß„
(
hﬁe
, 
ß„
, &
i_ddc
->
dúty_hﬁes
, 
dúty_li°
) {

237 
	`li°_dñ_öô
(&
hﬁe
->
dúty_li°
);

238 
	`li°_dñ_öô
(&
hﬁe
->
li°
);

240 
	`tux3_de°roy_hﬁe
(
hﬁe
);

242 
has_hﬁe
 = 1;

245  
has_hﬁe
;

246 
	}
}

249 
	$tux3_is_hﬁe
(
öode
 *öode, 
block_t
 
°¨t
, 
cou¡
)

251 if(
DEBUG_MODE_K
==1)

253 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

255 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

256 
hﬁe_exã¡
 *
hﬁe
;

257 
whﬁe
 = 0;

259 
	`•ö_lock
(&
tuxnode
->
hﬁe_exã¡s_lock
);

260 
	`li°_f‹_óch_íåy
(
hﬁe
, &
tuxnode
->
hﬁe_exã¡s
, 
li°
) {

262 
	`as£π
(
hﬁe
->
°¨t
 + hﬁe->
cou¡
 =
MAX_BLOCKS
);

264 i‡(
hﬁe
->
°¨t
 <= start) {

265 
whﬁe
 = 1;

269 
	`•ö_u∆ock
(&
tuxnode
->
hﬁe_exã¡s_lock
);

271  
whﬁe
;

272 
	}
}

275 
	$tux3_m≠_hﬁe
(
öode
 *öode, 
block_t
 
°¨t
, 
cou¡
,

276 
block_£gmít
 
£g
[], 
£gs
,

277 
max_£gs
)

279 if(
DEBUG_MODE_K
==1)

281 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

283 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

284 
hﬁe_exã¡
 *
hﬁe
;

285 
block_t
 
hﬁe_°¨t
 = 
MAX_BLOCKS
;

286 
i
;

289 
	`•ö_lock
(&
tuxnode
->
hﬁe_exã¡s_lock
);

290 
	`li°_f‹_óch_íåy
(
hﬁe
, &
tuxnode
->
hﬁe_exã¡s
, 
li°
) {

292 
	`as£π
(
hﬁe
->
°¨t
 + hﬁe->
cou¡
 =
MAX_BLOCKS
);

294 
hﬁe_°¨t
 = 
	`mö
(hﬁe_°¨t, 
hﬁe
->
°¨t
);

296 
	`•ö_u∆ock
(&
tuxnode
->
hﬁe_exã¡s_lock
);

299 i‡(
°¨t
 + 
cou¡
 <
hﬁe_°¨t
)

300  
£gs
;

303 
i
 = 0; i < 
£gs
; i++) {

305 i‡(
hﬁe_°¨t
 < 
°¨t
 + 
£g
[
i
].
cou¡
) {

306 i‡(
£g
[
i
].
°©e
 =
BLOCK_SEG_HOLE
) {

308 
£g
[
i
].
cou¡
 = count;

309 
i
++;

312 
£g
[
i
].
cou¡
 = 
hﬁe_°¨t
 - 
°¨t
;

313 
i
++;

316 i‡(
i
 < 
max_£gs
) {

317 
£g
[
i
].
°©e
 = 
BLOCK_SEG_HOLE
;

318 
£g
[
i
].
block
 = 0;

319 
£g
[
i
].
cou¡
 = count;

320 
i
++;

325 
°¨t
 +
£g
[
i
].
cou¡
;

326 
cou¡
 -
£g
[
i
].count;

329  
i
;

330 
	}
}

	@kernel/filemap_hole.h

1 #i‚de‡
TUX3_FILEMAP_HOLE_H


2 
	#TUX3_FILEMAP_HOLE_H


	)

4 
__öô
 
tux3_öô_hﬁe_ˇche
();

5 
tux3_de°roy_hﬁe_ˇche
();

6 
tux3_Êush_hﬁe
(
öode
 *öode, 
dñè
);

7 
tux3_add_åunˇã_hﬁe
(
öode
 *öode, 
loff_t
 
√wsize
);

8 
tux3_˛ór_hﬁe
(
öode
 *öode, 
dñè
);

	@kernel/iattr.c

12 
	~"tux3.h
"

13 
	~"ûóf.h
"

14 
	~"üâr.h
"

23 
	g©size
[
MAX_ATTRS
] = {

25 [
RDEV_ATTR
] = 8,

26 [
MODE_OWNER_ATTR
] = 12,

27 [
CTIME_SIZE_ATTR
] = 16,

28 [
DATA_BTREE_ATTR
] = 8,

29 [
LINK_COUNT_ATTR
] = 4,

30 [
MTIME_ATTR
] = 8,

32 [
IDATA_ATTR
] = 2,

33 [
XATTR_ATTR
] = 4,

43 
	#TIME_ATTR_SHIFT
 0

	)

45 
u64
 
	tfixed32
;

47 
ölöe
 
u32
 
	$high32
(
fixed32
 
vÆ
)

49 if(
DEBUG_MODE_K
==1)

51 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

53  
vÆ
 >> 32;

54 
	}
}

56 
ölöe
 
	$bûli⁄ths
(
fixed32
 
vÆ
)

58 if(
DEBUG_MODE_K
==1)

60 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

62  (((
vÆ
 & 0xffffffff) * 1000000000) + 0x80000000) >> 32;

63 
	}
}

65 
ölöe
 
time•ec
 
	$•e˘ime
(c⁄° 
fixed32
 
time
)

67 if(
DEBUG_MODE_K
==1)

69 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

71 
time•ec
 
ts
 = {

72 .
tv_£c
 = 
	`high32
(
time
),

73 .
tv_n£c
 = 
	`bûli⁄ths
(
time
),

75  
ts
;

76 
	}
}

78 
ölöe
 
fixed32
 
	$tuxtime
(c⁄° 
time•ec
 
ts
)

80 if(
DEBUG_MODE_K
==1)

82 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

84 c⁄° 
u64
 
mu…
 = ((1ULL << 63) / 1000000000ULL);

85  ((
u64
)
ts
.
tv_£c
 << 32Ë+ (—s.
tv_n£c
 * 
mu…
 + (3 << 29)) >> 31);

86 
	}
}

88 
	$ícode_asize
(
bôs
)

90 if(
DEBUG_MODE_K
==1)

92 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

94 
√ed
 = 0;

96 
köd
 = 0; köd < 
VAR_ATTRS
; kind++)

97 i‡((
bôs
 & (1 << 
köd
)))

98 
√ed
 +
©size
[
köd
] + 2;

99  
√ed
;

100 
	}
}

103 
	$©å_check
(*
©ås
, 
size
)

105 if(
DEBUG_MODE_K
==1)

107 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

109 *
limô
 = 
©ås
 + 
size
;

110 
hód
;

112 
©ås
 < 
limô
 - 1)

114 
©ås
 = 
	`decode16
◊ârs, &
hód
);

115 
köd
 = 
hód
 >> 12;

116 i‡(
köd
 >
MAX_ATTRS
)

118 i‡(
©ås
 + 
©size
[
köd
] > 
limô
)

120 
©ås
 +
©size
[
köd
];

123 
	}
}

125 
	$dump_©ås
(
öode
 *inode)

127 if(
DEBUG_MODE_K
==1)

129 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

132 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

134 
köd
 = 0; köd < 
MAX_ATTRS
; kind++) {

135 i‡(!(
	`tux_öode
(
öode
)->
¥e£¡
 & (1 << 
köd
)))

137 
köd
) {

138 
RDEV_ATTR
:

139 
	`__tux3_dbg
("rdev %x:%x ", 
	`MAJOR
(
öode
->
i_rdev
), 
	`MINOR
(inode->i_rdev));

141 
MODE_OWNER_ATTR
:

142 
	`__tux3_dbg
("modê%07hÿuid %x gid %x ", 
öode
->
i_mode
, 
	`i_uid_ªad
(öode), 
	`i_gid_ªad
(inode));

144 
CTIME_SIZE_ATTR
:

145 
	`__tux3_dbg
("˘imê%Lx sizê%Lx ", 
	`tuxtime
(
öode
->
i_˘ime
), (
s64
)öode->
i_size
);

147 
LINK_COUNT_ATTR
:

148 
	`__tux3_dbg
("lök†%u ", 
öode
->
i_∆ök
);

150 
MTIME_ATTR
:

151 
	`__tux3_dbg
("mtimê%Lx ", 
	`tuxtime
(
öode
->
i_mtime
));

153 
XATTR_ATTR
:

154 
	`__tux3_dbg
("xattr(s) ");

157 
	`__tux3_dbg
("<%i>? ", 
köd
);

161 i‡(
	`has_roŸ
(&
tuxnode
->
båì
))

162 
	`__tux3_dbg
("roŸ %Lx:%u ", 
tuxnode
->
båì
.
roŸ
.
block
,Åuxnode->båì.roŸ.
dïth
);

163 
	`__tux3_dbg
("\n");

164 
	}
}

166 *
	$ícode_köd
(*
©ås
, 
köd
, 
vîsi⁄
)

168 if(
DEBUG_MODE_K
==1)

170 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

172  
	`ícode16
(
©ås
, (
köd
 << 12Ë| 
vîsi⁄
);

173 
	}
}

175 *
	$ícode_©ås
(
båì
 *båì, *
d©a
, *
©ås
,

176 
size
)

178 if(
DEBUG_MODE_K
==1)

180 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

182 
sb
 *sb = 
båì
->sb;

183 
üâr_ªq_d©a
 *
üâr_d©a
 = 
d©a
;

184 
tux3_üâr_d©a
 *
id©a
 = 
üâr_d©a
->idata;

185 
båì
 *
©å_båì
 = 
üâr_d©a
->btree;

186 *
limô
 = 
©ås
 + 
size
 - 3;

188 
köd
 = 0; köd < 
VAR_ATTRS
; kind++) {

189 i‡(!(
id©a
->
¥e£¡
 & (1 << 
köd
)))

191 i‡(
©ås
 >
limô
)

193 
©ås
 = 
	`ícode_köd
◊ârs, 
köd
, 
sb
->
vîsi⁄
);

194 
köd
) {

195 
RDEV_ATTR
:

196 
©ås
 = 
	`ícode64
◊ârs, 
	`huge_ícode_dev
(
id©a
->
i_rdev
));

198 
MODE_OWNER_ATTR
:

200 
©ås
 = 
	`ícode32
◊ârs, 
id©a
->
i_mode
);

201 
©ås
 = 
	`ícode32
◊ârs, 
id©a
->
i_uid
);

202 
©ås
 = 
	`ícode32
◊ârs, 
id©a
->
i_gid
);

204 
CTIME_SIZE_ATTR
:

205 
©ås
 = 
	`ícode64
◊ârs, 
	`tuxtime
(
id©a
->
i_˘ime
Ë>> 
TIME_ATTR_SHIFT
);

206 
©ås
 = 
	`ícode64
◊ârs, 
id©a
->
i_size
);

208 
DATA_BTREE_ATTR
:

209 
©ås
 = 
	`ícode64
◊ârs, 
	`∑ck_roŸ
(&
©å_båì
->
roŸ
));

211 
LINK_COUNT_ATTR
:

212 
©ås
 = 
	`ícode32
◊ârs, 
id©a
->
i_∆ök
);

214 
MTIME_ATTR
:

215 
©ås
 = 
	`ícode64
◊ârs, 
	`tuxtime
(
id©a
->
i_mtime
Ë>> 
TIME_ATTR_SHIFT
);

219  
©ås
;

220 
	}
}

222 *
	$decode_köd
(*
©ås
, *
köd
, *
vîsi⁄
)

224 if(
DEBUG_MODE_K
==1)

226 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

228 
hód
;

229 
©ås
 = 
	`decode16
◊ârs, &
hód
);

230 *
vîsi⁄
 = 
hód
 & 0xfff;

231 *
köd
 = 
hód
 >> 12;

232  
©ås
;

233 
	}
}

235 *
	$decode_©ås
(
öode
 *öode, *
©ås
, 
size
)

237 if(
DEBUG_MODE_K
==1)

239 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

241 
	`åa˚_off
("decodê%uáâ∏byãs", 
size
);

242 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

243 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

244 
roŸ
 
båì_roŸ
 = 
no_roŸ
;

245 *
limô
 = 
©ås
 + 
size
;

246 
u64
 
v64
;

247 
u32
 
v32
;

249 
©ås
 < 
limô
 - 1) {

250 
vîsi⁄
, 
köd
;

251 
©ås
 = 
	`decode_köd
◊ârs, &
köd
, &
vîsi⁄
);

252 i‡(
vîsi⁄
 !
sb
->version) {

253 
©ås
 +
©size
[
köd
];

256 
köd
) {

257 
RDEV_ATTR
:

258 
©ås
 = 
	`decode64
◊ârs, &
v64
);

260 
öode
->
i_rdev
 = 
	`huge_decode_dev
(
v64
);

262 
MODE_OWNER_ATTR
:

263 
©ås
 = 
	`decode32
◊ârs, &
v32
);

264 
öode
->
i_mode
 = 
v32
;

265 
©ås
 = 
	`decode32
◊ârs, &
v32
);

266 
	`i_uid_wrôe
(
öode
, 
v32
);

267 
©ås
 = 
	`decode32
◊ârs, &
v32
);

268 
	`i_gid_wrôe
(
öode
, 
v32
);

270 
CTIME_SIZE_ATTR
:

271 
©ås
 = 
	`decode64
◊ârs, &
v64
);

272 
öode
->
i_˘ime
 = 
	`•e˘ime
(
v64
 << 
TIME_ATTR_SHIFT
);

273 
©ås
 = 
	`decode64
◊ârs, &
v64
);

274 
öode
->
i_size
 = 
v64
;

276 
DATA_BTREE_ATTR
:

277 
©ås
 = 
	`decode64
◊ârs, &
v64
);

278 
båì_roŸ
 = 
	`u≈ack_roŸ
(
v64
);

279 
skù_¥e£¡
;

281 
LINK_COUNT_ATTR
: {

282 
∆ök
;

283 
©ås
 = 
	`decode32
◊ârs, &
∆ök
);

284 
	`£t_∆ök
(
öode
, 
∆ök
);

287 
MTIME_ATTR
:

288 
©ås
 = 
	`decode64
◊ârs, &
v64
);

289 
öode
->
i_mtime
 = 
	`•e˘ime
(
v64
 << 
TIME_ATTR_SHIFT
);

291 
XATTR_ATTR
:

292 
©ås
 = 
	`decode_x©å
(
öode
,áttrs);

295  
NULL
;

298 
tuxnode
->
¥e£¡
 |1 << 
köd
;

299 
skù_¥e£¡
:

304 
	`öô_båì
(&
tuxnode
->
båì
, 
sb
, 
båì_roŸ
, 
	`dåì_›s
());

306  
©ås
;

307 
	}
}

309 
	$üâr_ícoded_size
(
båì
 *båì, *
d©a
)

311 if(
DEBUG_MODE_K
==1)

313 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

315 
üâr_ªq_d©a
 *
üâr_d©a
 = 
d©a
;

316 
öode
 *öodê
üâr_d©a
->inode;

318  
	`ícode_asize
(
üâr_d©a
->
id©a
->
¥e£¡
Ë+ 
	`ícode_xsize
(
öode
);

319 
	}
}

321 
	$üâr_ícode
(
båì
 *båì, *
d©a
, *
©ås
, 
size
)

323 if(
DEBUG_MODE_K
==1)

325 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

327 
üâr_ªq_d©a
 *
üâr_d©a
 = 
d©a
;

328 
öode
 *öodê
üâr_d©a
->inode;

329 *
©å
;

331 
©å
 = 
	`ícode_©ås
(
båì
, 
d©a
, 
©ås
, 
size
);

332 
©å
 = 
	`ícode_x©ås
(
öode
,áâr, 
©ås
 + 
size
 -áttr);

333 
	`as£π
(
©å
 =
©ås
 + 
size
);

334 
	}
}

336 
	$üâr_decode
(
båì
 *båì, *
d©a
, *
©ås
, 
size
)

338 if(
DEBUG_MODE_K
==1)

340 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

342 
öode
 *öodê
d©a
;

343 
xsize
;

345 
xsize
 = 
	`decode_xsize
(
öode
, 
©ås
, 
size
);

346 i‡(
xsize
) {

347 
îr
 = 
	`√w_xˇche
(
öode
, 
xsize
);

348 i‡(
îr
)

349  
îr
;

352 
	`decode_©ås
(
öode
, 
©ås
, 
size
);

353 i‡(
tux3_åa˚
)

354 
	`dump_©ås
(
öode
);

355 i‡(
	`tux_öode
(
öode
)->
xˇche
)

356 
	`xˇche_dump
(
öode
);

359 
	}
}

361 
ûóf_©å_›s
 
	güâr_›s
 = {

362 .
magic
 = 
˝u_to_be16
(
TUX3_MAGIC_ILEAF
),

363 .
	gícoded_size
 = 
üâr_ícoded_size
,

364 .
	gícode
 = 
üâr_ícode
,

365 .
	gdecode
 = 
üâr_decode
,

	@kernel/iattr.h

1 #i‚de‡
TUX3_IATTR_H


2 
	#TUX3_IATTR_H


	)

4 
	e©köd
 {

6 
	mRDEV_ATTR
 = 0,

7 
	mMODE_OWNER_ATTR
 = 1,

8 
	mDATA_BTREE_ATTR
 = 2,

9 
	mCTIME_SIZE_ATTR
 = 3,

10 
	mLINK_COUNT_ATTR
 = 4,

11 
	mMTIME_ATTR
 = 5,

16 
	mRESERVED1_ATTR
 = 10,

17 
	mVAR_ATTRS
,

19 
	mIDATA_ATTR
 = 11,

20 
	mXATTR_ATTR
 = 12,

23 
	mRESERVED2_ATTR
 = 15,

24 
	mMAX_ATTRS
,

27 
	e©bô
 {

29 
	mRDEV_BIT
 = 1 << 
RDEV_ATTR
,

30 
	mMODE_OWNER_BIT
 = 1 << 
MODE_OWNER_ATTR
,

31 
	mCTIME_SIZE_BIT
 = 1 << 
CTIME_SIZE_ATTR
,

32 
	mDATA_BTREE_BIT
 = 1 << 
DATA_BTREE_ATTR
,

33 
	mLINK_COUNT_BIT
 = 1 << 
LINK_COUNT_ATTR
,

34 
	mMTIME_BIT
 = 1 << 
MTIME_ATTR
,

36 
	mIDATA_BIT
 = 1 << 
IDATA_ATTR
,

37 
	mXATTR_BIT
 = 1 << 
XATTR_ATTR
,

40 
©size
[
MAX_ATTRS
];

42 
	süâr_ªq_d©a
 {

43 
tux3_üâr_d©a
 *
	mid©a
;

44 
båì
 *
	mbåì
;

45 
öode
 *
	möode
;

	@kernel/ileaf.c

12 
	~"tux3.h
"

13 
	~"ûóf.h
"

15 #i‚de‡
åa˚


16 
	#åa˚
 
åa˚_⁄


	)

19 
	sûóf
 {

20 
__be16
 
	mmagic
;

21 
__be16
 
	mcou¡
;

22 
u32
 
	m∑d
;

23 
__be64
 
	miba£
;

24 
	mèbÀ
[];

36 
ölöe
 
__be16
 *
	$ûóf_di˘
(
båì
 *båì, 
ûóf
 *ileaf)

38 if(
DEBUG_MODE_K
==1)

40 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

42  (*)
ûóf
 + 
båì
->
sb
->
blocksize
;

43 
	}
}

45 
ölöe
 
	$__©di˘
(
__be16
 *
di˘
, 
©
)

47 if(
DEBUG_MODE_K
==1)

49 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

51 
	`as£π
(
©
);

52  
	`be16_to_˝u
(*(
di˘
 - 
©
));

53 
	}
}

55 
ölöe
 
	$©di˘
(
__be16
 *
di˘
, 
©
)

57 if(
DEBUG_MODE_K
==1)

59 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

61  
©
 ? 
	`__©di˘
(
di˘
,át) : 0;

62 
	}
}

64 
ölöe
 
	$add_idi˘
(
__be16
 *
di˘
, 
n
)

66 if(
DEBUG_MODE_K
==1)

68 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

70 
	`be16_add_˝u
(
di˘
, 
n
);

71 
	}
}

73 
ölöe
 
	$icou¡
(
ûóf
 *
Àaf
)

75 if(
DEBUG_MODE_K
==1)

77 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

79  
	`be16_to_˝u
(
Àaf
->
cou¡
);

80 
	}
}

82 
ölöe
 
tuxkey_t
 
	$iba£
(
ûóf
 *
Àaf
)

84 if(
DEBUG_MODE_K
==1)

86 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

88  
	`be64_to_˝u
(
Àaf
->
iba£
);

89 
	}
}

91 
	$ûóf_båì_öô
(
båì
 *btree)

93 if(
DEBUG_MODE_K
==1)

95 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

97 
båì
->
íåõs_≥r_Àaf
 = 1 << (båì->
sb
->
blockbôs
 - 6);

98 
	}
}

100 
	$ûóf_öô
(
båì
 *båì, *
Àaf
)

102 if(
DEBUG_MODE_K
==1)

104 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

106 
ûóf_©å_›s
 *
©å_›s
 = 
båì
->
›s
->
¥iv©e_›s
;

107 
	`åa˚
("öôülizêöodêÀa‡%p", 
Àaf
);

108 *(
ûóf
 *)
Àaf
 = (ileaf){

109 .
magic
 = 
©å_›s
->magic,

112 
	}
}

114 
	$ûóf_√ed
(
båì
 *båì, 
ûóf
 *ileaf)

116 if(
DEBUG_MODE_K
==1)

118 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

120 
__be16
 *
di˘
 = 
	`ûóf_di˘
(
båì
, 
ûóf
);

121 
cou¡
 = 
	`icou¡
(
ûóf
);

122  
	`©di˘
(
di˘
, 
cou¡
) + count * (*dict);

123 
	}
}

125 
	$ûóf_‰ì
(
båì
 *båì, 
ûóf
 *ileaf)

127 if(
DEBUG_MODE_K
==1)

129 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

131  
båì
->
sb
->
blocksize


132 - 
	`ûóf_√ed
(
båì
, 
ûóf
) - (ileaf);

133 
	}
}

135 
	$ûóf_¢iff
(
båì
 *båì, *
Àaf
)

137 if(
DEBUG_MODE_K
==1)

139 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

141 
ûóf_©å_›s
 *
©å_›s
 = 
båì
->
›s
->
¥iv©e_›s
;

142  ((
ûóf
 *)
Àaf
)->
magic
 =
©å_›s
->magic;

143 
	}
}

145 
	$ûóf_ˇn_‰ì
(
båì
 *båì, *
Àaf
)

147 if(
DEBUG_MODE_K
==1)

149 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

151 
ûóf
 *ûó‡
Àaf
;

152  
	`icou¡
(
ûóf
) == 0;

153 
	}
}

155 
	$ûóf_dump
(
båì
 *båì, *
vÀaf
)

157 if(
DEBUG_MODE_K
==1)

159 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

161 i‡(!
tux3_åa˚
)

164 
ûóf_©å_›s
 *
©å_›s
 = 
båì
->
›s
->
¥iv©e_›s
;

165 
ûóf
 *
Àaf
 = 
vÀaf
;

166 
öum_t
 
öum
 = 
	`iba£
(
Àaf
);

167 
__be16
 *
di˘
 = 
	`ûóf_di˘
(
båì
, 
Àaf
);

168 
off£t
 = 0;

170 
	`åa˚_⁄
("ileaf 0x%Lx/%i (%x bytes free)",

171 
	`iba£
(
Àaf
), 
	`icou¡
÷óf), 
	`ûóf_‰ì
(
båì
,Üeaf));

173 
i
 = 0; i < 
	`icou¡
(
Àaf
); i++, 
öum
++) {

174 
limô
 = 
	`__©di˘
(
di˘
, 
i
 + 1), 
size
 =Üimô - 
off£t
;

175 i‡(!
size
)

177 i‡(
size
 < 0)

178 
	`åa˚_⁄
(" 0x%Lx: <c‹ru±>\n", 
öum
);

179 i‡(!
size
)

180 
	`åa˚_⁄
(" 0x%Lx: <em±y>\n", 
öum
);

181 i‡(
©å_›s
 =&
üâr_›s
) {

183 
tux3_öode
 
tuxnode
 = {};

184 
öode
 *öodê&
tuxnode
.
vfs_öode
;

185 *
©ås
 = 
Àaf
->
èbÀ
 + 
off£t
;

187 
öode
->
i_sb
 = 
	`vfs_sb
(
båì
->
sb
),

188 
©å_›s
->
	`decode
(
båì
, 
öode
, 
©ås
, 
size
);

190 
	`‰ì_xˇche
(
öode
);

192 
off£t
 = 
limô
;

194 
	}
}

196 *
	$ûóf_lookup
(
båì
 *båì, 
öum_t
 
öum
, 
ûóf
 *
Àaf
, *
ªsu…
)

198 if(
DEBUG_MODE_K
==1)

200 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

202 
	`as£π
(
öum
 >
	`iba£
(
Àaf
));

203 
tuxkey_t
 
©
 = 
öum
 - 
	`iba£
(
Àaf
), 
size
 = 0;

204 *
©ås
 = 
NULL
;

206 
	`åa˚
("looku∞öodê0x%Lx, %Lx + %Lx", 
öum
, 
	`iba£
(
Àaf
), 
©
);

207 i‡(
©
 < 
	`icou¡
(
Àaf
)) {

208 
__be16
 *
di˘
 = 
	`ûóf_di˘
(
båì
, 
Àaf
);

209 
off£t
 = 
	`©di˘
(
di˘
, 
©
);

210 i‡((
size
 = 
	`__©di˘
(
di˘
, 
©
 + 1Ë- 
off£t
))

211 
©ås
 = 
Àaf
->
èbÀ
 + 
off£t
;

213 *
ªsu…
 = 
size
;

214  
©ås
;

215 
	}
}

217 
	$isö‹dî
(
båì
 *båì, 
ûóf
 *
Àaf
)

219 if(
DEBUG_MODE_K
==1)

221 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

223 
__be16
 *
di˘
 = 
	`ûóf_di˘
(
båì
, 
Àaf
);

225 
i
 = 0, 
off£t
 = 0, 
limô
; i < 
	`icou¡
(
Àaf
); i++, offset =Üimit)

226 i‡((
limô
 = 
	`__©di˘
(
di˘
, 
i
 + 1)Ë< 
off£t
)

229 
	}
}

232 
	$ûóf_check
(
båì
 *båì, 
ûóf
 *
Àaf
)

234 if(
DEBUG_MODE_K
==1)

236 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

238 
ûóf_©å_›s
 *
©å_›s
 = 
båì
->
›s
->
¥iv©e_›s
;

239 *
why
;

241 
why
 = "notán ileaf";

242 i‡(
Àaf
->
magic
 !
©å_›s
->magic)

243 
ìk
;

244 
why
 = "dict out of order";

245 i‡(!
	`isö‹dî
(
båì
, 
Àaf
))

246 
ìk
;

248 
ìk
:

249 
	`tux3_îr
(
båì
->
sb
, "%s!", 
why
);

251 
	}
}

253 
	$ûóf_åim
(
båì
 *båì, 
ûóf
 *
Àaf
)

255 if(
DEBUG_MODE_K
==1)

257 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

259 
__be16
 *
di˘
 = 
	`ûóf_di˘
(
båì
, 
Àaf
);

260 
cou¡
 = 
	`icou¡
(
Àaf
);

262 
cou¡
 > 1 && *(
di˘
 - count) == *(dict - count + 1))

263 
cou¡
--;

264 i‡(
cou¡
 =1 && !*(
di˘
 - 1))

265 
cou¡
 = 0;

266 
Àaf
->
cou¡
 = 
	`˝u_to_be16
(count);

267 
	}
}

269 
	#SPLIT_AT_INUM


	)

271 
tuxkey_t
 
	$ûóf_•lô
(
båì
 *båì, 
tuxkey_t
 
höt
,

272 *
‰om
, *
öto
)

274 if(
DEBUG_MODE_K
==1)

276 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

278 
	`as£π
(
	`ûóf_¢iff
(
båì
, 
‰om
));

279 
ûóf
 *
Àaf
 = 
‰om
, *
de°
 = 
öto
;

280 
__be16
 *
di˘
 = 
	`ûóf_di˘
(
båì
, 
‰om
);

281 
__be16
 *
de°di˘
 = 
	`ûóf_di˘
(
båì
, 
öto
);

283 #ifde‡
SPLIT_AT_INUM


288 i‡(
höt
 =
	`iba£
(
Àaf
))

289 
höt
++;

291 
	`åa˚
("•lôáàöum 0x%Lx", 
höt
);

292 
©
 = 
	`mö_t
(
tuxkey_t
, 
höt
 - 
	`iba£
(
Àaf
), 
	`icou¡
(leaf));

295 
©
 = 1, 
hi
 = 
	`icou¡
(
Àaf
);

296 
©
 < 
hi
) {

297 
mid
 = (
©
 + 
hi
) / 2;

298 i‡(*(
di˘
 - 
mid
Ë< (
båì
->
sb
->
blocksize
 / 2))

299 
©
 = 
mid
 + 1;

301 
hi
 = 
mid
;

305 
•lô
 = 
	`©di˘
(
di˘
, 
©
), 
‰ì
 =átdi˘(di˘, 
	`icou¡
(
Àaf
));

306 
	`åa˚
("•lôáà%x o‡%x", 
©
, 
	`icou¡
(
Àaf
));

307 
	`åa˚
("c›y ouà%x byã†© %x", 
‰ì
 - 
•lô
, split);

308 
	`as£π
(
‰ì
 >
•lô
);

309 
	`mem˝y
(
de°
->
èbÀ
, 
Àaf
->èbÀ + 
•lô
, 
‰ì
 - split);

310 
de°
->
cou¡
 = 
	`˝u_to_be16
(
	`icou¡
(
Àaf
Ë- 
©
);

311 
	`vecc›y
(
de°di˘
 - 
	`icou¡
(
de°
), 
di˘
 - icou¡(
Àaf
), icount(dest));

312 
i
 = 1; i <
	`icou¡
(
de°
); i++)

313 
	`add_idi˘
(
de°di˘
 - 
i
, -
•lô
);

314 #ifde‡
SPLIT_AT_INUM


316 
öum_t
 
round
 = 
höt
 & ~(öum_t)(
båì
->
íåõs_≥r_Àaf
 - 1);

317 
de°
->
iba£
 = 
	`˝u_to_be64
(
round
 > 
	`iba£
(
Àaf
Ë+ 
	`icou¡
÷ófË?Ñound : 
höt
);

319 
de°
->
iba£
 = 
	`˝u_to_be64
(
	`iba£
(
Àaf
Ë+ 
©
);

321 
Àaf
->
cou¡
 = 
	`˝u_to_be16
(
©
);

322 
	`mem£t
(
Àaf
->
èbÀ
 + 
•lô
, 0, (*)(
di˘
 - 
	`icou¡
(leaf)) - (leaf->table + split));

323 
	`ûóf_åim
(
båì
, 
Àaf
);

324  
	`iba£
(
de°
);

325 
	}
}

327 
	$ûóf_mîge
(
båì
 *båì, *
vöto
, *
v‰om
)

329 if(
DEBUG_MODE_K
==1)

331 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

333 
ûóf
 *
öto
 = 
vöto
, *
‰om
 = 
v‰om
;

334 
‰omcou¡
 = 
	`icou¡
(
‰om
);

337 i‡(!
‰omcou¡
)

340 
	`as£π
(
	`iba£
(
‰om
Ë> iba£(
öto
));

341 
tuxkey_t
 
‰omiba£
 = 
	`iba£
(
‰om
);

342 
cou¡
 = 
	`icou¡
(
öto
);

343 
hﬁe
 = 
‰omiba£
 - 
	`iba£
(
öto
Ë+ 
cou¡
;

345 
__be16
 *
di˘
 = 
	`ûóf_di˘
(
båì
, 
öto
);

346 
__be16
 *
‰omdi˘
 = 
	`ûóf_di˘
(
båì
, 
‰om
);

347 
√ed_size
 = 
hﬁe
 * (*
di˘
Ë+ 
	`ûóf_√ed
(
båì
, 
‰om
);

349 i‡(
	`ûóf_‰ì
(
båì
, 
öto
Ë< 
√ed_size
)

353 
limô
 = 
	`©di˘
(
di˘
, 
cou¡
);

354 
__be16
 
__limô
 = 
	`˝u_to_be16
(
limô
);

355 
hﬁe
--) {

356 
cou¡
++;

357 *(
di˘
 - 
cou¡
Ë
__limô
;

361 
‰omlimô
 = 
	`©di˘
(
‰omdi˘
, 
‰omcou¡
);

362 
	`mem˝y
(
öto
->
èbÀ
 + 
limô
, 
‰om
->èbÀ, 
‰omlimô
);

365 i‡(
limô
) {

366 
i
;

367 
i
 = 1; i <
‰omcou¡
; i++)

368 
	`add_idi˘
(
di˘
 - 
i
, 
limô
);

370 
	`vecc›y
(
di˘
 - 
cou¡
 - 
‰omcou¡
, 
‰omdi˘
 - fromcount, fromcount);

372 
öto
->
cou¡
 = 
	`˝u_to_be16
(cou¡ + 
‰omcou¡
);

375 
	}
}

384 
	$ûóf_ch›
(
båì
 *båì, 
tuxkey_t
 
°¨t
, 
u64
 
Àn
, *
Àaf
)

386 if(
DEBUG_MODE_K
==1)

388 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

390 
ûóf
 *ûó‡
Àaf
;

391 
__be16
 *
di˘
 = 
	`ûóf_di˘
(
båì
, 
Àaf
);

392 
tuxkey_t
 
ba£
 = 
	`iba£
(
ûóf
);

393 
cou¡
 = 
	`icou¡
(
ûóf
);

394 
tuxkey_t
 
©
 = 
°¨t
 - 
ba£
;

395 *
°¨ç
, *
ídp
, *
èûp
;

396 
size
;

398 i‡(
©
 + 1 > 
cou¡
)

401 
Àn
 = 
	`mö_t
(
u64
,Üí, 
cou¡
 - 
©
);

403 
°¨ç
 = 
ûóf
->
èbÀ
 + 
	`©di˘
(
di˘
, 
©
);

404 
ídp
 = 
ûóf
->
èbÀ
 + 
	`©di˘
(
di˘
, 
©
 + 
Àn
);

405 i‡(
°¨ç
 =
ídp
)

409 
èûp
 = 
ûóf
->
èbÀ
 + 
	`©di˘
(
di˘
, 
cou¡
);

410 
	`memmove
(
°¨ç
, 
ídp
, 
èûp
 -Éndp);

413 
size
 = 
ídp
 - 
°¨ç
;

414 
©
 < 
cou¡
) {

415 
©
++;

416 
	`add_idi˘
(
di˘
 - 
©
, -
size
);

419 
	`ûóf_åim
(
båì
, 
Àaf
);

422 
	}
}

424 *
	$ûóf_ªsize
(
båì
 *båì, 
tuxkey_t
 
öum
, *
vÀaf
,

425 
√wsize
)

427 if(
DEBUG_MODE_K
==1)

429 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

431 
ûóf
 *ûó‡
vÀaf
;

432 
__be16
 *
di˘
 = 
	`ûóf_di˘
(
båì
, 
ûóf
);

433 
cou¡
 = 
	`icou¡
(
ûóf
);

434 
tuxkey_t
 
©
 = 
öum
 - 
	`iba£
(
ûóf
);

435 
exãnd_di˘
, 
off£t
, 
size
;

437 
	`as£π
(
öum
 >
	`iba£
(
ûóf
));

440 i‡(
©
 + 1 > 
cou¡
) {

442 i‡((
©
 + 1Ë* (*
di˘
Ë>
båì
->
sb
->
blocksize
)

443 
ovîÊow
;

446 
exãnd_di˘
 = (
©
 + 1 - 
cou¡
Ë* (*
di˘
);

447 
off£t
 = 
	`©di˘
(
di˘
, 
cou¡
);

448 
size
 = 0;

451 
exãnd_di˘
 = 0;

452 
off£t
 = 
	`©di˘
(
di˘
, 
©
);

453 
size
 = 
	`__©di˘
(
di˘
, 
©
 + 1Ë- 
off£t
;

456 i‡(
	`ûóf_‰ì
(
båì
, 
ûóf
Ë< 
√wsize
 - 
size
 + 
exãnd_di˘
) {

457 
ovîÊow
:

458  
NULL
;

462 i‡(
exãnd_di˘
) {

463 
__be16
 
limô
 = 
	`˝u_to_be16
(
	`©di˘
(
di˘
, 
cou¡
));

464 
cou¡
 < 
©
 + 1) {

465 
cou¡
++;

466 *(
di˘
 - 
cou¡
Ë
limô
;

468 
ûóf
->
cou¡
 = 
	`˝u_to_be16
(count);

471 *
©ås
 = 
ûóf
->
èbÀ
 + 
off£t
;

472 i‡(
√wsize
 !
size
) {

474 
limô
 = 
	`__©di˘
(
di˘
, 
cou¡
);

475 
	`as£π
(
limô
 >
off£t
 + 
size
);

476 
	`memmove
(
©ås
 + 
√wsize
,áâr†+ 
size
, 
limô
 - 
off£t
 - size);

479 
diff
 = 
√wsize
 - 
size
;

480 
©
++;

481 
©
 <
cou¡
) {

482 
	`add_idi˘
(
di˘
 - 
©
, 
diff
);

483 
©
++;

487  
©ås
;

488 
	}
}

490 
tuxkey_t
 
	$ûóf_•lô_höt
(
båì
 *båì, 
ûóf
 *ileaf,

491 
tuxkey_t
 
key
, 
size
)

493 if(
DEBUG_MODE_K
==1)

495 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

502 
tuxkey_t
 
ba£
 = 
	`iba£
(
ûóf
);

503 
cou¡
 = 
	`icou¡
(
ûóf
);

504 i‡(
key
 >
ba£
 + 
cou¡
)

505  
key
 & ~(
båì
->
íåõs_≥r_Àaf
 - 1);

507  
ba£
 + 
cou¡
 / 2;

508 
	}
}

513 
	$ûóf_wrôe
(
båì
 *båì, 
tuxkey_t
 
key_bŸtom
,

514 
tuxkey_t
 
key_limô
,

515 *
Àaf
, 
båì_key_ønge
 *
key
,

516 
tuxkey_t
 *
•lô_höt
)

518 if(
DEBUG_MODE_K
==1)

520 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

522 
ûóf_ªq
 *
rq
 = 
	`c⁄èöî_of
(
key
, ileaf_req, key);

523 
ûóf_©å_›s
 *
©å_›s
 = 
båì
->
›s
->
¥iv©e_›s
;

524 
ûóf
 *ûó‡
Àaf
;

525 *
©ås
;

526 
size
;

528 
	`as£π
(
key
->
Àn
 == 1);

530 
size
 = 
©å_›s
->
	`ícoded_size
(
båì
, 
rq
->
d©a
);

531 
	`as£π
(
size
);

533 
©ås
 = 
	`ûóf_ªsize
(
båì
, 
key
->
°¨t
, 
ûóf
, 
size
);

534 i‡(
©ås
 =
NULL
) {

536 *
•lô_höt
 = 
	`ûóf_•lô_höt
(
båì
, 
ûóf
, 
key
->
°¨t
, 
size
);

540 
©å_›s
->
	`ícode
(
båì
, 
rq
->
d©a
, 
©ås
, 
size
);

542 
key
->
°¨t
++;

543 
key
->
Àn
--;

546 
	}
}

548 
	$ûóf_ªad
(
båì
 *båì, 
tuxkey_t
 
key_bŸtom
,

549 
tuxkey_t
 
key_limô
,

550 *
Àaf
, 
båì_key_ønge
 *
key
)

552 if(
DEBUG_MODE_K
==1)

554 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

556 
ûóf_ªq
 *
rq
 = 
	`c⁄èöî_of
(
key
, ileaf_req, key);

557 
ûóf_©å_›s
 *
©å_›s
 = 
båì
->
›s
->
¥iv©e_›s
;

558 
ûóf
 *ûó‡
Àaf
;

559 *
©ås
;

560 
size
;

562 
©ås
 = 
	`ûóf_lookup
(
båì
, 
key
->
°¨t
, 
ûóf
, &
size
);

563 i‡(
©ås
 =
NULL
)

564  -
ENOENT
;

566  
©å_›s
->
	`decode
(
båì
, 
rq
->
d©a
, 
©ås
, 
size
);

567 
	}
}

569 
båì_›s
 
	gôªe_›s
 = {

570 .
båì_öô
 = 
ûóf_båì_öô
,

571 .
	gÀaf_öô
 = 
ûóf_öô
,

572 .
	gÀaf_•lô
 = 
ûóf_•lô
,

573 .
	gÀaf_mîge
 = 
ûóf_mîge
,

574 .
	gÀaf_ch›
 = 
ûóf_ch›
,

575 .
	gÀaf_wrôe
 = 
ûóf_wrôe
,

576 .
	gÀaf_ªad
 = 
ûóf_ªad
,

577 .
	gbÆloc
 = 
bÆloc
,

578 .
	g¥iv©e_›s
 = &
üâr_›s
,

580 .
	gÀaf_¢iff
 = 
ûóf_¢iff
,

581 .
	gÀaf_ˇn_‰ì
 = 
ûóf_ˇn_‰ì
,

582 .
	gÀaf_dump
 = 
ûóf_dump
,

585 
båì_›s
 
	gŸªe_›s
 = {

586 .
båì_öô
 = 
ûóf_båì_öô
,

587 .
	gÀaf_öô
 = 
ûóf_öô
,

588 .
	gÀaf_•lô
 = 
ûóf_•lô
,

589 .
	gÀaf_mîge
 = 
ûóf_mîge
,

590 .
	gÀaf_ch›
 = 
ûóf_ch›
,

591 .
	gÀaf_wrôe
 = 
ûóf_wrôe
,

592 .
	gÀaf_ªad
 = 
ûóf_ªad
,

593 .
	gbÆloc
 = 
bÆloc
,

594 .
	g¥iv©e_›s
 = &
ﬂâr_›s
,

596 .
	gÀaf_¢iff
 = 
ûóf_¢iff
,

597 .
	gÀaf_ˇn_‰ì
 = 
ûóf_ˇn_‰ì
,

598 .
	gÀaf_dump
 = 
ûóf_dump
,

609 
	$ûóf_föd_‰ì
(
båì
 *båì, 
tuxkey_t
 
key_bŸtom
,

610 
tuxkey_t
 
key_limô
, *
Àaf
,

611 
tuxkey_t
 
key
, 
u64
 
Àn
, *
d©a
)

613 if(
DEBUG_MODE_K
==1)

615 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

617 
tuxkey_t
 
©
 = 
key
 - 
	`iba£
(
Àaf
);

618 
cou¡
 = 
	`icou¡
(
Àaf
);

620 
key_limô
 = 
	`mö
(key_limô, 
key
 + 
Àn
);

622 i‡(
©
 < 
cou¡
) {

623 
__be16
 *
di˘
 = 
	`ûóf_di˘
(
båì
, 
Àaf
);

624 
limô
, 
off£t
 = 
	`©di˘
(
di˘
, 
©
);

626 
©
 < 
cou¡
) {

627 
©
++;

628 
limô
 = 
	`__©di˘
(
di˘
, 
©
);

629 i‡(
off£t
 =
limô
) {

630 
©
--;

633 
off£t
 = 
limô
;

637 i‡(
	`iba£
(
Àaf
Ë+ 
©
 < 
key_limô
) {

638 *(
öum_t
 *)
d©a
 = 
	`iba£
(
Àaf
Ë+ 
©
;

643 
	}
}

649 
	$ûóf_íumî©e
(
båì
 *båì, 
tuxkey_t
 
key_bŸtom
,

650 
tuxkey_t
 
key_limô
, *
Àaf
,

651 
tuxkey_t
 
key
, 
u64
 
Àn
, *
d©a
)

653 if(
DEBUG_MODE_K
==1)

655 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

657 
ûóf
 *ûó‡
Àaf
;

658 
__be16
 *
di˘
 = 
	`ûóf_di˘
(
båì
, 
ûóf
);

659 
ûóf_íumøã_cb
 *
cb
 = 
d©a
;

660 
tuxkey_t
 
©
, 
ba£
 = 
	`iba£
(
ûóf
);

661 
cou¡
;

663 
©
 = 
key
 - 
ba£
;

664 
cou¡
 = 
	`mö_t
(
u64
, 
key
 + 
Àn
 - 
ba£
, 
	`icou¡
(
ûóf
));

666 i‡(
©
 < 
cou¡
) {

667 
off£t
 = 
	`©di˘
(
di˘
, 
©
);

668 ; 
©
 < 
cou¡
;át++) {

669 
size
, 
limô
;

670 
öum_t
 
öum
;

671 *
©ås
;

672 
îr
;

674 
limô
 = 
	`__©di˘
(
di˘
, 
©
 + 1);

675 i‡(
limô
 <
off£t
)

677 
©ås
 = 
ûóf
->
èbÀ
 + 
off£t
;

678 
size
 = 
limô
 - 
off£t
;

680 
öum
 = 
ba£
 + 
©
;

681 
îr
 = 
cb
->
	`ˇŒback
(
båì
, 
öum
, 
©ås
, 
size
, cb->
d©a
);

682 i‡(
îr
)

683  
îr
;

685 
off£t
 = 
limô
;

690 
	}
}

	@kernel/ileaf.h

1 #i‚de‡
TUX3_ILEAF_H


2 
	#TUX3_ILEAF_H


	)

4 
	sûóf_©å_›s
 {

5 
__be16
 
	mmagic
;

6 (*
	mícoded_size
)(
båì
 *
	mbåì
, *
	md©a
);

7 (*
	mícode
)(
båì
 *
	mbåì
, *
	md©a
, *
	m©ås
, 
	msize
);

8 (*
	mdecode
)(
båì
 *
	mbåì
, *
	md©a
, *
	m©ås
, 
	msize
);

11 
	sûóf_ªq
 {

12 
båì_key_ønge
 
	mkey
;

14 *
	md©a
;

	@kernel/inode.c

12 
	~"tux3.h
"

13 
	~"fûem≠_hﬁe.h
"

14 
	~"ûóf.h
"

15 
	~"üâr.h
"

17 #i‚de‡
åa˚


18 
	#åa˚
 
åa˚_⁄


	)

21 
tux_£tup_öode
(
öode
 *inode);

23 
ölöe
 
	$tux_£t_öum
(
öode
 *öode, 
öum_t
 
öum
)

25 if(
DEBUG_MODE_K
==1)

27 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

29 #ifde‡
__KERNEL__


30 
öode
->
i_öo
 = 
öum
;

32 
	`tux_öode
(
öode
)->
öum
 = inum;

33 
	}
}

35 
öode
 *
	$tux_√w_vﬁm≠
(
sb
 *sb)

37 if(
DEBUG_MODE_K
==1)

39 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

41 
öode
 *öodê
	`√w_öode
(
	`vfs_sb
(
sb
));

42 i‡(
öode
) {

43 
	`tux_£t_öum
(
öode
, 
TUX_VOLMAP_INO
);

44 
	`tux_£tup_öode
(
öode
);

45 
	`ö£π_öode_hash
(
öode
);

47  
öode
;

48 
	}
}

50 
öode
 *
	$tux_√w_logm≠
(
sb
 *sb)

52 if(
DEBUG_MODE_K
==1)

54 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

56 
öode
 *öodê
	`√w_öode
(
	`vfs_sb
(
sb
));

57 i‡(
öode
) {

58 
	`tux_£t_öum
(
öode
, 
TUX_LOGMAP_INO
);

59 
	`tux_£tup_öode
(
öode
);

60 
	`ö£π_öode_hash
(
öode
);

62  
öode
;

63 
	}
}

65 
öode
 *
	$tux_√w_öode
(
öode
 *
dú
, 
tux_üâr
 *
üâr
,

66 
dev_t
 
rdev
)

68 if(
DEBUG_MODE_K
==1)

70 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

72 
öode
 *inode;

74 
öode
 = 
	`√w_öode
(
dú
->
i_sb
);

75 i‡(!
öode
)

76  
NULL
;

77 
	`as£π
(!
	`tux_öode
(
öode
)->
¥e£¡
);

78 (
	`tux_öode
(
öode
))->
is_com¥es£d
=0;

79 
öode
->
i_mode
 = 
üâr
->
mode
;

80 
öode
->
i_uid
 = 
üâr
->
uid
;

81 i‡(
dú
->
i_mode
 & 
S_ISGID
) {

82 
öode
->
i_gid
 = 
dú
->i_gid;

83 i‡(
	`S_ISDIR
(
öode
->
i_mode
))

84 
öode
->
i_mode
 |
S_ISGID
;

86 
öode
->
i_gid
 = 
üâr
->
gid
;

87 
öode
->
i_mtime
 = inode->
i_˘ime
 = inode->
i_©ime
 = 
	`gëtime
();

88 
öode
->
i_mode
 & 
S_IFMT
) {

89 
S_IFBLK
:

90 
S_IFCHR
:

92 
öode
->
i_rdev
 = 
rdev
;

93 
	`tux_öode
(
öode
)->
¥e£¡
 |
RDEV_BIT
;

95 
S_IFDIR
:

96 
	`öc_∆ök
(
öode
);

99 
	`tux_öode
(
öode
)->
¥e£¡
 |
CTIME_SIZE_BIT
|
MTIME_BIT
|
MODE_OWNER_BIT
|
LINK_COUNT_BIT
;

102 
	`tux_£t_öum
(
öode
, 
TUX_INVALID_INO
);

104  
öode
;

105 
	}
}

111 
	$is_de„r_Æloc_öum
(
öode
 *inode)

113 if(
DEBUG_MODE_K
==1)

115 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

117  !
	`li°_em±y
(&
	`tux_öode
(
öode
)->
Æloc_li°
);

118 
	}
}

121 
	$föd_de„r_Æloc_öum
(
sb
 *sb, 
öum_t
 
öum
)

123 if(
DEBUG_MODE_K
==1)

125 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

132 
tux3_öode
 *
tuxnode
;

134 
	`li°_f‹_óch_íåy
(
tuxnode
, &
sb
->
Æloc_öodes
, 
Æloc_li°
) {

135 i‡(
tuxnode
->
öum
 == inum)

139 
öode
 *
tmp
 = 
	`tux3_ûookup_nowaô
(
sb
, 
öum
);

140 i‡(
tmp
) {

141 
	`ùut
(
tmp
);

146 
	}
}

149 
	$add_de„r_Æloc_öum
(
öode
 *inode)

151 if(
DEBUG_MODE_K
==1)

153 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

156 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

157 
	`li°_add_èû
(&
	`tux_öode
(
öode
)->
Æloc_li°
, &
sb
->
Æloc_öodes
);

158 
	}
}

161 
	$dñ_de„r_Æloc_öum
(
öode
 *inode)

163 if(
DEBUG_MODE_K
==1)

165 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

167 
	`li°_dñ_öô
(&
	`tux_öode
(
öode
)->
Æloc_li°
);

168 
	}
}

193 
	$föd_‰ì_öum
(
curs‹
 *curs‹, 
öum_t
 
gﬂl
, inum_à*
Æloˇãd
)

195 if(
DEBUG_MODE_K
==1)

197 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

199 
ªt
;

201 #i‚de‡
__KERNEL__


203 i‡(!
	`has_roŸ
(
curs‹
->
båì
)) {

204 *
Æloˇãd
 = 
gﬂl
;

209 
ªt
 = 
	`båì_¥obe
(
curs‹
, 
gﬂl
);

210 i‡(
ªt
)

211  
ªt
;

220 
ªt
 = 
	`båì_åavî£
(
curs‹
, 
gﬂl
, 
TUXKEY_LIMIT
, 
ûóf_föd_‰ì
,

221 
Æloˇãd
);

222 i‡(
ªt
 < 0)

223 
out
;

224 i‡(
ªt
 > 0) {

226 
ªt
 = 0;

227 
out
;

230 i‡(
TUX_NORMAL_INO
 < 
gﬂl
) {

231 
u64
 
Àn
 = 
gﬂl
 - 
TUX_NORMAL_INO
;

233 
ªt
 = 
	`båì_åavî£
(
curs‹
, 
TUX_NORMAL_INO
, 
Àn
,

234 
ûóf_föd_‰ì
, 
Æloˇãd
);

235 i‡(
ªt
 < 0)

236 
out
;

237 i‡(
ªt
 > 0) {

239 
ªt
 = 0;

240 
out
;

245 
ªt
 = -
ENOSPC
;

247 
out
:

248 
	`ªÀa£_curs‹
(
curs‹
);

250  
ªt
;

251 
	}
}

253 
	süŒoc_pﬁicy
 {

254 
öum_t
 (*
gﬂl
)(
	möode
 *, *);

255 (*
	mupd©e
)(
	möode
 *, 
	möum_t
);

261 
öum_t
 
	$üŒoc_•ecific_gﬂl
(
öode
 *öode, *
d©a
)

263 if(
DEBUG_MODE_K
==1)

265 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

267  *(
öum_t
 *)
d©a
;

268 
	}
}

270 
	$üŒoc_no›_upd©e
(
öode
 *öode, 
öum_t
 
öum
)

272 if(
DEBUG_MODE_K
==1)

274 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

276 
	}
}

278 
üŒoc_pﬁicy
 
	güŒoc_•ecific
 = {

279 .
gﬂl
 = 
üŒoc_•ecific_gﬂl
,

280 .
	gupd©e
 = 
üŒoc_no›_upd©e
,

287 
öum_t
 
	$üŒoc_löór_gﬂl
(
öode
 *öode, *
d©a
)

289 if(
DEBUG_MODE_K
==1)

291 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

293 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

294  
sb
->
√xtöum
;

295 
	}
}

297 
	$üŒoc_löór_upd©e
(
öode
 *öode, 
öum_t
 
öum
)

299 if(
DEBUG_MODE_K
==1)

301 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

303 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

305 
öum
++;

306 i‡(
öum
 >
MAX_INODES
)

307 
sb
->
√xtöum
 = 
TUX_NORMAL_INO
;

309 
sb
->
√xtöum
 = 
öum
;

310 
	}
}

312 
üŒoc_pﬁicy
 
	güŒoc_löór
 = {

313 .
gﬂl
 = 
üŒoc_löór_gﬂl
,

314 .
	gupd©e
 = 
üŒoc_löór_upd©e
,

317 
	$tux_ã°
(
öode
 *öode, *
d©a
)

319 if(
DEBUG_MODE_K
==1)

321 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

323  
	`tux_öode
(
öode
)->
öum
 =*(
öum_t
 *)
d©a
;

324 
	}
}

326 
	$tux_£t
(
öode
 *öode, *
d©a
)

328 if(
DEBUG_MODE_K
==1)

330 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

332 
	`tux_£t_öum
(
öode
, *(
öum_t
 *)
d©a
);

334 
	}
}

336 
	$Æloc_öum
(
öode
 *öode, 
üŒoc_pﬁicy
 *
pﬁicy
,

337 *
pﬁicy_d©a
)

339 if(
DEBUG_MODE_K
==1)

341 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

343 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

344 
båì
 *
ôªe
 = 
	`ôªe_båì
(
sb
);

345 
curs‹
 *cursor;

346 
öum_t
 
gﬂl
;

347 
îr
 = 0;

349 
curs‹
 = 
	`Æloc_curs‹
(
ôªe
, 1);

350 i‡(!
curs‹
)

351  -
ENOMEM
;

353 
	`down_wrôe
(&
curs‹
->
båì
->
lock
);

354 
gﬂl
 = 
pﬁicy
->
	`gﬂl
(
öode
, 
pﬁicy_d©a
);

356 
îr
 = 
	`föd_‰ì_öum
(
curs‹
, 
gﬂl
, &goal);

357 i‡(
îr
)

358 
îr‹
;

366 i‡(
	`ö£π_öode_locked4
(
öode
, 
gﬂl
, 
tux_ã°
, &goal) >= 0)

375 
gﬂl
++;

376 
	`föd_de„r_Æloc_öum
(
sb
, 
gﬂl
))

377 
gﬂl
++;

380 
	`öô_båì
(&
	`tux_öode
(
öode
)->
båì
, 
sb
, 
no_roŸ
, 
	`dåì_›s
());

383 
	`tux_£t_öum
(
öode
, 
gﬂl
);

384 
	`tux_£tup_öode
(
öode
);

386 
	`add_de„r_Æloc_öum
(
öode
);

388 
pﬁicy
->
	`upd©e
(
öode
, 
gﬂl
);

396 i‡(
gﬂl
 >
TUX_NORMAL_INO
) {

397 
	`as£π
(
sb
->
‰ìöodes
 > 
TUX_NORMAL_INO
);

398 
sb
->
‰ìöodes
--;

401 
îr‹
:

402 
	`up_wrôe
(&
curs‹
->
båì
->
lock
);

403 
	`‰ì_curs‹
(
curs‹
);

405  
îr
;

406 
	}
}

408 
öode
 *

409 
	$__tux_¸óã_öode
(
öode
 *
dú
, 
tux_üâr
 *
üâr
, 
dev_t
 
rdev
,

410 
üŒoc_pﬁicy
 *
pﬁicy
, *
pﬁicy_d©a
)

412 if(
DEBUG_MODE_K
==1)

414 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

416 
öode
 *inode;

418 
öode
 = 
	`tux_√w_öode
(
dú
, 
üâr
, 
rdev
);

419 i‡(!
öode
)

420  
	`ERR_PTR
(-
ENOMEM
);

422 
îr
 = 
	`Æloc_öum
(
öode
, 
pﬁicy
, 
pﬁicy_d©a
);

423 i‡(
îr
) {

424 
	`make_bad_öode
(
öode
);

425 
	`ùut
(
öode
);

426  
	`ERR_PTR
(
îr
);

433 
öum_t
 
öum
 = 
	`tux_öode
(
öode
)->inum;

434 i‡(
	`ö£π_öode_locked4
(
öode
, 
öum
, 
tux_ã°
, &inum) < 0) {

436 
	`tux3_w¨n
(
	`tux_sb
(
dú
->
i_sb
), "inode insertÉrror: inum %Lx",

437 
öum
);

438 
	`ùut
(
öode
);

439  
	`ERR_PTR
(-
EIO
);

446 
	`tux3_üârdúty
(
öode
);

447 
	`tux3_m¨k_öode_dúty
(
öode
);

449  
öode
;

450 
	}
}

453 
öode
 *
	$tux_¸óã_öode
(
öode
 *
dú
, 
tux_üâr
 *
üâr
,

454 
dev_t
 
rdev
)

456 if(
DEBUG_MODE_K
==1)

458 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

460  
	`__tux_¸óã_öode
(
dú
, 
üâr
, 
rdev
, &
üŒoc_löór
, 
NULL
);

461 
	}
}

464 
öode
 *
	$tux_¸óã_•ecific_öode
(
öode
 *
dú
, 
öum_t
 
öum
,

465 
tux_üâr
 *
üâr
, 
dev_t
 
rdev
)

467 if(
DEBUG_MODE_K
==1)

469 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

471  
	`__tux_¸óã_öode
(
dú
, 
üâr
, 
rdev
, &
üŒoc_•ecific
, &
öum
);

472 
	}
}

474 
	$check_¥e£¡
(
öode
 *inode)

476 if(
DEBUG_MODE_K
==1)

478 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

480 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

482 
öode
->
i_mode
 & 
S_IFMT
) {

483 
S_IFSOCK
:

484 
S_IFIFO
:

485 
	`as£π
(
tuxnode
->
¥e£¡
 & 
MODE_OWNER_BIT
);

486 
	`as£π
(!(
tuxnode
->
¥e£¡
 & 
RDEV_BIT
));

488 
S_IFBLK
:

489 
S_IFCHR
:

490 
	`as£π
(
tuxnode
->
¥e£¡
 & 
MODE_OWNER_BIT
);

493 
S_IFREG
:

494 
	`as£π
(
tuxnode
->
¥e£¡
 & 
MODE_OWNER_BIT
);

495 
	`as£π
(!(
tuxnode
->
¥e£¡
 & 
RDEV_BIT
));

497 
S_IFDIR
:

498 
	`as£π
(
tuxnode
->
¥e£¡
 & 
MODE_OWNER_BIT
);

499 
	`as£π
(!(
tuxnode
->
¥e£¡
 & 
RDEV_BIT
));

501 
S_IFLNK
:

502 
	`as£π
(
tuxnode
->
¥e£¡
 & 
MODE_OWNER_BIT
);

503 
	`as£π
(!(
tuxnode
->
¥e£¡
 & 
RDEV_BIT
));

506 i‡(
	`tux_öode
(
öode
)->
öum
 =
TUX_VOLMAP_INO
)

507 
	`as£π
(
tuxnode
->
¥e£¡
 == 0);

509 
	`as£π
(!(
tuxnode
->
¥e£¡
 & 
RDEV_BIT
));

513 
	`tux3_fs_îr‹
(
	`tux_sb
(
öode
->
i_sb
),

515 
tuxnode
->
öum
, 
öode
->
i_mode
);

519 
	}
}

521 
	$›í_öode
(
öode
 *inode)

523 if(
DEBUG_MODE_K
==1)

525 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

527 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

528 
båì
 *
ôªe
 = 
	`ôªe_båì
(
sb
);

529 
îr
;

531 
curs‹
 *curs‹ = 
	`Æloc_curs‹
(
ôªe
, 0);

532 i‡(!
curs‹
)

533  -
ENOMEM
;

535 
	`down_ªad
(&
curs‹
->
båì
->
lock
);

536 i‡((
îr
 = 
	`båì_¥obe
(
curs‹
, 
	`tux_öode
(
öode
)->
öum
)))

537 
out
;

540 
ûóf_ªq
 
rq
 = {

541 .
key
 = {

542 .
°¨t
 = 
	`tux_öode
(
öode
)->
öum
,

543 .
Àn
 = 1,

545 .
d©a
 = 
öode
,

547 
îr
 = 
	`båì_ªad
(
curs‹
, &
rq
.
key
);

548 i‡(!
îr
) {

549 
	`check_¥e£¡
(
öode
);

550 
	`tux_£tup_öode
(
öode
);

553 
	`ªÀa£_curs‹
(
curs‹
);

554 
out
:

555 
	`up_ªad
(&
curs‹
->
båì
->
lock
);

556 
	`‰ì_curs‹
(
curs‹
);

558  
îr
;

559 
	}
}

561 
öode
 *
	$tux3_igë
(
sb
 *sb, 
öum_t
 
öum
)

563 if(
DEBUG_MODE_K
==1)

565 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

567 
öode
 *inode;

568 
îr
;

570 
öode
 = 
	`igë5_locked
(
	`vfs_sb
(
sb
), 
öum
, 
tux_ã°
, 
tux_£t
, &inum);

571 i‡(!
öode
)

572  
	`ERR_PTR
(-
ENOMEM
);

573 i‡(!(
öode
->
i_°©e
 & 
I_NEW
))

574  
öode
;

576 
îr
 = 
	`›í_öode
(
öode
);

577 i‡(
îr
) {

578 
	`igë_Áûed
(
öode
);

579  
	`ERR_PTR
(
îr
);

581 
	`u∆ock_√w_öode
(
öode
);

582  
öode
;

583 
	}
}

585 
öode
 *
	$tux3_ûookup_nowaô
(
sb
 *sb, 
öum_t
 
öum
)

587 if(
DEBUG_MODE_K
==1)

589 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

591  
	`ûookup5_nowaô
(
	`vfs_sb
(
sb
), 
öum
, 
tux_ã°
, &inum);

592 
	}
}

594 
öode
 *
	$tux3_ûookup
(
sb
 *sb, 
öum_t
 
öum
)

596 if(
DEBUG_MODE_K
==1)

598 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

600  
	`ûookup5
(
	`vfs_sb
(
sb
), 
öum
, 
tux_ã°
, &inum);

601 
	}
}

603 
	$ßve_öode
(
öode
 *öode, 
tux3_üâr_d©a
 *
id©a
,

604 
dñè
)

606 if(
DEBUG_MODE_K
==1)

608 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

610 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

611 
båì
 *
ôªe
 = 
	`ôªe_båì
(
sb
);

612 
öum_t
 
öum
 = 
	`tux_öode
(
öode
)->inum;

613 
îr
 = 0;

615 
	`åa˚
("ßvêöodê0x%Lx", 
öum
);

617 #i‚de‡
__KERNEL__


620 
	`down_wrôe
(&
ôªe
->
lock
);

621 i‡(!
	`has_roŸ
(
ôªe
))

622 
îr
 = 
	`Æloc_em±y_båì
(
ôªe
);

623 
	`up_wrôe
(&
ôªe
->
lock
);

624 i‡(
îr
)

625  
îr
;

628 
curs‹
 *curs‹ = 
	`Æloc_curs‹
(
ôªe
, 1);

629 i‡(!
curs‹
)

630  -
ENOMEM
;

632 
	`down_wrôe
(&
curs‹
->
båì
->
lock
);

633 i‡((
îr
 = 
	`båì_¥obe
(
curs‹
, 
öum
)))

634 
out
;

636 i‡(!
	`is_de„r_Æloc_öum
(
öode
)) {

637 
size
;

638 
	`as£π
(
	`ûóf_lookup
(
ôªe
, 
öum
, 
	`bufd©a
(
	`curs‹_Àafbuf
(
curs‹
)), &
size
));

642 
üâr_ªq_d©a
 
üâr_d©a
 = {

643 .
id©a
 = idata,

644 .
båì
 = &
	`tux_öode
(
öode
)->btree,

645 .
öode
 = inode,

647 
ûóf_ªq
 
rq
 = {

648 .
key
 = {

649 .
°¨t
 = 
öum
,

650 .
Àn
 = 1,

652 .
d©a
 = &
üâr_d©a
,

654 
îr
 = 
	`båì_wrôe
(
curs‹
, &
rq
.
key
);

655 i‡(
îr
)

656 
îr‹_ªÀa£
;

663 i‡(
	`is_de„r_Æloc_öum
(
öode
Ë&& 
öum
 >
TUX_NORMAL_INO
) {

664 
	`as£π
(
	`be64_to_˝u
(
sb
->
su≥r
.
u£döodes
Ë< 
MAX_INODES
);

665 
	`be64_add_˝u
(&
sb
->
su≥r
.
u£döodes
, 1);

667 
	`dñ_de„r_Æloc_öum
(
öode
);

669 
îr‹_ªÀa£
:

670 
	`ªÀa£_curs‹
(
curs‹
);

671 
out
:

672 
	`up_wrôe
(&
curs‹
->
båì
->
lock
);

673 
	`‰ì_curs‹
(
curs‹
);

674  
îr
;

675 
	}
}

677 
	$tux3_ßve_öode
(
öode
 *öode, 
tux3_üâr_d©a
 *
id©a
,

678 
dñè
)

680 if(
DEBUG_MODE_K
==1)

682 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

685 
	`as£π
(
	`tux_öode
(
öode
)->
öum
 !
TUX_VOLMAP_INO
 &&

686 
	`tux_öode
(
öode
)->
öum
 !
TUX_LOGMAP_INO
 &&

687 
	`tux_öode
(
öode
)->
öum
 !
TUX_INVALID_INO
);

688 
	`tux_öode
(
öode
)->
öum
) {

689 
TUX_BITMAP_INO
:

690 
TUX_VTABLE_INO
:

691 
TUX_ATABLE_INO
:

695  
	`ßve_öode
(
öode
, 
id©a
, 
dñè
);

696 
	}
}

699 
	$tux3_åunˇã
(
öode
 *öode, 
loff_t
 
√wsize
)

701 if(
DEBUG_MODE_K
==1)

703 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

706 #ifde‡
__KERNEL__


707 c⁄° 
bound¨y
 = 
PAGE_CACHE_SIZE
;

709 c⁄° 
bound¨y
 = 
	`tux_sb
(
öode
->
i_sb
)->
blocksize
;

711 
loff_t
 
ﬁdsize
, 
hﬁebegö
;

712 
is_ex∑nd
, 
îr
;

714 i‡(
√wsize
 =
öode
->
i_size
)

719 
îr
 = 0;

720 
ﬁdsize
 = 
öode
->
i_size
;

721 
is_ex∑nd
 = 
√wsize
 > 
ﬁdsize
;

723 i‡(!
is_ex∑nd
) {

724 
îr
 = 
	`tux3_åunˇã_∑πül_block
(
öode
, 
√wsize
);

725 i‡(
îr
)

726 
îr‹
;

730 
	`i_size_wrôe
(
öode
, 
√wsize
);

732 
hﬁebegö
 = 
	`round_up
(
√wsize
, 
bound¨y
);

733 #ifde‡
__KERNEL__


736 
	`tux3_åunˇã_öode_∑ges_ønge
(
öode
->
i_m≠pög
, 
hﬁebegö
, 
LLONG_MAX
);

738 
	`åunˇã_∑geˇche
(
öode
, 
ﬁdsize
, 
hﬁebegö
);

740 i‡(!
is_ex∑nd
) {

741 
îr
 = 
	`tux3_add_åunˇã_hﬁe
(
öode
, 
√wsize
);

742 i‡(
îr
)

743 
îr‹
;

746 
öode
->
i_mtime
 = inode->
i_˘ime
 = 
	`gëtime
();

747 
	`tux3_m¨k_öode_dúty
(
öode
);

748 
îr‹
:

750  
îr
;

751 
	}
}

754 
	$purge_öode
(
öode
 *inode)

756 if(
DEBUG_MODE_K
==1)

758 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

760 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

761 
båì
 *
ôªe
 = 
	`ôªe_båì
(
sb
);

762 
ª£rved_öum
 = 
	`tux_öode
(
öode
)->
öum
 < 
TUX_NORMAL_INO
;

764 
	`down_wrôe
(&
ôªe
->
lock
);

770 i‡(!
ª£rved_öum
) {

771 
	`as£π
(
sb
->
‰ìöodes
 < 
MAX_INODES
);

772 
sb
->
‰ìöodes
++;

775 i‡(
	`is_de„r_Æloc_öum
(
öode
)) {

776 
	`dñ_de„r_Æloc_öum
(
öode
);

777 
	`up_wrôe
(&
ôªe
->
lock
);

780 
	`up_wrôe
(&
ôªe
->
lock
);

787 i‡(!
ª£rved_öum
) {

788 
	`as£π
(
	`be64_to_˝u
(
sb
->
su≥r
.
u£döodes
Ë> 
TUX_NORMAL_INO
);

789 
	`be64_add_˝u
(&
sb
->
su≥r
.
u£döodes
, -1);

793  
	`båì_ch›
(
ôªe
, 
	`tux_öode
(
öode
)->
öum
, 1);

794 
	}
}

796 
	$tux3_åunˇã_blocks
(
öode
 *öode, 
loff_t
 
√wsize
)

798 if(
DEBUG_MODE_K
==1)

800 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

802 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

803 
tuxkey_t
 
ödex
 = (
√wsize
 + 
sb
->
blockmask
Ë>> sb->
blockbôs
;

805  
	`båì_ch›
(&
	`tux_öode
(
öode
)->
båì
, 
ödex
, 
TUXKEY_LIMIT
);

806 
	}
}

808 
	$tux3_purge_öode
(
öode
 *öode, 
tux3_üâr_d©a
 *
id©a
,

809 
dñè
)

811 if(
DEBUG_MODE_K
==1)

813 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

815 
îr
, 
has_hﬁe
;

823 
has_hﬁe
 = 
	`tux3_˛ór_hﬁe
(
öode
, 
dñè
);

833 i‡(
id©a
->
i_size
 || 
has_hﬁe
) {

834 
id©a
->
i_size
 = 0;

835 
îr
 = 
	`tux3_åunˇã_blocks
(
öode
, 0);

836 i‡(
îr
)

837 
îr‹
;

839 
îr
 = 
	`‰ì_em±y_båì
(&
	`tux_öode
(
öode
)->
båì
);

840 i‡(
îr
)

841 
îr‹
;

843 
îr
 = 
	`xˇche_ªmove_Æl
(
öode
);

844 i‡(
îr
)

845 
îr‹
;

847 
îr
 = 
	`purge_öode
(
öode
);

849 
îr‹
:

850  
îr
;

851 
	}
}

856 
	$tux3_dr›_öode
(
öode
 *inode)

858 if(
DEBUG_MODE_K
==1)

860 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

862 i‡(!
	`is_bad_öode
(
öode
)) {

864 i‡(
öode
->
i_∆ök
 == 0)

865 
	`tux3_m¨k_öode_to_dñëe
(
öode
);

868 i‡(
öode
->
i_°©e
 & 
I_DIRTY
) {

869 #ifde‡
__KERNEL__


871 i‡(!(
öode
->
i_sb
->
s_Êags
 & 
MS_ACTIVE
)) {

872 
	`tux3_îr
(
	`tux_sb
(
öode
->
i_sb
),

874 
öode
, 
	`tux_öode
(öode)->
öum
,

875 
öode
->
i_°©e
,

876 
	`tux_öode
(
öode
)->
Êags
);

877 
	`as£π
(
öode
->
i_sb
->
s_Êags
 & 
MS_ACTIVE
);

883  
	`gíîic_dr›_öode
(
öode
);

884 
	}
}

889 
	$tux3_evi˘_öode
(
öode
 *inode)

891 if(
DEBUG_MODE_K
==1)

893 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

895 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

896 *
±r
;

911 
	`ch™ge_begö_©omic_√°ed
(
sb
, &
±r
);

912 #ifde‡
__KERNEL__


914 
	`åunˇã_öode_∑ges
(&
öode
->
i_d©a
, 0);

916 
	`åunˇã_öode_∑ges
(
	`m≠pög
(
öode
), 0);

918 
	`ch™ge_íd_©omic_√°ed
(
sb
, 
±r
);

931 
	`‰ì_f‹ked_buf„rs
(
sb
, 
öode
, 1);

933 
	`˛ór_öode
(
öode
);

934 
	`‰ì_xˇche
(
öode
);

935 
	}
}

937 #ifde‡
__KERNEL__


939 
	$igë_if_dúty
(
öode
 *inode)

941 if(
DEBUG_MODE_K
==1)

943 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

945 
	`as£π
(!(
öode
->
i_°©e
 & 
I_FREEING
));

946 i‡(
	`©omic_ªad
(&
öode
->
i_cou¡
)) {

947 
	`©omic_öc
(&
öode
->
i_cou¡
);

951 
	`as£π
(
öode
->
i_°©e
 & 
I_DIRTY
);

952 
	`©omic_öc
(&
öode
->
i_cou¡
);

953 
	}
}

956 
	$tux3_sync_fûe
(
fûe
 *fûe, 
loff_t
 
°¨t
,Üoff_à
íd
, 
d©async
)

958 if(
DEBUG_MODE_K
==1)

960 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

962 
öode
 *öodê
fûe
->
f_m≠pög
->
ho°
;

963 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

966 
¥öt_⁄˚
;

967 i‡(!
¥öt_⁄˚
) {

968 
¥öt_⁄˚
++;

969 
	`tux3_w¨n
(
sb
,

971 
°¨t
, 
íd
, 
d©async
);

974  
	`f‹˚_dñè
(
sb
);

975 
	}
}

977 
	$tux3_gë©å
(
vfsmou¡
 *
m¡
, 
díåy
 *díåy, 
k°©
 *
°©
)

979 if(
DEBUG_MODE_K
==1)

981 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

983 
öode
 *öodê
díåy
->
d_öode
;

984 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

986 
	`gíîic_fûœâr
(
öode
, 
°©
);

987 
°©
->
öo
 = 
	`tux_öode
(
öode
)->
öum
;

1001 
°©
->
blocks
 = 
	`ALIGN
(
öode
->
i_size
, 
sb
->
blocksize
) >> 9;

1003 
	}
}

1005 
	$tux3_£èâr
(
díåy
 *díåy, 
üâr
 *iattr)

1007 if(
DEBUG_MODE_K
==1)

1009 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1011 
öode
 *öodê
díåy
->
d_öode
;

1012 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

1013 
îr
, 
√ed_åunˇã
 = 0;

1015 
îr
 = 
	`öode_ch™ge_ok
(
öode
, 
üâr
);

1016 i‡(
îr
)

1017  
îr
;

1019 i‡(
üâr
->
ü_vÆid
 & 
ATTR_SIZE
 && i©å->
ü_size
 !
öode
->
i_size
) {

1020 
	`öode_dio_waô
(
öode
);

1021 
√ed_åunˇã
 = 1;

1024 
	`ch™ge_begö
(
sb
);

1026 
	`tux3_üârdúty
(
öode
);

1028 i‡(
√ed_åunˇã
) {

1029 
îr
 = 
	`tux3_åunˇã
(
öode
, 
üâr
->
ü_size
);

1030 i‡(
îr
)

1031  
îr
;

1034 
	`£èâr_c›y
(
öode
, 
üâr
);

1035 
	`tux3_m¨k_öode_dúty
(
öode
);

1037 
	`ch™ge_íd
(
sb
);

1040 
	}
}

1042 
	~"öode_vf¶ib.c
"

1044 c⁄° 
fûe_›î©i⁄s
 
	gtux_fûe_f›s
 = {

1045 .
Œ£ek
 = 
gíîic_fûe_Œ£ek
,

1046 .
	gªad
 = 
do_sync_ªad
,

1047 .
	gwrôe
 = 
do_sync_wrôe
,

1048 .
	gaio_ªad
 = 
gíîic_fûe_aio_ªad
,

1049 .
	gaio_wrôe
 = 
tux3_fûe_aio_wrôe
,

1051 #ifde‡
CONFIG_COMPAT


1054 .
	gmm≠
 = 
gíîic_fûe_mm≠
,

1055 .
	g›í
 = 
gíîic_fûe_›í
,

1056 .
	gfsync
 = 
tux3_sync_fûe
,

1057 .
	g•li˚_ªad
 = 
gíîic_fûe_•li˚_ªad
,

1058 .
	g•li˚_wrôe
 = 
tux3_fûe_•li˚_wrôe
,

1061 c⁄° 
öode_›î©i⁄s
 
	gtux_fûe_i›s
 = {

1063 .
£èâr
 = 
tux3_£èâr
,

1064 .
	ggë©å
 = 
tux3_gë©å


1065 #ifde‡
CONFIG_EXT4DEV_FS_XATTR


1075 c⁄° 
öode_›î©i⁄s
 
	gtux_•ecül_i›s
 = {

1077 .
£èâr
 = 
tux3_£èâr
,

1078 .
	ggë©å
 = 
tux3_gë©å


1079 #ifde‡
CONFIG_EXT4DEV_FS_XATTR


1087 c⁄° 
öode_›î©i⁄s
 
	gtux_symlök_i›s
 = {

1088 .
ªadlök
 = 
gíîic_ªadlök
,

1089 .
	gfﬁlow_lök
 = 
∑ge_fﬁlow_lök_light
,

1090 .
	gput_lök
 = 
∑ge_put_lök
,

1091 .
	g£èâr
 = 
tux3_£èâr
,

1092 .
	ggë©å
 = 
tux3_gë©å
,

1101 
	$tux_£tup_öode
(
öode
 *inode)

1103 if(
DEBUG_MODE_K
==1)

1105 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1107 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

1109 
	`as£π
(
	`tux_öode
(
öode
)->
öum
 !
TUX_INVALID_INO
);

1111 
	`tux3_£t_m≠pög_bdi
(
öode
);

1116 
öode
->
i_mode
 & 
S_IFMT
) {

1117 
S_IFSOCK
:

1118 
S_IFIFO
:

1119 
S_IFBLK
:

1120 
S_IFCHR
:

1121 
öode
->
i_›
 = &
tux_•ecül_i›s
;

1122 
	`öô_•ecül_öode
(
öode
, inode->
i_mode
, inode->
i_rdev
);

1124 
S_IFREG
:

1125 
öode
->
i_›
 = &
tux_fûe_i›s
;

1126 
öode
->
i_f›
 = &
tux_fûe_f›s
;

1127 
öode
->
i_m≠pög
->
a_›s
 = &
tux_fûe_a›s
;

1129 
	`tux_öode
(
öode
)->
io
 = 
tux3_fûem≠_ªdúe˘_io
;

1131 
S_IFDIR
:

1132 
öode
->
i_›
 = &
tux_dú_i›s
;

1133 
öode
->
i_f›
 = &
tux_dú_f›s
;

1134 
öode
->
i_m≠pög
->
a_›s
 = &
tux_blk_a›s
;

1135 
	`tux_öode
(
öode
)->
io
 = 
tux3_fûem≠_ªdúe˘_io
;

1136 
	`m≠pög_£t_gÂ_mask
(
öode
->
i_m≠pög
, 
GFP_USER
);

1138 
S_IFLNK
:

1139 
öode
->
i_›
 = &
tux_symlök_i›s
;

1140 
öode
->
i_m≠pög
->
a_›s
 = &
tux_symlök_a›s
;

1141 
	`tux_öode
(
öode
)->
io
 = 
tux3_fûem≠_ªdúe˘_io
;

1145 
öum_t
 
öum
 = 
	`tux_öode
(
öode
)->inum;

1146 
gÂ_t
 
gÂ_mask
 = 
GFP_USER
;

1149 
öum
) {

1150 
TUX_BITMAP_INO
:

1151 
TUX_VTABLE_INO
:

1152 
TUX_ATABLE_INO
:

1154 
öode
->
i_size
 = 
	`vfs_sb
(
sb
)->
s_maxbyãs
;

1155 
öode
->
i_m≠pög
->
a_›s
 = &
tux_blk_a›s
;

1156 
	`tux_öode
(
öode
)->
io
 = 
tux3_fûem≠_ªdúe˘_io
;

1158 
	`tux3_£t_öode_no_Êush
(
öode
);

1160 
TUX_VOLMAP_INO
:

1161 
TUX_LOGMAP_INO
:

1162 
öode
->
i_size
 = (
loff_t
)
sb
->
vﬁblocks
 << sb->
blockbôs
;

1163 
öode
->
i_m≠pög
->
a_›s
 = &
tux_vﬁ_a›s
;

1164 i‡(
öum
 =
TUX_VOLMAP_INO
)

1165 
	`tux_öode
(
öode
)->
io
 = 
tux3_vﬁm≠_io
;

1167 
	`tux_öode
(
öode
)->
io
 = 
tux3_logm≠_io
;

1169 
	`tux3_£t_öode_no_Êush
(
öode
);

1172 
	`BUG
();

1177 
öum
) {

1178 
TUX_BITMAP_INO
:

1179 
TUX_VOLMAP_INO
:

1180 
TUX_LOGMAP_INO
:

1182 
gÂ_mask
 &~
__GFP_FS
;

1185 
	`m≠pög_£t_gÂ_mask
(
öode
->
i_m≠pög
, 
gÂ_mask
);

1196 i‡(
öum
 =
TUX_BITMAP_INO
 || inum =
TUX_VOLMAP_INO
)

1197 
	`tux3_£t_öode_Æways_dúty
(
öode
);

1201 
	`tux3_fs_îr‹
(
sb
, "Unknown mode: inum %Lx, mode %07ho",

1202 
	`tux_öode
(
öode
)->
öum
, inode->
i_mode
);

1205 
	}
}

	@kernel/inode_vfslib.c

9 
	~<löux/•li˚.h
>

10 
	~<löux/aio.h
>

16 
ssize_t
 
	$tux3_fûe_aio_wrôe
(
kiocb
 *
iocb
, c⁄° 
iovec
 *
iov
,

17 
ƒ_£gs
, 
loff_t
 
pos
)

19 if(
DEBUG_MODE_K
==1)

21 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

23 
fûe
 *fûê
iocb
->
ki_fûp
;

24 
öode
 *öodê
fûe
->
f_m≠pög
->
ho°
;

25 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

26 
blk_∂ug
 
∂ug
;

27 
ssize_t
 
ªt
;

29 
	`BUG_ON
(
iocb
->
ki_pos
 !
pos
);

31 
	`muãx_lock
(&
öode
->
i_muãx
);

32 
	`blk_°¨t_∂ug
(&
∂ug
);

34 
	`ch™ge_begö
(
sb
);

36 
	`tux3_üârdúty
(
öode
);

37 
ªt
 = 
	`__gíîic_fûe_aio_wrôe
(
iocb
, 
iov
, 
ƒ_£gs
, &iocb->
ki_pos
);

38 
	`ch™ge_íd_if_√eded
(
sb
);

39 
	`muãx_u∆ock
(&
öode
->
i_muãx
);

41 i‡(
ªt
 > 0 ||Ñë =-
EIOCBQUEUED
) {

42 
ssize_t
 
îr
;

44 
îr
 = 
	`gíîic_wrôe_sync
(
fûe
, 
pos
, 
ªt
);

45 i‡(
îr
 < 0 && 
ªt
 > 0)

46 
ªt
 = 
îr
;

48 
	`blk_föish_∂ug
(&
∂ug
);

49  
ªt
;

50 
	}
}

56 
ssize_t
 
	$tux3_fûe_•li˚_wrôe
(
pùe_öode_öfo
 *
pùe
,

57 
fûe
 *
out
, 
loff_t
 *
µos
,

58 
size_t
 
Àn
, 
Êags
)

60 if(
DEBUG_MODE_K
==1)

62 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

64 
addªss_•a˚
 *
m≠pög
 = 
out
->
f_m≠pög
;

65 
öode
 *öodê
m≠pög
->
ho°
;

66 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

67 
•li˚_desc
 
sd
 = {

68 .
tŸÆ_Àn
 = 
Àn
,

69 .
Êags
 = flags,

70 .
pos
 = *
µos
,

71 .
u
.
fûe
 = 
out
,

73 
ssize_t
 
ªt
;

75 
	`sb_°¨t_wrôe
(
öode
->
i_sb
);

77 
	`pùe_lock
(
pùe
);

79 
	`•li˚_‰om_pùe_begö
(&
sd
);

81 
ªt
 = 
	`•li˚_‰om_pùe_√xt
(
pùe
, &
sd
);

82 i‡(
ªt
 <= 0)

85 
	`muãx_lock_√°ed
(&
öode
->
i_muãx
, 
I_MUTEX_CHILD
);

87 
	`ch™ge_begö
(
sb
);

90 
	`tux3_üârdúty
(
öode
);

91 
ªt
 = 
	`fûe_ªmove_suid
(
out
);

92 i‡(!
ªt
) {

93 
ªt
 = 
	`fûe_upd©e_time
(
out
);

94 i‡(!
ªt
)

95 
ªt
 = 
	`•li˚_‰om_pùe_„ed
(
pùe
, &
sd
,

96 
pùe_to_fûe
);

98 
	`ch™ge_íd_if_√eded
(
sb
);

99 
	`muãx_u∆ock
(&
öode
->
i_muãx
);

100 } 
ªt
 > 0);

101 
	`•li˚_‰om_pùe_íd
(
pùe
, &
sd
);

103 
	`pùe_u∆ock
(
pùe
);

105 i‡(
sd
.
num_•li˚d
)

106 
ªt
 = 
sd
.
num_•li˚d
;

108 i‡(
ªt
 > 0) {

109 
îr
;

111 
îr
 = 
	`gíîic_wrôe_sync
(
out
, *
µos
, 
ªt
);

112 i‡(
îr
)

113 
ªt
 = 
îr
;

115 *
µos
 +
ªt
;

116 
	`bÆ™˚_dúty_∑ges_øãlimôed
(
m≠pög
);

118 
	`sb_íd_wrôe
(
öode
->
i_sb
);

120  
ªt
;

121 
	}
}

	@kernel/kcompat.h

1 #i‚de‡
TUX3_KCOMPAT_H


2 
	#TUX3_KCOMPAT_H


	)

4 #ifde‡
__KERNEL__


10 
	~<löux/vîsi⁄.h
>

12 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3,9,0)

13 
ölöe
 
öode
 *
	$fûe_öode
(
fûe
 *file)

15  
fûe
->
f_díåy
->
d_öode
;

16 
	}
}

18 
	#MODULE_ALIAS_FS
(
x
)

	)

	@kernel/link.h

1 #i‚de‡
TUX3_LINK_H


2 
	#TUX3_LINK_H


	)

6 
	slök
 { 
lök
 *
	m√xt
; };

8 
	#LINK_INIT_CIRCULAR
(
«me
Ë{ &“ame), }

	)

9 
	#lök_íåy
(
±r
, 
ty≥
, 
membî
Ë
	`c⁄èöî_of
’å,Åy≥, membî)

	)

11 
	#__lök_íåy
(
±r
, 
ty≥
, 
membî
) \

12 
	`c⁄èöî_of
((
	`ty≥of
(((
ty≥
 *)0)->
membî
Ë*)
±r
,Åy≥, membî)

	)

14 
ölöe
 
	$öô_lök_cúcuœr
(
lök
 *
hód
)

16 
hód
->
√xt
 = head;

17 
	}
}

19 
ölöe
 
	$lök_em±y
(c⁄° 
lök
 *
hód
)

21  
hód
->
√xt
 == head;

22 
	}
}

24 
ölöe
 
	$lök_add
(
lök
 *
node
, lök *
hód
)

26 
node
->
√xt
 = 
hód
->next;

27 
hód
->
√xt
 = 
node
;

28 
	}
}

30 
ölöe
 
	$lök_dñ_√xt
(
lök
 *
node
)

32 
node
->
√xt
 =Çode->next->next;

33 
	}
}

35 
	#lök_f‹_óch_ß„
(
pos
, 
¥ev
, 
n
, 
hód
) \

36 
pos
 = (
hód
)->
√xt
, 
¥ev
 = (hód), 
n
 =Öos->next; \

37 
pos
 !(
hód
); \

38 
¥ev
 = (’ªv->
√xt
 =
n
Ë?Öªv : 
pos
),Öo†n,Ç =Öos->√xt)

	)

42 
	sÊök_hód
 { 
lök
 *
	mèû
; };

44 
	#FLINK_HEAD_INIT
(
«me
Ë{ 
NULL
, }

	)

45 
	#Êök_√xt_íåy
(
hód
, 
ty≥
, 
membî
) \

46 
	`lök_íåy
(
	`Êök_√xt
(
hód
), 
ty≥
, 
membî
)

	)

48 
	#__Êök_√xt_íåy
(
hód
, 
ty≥
, 
membî
) ({ \

49 
lök
 *
√xt
 = 
	`Êök_√xt
(
hód
); \

50 
	`lök_íåy
((
	`ty≥of
(((
ty≥
 *)0)->
membî
Ë*)
√xt
,Åype, member); \

51 })

	)

53 
ölöe
 
	$öô_Êök_hód
(
Êök_hód
 *
hód
)

55 
hód
->
èû
 = 
NULL
;

56 
	}
}

58 
ölöe
 
	$Êök_em±y
(c⁄° 
Êök_hód
 *
hód
)

60  
hód
->
èû
 =
NULL
;

61 
	}
}

63 
ölöe
 
	$Êök_is_œ°
(c⁄° 
Êök_hód
 *
hód
)

65  
	`lök_em±y
(
hód
->
èû
);

66 
	}
}

68 
ölöe
 
lök
 *
	$Êök_√xt
(c⁄° 
Êök_hód
 *
hód
)

70  
hód
->
èû
->
√xt
;

71 
	}
}

73 
ölöe
 
	$Êök_fú°_add
(
lök
 *
node
, 
Êök_hód
 *
hód
)

75 
	`as£π
(
	`Êök_em±y
(
hód
));

76 
	`öô_lök_cúcuœr
(
node
);

77 
hód
->
èû
 = 
node
;

78 
	}
}

80 
ölöe
 
	$Êök_add
(
lök
 *
node
, 
Êök_hód
 *
hód
)

82 
	`lök_add
(
node
, 
hód
->
èû
);

83 
hód
->
èû
 = 
node
;

84 
	}
}

86 
ölöe
 
	$Êök_dñ_√xt
(
Êök_hód
 *
hód
)

88 
	`lök_dñ_√xt
(
hód
->
èû
);

89 
	}
}

91 
ölöe
 
	$Êök_œ°_dñ
(
Êök_hód
 *
hód
)

93 
	`as£π
(
	`Êök_is_œ°
(
hód
));

94 
	`öô_Êök_hód
(
hód
);

95 
	}
}

	@kernel/log.c

7 
	~"tux3.h
"

9 #i‚de‡
åa˚


10 
	#åa˚
 
åa˚_⁄


	)

67 
	glog_size
[] = {

68 [
LOG_BALLOC
] = 11,

69 [
LOG_BFREE
] = 11,

70 [
LOG_BFREE_ON_UNIFY
] = 11,

71 [
LOG_BFREE_RELOG
] = 11,

72 [
LOG_LEAF_REDIRECT
] = 13,

73 [
LOG_LEAF_FREE
] = 7,

74 [
LOG_BNODE_REDIRECT
] = 13,

75 [
LOG_BNODE_ROOT
] = 26,

76 [
LOG_BNODE_SPLIT
] = 15,

77 [
LOG_BNODE_ADD
] = 19,

78 [
LOG_BNODE_UPDATE
] = 19,

79 [
LOG_BNODE_MERGE
] = 13,

80 [
LOG_BNODE_DEL
] = 15,

81 [
LOG_BNODE_ADJUST
] = 19,

82 [
LOG_BNODE_FREE
] = 7,

83 [
LOG_ORPHAN_ADD
] = 9,

84 [
LOG_ORPHAN_DEL
] = 9,

85 [
LOG_FREEBLOCKS
] = 7,

86 [
LOG_UNIFY
] = 1,

87 [
LOG_DELTA
] = 1,

90 
	$log_√xt
(
sb
 *sb)

92 if(
DEBUG_MODE_K
==1)

94 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

97 
sb
->
logbuf
 = 
	`blockgë
(
	`m≠pög
(sb->
logm≠
), sb->
log√xt
++);

98 
sb
->
logpos
 = 
	`bufd©a
(sb->
logbuf
Ë+ (
logblock
);

99 
sb
->
logt›
 = 
	`bufd©a
(sb->
logbuf
Ë+ sb->
blocksize
;

100 
	}
}

102 
	$log_dr›
(
sb
 *sb)

104 if(
DEBUG_MODE_K
==1)

106 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

108 
	`blockput
(
sb
->
logbuf
);

109 
sb
->
logbuf
 = 
NULL
;

110 
sb
->
logt›
 = sb->
logpos
 = 
NULL
;

111 
	}
}

113 
	$log_föish
(
sb
 *sb)

115 if(
DEBUG_MODE_K
==1)

117 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

119 i‡(
sb
->
logbuf
) {

120 
logblock
 *
log
 = 
	`bufd©a
(
sb
->
logbuf
);

121 
	`as£π
(
sb
->
logt›
 >sb->
logpos
);

122 
log
->
byãs
 = 
	`˝u_to_be16
(
sb
->
logpos
 -Üog->
d©a
);

123 
	`mem£t
(
sb
->
logpos
, 0, sb->
logt›
 - sb->logpos);

124 
	`log_dr›
(
sb
);

126 
	}
}

128 
	$log_föish_cy˛e
(
sb
 *sb, 
disˇrd
)

130 if(
DEBUG_MODE_K
==1)

132 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

135 
	`as£π
(
sb
->
logbuf
 =
NULL
);

137 i‡(
disˇrd
) {

138 
buf„r_hód
 *
logbuf
;

139 
i
, 
logcou¡
 = 
sb
->
log√xt
;

142 
i
 = 0; i < 
logcou¡
; i++) {

143 
logbuf
 = 
	`blockgë
(
	`m≠pög
(
sb
->
logm≠
), 
i
);

144 
	`blockput_‰ì
(
sb
, 
logbuf
);

149 
sb
->
log√xt
 = 0;

150 
	}
}

152 *
	$log_begö
(
sb
 *sb, 
byãs
)

154 if(
DEBUG_MODE_K
==1)

156 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

158 
	`as£π
(
	`tux3_undî_backíd
(
sb
));

159 i‡(
sb
->
logpos
 + 
byãs
 > sb->
logt›
) {

160 
	`log_föish
(
sb
);

161 
	`log_√xt
(
sb
);

163 *(
logblock
 *)
	`bufd©a
(
sb
->
logbuf
) = (logblock){

164 .
magic
 = 
	`˝u_to_be16
(
TUX3_MAGIC_LOG
),

168 
	`m¨k_buf„r_dúty_©omic
(
sb
->
logbuf
);

170  
sb
->
logpos
;

171 
	}
}

173 
	$log_íd
(
sb
 *sb, *
pos
)

175 if(
DEBUG_MODE_K
==1)

177 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

179 
sb
->
logpos
 = 
pos
;

180 
	}
}

188 
	$tux3_logm≠_io
(
rw
, 
bufvec
 *bufvec)

190 if(
DEBUG_MODE_K
==1)

192 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

194 
öode
 *
logm≠
 = 
	`bufvec_öode
(
bufvec
);

195 
sb
 *sb = 
	`tux_sb
(
logm≠
->
i_sb
);

196 
cou¡
 = 
	`bufvec_c⁄tig_cou¡
(
bufvec
);

198 
	`as£π
(
rw
 & 
WRITE
);

199 
	`as£π
(
	`bufvec_c⁄tig_ödex
(
bufvec
) == 0);

201 
cou¡
 > 0) {

202 
buf„r_hód
 *
buf„r
;

203 
block_£gmít
 
£g
;

204 
block_t
 
block
, 
limô
;

205 
îr
;

207 
îr
 = 
	`bÆloc_∑πül
(
sb
, 
cou¡
, &
£g
, 1);

208 i‡(
îr
) {

209 
	`as£π
(
îr
);

210  
îr
;

221 
block
 = 
£g
.block;

222 
limô
 = 
£g
.
block
 + seg.
cou¡
;

223 
	`bufvec_buf„r_f‹_óch_c⁄tig
(
buf„r
, 
bufvec
) {

224 
logblock
 *
log
 = 
	`bufd©a
(
buf„r
);

226 
	`as£π
(
log
->
magic
 =
	`˝u_to_be16
(
TUX3_MAGIC_LOG
));

227 
log
->
logchaö
 = 
sb
->
su≥r
.logchain;

229 
	`åa˚
("logchaö %Œd", 
block
);

230 
sb
->
su≥r
.
logchaö
 = 
	`˝u_to_be64
(
block
);

231 
block
++;

232 i‡(
block
 =
limô
)

236 
îr
 = 
	`__tux3_vﬁm≠_io
(
rw
, 
bufvec
, 
£g
.
block
, seg.
cou¡
);

237 i‡(
îr
) {

238 
	`tux3_îr
(
sb
, "logblock wrôêîr‹ (%d)", 
îr
);

239  
îr
;

246 
	`de„r_b‰ì
(&
sb
->
deunify
, 
£g
.
block
, seg.
cou¡
);

249 
	`be32_add_˝u
(&
sb
->
su≥r
.
logcou¡
, 
£g
.
cou¡
);

251 
cou¡
 -
£g
.count;

255 
	}
}

257 
	$log_öã¡
(
sb
 *sb, 
u8
 
öã¡
)

259 if(
DEBUG_MODE_K
==1)

261 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

264 
	`BUILD_BUG_ON
(
	`ARRAY_SIZE
(
log_size
Ë!
LOG_TYPES
);

266 *
d©a
 = 
	`log_begö
(
sb
, 1);

267 *
d©a
++ = 
öã¡
;

268 
	`log_íd
(
sb
, 
d©a
);

269 
	}
}

271 
	$log_u48
(
sb
 *sb, 
u8
 
öã¡
, 
u64
 
v1
)

273 if(
DEBUG_MODE_K
==1)

275 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

277 *
d©a
 = 
	`log_begö
(
sb
, 
log_size
[
öã¡
]);

278 *
d©a
++ = 
öã¡
;

279 
	`log_íd
(
sb
, 
	`ícode48
(
d©a
, 
v1
));

280 
	}
}

282 
	$log_u16_u48
(
sb
 *sb, 
u8
 
öã¡
, 
u16
 
v1
, 
u64
 
v2
)

284 if(
DEBUG_MODE_K
==1)

286 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

288 *
d©a
 = 
	`log_begö
(
sb
, 
log_size
[
öã¡
]);

289 *
d©a
++ = 
öã¡
;

290 
d©a
 = 
	`ícode16
(d©a, 
v1
);

291 
	`log_íd
(
sb
, 
	`ícode48
(
d©a
, 
v2
));

292 
	}
}

294 
	$log_u32_u48
(
sb
 *sb, 
u8
 
öã¡
, 
u32
 
v1
, 
u64
 
v2
)

296 if(
DEBUG_MODE_K
==1)

298 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

300 *
d©a
 = 
	`log_begö
(
sb
, 
log_size
[
öã¡
]);

301 *
d©a
++ = 
öã¡
;

302 
d©a
 = 
	`ícode32
(d©a, 
v1
);

303 
	`log_íd
(
sb
, 
	`ícode48
(
d©a
, 
v2
));

304 
	}
}

306 
	$log_u48_u48
(
sb
 *sb, 
u8
 
öã¡
, 
u64
 
v1
, u64 
v2
)

308 if(
DEBUG_MODE_K
==1)

310 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

312 *
d©a
 = 
	`log_begö
(
sb
, 
log_size
[
öã¡
]);

313 *
d©a
++ = 
öã¡
;

314 
d©a
 = 
	`ícode48
(d©a, 
v1
);

315 
	`log_íd
(
sb
, 
	`ícode48
(
d©a
, 
v2
));

316 
	}
}

318 
	$log_u16_u48_u48
(
sb
 *sb, 
u8
 
öã¡
, 
u16
 
v1
, 
u64
 
v2
, u64 
v3
)

320 if(
DEBUG_MODE_K
==1)

322 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

324 *
d©a
 = 
	`log_begö
(
sb
, 
log_size
[
öã¡
]);

325 *
d©a
++ = 
öã¡
;

326 
d©a
 = 
	`ícode16
(d©a, 
v1
);

327 
d©a
 = 
	`ícode48
(d©a, 
v2
);

328 
	`log_íd
(
sb
, 
	`ícode48
(
d©a
, 
v3
));

329 
	}
}

331 
	$log_u48_u48_u48
(
sb
 *sb, 
u8
 
öã¡
, 
u64
 
v1
, u64 
v2
, u64 
v3
)

333 if(
DEBUG_MODE_K
==1)

335 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

337 *
d©a
 = 
	`log_begö
(
sb
, 
log_size
[
öã¡
]);

338 *
d©a
++ = 
öã¡
;

339 
d©a
 = 
	`ícode48
(d©a, 
v1
);

340 
d©a
 = 
	`ícode48
(d©a, 
v2
);

341 
	`log_íd
(
sb
, 
	`ícode48
(
d©a
, 
v3
));

342 
	}
}

345 
	$log_bÆloc
(
sb
 *sb, 
block_t
 
block
, 
cou¡
)

347 if(
DEBUG_MODE_K
==1)

349 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

352 
	`log_u32_u48
(
sb
, 
LOG_BALLOC
, 
cou¡
, 
block
);

353 
	}
}

356 
	$log_b‰ì
(
sb
 *sb, 
block_t
 
block
, 
cou¡
)

358 if(
DEBUG_MODE_K
==1)

360 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

363 
	`log_u32_u48
(
sb
, 
LOG_BFREE
, 
cou¡
, 
block
);

364 
	}
}

367 
	$log_b‰ì_⁄_unify
(
sb
 *sb, 
block_t
 
block
, 
cou¡
)

369 if(
DEBUG_MODE_K
==1)

371 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

374 
	`log_u32_u48
(
sb
, 
LOG_BFREE_ON_UNIFY
, 
cou¡
, 
block
);

375 
	}
}

378 
	$log_b‰ì_ªlog
(
sb
 *sb, 
block_t
 
block
, 
cou¡
)

380 if(
DEBUG_MODE_K
==1)

382 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

385 
	`log_u32_u48
(
sb
, 
LOG_BFREE_RELOG
, 
cou¡
, 
block
);

386 
	}
}

392 
	$log_Àaf_ªdúe˘
(
sb
 *sb, 
block_t
 
ﬁdblock
, block_à
√wblock
)

394 if(
DEBUG_MODE_K
==1)

396 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

398 
	`log_u48_u48
(
sb
, 
LOG_LEAF_REDIRECT
, 
ﬁdblock
, 
√wblock
);

399 
	}
}

402 
	$log_Àaf_‰ì
(
sb
 *sb, 
block_t
 
Àaf
)

404 if(
DEBUG_MODE_K
==1)

406 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

408 
	`log_u48
(
sb
, 
LOG_LEAF_FREE
, 
Àaf
);

409 
	}
}

416 
	$log_bnode_ªdúe˘
(
sb
 *sb, 
block_t
 
ﬁdblock
, block_à
√wblock
)

418 if(
DEBUG_MODE_K
==1)

420 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

422 
	`log_u48_u48
(
sb
, 
LOG_BNODE_REDIRECT
, 
ﬁdblock
, 
√wblock
);

423 
	}
}

430 
	$log_bnode_roŸ
(
sb
 *sb, 
block_t
 
roŸ
, 
cou¡
,

431 
block_t
 
À·
, block_à
right
, 
tuxkey_t
 
rkey
)

433 if(
DEBUG_MODE_K
==1)

435 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

437 *
d©a
 = 
	`log_begö
(
sb
, 
log_size
[
LOG_BNODE_ROOT
]);

438 
	`as£π
(
cou¡
 == 1 || count == 2);

439 *
d©a
++ = 
LOG_BNODE_ROOT
;

440 *
d©a
++ = 
cou¡
;

441 
d©a
 = 
	`ícode48
(d©a, 
roŸ
);

442 
d©a
 = 
	`ícode48
(d©a, 
À·
);

443 
d©a
 = 
	`ícode48
(d©a, 
right
);

444 
	`log_íd
(
sb
, 
	`ícode48
(
d©a
, 
rkey
));

445 
	}
}

452 
	$log_bnode_•lô
(
sb
 *sb, 
block_t
 
§c
, 
pos
, block_à
d°
)

454 if(
DEBUG_MODE_K
==1)

456 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

458 
	`log_u16_u48_u48
(
sb
, 
LOG_BNODE_SPLIT
, 
pos
, 
§c
, 
d°
);

459 
	}
}

465 
	$log_bnode_add
(
sb
 *sb, 
block_t
 
∑ª¡
, block_à
chûd
, 
tuxkey_t
 
key
)

467 if(
DEBUG_MODE_K
==1)

469 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

471 
	`log_u48_u48_u48
(
sb
, 
LOG_BNODE_ADD
, 
∑ª¡
, 
chûd
, 
key
);

472 
	}
}

478 
	$log_bnode_upd©e
(
sb
 *sb, 
block_t
 
∑ª¡
, block_à
chûd
, 
tuxkey_t
 
key
)

480 if(
DEBUG_MODE_K
==1)

482 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

484 
	`log_u48_u48_u48
(
sb
, 
LOG_BNODE_UPDATE
, 
∑ª¡
, 
chûd
, 
key
);

485 
	}
}

493 
	$log_bnode_mîge
(
sb
 *sb, 
block_t
 
§c
, block_à
d°
)

495 if(
DEBUG_MODE_K
==1)

497 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

499 
	`log_u48_u48
(
sb
, 
LOG_BNODE_MERGE
, 
§c
, 
d°
);

500 
	}
}

506 
	$log_bnode_dñ
(
sb
 *sb, 
block_t
 
bnode
, 
tuxkey_t
 
key
, 
cou¡
)

508 if(
DEBUG_MODE_K
==1)

510 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

512 
	`log_u16_u48_u48
(
sb
, 
LOG_BNODE_DEL
, 
cou¡
, 
bnode
, 
key
);

513 
	}
}

519 
	$log_bnode_adju°
(
sb
 *sb, 
block_t
 
bnode
, 
tuxkey_t
 
‰om
,Åuxkey_à
to
)

521 if(
DEBUG_MODE_K
==1)

523 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

525 
	`log_u48_u48_u48
(
sb
, 
LOG_BNODE_ADJUST
, 
bnode
, 
‰om
, 
to
);

526 
	}
}

533 
	$log_bnode_‰ì
(
sb
 *sb, 
block_t
 
bnode
)

535 if(
DEBUG_MODE_K
==1)

537 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

539 
	`log_u48
(
sb
, 
LOG_BNODE_FREE
, 
bnode
);

540 
	}
}

546 
	$log_‹ph™_add
(
sb
 *sb, 
vîsi⁄
, 
tuxkey_t
 
öum
)

548 if(
DEBUG_MODE_K
==1)

550 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

552 
	`log_u16_u48
(
sb
, 
LOG_ORPHAN_ADD
, 
vîsi⁄
, 
öum
);

553 
	}
}

559 
	$log_‹ph™_dñ
(
sb
 *sb, 
vîsi⁄
, 
tuxkey_t
 
öum
)

561 if(
DEBUG_MODE_K
==1)

563 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

565 
	`log_u16_u48
(
sb
, 
LOG_ORPHAN_DEL
, 
vîsi⁄
, 
öum
);

566 
	}
}

569 
	$log_‰ìblocks
(
sb
 *sb, 
block_t
 
‰ìblocks
)

571 if(
DEBUG_MODE_K
==1)

573 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

575 
	`log_u48
(
sb
, 
LOG_FREEBLOCKS
, 
‰ìblocks
);

576 
	}
}

579 
	$log_unify
(
sb
 *sb)

581 if(
DEBUG_MODE_K
==1)

583 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

585 
	`log_öã¡
(
sb
, 
LOG_UNIFY
);

586 
	}
}

589 
	$log_dñè
(
sb
 *sb)

591 if(
DEBUG_MODE_K
==1)

593 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

595 
	`log_öã¡
(
sb
, 
LOG_DELTA
);

596 
	}
}

605 
ölöe
 
lök
 *
	$∑ge_lök
(
∑ge
 *page)

607 if(
DEBUG_MODE_K
==1)

609 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

611  (*)&
∑ge
->
¥iv©e
;

612 
	}
}

614 
	$°ash_öô
(
°ash
 *stash)

616 if(
DEBUG_MODE_K
==1)

618 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

620 
	`öô_Êök_hód
(&
°ash
->
hód
);

621 
°ash
->
pos
 = sèsh->
t›
 = 
NULL
;

622 
	}
}

625 
	$°ash_vÆue
(
°ash
 *°ash, 
u64
 
vÆue
)

627 if(
DEBUG_MODE_K
==1)

629 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

631 i‡(
°ash
->
pos
 =°ash->
t›
) {

632 
∑ge
 *∑gê
	`Æloc_∑ge
(
GFP_NOFS
);

633 i‡(!
∑ge
)

634  -
ENOMEM
;

635 
°ash
->
t›
 = 
	`∑ge_addªss
(
∑ge
Ë+ 
PAGE_SIZE
;

636 
°ash
->
pos
 = 
	`∑ge_addªss
(
∑ge
);

637 i‡(!
	`Êök_em±y
(&
°ash
->
hód
))

638 
	`Êök_add
(
	`∑ge_lök
(
∑ge
), &
°ash
->
hód
);

640 
	`Êök_fú°_add
(
	`∑ge_lök
(
∑ge
), &
°ash
->
hód
);

642 *
°ash
->
pos
++ = 
vÆue
;

644 
	}
}

647 
	$em±y_°ash
(
°ash
 *stash)

649 if(
DEBUG_MODE_K
==1)

651 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

653 
Êök_hód
 *
hód
 = &
°ash
->head;

655 i‡(!
	`Êök_em±y
(
hód
)) {

656 
∑ge
 *page;

658 
∑ge
 = 
	`__Êök_√xt_íåy
(
hód
, ∑ge, 
¥iv©e
);

659 i‡(
	`Êök_is_œ°
(
hód
))

661 
	`Êök_dñ_√xt
(
hód
);

662 
	`__‰ì_∑ge
(
∑ge
);

664 
	`__‰ì_∑ge
(
∑ge
);

665 
	`°ash_öô
(
°ash
);

667 
	}
}

673 
	$un°ash
(
sb
 *sb, 
°ash
 *°ash, 
un°ash_t
 
a˘‹
)

675 if(
DEBUG_MODE_K
==1)

677 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

679 
Êök_hód
 *
hód
 = &
°ash
->head;

680 
∑ge
 *page;

682 i‡(
	`Êök_em±y
(
hód
))

685 
∑ge
 = 
	`__Êök_√xt_íåy
(
hód
, ∑ge, 
¥iv©e
);

686 
u64
 *
vec
 = 
	`∑ge_addªss
(
∑ge
);

687 
u64
 *
t›
 = 
	`∑ge_addªss
(
∑ge
Ë+ 
PAGE_SIZE
;

689 i‡(
t›
 =
°ash
->top)

690 
t›
 = 
°ash
->
pos
;

691 ; 
vec
 < 
t›
; vec++) {

692 
îr
;

693 i‡((
îr
 = 
	`a˘‹
(
sb
, *
vec
)))

694  
îr
;

696 i‡(
	`Êök_is_œ°
(
hód
))

698 
	`Êök_dñ_√xt
(
hód
);

699 
	`__‰ì_∑ge
(
∑ge
);

701 
°ash
->
pos
 = 
	`∑ge_addªss
(
∑ge
);

703 
	}
}

708 
	$°ash_wÆk
(
sb
 *sb, 
°ash
 *°ash, 
un°ash_t
 
a˘‹
)

710 if(
DEBUG_MODE_K
==1)

712 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

714 
Êök_hód
 *
hód
 = &
°ash
->head;

715 
∑ge
 *page;

717 i‡(
	`Êök_em±y
(
hód
))

720 
lök
 *lök, *
fú°
;

721 
lök
 = 
fú°
 = 
	`Êök_√xt
(
hód
);

723 
∑ge
 = 
	`__lök_íåy
(
lök
, ∑ge, 
¥iv©e
);

724 
u64
 *
vec
 = 
	`∑ge_addªss
(
∑ge
);

725 
u64
 *
t›
 = 
	`∑ge_addªss
(
∑ge
Ë+ 
PAGE_SIZE
;

727 i‡(
t›
 =
°ash
->top)

728 
t›
 = 
°ash
->
pos
;

729 ; 
vec
 < 
t›
; vec++) {

730 
îr
;

731 i‡((
îr
 = 
	`a˘‹
(
sb
, *
vec
)))

732  
îr
;

735 
lök
 =Üök->
√xt
;

736 } 
lök
 !
fú°
);

739 
	}
}

743 
	$de„r_b‰ì
(
°ash
 *
de‰ì
, 
block_t
 
block
, 
cou¡
)

745 if(
DEBUG_MODE_K
==1)

747 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

749 c⁄° 
limô
 = 
ULLONG_MAX
 >> 48;

755 
cou¡
) {

756 
c
 = 
	`mö
(
cou¡
, 
limô
);

757 
îr
;

759 
îr
 = 
	`°ash_vÆue
(
de‰ì
, ((
u64
)
c
 << 48Ë+ 
block
);

760 i‡(
îr
)

761  
îr
;

763 
cou¡
 -
c
;

764 
block
 +
c
;

768 
	}
}

770 
	$de°roy_de„r_b‰ì
(
°ash
 *
de‰ì
)

772 if(
DEBUG_MODE_K
==1)

774 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

776 
	`em±y_°ash
(
de‰ì
);

777 
	}
}

	@kernel/namei.c

8 
	~"tux3.h
"

10 
díåy
 *
	$tux3_lookup
(
öode
 *
dú
, 
díåy
 *dentry,

11 
Êags
)

13 if(
DEBUG_MODE_K
==1)

15 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

17 
sb
 *sb = 
	`tux_sb
(
dú
->
i_sb
);

18 
buf„r_hód
 *
buf„r
;

19 
öode
 *inode;

20 
tux_dúít
 *
íåy
;

21 
öum_t
 
öum
;

23 
íåy
 = 
	`tux_föd_dúít
(
dú
, &
díåy
->
d_«me
, &
buf„r
);

24 i‡(
	`IS_ERR
(
íåy
)) {

25 i‡(
	`PTR_ERR
(
íåy
Ë!-
ENOENT
)

26  
	`ERR_CAST
(
íåy
);

27 
öode
 = 
NULL
;

28 
out
;

30 
öum
 = 
	`be64_to_˝u
(
íåy
->inum);

31 
	`blockput
(
buf„r
);

33 
öode
 = 
	`tux3_igë
(
sb
, 
öum
);

34 i‡(
	`IS_ERR
(
öode
Ë&& 
	`PTR_ERR
(öodeË=-
ENOENT
)

35 
	`tux3_w¨n
(
sb
, "%s: inum %LuÇŸ found", 
__func__
, 
öum
);

36 
out
:

37  
	`d_•li˚_Æüs
(
öode
, 
díåy
);

38 
	}
}

40 
	$__tux_add_dúít
(
öode
 *
dú
, 
díåy
 *dentry,

41 
öode
 *inode)

43 if(
DEBUG_MODE_K
==1)

45 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

47  
	`tux_¸óã_dúít
(
dú
, &
díåy
->
d_«me
, 
	`tux_öode
(
öode
)->
öum
,

48 
öode
->
i_mode
);

49 
	}
}

51 
	$tux_add_dúít
(
öode
 *
dú
, 
díåy
 *dentry,

52 
öode
 *inode)

54 if(
DEBUG_MODE_K
==1)

56 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

58 
îr
 = 
	`__tux_add_dúít
(
dú
, 
díåy
, 
öode
);

59 i‡(!
îr
)

60 
	`d_ö°™tüã
(
díåy
, 
öode
);

61  
îr
;

62 
	}
}

64 
	$__tux3_mknod
(
öode
 *
dú
, 
díåy
 *dentry,

65 
tux_üâr
 *
üâr
, 
dev_t
 
rdev
)

67 if(
DEBUG_MODE_K
==1)

69 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

71 
öode
 *inode;

72 
îr
, 
is_dú
 = 
	`S_ISDIR
(
üâr
->
mode
);

74 i‡(!
	`huge_vÆid_dev
(
rdev
))

75  -
EINVAL
;

77 i‡(
is_dú
 && 
dú
->
i_∆ök
 >
TUX_LINK_MAX
)

78  -
EMLINK
;

80 
	`ch™ge_begö
(
	`tux_sb
(
dú
->
i_sb
));

81 
öode
 = 
	`tux_¸óã_öode
(
dú
, 
üâr
, 
rdev
);

82 
îr
 = 
	`PTR_ERR
(
öode
);

83 i‡(!
	`IS_ERR
(
öode
)) {

84 
îr
 = 
	`tux_add_dúít
(
dú
, 
díåy
, 
öode
);

85 i‡(!
îr
) {

86 
	`u∆ock_√w_öode
(
öode
);

87 i‡(
is_dú
)

88 
	`öode_öc_lök_cou¡
(
dú
);

89 
out
;

91 
	`˛ór_∆ök
(
öode
);

92 
	`tux3_m¨k_öode_dúty
(
öode
);

93 
	`u∆ock_√w_öode
(
öode
);

94 
	`ùut
(
öode
);

96 
out
:

97 
	`ch™ge_íd
(
	`tux_sb
(
dú
->
i_sb
));

98  
îr
;

99 
	}
}

101 #ifde‡
__KERNEL__


102 
	$tux3_mknod
(
öode
 *
dú
, 
díåy
 *díåy, 
umode_t
 
mode
,

103 
dev_t
 
rdev
)

105 if(
DEBUG_MODE_K
==1)

107 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

109 
tux_üâr
 
üâr
 = {

110 .
uid
 = 
	`cuºít_fsuid
(),

111 .
gid
 = 
	`cuºít_fsgid
(),

112 .
mode
 = mode,

115  
	`__tux3_mknod
(
dú
, 
díåy
, &
üâr
, 
rdev
);

116 
	}
}

118 
	$tux3_¸óã
(
öode
 *
dú
, 
díåy
 *díåy, 
umode_t
 
mode
,

119 
boﬁ
 
ex˛
)

121 if(
DEBUG_MODE_K
==1)

123 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

125  
	`tux3_mknod
(
dú
, 
díåy
, 
mode
, 0);

126 
	}
}

128 
	$tux3_mkdú
(
öode
 *
dú
, 
díåy
 *díåy, 
umode_t
 
mode
)

130 if(
DEBUG_MODE_K
==1)

132 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

134  
	`tux3_mknod
(
dú
, 
díåy
, 
S_IFDIR
 | 
mode
, 0);

135 
	}
}

138 
	$tux3_lök
(
díåy
 *
ﬁd_díåy
, 
öode
 *
dú
,

139 
díåy
 *dentry)

141 if(
DEBUG_MODE_K
==1)

143 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

145 
öode
 *öodê
ﬁd_díåy
->
d_öode
;

146 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

147 
îr
;

149 i‡(
öode
->
i_∆ök
 >
TUX_LINK_MAX
)

150  -
EMLINK
;

152 
	`ch™ge_begö
(
sb
);

153 
	`tux3_üârdúty
(
öode
);

154 
öode
->
i_˘ime
 = 
	`gëtime
();

155 
	`öode_öc_lök_cou¡
(
öode
);

156 
	`ihﬁd
(
öode
);

157 
îr
 = 
	`tux_add_dúít
(
dú
, 
díåy
, 
öode
);

158 i‡(
îr
) {

159 
	`öode_dec_lök_cou¡
(
öode
);

160 
	`ùut
(
öode
);

162 
	`ch™ge_íd
(
sb
);

164  
îr
;

165 
	}
}

167 
	$__tux3_symlök
(
öode
 *
dú
, 
díåy
 *dentry,

168 
tux_üâr
 *
üâr
, c⁄° *
sym«me
)

170 if(
DEBUG_MODE_K
==1)

172 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

174 
sb
 *sb = 
	`tux_sb
(
dú
->
i_sb
);

175 
öode
 *inode;

176 
Àn
 = 
	`°æí
(
sym«me
) + 1;

177 
îr
;

180 i‡(
Àn
 > 
PAGE_CACHE_SIZE
)

181  -
ENAMETOOLONG
;

183 
	`ch™ge_begö
(
sb
);

184 
öode
 = 
	`tux_¸óã_öode
(
dú
, 
üâr
, 0);

185 
îr
 = 
	`PTR_ERR
(
öode
);

186 i‡(!
	`IS_ERR
(
öode
)) {

187 
îr
 = 
	`∑ge_symlök
(
öode
, 
sym«me
, 
Àn
);

188 i‡(!
îr
) {

189 
îr
 = 
	`tux_add_dúít
(
dú
, 
díåy
, 
öode
);

190 i‡(!
îr
) {

191 
	`u∆ock_√w_öode
(
öode
);

192 
out
;

195 
	`öode_dec_lök_cou¡
(
öode
);

196 
	`u∆ock_√w_öode
(
öode
);

197 
	`ùut
(
öode
);

199 
out
:

200 
	`ch™ge_íd
(
sb
);

202  
îr
;

203 
	}
}

205 #ifde‡
__KERNEL__


206 
	$tux3_symlök
(
öode
 *
dú
, 
díåy
 *dentry,

207 c⁄° *
sym«me
)

209 if(
DEBUG_MODE_K
==1)

211 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

213 
tux_üâr
 
üâr
 = {

214 .
uid
 = 
	`cuºít_fsuid
(),

215 .
gid
 = 
	`cuºít_fsgid
(),

216 .
mode
 = 
S_IFLNK
 | 
S_IRWXUGO
,

219  
	`__tux3_symlök
(
dú
, 
díåy
, &
üâr
, 
sym«me
);

220 
	}
}

223 
	$tux_dñ_dúít
(
öode
 *
dú
, 
díåy
 *dentry)

225 if(
DEBUG_MODE_K
==1)

227 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

229 
buf„r_hód
 *
buf„r
;

230 
tux_dúít
 *
íåy
;

232 
íåy
 = 
	`tux_föd_dúít
(
dú
, &
díåy
->
d_«me
, &
buf„r
);

233 i‡(
	`IS_ERR
(
íåy
))

234  
	`PTR_ERR
(
íåy
);

236  
	`tux_dñëe_dúít
(
dú
, 
buf„r
, 
íåy
);

237 
	}
}

239 
	$tux3_u∆ök
(
öode
 *
dú
, 
díåy
 *dentry)

241 if(
DEBUG_MODE_K
==1)

243 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

245 
öode
 *öodê
díåy
->
d_öode
;

246 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

248 
	`ch™ge_begö
(
sb
);

249 
îr
 = 
	`tux_dñ_dúít
(
dú
, 
díåy
);

250 i‡(!
îr
) {

251 
	`tux3_üârdúty
(
öode
);

252 
öode
->
i_˘ime
 = 
dú
->i_ctime;

254 
	`öode_dec_lök_cou¡
(
öode
);

256 
	`ch™ge_íd
(
sb
);

258  
îr
;

259 
	}
}

261 
	$tux3_rmdú
(
öode
 *
dú
, 
díåy
 *dentry)

263 if(
DEBUG_MODE_K
==1)

265 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

267 
sb
 *sb = 
	`tux_sb
(
dú
->
i_sb
);

268 
öode
 *öodê
díåy
->
d_öode
;

269 
îr
 = 
	`tux_dú_is_em±y
(
öode
);

271 i‡(!
îr
) {

272 
	`ch™ge_begö
(
sb
);

273 
îr
 = 
	`tux_dñ_dúít
(
dú
, 
díåy
);

274 i‡(!
îr
) {

275 
	`tux3_üârdúty
(
öode
);

276 
öode
->
i_˘ime
 = 
dú
->i_ctime;

279 
	`˛ór_∆ök
(
öode
);

280 
	`tux3_m¨k_öode_dúty_sync
(
öode
);

282 
	`öode_dec_lök_cou¡
(
dú
);

284 
	`ch™ge_íd
(
sb
);

286  
îr
;

287 
	}
}

289 
	$tux3_ª«me
(
öode
 *
ﬁd_dú
, 
díåy
 *
ﬁd_díåy
,

290 
öode
 *
√w_dú
, 
díåy
 *
√w_díåy
)

292 if(
DEBUG_MODE_K
==1)

294 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

296 
öode
 *
ﬁd_öode
 = 
ﬁd_díåy
->
d_öode
;

297 
öode
 *
√w_öode
 = 
√w_díåy
->
d_öode
;

298 
sb
 *sb = 
	`tux_sb
(
ﬁd_öode
->
i_sb
);

299 
buf„r_hód
 *
ﬁd_buf„r
, *
√w_buf„r
, *
˛⁄e
;

300 
tux_dúít
 *
ﬁd_íåy
, *
√w_íåy
;

301 *
ﬁdd©a
;

302 
îr
, 
√w_subdú
 = 0;

303 
dñè
;

305 
ﬁd_íåy
 = 
	`tux_föd_dúít
(
ﬁd_dú
, &
ﬁd_díåy
->
d_«me
, &
ﬁd_buf„r
);

306 i‡(
	`IS_ERR
(
ﬁd_íåy
))

307  
	`PTR_ERR
(
ﬁd_íåy
);

310 
	`as£π
(
	`be64_to_˝u
(
ﬁd_íåy
->
öum
Ë=
	`tux_öode
(
ﬁd_öode
)->inum);

312 
	`ch™ge_begö
(
sb
);

313 
dñè
 = 
	`tux3_gë_cuºít_dñè
();

315 i‡(
√w_öode
) {

316 
ﬁd_is_dú
 = 
	`S_ISDIR
(
ﬁd_öode
->
i_mode
);

317 i‡(
ﬁd_is_dú
) {

318 
îr
 = 
	`tux_dú_is_em±y
(
√w_öode
);

319 i‡(
îr
)

320 
îr‹
;

323 
√w_íåy
 = 
	`tux_föd_dúít
(
√w_dú
, &
√w_díåy
->
d_«me
,

324 &
√w_buf„r
);

325 i‡(
	`IS_ERR
(
√w_íåy
)) {

326 
	`as£π
(
	`PTR_ERR
(
√w_íåy
Ë!-
ENOENT
);

327 
îr
 = 
	`PTR_ERR
(
√w_íåy
);

328 
îr‹
;

335 
ﬁdd©a
 = 
	`bufd©a
(
√w_buf„r
);

336 
˛⁄e
 = 
	`blockdúty
(
√w_buf„r
, 
dñè
);

337 i‡(
	`IS_ERR
(
˛⁄e
)) {

338 
	`as£π
(
	`PTR_ERR
(
˛⁄e
Ë!-
EAGAIN
);

339 
	`blockput
(
√w_buf„r
);

340 
îr
 = 
	`PTR_ERR
(
˛⁄e
);

341 
îr‹
;

343 
√w_íåy
 = 
	`±r_ªdúe˘
“ew_íåy, 
ﬁdd©a
, 
	`bufd©a
(
˛⁄e
));

346 
	`tux_upd©e_dúít
(
√w_dú
, 
˛⁄e
, 
√w_íåy
, 
ﬁd_öode
);

348 
	`tux3_üârdúty
(
√w_öode
);

349 
√w_öode
->
i_˘ime
 = 
√w_dú
->i_ctime;

350 i‡(
ﬁd_is_dú
)

351 
	`dr›_∆ök
(
√w_öode
);

352 
	`öode_dec_lök_cou¡
(
√w_öode
);

354 
√w_subdú
 = 
	`S_ISDIR
(
ﬁd_öode
->
i_mode
Ë&& 
√w_dú
 !
ﬁd_dú
;

355 i‡(
√w_subdú
) {

356 i‡(
√w_dú
->
i_∆ök
 >
TUX_LINK_MAX
) {

357 
îr
 = -
EMLINK
;

358 
îr‹
;

361 
îr
 = 
	`__tux_add_dúít
(
√w_dú
, 
√w_díåy
, 
ﬁd_öode
);

362 i‡(
îr
)

363 
îr‹
;

364 i‡(
√w_subdú
)

365 
	`öode_öc_lök_cou¡
(
√w_dú
);

367 
	`tux3_üârdúty
(
ﬁd_öode
);

368 
ﬁd_öode
->
i_˘ime
 = 
√w_dú
->i_ctime;

369 
	`tux3_m¨k_öode_dúty
(
ﬁd_öode
);

376 i‡(
	`buf„r_f‹ked
(
ﬁd_buf„r
)) {

377 
˛⁄e
 = 
	`blockgë
(
	`m≠pög
(
ﬁd_dú
), 
	`bufödex
(
ﬁd_buf„r
));

378 
	`as£π
(
˛⁄e
);

379 
ﬁd_íåy
 = 
	`±r_ªdúe˘
(ﬁd_íåy, 
	`bufd©a
(
ﬁd_buf„r
),

380 
	`bufd©a
(
˛⁄e
));

381 
	`blockput
(
ﬁd_buf„r
);

382 
ﬁd_buf„r
 = 
˛⁄e
;

384 
îr
 = 
	`tux_dñëe_dúít
(
ﬁd_dú
, 
ﬁd_buf„r
, 
ﬁd_íåy
);

385 i‡(
îr
) {

386 
	`tux3_fs_îr‹
(
sb
, "couldn't delete oldÉntry (%Lu)",

387 
	`tux_öode
(
ﬁd_öode
)->
öum
);

389 
	`öode_öc_lök_cou¡
(
ﬁd_öode
);

391 i‡(!
îr
 && 
√w_subdú
)

392 
	`öode_dec_lök_cou¡
(
ﬁd_dú
);

394 
	`ch™ge_íd
(
sb
);

395  
îr
;

397 
îr‹
:

398 
	`ch™ge_íd
(
sb
);

399 
	`blockput
(
ﬁd_buf„r
);

400  
îr
;

401 
	}
}

403 #ifde‡
__KERNEL__


404 c⁄° 
fûe_›î©i⁄s
 
	gtux_dú_f›s
 = {

405 .
Œ£ek
 = 
gíîic_fûe_Œ£ek
,

406 .
	gªad
 = 
gíîic_ªad_dú
,

407 .
	gªaddú
 = 
tux_ªaddú
,

408 .
	gfsync
 = 
tux3_sync_fûe
,

411 c⁄° 
öode_›î©i⁄s
 
	gtux_dú_i›s
 = {

412 .
¸óã
 = 
tux3_¸óã
,

413 .
	glookup
 = 
tux3_lookup
,

414 .
	glök
 = 
tux3_lök
,

415 .
	gu∆ök
 = 
tux3_u∆ök
,

416 .
	gsymlök
 = 
tux3_symlök
,

417 .
	gmkdú
 = 
tux3_mkdú
,

418 .
	grmdú
 = 
tux3_rmdú
,

419 .
	gmknod
 = 
tux3_mknod
,

420 .
	gª«me
 = 
tux3_ª«me
,

421 .
	g£èâr
 = 
tux3_£èâr
,

422 .
	ggë©å
 = 
tux3_gë©å


	@kernel/orphan.c

19 
	~"tux3.h
"

20 
	~"ûóf.h
"

22 #i‚de‡
åa˚


23 
	#åa˚
 
åa˚_⁄


	)

27 
	s‹ph™
 {

28 
öum_t
 
	möum
;

29 
li°_hód
 
	mli°
;

33 
	#‹ph™_li°_íåy
(
x
Ë
	`li°_íåy
(x, 
tux3_öode
, 
‹ph™_li°
)

	)

35 
	#‹ph™_íåy
(
x
Ë
	`li°_íåy
(x, 
‹ph™
, 
li°
)

	)

37 
‹ph™
 *
	$Æloc_‹ph™
(
öum_t
 
öum
)

39 if(
DEBUG_MODE_K
==1)

41 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

43 
‹ph™
 *‹ph™ = 
	`mÆloc
((orphan));

44 i‡(!
‹ph™
)

45  
	`ERR_PTR
(-
ENOMEM
);

47 
	`INIT_LIST_HEAD
(&
‹ph™
->
li°
);

48 
‹ph™
->
öum
 = inum;

49  
‹ph™
;

50 
	}
}

52 
	$‰ì_‹ph™
(
‹ph™
 *orphan)

54 if(
DEBUG_MODE_K
==1)

56 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

58 
	`‰ì
(
‹ph™
);

59 
	}
}

62 
	$˛ón_‹ph™_li°
(
li°_hód
 *
hód
)

64 if(
DEBUG_MODE_K
==1)

66 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

68 !
	`li°_em±y
(
hód
)) {

69 
‹ph™
 *‹ph™ = 
	`‹ph™_íåy
(
hód
->
√xt
);

70 
	`li°_dñ
(&
‹ph™
->
li°
);

71 
	`‰ì_‹ph™
(
‹ph™
);

73 
	}
}

82 íum { 
	mORPHAN_ATTR
, };

83 
	g‹ph™_asize
[] = {

85 [
ORPHAN_ATTR
] = 0,

88 
	$ﬂâr_ícoded_size
(
båì
 *båì, *
d©a
)

90 if(
DEBUG_MODE_K
==1)

92 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

94  
‹ph™_asize
[
ORPHAN_ATTR
] + 2;

95 
	}
}

97 
	$ﬂâr_ícode
(
båì
 *båì, *
d©a
, *
©ås
, 
size
)

99 if(
DEBUG_MODE_K
==1)

101 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

103 
	`ícode_köd
(
©ås
, 
ORPHAN_ATTR
, 
båì
->
sb
->
vîsi⁄
);

104 
	}
}

106 
ûóf_©å_›s
 
	gﬂâr_›s
 = {

107 .
magic
 = 
˝u_to_be16
(
TUX3_MAGIC_OLEAF
),

108 .
	gícoded_size
 = 
ﬂâr_ícoded_size
,

109 .
	gícode
 = 
ﬂâr_ícode
,

113 
	$tux3_unify_‹ph™_add
(
sb
 *sb, 
li°_hód
 *
‹ph™_add
)

115 if(
DEBUG_MODE_K
==1)

117 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

119 
båì
 *
Ÿªe
 = 
	`Ÿªe_båì
(
sb
);

120 
curs‹
 *cursor;

121 
îr
 = 0;

123 i‡(
	`li°_em±y
(
‹ph™_add
))

126 
	`down_wrôe
(&
Ÿªe
->
lock
);

127 i‡(!
	`has_roŸ
(
Ÿªe
))

128 
îr
 = 
	`Æloc_em±y_båì
(
Ÿªe
);

129 
	`up_wrôe
(&
Ÿªe
->
lock
);

130 i‡(
îr
)

131  
îr
;

134 
curs‹
 = 
	`Æloc_curs‹
(
Ÿªe
, 1);

135 i‡(!
curs‹
)

136  -
ENOMEM
;

138 
	`down_wrôe
(&
curs‹
->
båì
->
lock
);

139 !
	`li°_em±y
(
‹ph™_add
)) {

140 
tux3_öode
 *
tuxnode
 =
	`‹ph™_li°_íåy
(
‹ph™_add
->
√xt
);

142 
	`åa˚
("öum %Lu", 
tuxnode
->
öum
);

145 
îr
 = 
	`båì_¥obe
(
curs‹
, 
tuxnode
->
öum
);

146 i‡(
îr
)

147 
out
;

150 
ûóf_ªq
 
rq
 = {

151 .
key
 = {

152 .
°¨t
 = 
tuxnode
->
öum
,

153 .
Àn
 = 1,

156 
îr
 = 
	`båì_wrôe
(
curs‹
, &
rq
.
key
);

157 
	`ªÀa£_curs‹
(
curs‹
);

158 i‡(
îr
)

159 
out
;

161 
	`li°_dñ_öô
(&
tuxnode
->
‹ph™_li°
);

163 
out
:

164 
	`up_wrôe
(&
curs‹
->
båì
->
lock
);

165 
	`‰ì_curs‹
(
curs‹
);

167  
îr
;

168 
	}
}

171 
	$tux3_unify_‹ph™_dñ
(
sb
 *sb, 
li°_hód
 *
‹ph™_dñ
)

173 if(
DEBUG_MODE_K
==1)

175 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

177 
båì
 *
Ÿªe
 = 
	`Ÿªe_båì
(
sb
);

178 
îr
;

181 !
	`li°_em±y
(
‹ph™_dñ
)) {

182 
‹ph™
 *‹ph™ = 
	`‹ph™_íåy
(
‹ph™_dñ
->
√xt
);

184 
	`åa˚
("öum %Lu", 
‹ph™
->
öum
);

187 
îr
 = 
	`båì_ch›
(
Ÿªe
, 
‹ph™
->
öum
, 1);

188 i‡(
îr
)

189  
îr
;

191 
	`li°_dñ
(&
‹ph™
->
li°
);

192 
	`‰ì_‹ph™
(
‹ph™
);

196 
	}
}

202 
	$tux3_make_‹ph™_add
(
öode
 *inode)

204 if(
DEBUG_MODE_K
==1)

206 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

208 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

209 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

211 
	`åa˚
("öum %Lu", 
tuxnode
->
öum
);

213 
	`as£π
(
	`li°_em±y
(&
tuxnode
->
‹ph™_li°
));

214 
	`li°_add
(&
tuxnode
->
‹ph™_li°
, &
sb
->
‹ph™_add
);

216 
	`log_‹ph™_add
(
sb
, sb->
vîsi⁄
, 
tuxnode
->
öum
);

219 
	}
}

226 
	$add_de„r_‹ph™_dñ
(
sb
 *sb, 
öum_t
 
öum
)

228 if(
DEBUG_MODE_K
==1)

230 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

232 
‹ph™
 *‹ph™ = 
	`Æloc_‹ph™
(
öum
);

233 i‡(
	`IS_ERR
(
‹ph™
))

234  
	`PTR_ERR
(
‹ph™
);

237 
	`li°_add
(&
‹ph™
->
li°
, &
sb
->
‹ph™_dñ
);

240 
	}
}

243 
	$tux3_make_‹ph™_dñ
(
öode
 *inode)

245 if(
DEBUG_MODE_K
==1)

247 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

249 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

250 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

252 
	`åa˚
("öum %Lu", 
tuxnode
->
öum
);

254 i‡(!
	`li°_em±y
(&
tuxnode
->
‹ph™_li°
)) {

256 
	`li°_dñ_öô
(&
tuxnode
->
‹ph™_li°
);

259 
îr
 = 
	`add_de„r_‹ph™_dñ
(
sb
, 
tuxnode
->
öum
);

260 i‡(
îr
) {

262 
	`tux3_w¨n
(
sb
,

264 
tuxnode
->
öum
);

265  
îr
;

269 
	`log_‹ph™_dñ
(
sb
, sb->
vîsi⁄
, 
tuxnode
->
öum
);

272 
	}
}

279 
‹ph™
 *
	$ª∂ay_föd_‹ph™
(
li°_hód
 *
hód
, 
öum_t
 
öum
)

281 if(
DEBUG_MODE_K
==1)

283 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

285 
‹ph™
 *orphan;

286 
	`li°_f‹_óch_íåy
(
‹ph™
, 
hód
, 
li°
) {

287 i‡(
‹ph™
->
öum
 == inum)

288  
‹ph™
;

290  
NULL
;

291 
	}
}

293 
	$ª∂ay_‹ph™_add
(
ª∂ay
 *
Ω
, 
vîsi⁄
, 
öum_t
 
öum
)

295 if(
DEBUG_MODE_K
==1)

297 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

299 
sb
 *sb = 
Ω
->sb;

300 
‹ph™
 *orphan;

302 i‡(
sb
->
vîsi⁄
 != version)

305 
‹ph™
 = 
	`Æloc_‹ph™
(
öum
);

306 i‡(
	`IS_ERR
(
‹ph™
))

307  
	`PTR_ERR
(
‹ph™
);

309 
	`as£π
(!
	`ª∂ay_föd_‹ph™
(&
Ω
->
log_‹ph™_add
, 
öum
));

311 
	`li°_add
(&
‹ph™
->
li°
, &
Ω
->
log_‹ph™_add
);

314 
	}
}

316 
	$ª∂ay_‹ph™_dñ
(
ª∂ay
 *
Ω
, 
vîsi⁄
, 
öum_t
 
öum
)

318 if(
DEBUG_MODE_K
==1)

320 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

322 
sb
 *sb = 
Ω
->sb;

323 
‹ph™
 *orphan;

325 i‡(
sb
->
vîsi⁄
 != version)

328 
‹ph™
 = 
	`ª∂ay_föd_‹ph™
(&
Ω
->
log_‹ph™_add
, 
öum
);

329 i‡(
‹ph™
) {

331 
	`li°_dñ
(&
‹ph™
->
li°
);

332 
	`‰ì_‹ph™
(
‹ph™
);

337  
	`add_de„r_‹ph™_dñ
(
sb
, 
öum
);

338 
	}
}

341 
	$ª∂ay_ùut_‹ph™_öodes
(
sb
 *sb,

342 
li°_hód
 *
‹ph™_ö_Ÿªe
,

343 
de°roy
)

345 if(
DEBUG_MODE_K
==1)

347 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

349 
tux3_öode
 *
tuxnode
, *
ß„
;

352 
	`li°_f‹_óch_íåy_ß„
(
tuxnode
, 
ß„
, &
sb
->
‹ph™_add
, 
‹ph™_li°
) {

353 
öode
 *öodê&
tuxnode
->
vfs_öode
;

355 i‡(!
de°roy
) {

357 
	`£t_∆ök
(
öode
, 1);

358 
	`li°_dñ_öô
(&
tuxnode
->
‹ph™_li°
);

360 
	`ùut
(
öode
);

364 
	`li°_f‹_óch_íåy_ß„
(
tuxnode
, 
ß„
, 
‹ph™_ö_Ÿªe
, 
‹ph™_li°
) {

365 
öode
 *öodê&
tuxnode
->
vfs_öode
;

368 
	`li°_dñ_öô
(&
tuxnode
->
‹ph™_li°
);

370 i‡(!
de°roy
) {

372 
	`£t_∆ök
(
öode
, 1);

374 
	`ùut
(
öode
);

376 
	}
}

378 
	$lﬂd_‹ph™_öode
(
sb
 *sb, 
öum_t
 
öum
, 
li°_hód
 *
hód
)

380 if(
DEBUG_MODE_K
==1)

382 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

384 
öode
 *inode;

386 
öode
 = 
	`tux3_igë
(
sb
, 
öum
);

387 i‡(
	`IS_ERR
(
öode
)) {

388 
îr
 = 
	`PTR_ERR
(
öode
);

389 
	`tux3_îr
(
sb
, "%s: orphan inum %LuÇot found (err %d)",

390 
__func__
, 
öum
, 
îr
);

391  
îr
;

393 
	`as£π
(
öode
->
i_∆ök
 == 0);

395 
	`tux3_m¨k_öode_‹ph™
(
	`tux_öode
(
öode
));

397 
	`li°_add
(&
	`tux_öode
(
öode
)->
‹ph™_li°
, 
hód
);

400 
	}
}

402 
	$lﬂd_íum_öode
(
båì
 *båì, 
öum_t
 
öum
, *
©ås
,

403 
size
, *
d©a
)

405 if(
DEBUG_MODE_K
==1)

407 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

409 
ª∂ay
 *
Ω
 = 
d©a
;

410 
sb
 *sb = 
Ω
->sb;

411 
köd
, 
vîsi⁄
;

413 
	`as£π
(
size
 == 2);

414 
	`decode_köd
(
©ås
, &
köd
, &
vîsi⁄
);

415 i‡(
vîsi⁄
 !
sb
->vîsi⁄ || 
köd
 !
ORPHAN_ATTR
)

419 i‡(
	`ª∂ay_föd_‹ph™
(&
sb
->
‹ph™_dñ
, 
öum
))

422  
	`lﬂd_‹ph™_öode
(
sb
, 
öum
, &
Ω
->
‹ph™_ö_Ÿªe
);

423 
	}
}

426 
	$lﬂd_Ÿªe_‹ph™_öode
(
ª∂ay
 *
Ω
)

428 if(
DEBUG_MODE_K
==1)

430 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

432 
sb
 *sb = 
Ω
->sb;

433 
båì
 *
Ÿªe
 = 
	`Ÿªe_båì
(
sb
);

434 
ûóf_íumøã_cb
 
cb
 = {

435 .
ˇŒback
 = 
lﬂd_íum_öode
,

436 .
d©a
 = 
Ω
,

438 
îr
;

440 i‡(!
	`has_roŸ
(&
sb
->
Ÿªe
))

443 
curs‹
 *curs‹ = 
	`Æloc_curs‹
(
Ÿªe
, 0);

444 i‡(!
curs‹
)

445  -
ENOMEM
;

447 
	`down_wrôe
(&
curs‹
->
båì
->
lock
);

448 
îr
 = 
	`båì_¥obe
(
curs‹
, 0);

449 i‡(
îr
)

450 
îr‹
;

452 
îr
 = 
	`båì_åavî£
(
curs‹
, 0, 
TUXKEY_LIMIT
, 
ûóf_íumî©e
, &
cb
);

455 
	`ªÀa£_curs‹
(
curs‹
);

456 
îr‹
:

457 
	`up_wrôe
(&
curs‹
->
båì
->
lock
);

458 
	`‰ì_curs‹
(
curs‹
);

460  
îr
;

461 
	}
}

464 
	$ª∂ay_lﬂd_‹ph™_öodes
(
ª∂ay
 *
Ω
)

466 if(
DEBUG_MODE_K
==1)

468 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

470 
sb
 *sb = 
Ω
->sb;

471 
li°_hód
 *
hód
;

472 
îr
;

474 
hód
 = &
Ω
->
log_‹ph™_add
;

475 !
	`li°_em±y
(
hód
)) {

476 
‹ph™
 *‹ph™ = 
	`‹ph™_íåy
(
hód
->
√xt
);

478 
îr
 = 
	`lﬂd_‹ph™_öode
(
sb
, 
‹ph™
->
öum
, &sb->
‹ph™_add
);

479 i‡(
îr
)

480 
îr‹
;

482 
	`li°_dñ
(&
‹ph™
->
li°
);

483 
	`‰ì_‹ph™
(
‹ph™
);

486 
îr
 = 
	`lﬂd_Ÿªe_‹ph™_öode
(
Ω
);

487 i‡(
îr
)

488 
îr‹
;

492 
îr‹
:

493 
	`ª∂ay_ùut_‹ph™_öodes
(
sb
, &
Ω
->
‹ph™_ö_Ÿªe
, 0);

494  
îr
;

495 
	}
}

	@kernel/replay.c

6 
	~"tux3.h
"

8 #i‚de‡
åa˚


9 
	#åa˚
 
åa˚_⁄


	)

12 c⁄° *
	glog_«me
[] = {

13 
	#X
(
x
Ë[x] = #x

	)

14 
X
(
LOG_BALLOC
),

15 
X
(
LOG_BFREE
),

16 
X
(
LOG_BFREE_ON_UNIFY
),

17 
X
(
LOG_BFREE_RELOG
),

18 
X
(
LOG_LEAF_REDIRECT
),

19 
X
(
LOG_LEAF_FREE
),

20 
X
(
LOG_BNODE_REDIRECT
),

21 
X
(
LOG_BNODE_ROOT
),

22 
X
(
LOG_BNODE_SPLIT
),

23 
X
(
LOG_BNODE_ADD
),

24 
X
(
LOG_BNODE_UPDATE
),

25 
X
(
LOG_BNODE_MERGE
),

26 
X
(
LOG_BNODE_DEL
),

27 
X
(
LOG_BNODE_ADJUST
),

28 
X
(
LOG_BNODE_FREE
),

29 
X
(
LOG_ORPHAN_ADD
),

30 
X
(
LOG_ORPHAN_DEL
),

31 
X
(
LOG_FREEBLOCKS
),

32 
X
(
LOG_UNIFY
),

33 
X
(
LOG_DELTA
),

34 #unde‡
X


37 
ª∂ay
 *
	$Æloc_ª∂ay
(
sb
 *sb, 
logcou¡
)

39 if(
DEBUG_MODE_K
==1)

41 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

43 
ª∂ay
 *
Ω
;

45 
Ω
 = 
	`mÆloc
((*ΩË+ 
logcou¡
 * (
block_t
));

46 i‡(!
Ω
)

47  
	`ERR_PTR
(-
ENOMEM
);

49 
Ω
->
sb
 = sb;

50 
Ω
->
unify_pos
 = 
NULL
;

51 
Ω
->
unify_ödex
 = -1;

52 
	`mem£t
(
Ω
->
blockƒs
, 0, 
logcou¡
 * (
block_t
));

54 
	`INIT_LIST_HEAD
(&
Ω
->
log_‹ph™_add
);

55 
	`INIT_LIST_HEAD
(&
Ω
->
‹ph™_ö_Ÿªe
);

57  
Ω
;

58 
	}
}

60 
	$‰ì_ª∂ay
(
ª∂ay
 *
Ω
)

62 if(
DEBUG_MODE_K
==1)

64 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

66 
	`as£π
(
	`li°_em±y
(&
Ω
->
log_‹ph™_add
));

67 
	`as£π
(
	`li°_em±y
(&
Ω
->
‹ph™_ö_Ÿªe
));

68 
	`‰ì
(
Ω
);

69 
	}
}

71 
	$ª∂ay_check_log
(
ª∂ay
 *
Ω
, 
buf„r_hód
 *
logbuf
)

73 if(
DEBUG_MODE_K
==1)

75 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

77 
sb
 *sb = 
Ω
->sb;

78 
logblock
 *
log
 = 
	`bufd©a
(
logbuf
);

79 *
d©a
 = 
log
->data;

81 i‡(
log
->
magic
 !
	`˝u_to_be16
(
TUX3_MAGIC_LOG
)) {

82 
	`tux3_îr
(
sb
, "badÜog magi¯%x", 
	`be16_to_˝u
(
log
->
magic
));

83  -
EINVAL
;

85 i‡(
	`be16_to_˝u
(
log
->
byãs
Ë+ (*logË> 
sb
->
blocksize
) {

86 
	`tux3_îr
(
sb
, "log bytes isÅoo big");

87  -
EINVAL
;

90 
d©a
 < 
log
->d©®+ 
	`be16_to_˝u
÷og->
byãs
)) {

91 
u8
 
code
 = *
d©a
;

94 i‡(
code
 =
LOG_UNIFY
 && 
Ω
->
unify_ödex
 == -1) {

95 
Ω
->
unify_pos
 = 
d©a
;

99 
Ω
->
unify_ödex
 = 
	`bufödex
(
logbuf
);

102 i‡(
log_size
[
code
] == 0) {

103 
	`tux3_îr
(
sb
, "övÆidÜog code: 0x%02x", 
code
);

104  -
EINVAL
;

106 
d©a
 +
log_size
[
code
];

110 
	}
}

113 
	$ª∂ay_u≈ö_logblocks
(
sb
 *sb, 
i
, 
logcou¡
)

115 if(
DEBUG_MODE_K
==1)

117 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

119 
buf„r_hód
 *
logbuf
;

121 
i
 < 
logcou¡
) {

122 
logbuf
 = 
	`blockgë
(
	`m≠pög
(
sb
->
logm≠
), 
i
);

123 
	`as£π
(
logbuf
 !
NULL
);

124 
	`blockput
(
logbuf
);

125 
	`blockput
(
logbuf
);

127 
i
++;

129 
	}
}

132 
ª∂ay
 *
	$ª∂ay_¥ï¨e
(
sb
 *sb)

134 if(
DEBUG_MODE_K
==1)

136 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

138 
block_t
 
logchaö
 = 
	`be64_to_˝u
(
sb
->
su≥r
.logchain);

139 
i
, 
logcou¡
 = 
	`be32_to_˝u
(
sb
->
su≥r
.logcount);

140 
ª∂ay
 *
Ω
;

141 
buf„r_hód
 *
buf„r
;

142 
îr
;

146 
Ω
 = 
	`Æloc_ª∂ay
(
sb
, 
logcou¡
);

147 i‡(
	`IS_ERR
(
Ω
))

148  
Ω
;

151 
	`åa˚
("lﬂd %uÜogblocks", 
logcou¡
);

152 
i
 = 
logcou¡
;

153 
i
-- > 0) {

154 
logblock
 *
log
;

156 
buf„r
 = 
	`blockgë
(
	`m≠pög
(
sb
->
logm≠
), 
i
);

157 i‡(!
buf„r
) {

158 
i
++;

159 
îr
 = -
ENOMEM
;

160 
îr‹
;

162 
	`as£π
(
	`bufödex
(
buf„r
Ë=
i
);

163 
îr
 = 
	`blockio
(
READ
, 
sb
, 
buf„r
, 
logchaö
);

164 i‡(
îr
)

165 
îr‹
;

167 
îr
 = 
	`ª∂ay_check_log
(
Ω
, 
buf„r
);

168 i‡(
îr
)

169 
îr‹
;

172 
Ω
->
blockƒs
[
	`bufödex
(
buf„r
)] = 
logchaö
;

174 
log
 = 
	`bufd©a
(
buf„r
);

175 
logchaö
 = 
	`be64_to_˝u
(
log
->logchain);

178  
Ω
;

180 
îr‹
:

181 
	`‰ì_ª∂ay
(
Ω
);

182 
	`ª∂ay_u≈ö_logblocks
(
sb
, 
i
, 
logcou¡
);

184  
	`ERR_PTR
(
îr
);

185 
	}
}

188 
	$ª∂ay_d⁄e
(
ª∂ay
 *
Ω
)

190 if(
DEBUG_MODE_K
==1)

192 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

194 
sb
 *sb = 
Ω
->sb;

196 
	`˛ón_‹ph™_li°
(&
Ω
->
log_‹ph™_add
);

197 
	`‰ì_ª∂ay
(
Ω
);

199 
sb
->
log√xt
 = 
	`be32_to_˝u
(sb->
su≥r
.
logcou¡
);

200 
	`ª∂ay_u≈ö_logblocks
(
sb
, 0, sb->
log√xt
);

201 
	`log_föish_cy˛e
(
sb
, 0);

202 
	}
}

204 (*
	tª∂ay_log_t
)(
	tª∂ay
 *, 
	tbuf„r_hód
 *);

206 
	$ª∂ay_log_°age1
(
ª∂ay
 *
Ω
, 
buf„r_hód
 *
logbuf
)

208 if(
DEBUG_MODE_K
==1)

210 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

212 
sb
 *sb = 
Ω
->sb;

213 
logblock
 *
log
 = 
	`bufd©a
(
logbuf
);

214 *
d©a
 = 
log
->data;

215 
îr
;

218 
	`BUILD_BUG_ON
(
	`ARRAY_SIZE
(
log_«me
Ë!
LOG_TYPES
);

221 i‡(
	`bufödex
(
logbuf
Ë< 
Ω
->
unify_ödex
) {

225 i‡(
	`bufödex
(
logbuf
Ë=
Ω
->
unify_ödex
)

226 
d©a
 = 
Ω
->
unify_pos
;

228 
d©a
 < 
log
->d©®+ 
	`be16_to_˝u
÷og->
byãs
)) {

229 
u8
 
code
 = *
d©a
++;

230 
code
) {

231 
LOG_BNODE_REDIRECT
:

233 
u64
 
ﬁdblock
, 
√wblock
;

234 
d©a
 = 
	`decode48
(d©a, &
ﬁdblock
);

235 
d©a
 = 
	`decode48
(d©a, &
√wblock
);

236 
	`åa˚
("%s: oldblock %Lx,Çewblock %Lx",

237 
log_«me
[
code
], 
ﬁdblock
, 
√wblock
);

238 
îr
 = 
	`ª∂ay_bnode_ªdúe˘
(
Ω
, 
ﬁdblock
, 
√wblock
);

239 i‡(
îr
)

240  
îr
;

243 
LOG_BNODE_ROOT
:

245 
u64
 
roŸ
, 
À·
, 
right
, 
rkey
;

246 
u8
 
cou¡
;

247 
cou¡
 = *
d©a
++;

248 
d©a
 = 
	`decode48
(d©a, &
roŸ
);

249 
d©a
 = 
	`decode48
(d©a, &
À·
);

250 
d©a
 = 
	`decode48
(d©a, &
right
);

251 
d©a
 = 
	`decode48
(d©a, &
rkey
);

252 
	`åa˚
("%s: count %u,Ñoot block %Lx,Üeft %Lx,Ñight %Lx,Ñkey %Lx",

253 
log_«me
[
code
], 
cou¡
, 
roŸ
, 
À·
, 
right
, 
rkey
);

255 
îr
 = 
	`ª∂ay_bnode_roŸ
(
Ω
, 
roŸ
, 
cou¡
, 
À·
, 
right
, 
rkey
);

256 i‡(
îr
)

257  
îr
;

260 
LOG_BNODE_SPLIT
:

262 
pos
;

263 
u64
 
§c
, 
d°
;

264 
d©a
 = 
	`decode16
(d©a, &
pos
);

265 
d©a
 = 
	`decode48
(d©a, &
§c
);

266 
d©a
 = 
	`decode48
(d©a, &
d°
);

267 
	`åa˚
("%s:Öos %x, src %Lx, dst %Lx",

268 
log_«me
[
code
], 
pos
, 
§c
, 
d°
);

269 
îr
 = 
	`ª∂ay_bnode_•lô
(
Ω
, 
§c
, 
pos
, 
d°
);

270 i‡(
îr
)

271  
îr
;

274 
LOG_BNODE_ADD
:

275 
LOG_BNODE_UPDATE
:

277 
u64
 
chûd
, 
∑ª¡
, 
key
;

278 
d©a
 = 
	`decode48
(d©a, &
∑ª¡
);

279 
d©a
 = 
	`decode48
(d©a, &
chûd
);

280 
d©a
 = 
	`decode48
(d©a, &
key
);

281 
	`åa˚
("%s:Öarent 0x%Lx, child 0x%Lx, key 0x%Lx",

282 
log_«me
[
code
], 
∑ª¡
, 
chûd
, 
key
);

283 i‡(
code
 =
LOG_BNODE_UPDATE
)

284 
îr
 = 
	`ª∂ay_bnode_upd©e
(
Ω
, 
∑ª¡
, 
chûd
, 
key
);

286 
îr
 = 
	`ª∂ay_bnode_add
(
Ω
, 
∑ª¡
, 
chûd
, 
key
);

287 i‡(
îr
)

288  
îr
;

291 
LOG_BNODE_MERGE
:

293 
u64
 
§c
, 
d°
;

294 
d©a
 = 
	`decode48
(d©a, &
§c
);

295 
d©a
 = 
	`decode48
(d©a, &
d°
);

296 
	`åa˚
("%s: src 0x%Lx, dst 0x%Lx",

297 
log_«me
[
code
], 
§c
, 
d°
);

298 
îr
 = 
	`ª∂ay_bnode_mîge
(
Ω
, 
§c
, 
d°
);

299 i‡(
îr
)

300  
îr
;

303 
LOG_BNODE_DEL
:

305 
cou¡
;

306 
u64
 
bnode
, 
key
;

307 
d©a
 = 
	`decode16
(d©a, &
cou¡
);

308 
d©a
 = 
	`decode48
(d©a, &
bnode
);

309 
d©a
 = 
	`decode48
(d©a, &
key
);

310 
	`åa˚
("%s: bnode 0x%Lx, count 0x%x, key 0x%Lx",

311 
log_«me
[
code
], 
bnode
, 
cou¡
, 
key
);

312 
îr
 = 
	`ª∂ay_bnode_dñ
(
Ω
, 
bnode
, 
key
, 
cou¡
);

313 i‡(
îr
)

314  
îr
;

317 
LOG_BNODE_ADJUST
:

319 
u64
 
bnode
, 
‰om
, 
to
;

320 
d©a
 = 
	`decode48
(d©a, &
bnode
);

321 
d©a
 = 
	`decode48
(d©a, &
‰om
);

322 
d©a
 = 
	`decode48
(d©a, &
to
);

323 
	`åa˚
("%s: bnode 0x%Lx, from 0x%Lx,Åo 0x%Lx",

324 
log_«me
[
code
], 
bnode
, 
‰om
, 
to
);

325 
îr
 = 
	`ª∂ay_bnode_adju°
(
Ω
, 
bnode
, 
‰om
, 
to
);

326 i‡(
îr
)

327  
îr
;

330 
LOG_FREEBLOCKS
:

332 
u64
 
‰ìblocks
;

333 
d©a
 = 
	`decode48
(d©a, &
‰ìblocks
);

334 
	`åa˚
("%s: fªeblock†%Œu", 
log_«me
[
code
],

335 
‰ìblocks
);

336 
sb
->
‰ìblocks
 = freeblocks;

339 
LOG_BALLOC
:

340 
LOG_BFREE
:

341 
LOG_BFREE_ON_UNIFY
:

342 
LOG_BFREE_RELOG
:

343 
LOG_LEAF_REDIRECT
:

344 
LOG_LEAF_FREE
:

345 
LOG_BNODE_FREE
:

346 
LOG_ORPHAN_ADD
:

347 
LOG_ORPHAN_DEL
:

348 
LOG_UNIFY
:

349 
LOG_DELTA
:

350 
d©a
 +
log_size
[
code
] - (code);

353 
	`tux3_îr
(
Ω
->
sb
, "uƒecognizedÜog codê0x%x", 
code
);

354  -
EINVAL
;

359 
	}
}

361 
	$ª∂ay_log_°age2
(
ª∂ay
 *
Ω
, 
buf„r_hód
 *
logbuf
)

363 if(
DEBUG_MODE_K
==1)

365 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

367 
sb
 *sb = 
Ω
->sb;

368 
logblock
 *
log
 = 
	`bufd©a
(
logbuf
);

369 
block_t
 
blockƒ
 = 
Ω
->
blockƒs
[
	`bufödex
(
logbuf
)];

370 *
d©a
 = 
log
->data;

371 
îr
;

379 
	`åa˚
("LOG BLOCK:Üogblock %Lx", 
blockƒ
);

380 
îr
 = 
	`ª∂ay_upd©e_bôm≠
(
Ω
, 
blockƒ
, 1, 1);

381 i‡(
îr
)

382  
îr
;

384 
	`de„r_b‰ì
(&
sb
->
deunify
, 
blockƒ
, 1);

387 i‡(
	`bufödex
(
logbuf
Ë< 
Ω
->
unify_ödex
) {

391 i‡(
	`bufödex
(
logbuf
Ë=
Ω
->
unify_ödex
)

392 
d©a
 = 
Ω
->
unify_pos
;

394 
d©a
 < 
log
->d©®+ 
	`be16_to_˝u
÷og->
byãs
)) {

395 
u8
 
code
 = *
d©a
++;

396 
code
) {

397 
LOG_BALLOC
:

398 
LOG_BFREE
:

399 
LOG_BFREE_ON_UNIFY
:

400 
LOG_BFREE_RELOG
:

402 
u64
 
block
;

403 
u32
 
cou¡
;

404 
d©a
 = 
	`decode32
(d©a, &
cou¡
);

405 
d©a
 = 
	`decode48
(d©a, &
block
);

406 
	`åa˚
("%s: count %u, block %Lx",

407 
log_«me
[
code
], 
cou¡
, 
block
);

409 
îr
 = 0;

410 i‡(
code
 =
LOG_BALLOC
)

411 
îr
 = 
	`ª∂ay_upd©e_bôm≠
(
Ω
, 
block
, 
cou¡
, 1);

412 i‡(
code
 =
LOG_BFREE_ON_UNIFY
)

413 
	`de„r_b‰ì
(&
sb
->
deunify
, 
block
, 
cou¡
);

415 
îr
 = 
	`ª∂ay_upd©e_bôm≠
(
Ω
, 
block
, 
cou¡
, 0);

416 i‡(
îr
)

417  
îr
;

420 
LOG_LEAF_REDIRECT
:

421 
LOG_BNODE_REDIRECT
:

423 
u64
 
ﬁdblock
, 
√wblock
;

424 
d©a
 = 
	`decode48
(d©a, &
ﬁdblock
);

425 
d©a
 = 
	`decode48
(d©a, &
√wblock
);

426 
	`åa˚
("%s: oldblock %Lx,Çewblock %Lx",

427 
log_«me
[
code
], 
ﬁdblock
, 
√wblock
);

428 
îr
 = 
	`ª∂ay_upd©e_bôm≠
(
Ω
, 
√wblock
, 1, 1);

429 i‡(
îr
)

430  
îr
;

431 i‡(
code
 =
LOG_LEAF_REDIRECT
) {

432 
îr
 = 
	`ª∂ay_upd©e_bôm≠
(
Ω
, 
ﬁdblock
, 1, 0);

433 i‡(
îr
)

434  
îr
;

437 
	`de„r_b‰ì
(&
sb
->
deunify
, 
ﬁdblock
, 1);

441 
LOG_LEAF_FREE
:

442 
LOG_BNODE_FREE
:

444 
u64
 
block
;

445 
d©a
 = 
	`decode48
(d©a, &
block
);

446 
	`åa˚
("%s: block %Lx", 
log_«me
[
code
], 
block
);

447 
îr
 = 
	`ª∂ay_upd©e_bôm≠
(
Ω
, 
block
, 1, 0);

448 i‡(
îr
)

449  
îr
;

451 i‡(
code
 =
LOG_BNODE_FREE
) {

452 
buf„r_hód
 *
buf„r
 =

453 
	`vﬁ_föd_gë_block
(
sb
, 
block
);

454 
	`blockput_‰ì_unify
(
sb
, 
buf„r
);

458 
LOG_BNODE_ROOT
:

460 
u64
 
roŸ
, 
À·
, 
right
, 
rkey
;

461 
u8
 
cou¡
;

462 
cou¡
 = *
d©a
++;

463 
d©a
 = 
	`decode48
(d©a, &
roŸ
);

464 
d©a
 = 
	`decode48
(d©a, &
À·
);

465 
d©a
 = 
	`decode48
(d©a, &
right
);

466 
d©a
 = 
	`decode48
(d©a, &
rkey
);

467 
	`åa˚
("%s: count %u,Ñoot block %Lx,Üeft %Lx,Ñight %Lx,Ñkey %Lx",

468 
log_«me
[
code
], 
cou¡
, 
roŸ
, 
À·
, 
right
, 
rkey
);

470 
îr
 = 
	`ª∂ay_upd©e_bôm≠
(
Ω
, 
roŸ
, 1, 1);

471 i‡(
îr
)

472  
îr
;

475 
LOG_BNODE_SPLIT
:

477 
pos
;

478 
u64
 
§c
, 
d°
;

479 
d©a
 = 
	`decode16
(d©a, &
pos
);

480 
d©a
 = 
	`decode48
(d©a, &
§c
);

481 
d©a
 = 
	`decode48
(d©a, &
d°
);

482 
	`åa˚
("%s:Öos %x, src %Lx, dst %Lx",

483 
log_«me
[
code
], 
pos
, 
§c
, 
d°
);

484 
îr
 = 
	`ª∂ay_upd©e_bôm≠
(
Ω
, 
d°
, 1, 1);

485 i‡(
îr
)

486  
îr
;

489 
LOG_BNODE_MERGE
:

491 
u64
 
§c
, 
d°
;

492 
d©a
 = 
	`decode48
(d©a, &
§c
);

493 
d©a
 = 
	`decode48
(d©a, &
d°
);

494 
	`åa˚
("%s: src 0x%Lx, dst 0x%Lx",

495 
log_«me
[
code
], 
§c
, 
d°
);

496 
îr
 = 
	`ª∂ay_upd©e_bôm≠
(
Ω
, 
§c
, 1, 0);

497 i‡(
îr
)

498  
îr
;

500 
	`blockput_‰ì_unify
(
sb
, 
	`vﬁ_föd_gë_block
(sb, 
§c
));

503 
LOG_ORPHAN_ADD
:

504 
LOG_ORPHAN_DEL
:

506 
vîsi⁄
;

507 
u64
 
öum
;

508 
d©a
 = 
	`decode16
(d©a, &
vîsi⁄
);

509 
d©a
 = 
	`decode48
(d©a, &
öum
);

510 
	`åa˚
("%s: version 0x%x, inum 0x%Lx",

511 
log_«me
[
code
], 
vîsi⁄
, 
öum
);

512 i‡(
code
 =
LOG_ORPHAN_ADD
)

513 
îr
 = 
	`ª∂ay_‹ph™_add
(
Ω
, 
vîsi⁄
, 
öum
);

515 
îr
 = 
	`ª∂ay_‹ph™_dñ
(
Ω
, 
vîsi⁄
, 
öum
);

516 i‡(
îr
)

517  
îr
;

520 
LOG_FREEBLOCKS
:

521 
LOG_BNODE_ADD
:

522 
LOG_BNODE_UPDATE
:

523 
LOG_BNODE_DEL
:

524 
LOG_BNODE_ADJUST
:

525 
LOG_UNIFY
:

526 
LOG_DELTA
:

527 
d©a
 +
log_size
[
code
] - (code);

530 
	`tux3_îr
(
sb
, "uƒecognizedÜog codê0x%x", 
code
);

531  -
EINVAL
;

536 
	}
}

538 
	$ª∂ay_logblocks
(
ª∂ay
 *
Ω
, 
ª∂ay_log_t
 
ª∂ay_log_func
)

540 if(
DEBUG_MODE_K
==1)

542 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

544 
sb
 *sb = 
Ω
->sb;

545 
logcou¡
 = 
	`be32_to_˝u
(
sb
->
su≥r
.logcount);

546 
îr
;

548 
sb
->
log√xt
 = 0;

549 
sb
->
log√xt
 < 
logcou¡
) {

550 
	`åa˚
("log block %i, blockƒ %Lx, unify %Lx", 
sb
->
log√xt
, 
Ω
->
blockƒs
[sb->log√xt],Ñp->
unify_ödex
);

551 
	`log_√xt
(
sb
);

552 
îr
 = 
	`ª∂ay_log_func
(
Ω
, 
sb
->
logbuf
);

553 
	`log_dr›
(
sb
);

555 i‡(
îr
)

556  
îr
;

560 
	}
}

563 
ª∂ay
 *
	$ª∂ay_°age1
(
sb
 *sb)

565 if(
DEBUG_MODE_K
==1)

567 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

569 
ª∂ay
 *
Ω
 = 
	`ª∂ay_¥ï¨e
(
sb
);

570 i‡(!
	`IS_ERR
(
Ω
)) {

571 
îr
 = 
	`ª∂ay_logblocks
(
Ω
, 
ª∂ay_log_°age1
);

572 i‡(
îr
) {

573 
	`ª∂ay_d⁄e
(
Ω
);

574  
	`ERR_PTR
(
îr
);

577  
Ω
;

578 
	}
}

581 
	$ª∂ay_°age2
(
ª∂ay
 *
Ω
)

583 if(
DEBUG_MODE_K
==1)

585 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

587 
îr
 = 
	`ª∂ay_logblocks
(
Ω
, 
ª∂ay_log_°age2
);

588 i‡(
îr
)

589 
îr‹
;

595 
îr
 = 
	`ª∂ay_lﬂd_‹ph™_öodes
(
Ω
);

596 i‡(
îr
)

597 
îr‹
;

601 
îr‹
:

602 
	`ª∂ay_d⁄e
(
Ω
);

604  
îr
;

605 
	}
}

611 
	$ª∂ay_°age3
(
ª∂ay
 *
Ω
, 
≠∂y
)

613 if(
DEBUG_MODE_K
==1)

615 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

617 
sb
 *sb = 
Ω
->sb;

618 
	`LIST_HEAD
(
‹ph™_ö_Ÿªe
);

620 
	`li°_•li˚_öô
(&
Ω
->
‹ph™_ö_Ÿªe
, &orphan_in_otree);

621 
	`ª∂ay_d⁄e
(
Ω
);

624 
	`ª∂ay_ùut_‹ph™_öodes
(
sb
, &
‹ph™_ö_Ÿªe
, 
≠∂y
);

627 
	}
}

	@kernel/super.c

6 #i‚de‡
DEBUG_MODE


7 
	#DEBUG_MODE
 1

	)

10 
	~"tux3.h
"

11 
	~"fûem≠_hﬁe.h
"

12 #ifde‡
__KERNEL__


13 
	~<löux/moduÀ.h
>

14 
	~<löux/°©fs.h
>

15 
	~"kcom∑t.h
"

18 #i‚de‡
TUX3_SUPER_MAGIC


19 
	#TUX3_SUPER_MAGIC
 0x74757833

	)

22 
	#åa˚
 
åa˚_⁄


	)

25 
	gtux3_åa˚
;

26 
moduÀ_∑øm
(
tux3_åa˚
, , 0644);

29 #ifde‡
__KERNEL__


30 
	#BUFFER_LINK
 
b_assoc_buf„rs


	)

32 
	#BUFFER_LINK
 
lök


	)

35 
	$˛ónup_dúty_buf„rs
(
öode
 *öode, 
li°_hód
 *
hód
,

36 
dñè
)

38 if(
DEBUG_MODE_K
==1)

40 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

42 
buf„r_hód
 *
buf„r
, *
n
;

44 
	`li°_f‹_óch_íåy_ß„
(
buf„r
, 
n
, 
hód
, 
BUFFER_LINK
) {

45 
	`åa˚
(">>> clean inum %Lx, buffer %Lx, count %d",

46 
	`tux_öode
(
öode
)->
öum
, 
	`bufödex
(
buf„r
),

47 
	`bufcou¡
(
buf„r
));

48 
	`as£π
(
	`buf„r_dúty
(
buf„r
));

49 
	`tux3_˛ór_buf„r_dúty
(
buf„r
, 
dñè
);

51 
	}
}

53 
	$˛ónup_dúty_öode
(
öode
 *inode)

55 if(
DEBUG_MODE_K
==1)

57 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

59 i‡(
öode
->
i_°©e
 & 
I_DIRTY
) {

60 
	`åa˚
(">>> clean inum %Lx, i_count %d, i_state %lx",

61 
	`tux_öode
(
öode
)->
öum
, 
	`©omic_ªad
(&öode->
i_cou¡
),

62 
öode
->
i_°©e
);

63 
	`dñ_de„r_Æloc_öum
(
öode
);

64 
	`tux3_˛ór_dúty_öode
(
öode
);

66 
	}
}

72 
	$˛ónup_dúty_f‹_umou¡
(
sb
 *sb)

74 if(
DEBUG_MODE_K
==1)

76 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

78 
unify
 = 
sb
->unify;

84 i‡(
sb
->
bôm≠
) {

85 
li°_hód
 *
hód
 = 
	`tux3_dúty_buf„rs
(
sb
->
bôm≠
, 
unify
);

86 
	`˛ónup_dúty_buf„rs
(
sb
->
bôm≠
, 
hód
, 
unify
);

87 
	`˛ónup_dúty_öode
(
sb
->
bôm≠
);

89 i‡(
sb
->
vﬁm≠
) {

90 
	`˛ónup_dúty_buf„rs
(
sb
->
vﬁm≠
, &sb->
unify_buf„rs
, 
unify
);

98 
	`˛ónup_dúty_öode
(
sb
->
vﬁm≠
);

102 
	`as£π
(
	`li°_em±y
(&
sb
->
‹ph™_add
));

104 
	`˛ón_‹ph™_li°
(&
sb
->
‹ph™_dñ
);

107 
	`as£π
(
	`Êök_em±y
(&
sb
->
de‰ì
.
hód
)||
	`Êök_is_œ°
(&sb->defree.head));

108 
	}
}

110 
	$__tux3_put_su≥r
(
sb
 *
sbi
)

112 if(
DEBUG_MODE_K
==1)

114 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

116 
	`˛ónup_dúty_f‹_umou¡
(
sbi
);

119 
	`‰ì_f‹ked_buf„rs
(
sbi
, 
NULL
, 1);

121 
	`de°roy_de„r_b‰ì
(&
sbi
->
deunify
);

122 
	`de°roy_de„r_b‰ì
(&
sbi
->
de‰ì
);

124 
	`ùut
(
sbi
->
roŸdú
);

125 
sbi
->
roŸdú
 = 
NULL
;

126 
	`ùut
(
sbi
->
©abÀ
);

127 
sbi
->
©abÀ
 = 
NULL
;

128 
	`ùut
(
sbi
->
vèbÀ
);

129 
sbi
->
vèbÀ
 = 
NULL
;

130 
	`ùut
(
sbi
->
bôm≠
);

131 
sbi
->
bôm≠
 = 
NULL
;

132 
	`ùut
(
sbi
->
logm≠
);

133 
sbi
->
logm≠
 = 
NULL
;

134 
	`ùut
(
sbi
->
vﬁm≠
);

135 
sbi
->
vﬁm≠
 = 
NULL
;

138 
	`tux3_exô_Êushî
(
sbi
);

141 
	`as£π
(
	`li°_em±y
(&
sbi
->
Æloc_öodes
));

142 
	`as£π
(
	`lök_em±y
(&
sbi
->
f‹ked_buf„rs
));

143 
	}
}

145 
öode
 *
	$¸óã_öã∫Æ_öode
(
sb
 *
sbi
, 
öum_t
 
öum
,

146 
tux_üâr
 *
üâr
)

148 if(
DEBUG_MODE_K
==1)

150 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

152 
tux_üâr
 
nuŒ_üâr
;

153 
öode
 *
dú
 = &(inode){

154 .
i_sb
 = 
	`vfs_sb
(
sbi
),

155 .
i_mode
 = 
S_IFDIR
 | 0755,

157 
öode
 *inode;

159 i‡(
üâr
 =
NULL
)

160 
üâr
 = &
nuŒ_üâr
;

162 
öode
 = 
	`tux_¸óã_•ecific_öode
(
dú
, 
öum
, 
üâr
, 0);

163 
	`as£π
(
	`IS_ERR
(
öode
Ë|| 
	`tux_öode
(öode)->
öum
 == inum);

164 
	`u∆ock_√w_öode
(
öode
);

165  
öode
;

166 
	}
}

172 
öode
 *
	$igë_‹_¸óã_öode
(
sb
 *
sbi
, 
öum_t
 
öum
)

174 if(
DEBUG_MODE_K
==1)

176 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

178 
öode
 *inode;

180 
öode
 = 
	`tux3_igë
(
sbi
, 
öum
);

181 i‡(
	`IS_ERR
(
öode
Ë&& 
	`PTR_ERR
(öodeË=-
ENOENT
)

182 
öode
 = 
	`¸óã_öã∫Æ_öode
(
sbi
, 
öum
, 
NULL
);

183  
öode
;

184 
	}
}

186 
ª∂ay
 *
	$tux3_öô_fs
(
sb
 *
sbi
)

188 if(
DEBUG_MODE_K
==1)

190 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

192 
ª∂ay
 *
Ω
 = 
NULL
;

193 
öode
 *inode;

194 *
«me
;

195 
îr
;

198 
îr
 = 
	`tux3_öô_Êushî
(
sbi
);

199 i‡(
îr
) {

200 
	`tux3_îr
(
sbi
, "failedÅo initialize flusher");

201 
îr‹
;

204 
îr
 = -
ENOMEM
;

207 
sbi
->
vﬁm≠
 = 
	`tux_√w_vﬁm≠
(sbi);

208 i‡(!
sbi
->
vﬁm≠
)

209 
îr‹
;

211 
sbi
->
logm≠
 = 
	`tux_√w_logm≠
(sbi);

212 i‡(!
sbi
->
logm≠
)

213 
îr‹
;

216 
Ω
 = 
	`ª∂ay_°age1
(
sbi
);

217 i‡(
	`IS_ERR
(
Ω
)) {

218 
îr
 = 
	`PTR_ERR
(
Ω
);

219 
îr‹
;

223 
öode
 = 
	`igë_‹_¸óã_öode
(
sbi
, 
TUX_BITMAP_INO
);

224 i‡(
	`IS_ERR
(
öode
)) {

225 
«me
 = "bitmap";

226 
îr‹_öode
;

228 
sbi
->
bôm≠
 = 
öode
;

230 
öode
 = 
	`tux3_igë
(
sbi
, 
TUX_VTABLE_INO
);

231 i‡(
	`IS_ERR
(
öode
)) {

232 
«me
 = "vtable";

233 
îr‹_öode
;

235 
sbi
->
vèbÀ
 = 
öode
;

237 
öode
 = 
	`tux3_igë
(
sbi
, 
TUX_ATABLE_INO
);

238 i‡(
	`IS_ERR
(
öode
)) {

239 
«me
 = "atable";

240 
îr‹_öode
;

242 
sbi
->
©abÀ
 = 
öode
;

244 
öode
 = 
	`tux3_igë
(
sbi
, 
TUX_ROOTDIR_INO
);

245 i‡(
	`IS_ERR
(
öode
)) {

246 
«me
 = "rootdir";

247 
îr‹_öode
;

249 
sbi
->
roŸdú
 = 
öode
;

251 
îr
 = 
	`ª∂ay_°age2
(
Ω
);

252 i‡(
îr
) {

253 
Ω
 = 
NULL
;

254 
îr‹
;

257  
Ω
;

259 
îr‹_öode
:

260 
îr
 = 
	`PTR_ERR
(
öode
);

261 
	`tux3_îr
(
sbi
, "ÁûedÅÿlﬂd %†öodê”º %d)", 
«me
, 
îr
);

262 
îr‹
:

263 i‡(!
	`IS_ERR_OR_NULL
(
Ω
))

264 
	`ª∂ay_°age3
(
Ω
, 0);

265 
	`__tux3_put_su≥r
(
sbi
);

267  
	`ERR_PTR
(
îr
);

268 
	}
}

270 
	$tux3_öode_öô_⁄˚
(*
mem
)

272 if(
DEBUG_MODE_K
==1)

274 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

276 
tux3_öode
 *
tuxnode
 = 
mem
;

277 
öode
 *öodê&
tuxnode
->
vfs_öode
;

278 
i
;

280 
	`INIT_LIST_HEAD
(&
tuxnode
->
Æloc_li°
);

281 
	`INIT_LIST_HEAD
(&
tuxnode
->
‹ph™_li°
);

282 
	`•ö_lock_öô
(&
tuxnode
->
hﬁe_exã¡s_lock
);

283 
	`INIT_LIST_HEAD
(&
tuxnode
->
hﬁe_exã¡s
);

284 
	`•ö_lock_öô
(&
tuxnode
->
lock
);

286 
i
 = 0; i < 
	`ARRAY_SIZE
(
tuxnode
->
i_ddc
); i++) {

287 
	`INIT_LIST_HEAD
(&
tuxnode
->
i_ddc
[
i
].
dúty_buf„rs
);

288 
	`INIT_LIST_HEAD
(&
tuxnode
->
i_ddc
[
i
].
dúty_hﬁes
);

289 
	`INIT_LIST_HEAD
(&
tuxnode
->
i_ddc
[
i
].
dúty_li°
);

291 
tuxnode
->
i_ddc
[
i
].
id©a
.
¥e£¡
 = 
TUX3_INVALID_PRESENT
;

295 
	`öode_öô_⁄˚
(
öode
);

296 
	}
}

298 
	$tux3_öode_öô_Æways
(
tux3_öode
 *
tuxnode
)

300 if(
DEBUG_MODE_K
==1)

302 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

304 
time•ec
 
ïoch
;

305 
öode
 *öodê&
tuxnode
->
vfs_öode
;

307 
tuxnode
->
båì
 = (btree){ };

308 
tuxnode
->
¥e£¡
 = 0;

309 
tuxnode
->
xˇche
 = 
NULL
;

310 
tuxnode
->
Êags
 = 0;

311 #ifde‡
__KERNEL__


312 
tuxnode
->
io
 = 
NULL
;

316 
öode
->
i_vîsi⁄
 = 1;

317 
öode
->
i_©ime
 = 
ïoch
;

318 
öode
->
i_mtime
 = 
ïoch
;

319 
öode
->
i_˘ime
 = 
ïoch
;

320 
öode
->
i_mode
 = 0;

321 
	}
}

323 
	$i_ddc_is_˛ón
(
öode
 *inode)

325 if(
DEBUG_MODE_K
==1)

327 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

329 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

330 
i
;

332 
i
 = 0; i < 
	`ARRAY_SIZE
(
tuxnode
->
i_ddc
); i++) {

333 i‡(!
	`li°_em±y
(&
tuxnode
->
i_ddc
[
i
].
dúty_buf„rs
) ||

334 !
	`li°_em±y
(&
tuxnode
->
i_ddc
[
i
].
dúty_li°
))

339 
	}
}

341 
	$tux3_check_de°roy_öode
(
öode
 *inode)

343 if(
DEBUG_MODE_K
==1)

345 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

347 
	`tux3_check_de°roy_öode_Êags
(
öode
);

348 
	`as£π
(
	`li°_em±y
(&
	`tux_öode
(
öode
)->
Æloc_li°
));

349 
	`as£π
(
	`li°_em±y
(&
	`tux_öode
(
öode
)->
‹ph™_li°
));

350 
	`as£π
(
	`i_ddc_is_˛ón
(
öode
));

351 
	}
}

353 #ifde‡
__KERNEL__


354 
kmem_ˇche
 *
	gtux_öode_ˇchï
;

356 
__öô
 
	$tux3_öô_öodeˇche
()

358 if(
DEBUG_MODE_K
==1)

360 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

362 
tux_öode_ˇchï
 = 
	`kmem_ˇche_¸óã
("tux3_inode_cache",

363 (
tux3_öode
), 0,

364 (
SLAB_RECLAIM_ACCOUNT
|
SLAB_MEM_SPREAD
),

365 
tux3_öode_öô_⁄˚
);

366 i‡(
tux_öode_ˇchï
 =
NULL
)

367  -
ENOMEM
;

369 
	}
}

371 
	$tux3_de°roy_öodeˇche
()

373 if(
DEBUG_MODE_K
==1)

375 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

381 
	`rcu_b¨rõr
();

382 
	`kmem_ˇche_de°roy
(
tux_öode_ˇchï
);

383 
	}
}

385 
öode
 *
	$tux3_Æloc_öode
(
su≥r_block
 *
sb
)

387 if(
DEBUG_MODE_K
==1)

389 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

391 
tux3_öode
 *
tuxnode
;

393 
tuxnode
 = 
	`kmem_ˇche_Æloc
(
tux_öode_ˇchï
, 
GFP_KERNEL
);

394 i‡(!
tuxnode
)

395  
NULL
;

397 
	`tux3_öode_öô_Æways
(
tuxnode
);

399  &
tuxnode
->
vfs_öode
;

400 
	}
}

402 
	$tux3_i_ˇŒback
(
rcu_hód
 *
hód
)

404 if(
DEBUG_MODE_K
==1)

406 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

408 
öode
 *öodê
	`c⁄èöî_of
(
hód
, öode, 
i_rcu
);

409 
	`kmem_ˇche_‰ì
(
tux_öode_ˇchï
, 
	`tux_öode
(
öode
));

410 
	}
}

412 
	$tux3_de°roy_öode
(
öode
 *inode)

414 if(
DEBUG_MODE_K
==1)

416 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

418 
	`tux3_check_de°roy_öode
(
öode
);

419 
	`ˇŒ_rcu
(&
öode
->
i_rcu
, 
tux3_i_ˇŒback
);

420 
	}
}

422 #i‡
TUX3_FLUSHER
 !
TUX3_FLUSHER_ASYNC_HACK


423 
	$tux3_sync_fs
(
su≥r_block
 *
sb
, 
waô
)

425 if(
DEBUG_MODE_K
==1)

427 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

430 
	`åa˚_⁄
("waô (%uË∑ømëî i†unsuµ‹ãd f‹Çow", 
waô
);

431  
	`f‹˚_dñè
(
	`tux_sb
(
sb
));

432 
	}
}

435 
	$tux3_put_su≥r
(
su≥r_block
 *
sb
)

437 if(
DEBUG_MODE_K
==1)

439 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

441 
sb
 *
sbi
 = 
	`tux_sb
(sb);

443 
	`__tux3_put_su≥r
(
sbi
);

444 
sb
->
s_fs_öfo
 = 
NULL
;

445 
	`k‰ì
(
sbi
);

446 
	}
}

448 
	$tux3_°©fs
(
díåy
 *díåy, 
k°©fs
 *
buf
)

450 if(
DEBUG_MODE_K
==1)

452 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

454 
su≥r_block
 *
sb
 = 
díåy
->
d_sb
;

455 
sb
 *
sbi
 = 
	`tux_sb
(sb);

457 
buf
->
f_ty≥
 = 
sb
->
s_magic
;

458 
buf
->
f_bsize
 = 
sbi
->
blocksize
;

459 
buf
->
f_blocks
 = 
sbi
->
vﬁblocks
;

460 
buf
->
f_b‰ì
 = 
sbi
->
‰ìblocks
;

461 
buf
->
f_bavaû
 = 
sbi
->
‰ìblocks
;

462 
buf
->
f_fûes
 = 
MAX_INODES
;

463 
buf
->
f_f‰ì
 = 
sbi
->
‰ìöodes
;

465 
buf
->
f_fsid
.
vÆ
[0] = 
sbi
->
£rül_numbî
;

468 
buf
->
f_«mñí
 = 
TUX_NAME_LEN
;

472 
	}
}

474 c⁄° 
su≥r_›î©i⁄s
 
	gtux3_su≥r_›s
 = {

475 .
Æloc_öode
 = 
tux3_Æloc_öode
,

476 .
	gde°roy_öode
 = 
tux3_de°roy_öode
,

477 .
	gdúty_öode
 = 
tux3_dúty_öode
,

478 .
	gdr›_öode
 = 
tux3_dr›_öode
,

479 .
	gevi˘_öode
 = 
tux3_evi˘_öode
,

482 #i‡
TUX3_FLUSHER
 !
TUX3_FLUSHER_ASYNC_HACK


484 .
	gsync_fs
 = 
tux3_sync_fs
,

486 .
	gput_su≥r
 = 
tux3_put_su≥r
,

487 .
	g°©fs
 = 
tux3_°©fs
,

490 
	$tux3_fûl_su≥r
(
su≥r_block
 *
sb
, *
d©a
, 
sûít
)

492 if(
DEBUG_MODE_K
==1)

494 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

496 
sb
 *
sbi
;

497 
ª∂ay
 *
Ω
 = 
NULL
;

498 
îr
, 
blocksize
;

500 
sbi
 = 
	`kzÆloc
((
sb
), 
GFP_KERNEL
);

501 i‡(!
sbi
)

502  -
ENOMEM
;

503 
sbi
->
vfs_sb
 = 
sb
;

504 
sb
->
s_fs_öfo
 = 
sbi
;

509 
sb
->
s_Êags
 |
MS_NOATIME
;

510 
sb
->
s_magic
 = 
TUX3_SUPER_MAGIC
;

511 
sb
->
s_›
 = &
tux3_su≥r_›s
;

512 
sb
->
s_time_gøn
 = 1;

514 
îr
 = -
EIO
;

515 
blocksize
 = 
	`sb_mö_blocksize
(
sb
, 
BLOCK_SIZE
);

516 i‡(!
blocksize
) {

517 i‡(!
sûít
)

518 
	`¥ötk
(
KERN_ERR
 "TUX3: unableÅo set blocksize\n");

519 
îr‹_‰ì
;

523 
îr
 = 
	`lﬂd_sb
(
sbi
);

524 i‡(
îr
) {

525 i‡(!
sûít
) {

526 i‡(
îr
 =-
EINVAL
)

527 
	`tux3_îr
(
sbi
, "invalid superblock [%Lx]",

528 
	`be64_to_˝up
((
__be64
 *)
sbi
->
su≥r
.
magic
));

530 
	`tux3_îr
(
sbi
, "unableÅoÑead superblock");

532 
îr‹
;

535 i‡(
sbi
->
blocksize
 != blocksize) {

536 i‡(!
	`sb_£t_blocksize
(
sb
, 
sbi
->
blocksize
)) {

537 
	`tux3_îr
(
sbi
, "blocksizeÅoo small for device");

538 
îr‹
;

541 
	`tux3_dbg
("s_blocksizê%lu", 
sb
->
s_blocksize
);

543 
Ω
 = 
	`tux3_öô_fs
(
sbi
);

544 i‡(
	`IS_ERR
(
Ω
)) {

545 
îr
 = 
	`PTR_ERR
(
Ω
);

546 
îr‹
;

549 
îr
 = 
	`ª∂ay_°age3
(
Ω
, 1);

550 i‡(
îr
) {

551 
Ω
 = 
NULL
;

552 
îr‹
;

555 
sb
->
s_roŸ
 = 
	`d_make_roŸ
(
sbi
->
roŸdú
);

556 
sbi
->
roŸdú
 = 
NULL
;

557 i‡(!
sb
->
s_roŸ
) {

558 
îr
 = -
ENOMEM
;

559 
îr‹
;

564 
îr‹
:

565 i‡(!
	`IS_ERR_OR_NULL
(
Ω
))

566 
	`ª∂ay_°age3
(
Ω
, 0);

567 
	`__tux3_put_su≥r
(
sbi
);

568 
îr‹_‰ì
:

569 
	`k‰ì
(
sbi
);

571  
îr
;

572 
	}
}

574 
díåy
 *
	$tux3_mou¡
(
fûe_sy°em_ty≥
 *
fs_ty≥
, 
Êags
,

575 c⁄° *
dev_«me
, *
d©a
)

577 if(
DEBUG_MODE_K
==1)

579 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

581  
	`mou¡_bdev
(
fs_ty≥
, 
Êags
, 
dev_«me
, 
d©a
, 
tux3_fûl_su≥r
);

582 
	}
}

584 
fûe_sy°em_ty≥
 
	gtux3_fs_ty≥
 = {

585 .
ow√r
 = 
THIS_MODULE
,

586 .
	g«me
 = "tux3",

587 .
	gfs_Êags
 = 
FS_REQUIRES_DEV
,

588 .
	gmou¡
 = 
tux3_mou¡
,

589 .
	gkûl_sb
 = 
kûl_block_su≥r
,

592 
__öô
 
	$öô_tux3
()

594 if(
DEBUG_MODE_K
==1)

596 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

598 
îr
;

600 
îr
 = 
	`tux3_öô_öodeˇche
();

601 i‡(
îr
)

602 
îr‹
;

604 
îr
 = 
	`tux3_öô_hﬁe_ˇche
();

605 i‡(
îr
)

606 
îr‹_hﬁe
;

608 
îr
 = 
	`ªgi°î_fûesy°em
(&
tux3_fs_ty≥
);

609 i‡(
îr
)

610 
îr‹_fs
;

614 
îr‹_fs
:

615 
	`tux3_de°roy_öodeˇche
();

616 
îr‹_hﬁe
:

617 
	`tux3_de°roy_hﬁe_ˇche
();

618 
îr‹
:

619  
îr
;

620 
	}
}

622 
__exô
 
	$exô_tux3
()

624 if(
DEBUG_MODE_K
==1)

626 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

628 
	`uƒegi°î_fûesy°em
(&
tux3_fs_ty≥
);

629 
	`tux3_de°roy_hﬁe_ˇche
();

630 
	`tux3_de°roy_öodeˇche
();

631 
	}
}

633 
moduÀ_öô
(
öô_tux3
);

634 
moduÀ_exô
(
exô_tux3
);

635 
MODULE_LICENSE
("GPL");

636 
MODULE_ALIAS_FS
("tux3");

	@kernel/trace.h

1 #i‚de‡
TRACE_H


2 
	#TRACE_H


	)

3 
	~"√wDeföes.h
"

4 #ifde‡
__KERNEL__


5 
tux3_åa˚
;

6 
	#as£π
(
ex¥
Ë
	`BUG_ON
(!”x¥))

	)

7 
	#loglöe
(
fmt
, ...Ë
	`¥ötk
(fmt, ##
__VA_ARGS__
)

	)

9 
	#tux3_åa˚
 1

	)

10 
	#loglöe
(
fmt
, ...Ë
	`¥ötf
(fmt, ##
__VA_ARGS__
)

	)

13 
	#åa˚_off
(...Ëdÿ{} 0)

	)

14 
	#åa˚_⁄
(
fmt
, ...) do { \

15 i‡(
tux3_åa˚
 && 
ALLOW_BUILTIN_LOG
==1) \

16 
	`loglöe
("%s: " 
fmt
 "\n" , 
__func__
, ##
__VA_ARGS__
); \

17 } 0)

	)

	@kernel/tux3.h

1 #i‚de‡
TUX3_H


2 
	#TUX3_H


	)

4 #ifde‡
__KERNEL__


5 
	~<löux/vîsi⁄.h
>

6 
	~<löux/kî√l.h
>

7 
	~<löux/sched.h
>

8 
	~<löux/time.h
>

9 
	~<löux/fs.h
>

10 
	~<löux/buf„r_hód.h
>

11 
	~<löux/bio.h
>

12 
	~<löux/blkdev.h
>

13 
	~<löux/muãx.h
>

14 
	~<löux/magic.h
>

15 
	~<löux/¶ab.h
>

16 
	~<löux/x©å.h
>

17 
	~<löux/li°_s‹t.h
>

19 
	~"√wDeföes.h
"

20 
	~"åa˚.h
"

21 
	~"buf„r.h
"

24 
	~"lök.h
"

26 
	#fõldty≥
(
compound
, 
fõld
Ë
	`ty≥of
(((compound *)
NULL
)->fõld)

	)

27 
	#vec£t
(
d
, 
v
, 
n
Ë
	`mem£t
((d), (v), (nË* (*(d)))

	)

28 
	#vecc›y
(
d
, 
s
, 
n
Ë
	`mem˝y
((d), (s), (nË* (*(d)))

	)

29 
	#vecmove
(
d
, 
s
, 
n
Ë
	`memmove
((d), (s), (nË* (*(d)))

	)

31 
u64
 
	töum_t
;

32 
u64
 
	ttuxkey_t
;

34 
ölöe
 *
	$ícode16
(*
©
, 
vÆ
)

36 *(
__be16
 *)
©
 = 
	`˝u_to_be16
(
vÆ
);

37  
©
 + (
u16
);

38 
	}
}

40 
ölöe
 *
	$ícode32
(*
©
, 
vÆ
)

42 *(
__be32
 *)
©
 = 
	`˝u_to_be32
(
vÆ
);

43  
©
 + (
u32
);

44 
	}
}

46 
ölöe
 *
	$ícode64
(*
©
, 
u64
 
vÆ
)

48 *(
__be64
 *)
©
 = 
	`˝u_to_be64
(
vÆ
);

49  
©
 + (
u64
);

50 
	}
}

52 
ölöe
 *
	$ícode48
(*
©
, 
u64
 
vÆ
)

54 
©
 = 
	`ícode16
◊t, 
vÆ
 >> 32);

55  
	`ícode32
(
©
, 
vÆ
);

56 
	}
}

58 
ölöe
 *
	$decode16
(*
©
, *
vÆ
)

60 *
vÆ
 = 
	`be16_to_˝up
(
©
);

61  
©
 + (
u16
);

62 
	}
}

64 
ölöe
 *
	$decode32
(*
©
, *
vÆ
)

66 *
vÆ
 = 
	`be32_to_˝up
(
©
);

67  
©
 + (
u32
);

68 
	}
}

70 
ölöe
 *
	$decode64
(*
©
, 
u64
 *
vÆ
)

72 *
vÆ
 = 
	`be64_to_˝up
(
©
);

73  
©
 + (
u64
);

74 
	}
}

76 
ölöe
 *
	$decode48
(*
©
, 
u64
 *
vÆ
)

78 
∑π1
, 
∑π2
;

79 
©
 = 
	`decode16
◊t, &
∑π1
);

80 
©
 = 
	`decode32
◊t, &
∑π2
);

81 *
vÆ
 = (
u64
)
∑π1
 << 32 | 
∑π2
;

82  
©
;

83 
	}
}

102 
	#TUX3_MAGIC
 { 't', 'u', 'x', '3', 0x20, 0x12, 0x12, 0x20 }

	)

103 
	#TUX3_MAGIC_STR
 \

104 ((
	`ty≥of
(((
disksu≥r
 *)0)->
magic
))
TUX3_MAGIC
)

	)

106 
	#TUX3_MAGIC_LOG
 0x10ad

	)

107 
	#TUX3_MAGIC_BNODE
 0xb4de

	)

108 
	#TUX3_MAGIC_DLEAF
 0x1óf

	)

109 
	#TUX3_MAGIC_DLEAF2
 0xbóf

	)

110 
	#TUX3_MAGIC_ILEAF
 0x90de

	)

111 
	#TUX3_MAGIC_OLEAF
 0x6óf

	)

114 
	#MAX_INODES_BITS
 48

	)

115 
	#MAX_INODES
 ((
u64
)1 << 
MAX_INODES_BITS
)

	)

117 
	#MAX_BLOCKS_BITS
 48

	)

118 
	#MAX_BLOCKS
 ((
block_t
)1 << 
MAX_BLOCKS_BITS
)

	)

119 
	#MAX_EXTENT
 (1 << 6)

	)

121 
	#SB_LOC
 (1 << 12)

	)

122 
	#SB_LEN
 (1 << 12Ë

	)

124 
	#MAX_TUXKEY
 (((
tuxkey_t
)1 << 48Ë- 1)

	)

125 
	#TUXKEY_LIMIT
 (
MAX_TUXKEY
 + 1)

	)

128 
	#TUX_BITMAP_INO
 0

	)

129 
	#TUX_VTABLE_INO
 1

	)

130 
	#TUX_ATABLE_INO
 2

	)

131 
	#TUX_ROOTDIR_INO
 3

	)

132 
	#TUX_VOLMAP_INO
 61

	)

133 
	#TUX_LOGMAP_INO
 62

	)

134 
	#TUX_INVALID_INO
 63

	)

135 
	#TUX_NORMAL_INO
 64

	)

137 
	sdisksu≥r
 {

139 
	mmagic
[8];

140 
__be64
 
	mbúthd©e
;

141 
__be64
 
	mÊags
;

142 
__be16
 
	mblockbôs
;

143 
__be16
 
	munu£d
[3];

144 
__be64
 
	mvﬁblocks
;

147 
__be64
 
	múoŸ
;

148 
__be64
 
	m‹oŸ
;

149 
__be64
 
	mu£döodes
;

154 
__be64
 
	m√xtblock
;

155 
__be64
 
	m©omdi˘size
;

159 
__be32
 
	m‰ì©om
;

160 
__be32
 
	m©omgí
;

161 
__be64
 
	mlogchaö
;

162 
__be32
 
	mlogcou¡
;

163 } 
	g__∑cked
;

165 
	sroŸ
 {

166 
	mdïth
;

167 
block_t
 
	mblock
;

170 
	sbåì
 {

171 
rw_£m≠h‹e
 
	mlock
;

172 
sb
 *
	msb
;

173 
båì_›s
 *
	m›s
;

174 
roŸ
 
	mroŸ
;

175 
u16
 
	míåõs_≥r_Àaf
;

180 
ölöe
 
u64
 
	$∑ck_roŸ
(
roŸ
 *root)

182  (
u64
)
roŸ
->
dïth
 << 48 |ÑoŸ->
block
;

183 
	}
}

185 
ölöe
 
roŸ
 
	$u≈ack_roŸ
(
u64
 
v
)

187  (
roŸ
){ .
dïth
 = 
v
 >> 48, .
block
 = v & (-1ULL >> 16), };

188 
	}
}

192 
	scurs‹
 {

193 
båì
 *
	mbåì
;

194 
	#CURSOR_DEBUG


	)

195 #ifde‡
CURSOR_DEBUG


196 
	#FREE_BUFFER
 ((*)0xdbc06505)

	)

197 
	#FREE_NEXT
 ((*)0xdbc06507)

	)

198 
	mmaxÀvñ
;

200 
	mÀvñ
;

201 
	s∑th_Àvñ
 {

202 
buf„r_hód
 *
	mbuf„r
;

203 
ödex_íåy
 *
	m√xt
;

204 } 
	m∑th
[];

207 
	s°ash
 { 
Êök_hód
 
	mhód
; 
u64
 *
	mpos
, *
	mt›
; };

210 
	#TUX3_FLUSHER_SYNC
 1

	)

212 
	#TUX3_FLUSHER_ASYNC_OWN
 2

	)

214 
	#TUX3_FLUSHER_ASYNC_HACK
 3

	)

217 
	sdñè_ªf
 {

218 
©omic_t
 
	mªfcou¡
;

219 
	mdñè
;

220 #ifde‡
UNIFY_DEBUG


221 
	munify_Êag
;

226 
	ssb_dñè_dúty
 {

227 
li°_hód
 
	mdúty_öodes
;

231 
	ssb
 {

233 
disksu≥r
 
	msu≥r
;

234 
	mthisbig
[
SB_LEN
];

237 #i‡
TUX3_FLUSHER
 =
TUX3_FLUSHER_SYNC


238 
rw_£m≠h‹e
 
	mdñè_lock
;

240 
dñè_ªf
 
__rcu
 *
	mcuºít_dñè
;

241 
dñè_ªf
 
	mdñè_ªfs
[
TUX3_MAX_DELTA
];

242 
	m√xt_dñè
;

243 
	munify
;

245 
	#TUX3_COMMIT_RUNNING_BIT
 0

	)

246 
	#TUX3_COMMIT_PENDING_BIT
 1

	)

247 
	mbackíd_°©e
;

248 #ifde‡
UNIFY_DEBUG


249 
dñè_ªf
 *
	m≥ndög_dñè
;

251 
	mm¨shÆ_dñè
;

252 
	mcommôãd_dñè
;

253 
waô_queue_hód_t
 
	mdñè_evít_wq
;

254 #i‡
TUX3_FLUSHER
 =
TUX3_FLUSHER_ASYNC_OWN


255 
èsk_°ru˘
 *
	mÊush_èsk
;

257 #i‡
TUX3_FLUSHER
 =
TUX3_FLUSHER_ASYNC_HACK


258 
backög_dev_öfo
 
	mbdi
;

261 
båì
 
	môªe
;

262 
båì
 
	mŸªe
;

263 
öode
 *
	mvﬁm≠
;

264 
öode
 *
	mbôm≠
;

265 
öode
 *
	mroŸdú
;

266 
öode
 *
	mvèbÀ
;

267 
öode
 *
	m©abÀ
;

269 
	mblocksize
, 
	mblockbôs
, 
	mblockmask
;

270 
u64
 
	m‰ìöodes
;

272 
block_t
 
	mvﬁblocks
, 
	m‰ìblocks
, 
	m√xtblock
;

273 
öum_t
 
	m√xtöum
;

275 
	míåõs_≥r_node
;

276 
	mvîsi⁄
;

278 
	m©omªf_ba£
;

279 
	mu«tom_ba£
;

280 
loff_t
 
	m©omdi˘size
;

281 
	m‰ì©om
;

282 
	m©omgí
;

287 
öode
 *
	mlogm≠
;

288 
	mlog√xt
;

289 
buf„r_hód
 *
	mlogbuf
;

290 *
	mlogpos
, *
	mlogt›
;

292 
li°_hód
 
	m‹ph™_add
;

293 
li°_hód
 
	m‹ph™_dñ
;

295 
°ash
 
	mde‰ì
;

296 
°ash
 
	mdeunify
;

298 
li°_hód
 
	munify_buf„rs
;

300 
iowaô
 *
	miowaô
;

305 
li°_hód
 
	mÆloc_öodes
;

307 
•ölock_t
 
	mf‹ked_buf„rs_lock
;

308 
lök
 
	mf‹ked_buf„rs
;

310 
•ölock_t
 
	mdúty_öodes_lock
;

312 
sb_dñè_dúty
 
	ms_ddc
[
TUX3_MAX_DELTA
];

313 #ifde‡
__KERNEL__


314 
su≥r_block
 *
	mvfs_sb
;

316 
dev
 *
	mdev
;

317 
loff_t
 
	ms_maxbyãs
;

322 
	#BLOCK_SEG_HOLE
 (1 << 0)

	)

323 
	#BLOCK_SEG_NEW
 (1 << 1)

	)

325 
	sblock_£gmít
 {

326 
block_t
 
	mblock
;

327 
	mcou¡
;

328 
	m°©e
;

335 
	#BALLOC_PARTIAL
 (1 << 0)

	)

339 
	slogblock
 {

340 
__be16
 
	mmagic
;

341 
__be16
 
	mbyãs
;

342 
u32
 
	munu£d
;

343 
__be64
 
	mlogchaö
;

344 
	md©a
[];

348 
	mLOG_BALLOC
 = 0x33,

349 
	mLOG_BFREE
,

350 
	mLOG_BFREE_ON_UNIFY
,

351 
	mLOG_BFREE_RELOG
,

352 
	mLOG_LEAF_REDIRECT
,

353 
	mLOG_LEAF_FREE
,

354 
	mLOG_BNODE_REDIRECT
,

355 
	mLOG_BNODE_ROOT
,

356 
	mLOG_BNODE_SPLIT
,

357 
	mLOG_BNODE_ADD
,

358 
	mLOG_BNODE_UPDATE
,

359 
	mLOG_BNODE_MERGE
,

360 
	mLOG_BNODE_DEL
,

361 
	mLOG_BNODE_ADJUST
,

362 
	mLOG_BNODE_FREE
,

363 
	mLOG_ORPHAN_ADD
,

364 
	mLOG_ORPHAN_DEL
,

365 
	mLOG_FREEBLOCKS
,

366 
	mLOG_UNIFY
,

367 
	mLOG_DELTA
,

368 
	mLOG_TYPES


372 
	#TUX3_INVALID_PRESENT
 (-1U)

	)

375 
	stux3_üâr_d©a
 {

376 
	m¥e£¡
;

378 
umode_t
 
	mi_mode
;

379 
uid_t
 
	mi_uid
;

380 
gid_t
 
	mi_gid
;

381 
	mi_∆ök
;

382 
dev_t
 
	mi_rdev
;

383 
loff_t
 
	mi_size
;

385 
time•ec
 
	mi_mtime
;

386 
time•ec
 
	mi_˘ime
;

387 
u64
 
	mi_vîsi⁄
;

391 
	söode_dñè_dúty
 {

392 
li°_hód
 
	mdúty_buf„rs
;

393 
li°_hód
 
	mdúty_hﬁes
;

394 
li°_hód
 
	mdúty_li°
;

399 
tux3_üâr_d©a
 
	mid©a
;

402 
	gxˇche
;

403 
	stux3_öode
 {

404 
båì
 
	mbåì
;

405 
öum_t
 
	möum
;

406 
xˇche
 *
	mxˇche
;

407 
li°_hód
 
	mÆloc_li°
;

408 
li°_hód
 
	m‹ph™_li°
;

411 
•ölock_t
 
	mhﬁe_exã¡s_lock
;

412 
li°_hód
 
	mhﬁe_exã¡s
;

414 
•ölock_t
 
	mlock
;

416 
	mÊags
;

417 
	m¥e£¡
;

419 
öode_dñè_dúty
 
	mi_ddc
[
TUX3_MAX_DELTA
];

420 #ifde‡
__KERNEL__


421 (*
	mio
)(
	mrw
, 
bufvec
 *
	mbufvec
);

424 
öode
 
	mvfs_öode
;

425 
	mis_com¥es£d
;

428 
ölöe
 
tux3_öode
 *
	$tux_öode
(
öode
 *inode)

430  
	`c⁄èöî_of
(
öode
, 
tux3_öode
, 
vfs_öode
);

431 
	}
}

433 
ölöe
 
öode
 *
	$båì_öode
(
båì
 *btree)

435  &
	`c⁄èöî_of
(
båì
, 
tux3_öode
, båì)->
vfs_öode
;

436 
	}
}

437 #ifde‡
__KERNEL__


438 
ölöe
 
sb
 *
	$tux_sb
(
su≥r_block
 *
sb
)

440  
sb
->
s_fs_öfo
;

441 
	}
}

443 
ölöe
 
su≥r_block
 *
	$vfs_sb
(
sb
 *sb)

445  
sb
->
vfs_sb
;

446 
	}
}

448 
addªss_•a˚
 
	tm≠_t
;

450 
ölöe
 
m≠_t
 *
	$m≠pög
(
öode
 *inode)

452  
öode
->
i_m≠pög
;

453 
	}
}

455 
ölöe
 *
	$mÆloc
(
size_t
 
size
)

457 
	`might_¶ìp
();

458  
	`kmÆloc
(
size
, 
GFP_NOFS
);

459 
	}
}

461 
ölöe
 
	$‰ì
(*
±r
)

463 
	`k‰ì
(
±r
);

464 
	}
}

466 
ölöe
 
block_devi˚
 *
	$sb_dev
(
sb
 *sb)

468  
sb
->
vfs_sb
->
s_bdev
;

469 
	}
}

471 
ölöe
 
sb
 *
	$tux_sb
(
sb
 *sb)

473  
sb
;

474 
	}
}

476 
ölöe
 
sb
 *
	$vfs_sb
(
sb
 *sb)

478  
sb
;

479 
	}
}

481 
ölöe
 
m≠_t
 *
	$m≠pög
(
öode
 *inode)

483  
öode
->
m≠
;

484 
	}
}

486 
ölöe
 
dev
 *
	$sb_dev
(
sb
 *sb)

488  
sb
->
dev
;

489 
	}
}

493 
ölöe
 
	$tux3_dñè
(
dñè
)

495  
dñè
 & (
TUX3_MAX_DELTA
 - 1);

496 
	}
}

499 
ölöe
 
sb_dñè_dúty
 *
	$tux3_sb_ddc
(
sb
 *sb, 
dñè
)

501  &
sb
->
s_ddc
[
	`tux3_dñè
(
dñè
)];

502 
	}
}

505 
ölöe
 
öode_dñè_dúty
 *
	$tux3_öode_ddc
(
öode
 *inode,

506 
dñè
)

508  &
	`tux_öode
(
öode
)->
i_ddc
[
	`tux3_dñè
(
dñè
)];

509 
	}
}

511 
ölöe
 
tux3_öode
 *
	$i_ddc_to_öode
(
öode_dñè_dúty
 *
i_ddc
,

512 
dñè
)

514  
	`c⁄èöî_of
(
i_ddc
, 
tux3_öode
, i_ddc[
	`tux3_dñè
(
dñè
)]);

515 
	}
}

518 
ölöe
 
li°_hód
 *
	$tux3_dúty_buf„rs
(
öode
 *inode,

519 
dñè
)

521  &
	`tux3_öode_ddc
(
öode
, 
dñè
)->
dúty_buf„rs
;

522 
	}
}

524 
	stux_üâr
 {

525 
kuid_t
 
	muid
;

526 
kgid_t
 
	mgid
;

527 
umode_t
 
	mmode
;

530 
ölöe
 
båì
 *
	$ôªe_båì
(
sb
 *sb)

532  &
sb
->
ôªe
;

533 
	}
}

535 
ölöe
 
båì
 *
	$Ÿªe_båì
(
sb
 *sb)

537  &
sb
->
Ÿªe
;

538 
	}
}

540 
	#TUX_LINK_MAX
 (1 << 15Ë

	)

542 
	#TUX_NAME_LEN
 255

	)

546 
__be64
 
	möum
;

547 
__be16
 
	mªc_Àn
;

548 
u8
 
	m«me_Àn
, 
	mty≥
;

549 
	m«me
[];

555 } 
	ttux_dúít
;

557 
	sbåì_key_ønge
 {

558 
tuxkey_t
 
	m°¨t
;

559 
	mÀn
;

562 
	sbåì_›s
 {

563 (*
	mbåì_öô
)(
båì
 *
	mbåì
);

564 (*
	mÀaf_öô
)(
båì
 *
	mbåì
, *
	mÀaf
);

565 
tuxkey_t
 (*
Àaf_•lô
)(
båì
 *
	mbåì
,Åuxkey_à
	mhöt
, *
	m‰om
, *
	möto
);

567 (*
	mÀaf_ch›
)(
båì
 *
	mbåì
, 
tuxkey_t
 
	m°¨t
, 
u64
 
	mÀn
, *
	mÀaf
);

569 (*
	mÀaf_mîge
)(
båì
 *
	mbåì
, *
	möto
, *
	m‰om
);

571 (*
	mÀaf_wrôe
)(
båì
 *
	mbåì
, 
tuxkey_t
 
	mkey_bŸtom
,Åuxkey_à
	mkey_limô
, *
	mÀaf
, 
båì_key_ønge
 *
	mkey
,Åuxkey_à*
	m•lô_höt
);

572 (*
	mÀaf_ªad
)(
båì
 *
	mbåì
, 
tuxkey_t
 
	mkey_bŸtom
,Åuxkey_à
	mkey_limô
, *
	mÀaf
, 
båì_key_ønge
 *
	mkey
);

573 (*
	mbÆloc
)(
sb
 *
	msb
, 
	mblocks
, 
block_£gmít
 *
	m£g
, 
	m£gs
);

574 (*
	mb‰ì
)(
sb
 *
	msb
, 
block_t
 
	mblock
, 
	mblocks
);

576 *
	m¥iv©e_›s
;

581 (*
	mÀaf_¢iff
)(
båì
 *
	mbåì
, *
	mÀaf
);

583 (*
	mÀaf_ˇn_‰ì
)(
båì
 *
	mbåì
, *
	mÀaf
);

584 (*
	mÀaf_dump
)(
båì
 *
	mbåì
, *
	mÀaf
);

588 
	sª∂ay
 {

589 
sb
 *
	msb
;

592 
li°_hód
 
	mlog_‹ph™_add
;

593 
li°_hód
 
	m‹ph™_ö_Ÿªe
;

596 *
	munify_pos
;

597 
block_t
 
	munify_ödex
;

598 
block_t
 
	mblockƒs
[];

602 
roŸ
 
no_roŸ
;

603 
ölöe
 
	$has_roŸ
(
båì
 *btree)

606  (
båì
->
roŸ
.
block
 !
no_roŸ
.block) ||

607 (
båì
->
roŸ
.
dïth
 !
no_roŸ
.depth);

608 
	}
}

611 
ölöe
 *
	$±r_ªdúe˘
(*
±r
, *
§c
, *
d°
)

613 i‡(
±r
) {

614 
	`as£π
(
±r
 >
§c
);

615  
d°
 + (
±r
 - 
§c
);

617  
NULL
;

618 
	}
}

620 #ifde‡
__KERNEL__


621 
ölöe
 
time•ec
 
	$gëtime
()

623  
	`cuºít_kî√l_time
();

624 
	}
}

626 
ölöe
 
öode
 *
	$buf„r_öode
(
buf„r_hód
 *
buf„r
)

628  
buf„r
->
b_∑ge
->
m≠pög
->
ho°
;

629 
	}
}

632 
ölöe
 
block_t
 
	$bufödex
(
buf„r_hód
 *
buf„r
)

634 
∑ge
 *∑gê
buf„r
->
b_∑ge
;

636 #i‡
BITS_PER_LONG
 == 64

637  (
	`∑ge_off£t
(
∑ge
Ë+ 
	`bh_off£t
(
buf„r
)Ë/ buf„r->
b_size
;

639 c⁄° 
blockbôs
 = 
	`ffs
(
buf„r
->
b_size
) - 1;

640  (
	`∑ge_off£t
(
∑ge
Ë+ 
	`bh_off£t
(
buf„r
)Ë>> 
blockbôs
;

642 
	}
}

645 c⁄° 
fûe_›î©i⁄s
 
tux_dú_f›s
;

646 c⁄° 
öode_›î©i⁄s
 
tux_dú_i›s
;

649 
tux3_gë_block
(
öode
 *öode, 
£˘‹_t
 
iblock
,

650 
buf„r_hód
 *
bh_ªsu…
, 
¸óã
);

651 
buf„r_hód
 *
__gë_buf„r
(
∑ge
 *∑ge, 
off£t
);

652 
tux3_åy_ˇn˚l_dúty_∑ge
(
∑ge
 *page);

653 
tux3_åunˇã_∑πül_block
(
öode
 *öode, 
loff_t
 
√wsize
);

654 
tux3_åunˇã_öode_∑ges_ønge
(
addªss_•a˚
 *
m≠pög
,

655 
loff_t
 
l°¨t
,Üoff_à
Ànd
);

656 c⁄° 
addªss_•a˚_›î©i⁄s
 
tux_fûe_a›s
;

657 c⁄° 
addªss_•a˚_›î©i⁄s
 
tux_symlök_a›s
;

658 c⁄° 
addªss_•a˚_›î©i⁄s
 
tux_blk_a›s
;

659 c⁄° 
addªss_•a˚_›î©i⁄s
 
tux_vﬁ_a›s
;

662 
tux3_sync_fûe
(
fûe
 *fûe, 
loff_t
 
°¨t
,Üoff_à
íd
, 
d©async
);

663 
tux3_gë©å
(
vfsmou¡
 *
m¡
, 
díåy
 *díåy, 
k°©
 *
°©
);

664 
tux3_£èâr
(
díåy
 *díåy, 
üâr
 *iattr);

667 c⁄° 
öode_›î©i⁄s
 
tux_symlök_i›s
;

670 
vecio
(
rw
, 
block_devi˚
 *
dev
, 
loff_t
 
off£t
, 
vecs
,

671 
bio_vec
 *
vec
, 
bio_íd_io_t
 
ídio
, *
öfo
);

672 
syncio
(
rw
, 
block_devi˚
 *
dev
, 
loff_t
 
off£t
, 
vecs
,

673 
bio_vec
 *
vec
);

674 
devio
(
rw
, 
block_devi˚
 *
dev
, 
loff_t
 
off£t
, *
d©a
,

675 
Àn
);

676 
blockio
(
rw
, 
sb
 *sb, 
buf„r_hód
 *
buf„r
, 
block_t
 
block
);

677 
blockio_vec
(
rw
, 
bufvec
 *bufvec, 
block_t
 
block
, 
cou¡
);

679 
	#tux3_msg
(
sb
, 
fmt
, ...) \

680 
	`__tux3_msg
(
sb
, 
KERN_INFO
, "", 
fmt
, ##
__VA_ARGS__
)

	)

681 
	#tux3_îr
(
sb
, 
fmt
, ...) \

682 
	`__tux3_msg
(
sb
, 
KERN_ERR
, "Érror", \

683 "%s:%d: " 
fmt
, 
__func__
, 
__LINE__
, ##
__VA_ARGS__
)

	)

684 
	#tux3_w¨n
(
sb
, 
fmt
, ...) \

685 
	`__tux3_msg
(
sb
, 
KERN_WARNING
, " w¨nög", 
fmt
, ##
__VA_ARGS__
)

	)

688 
buf„r_hód
 *
≥ekblk
(
addªss_•a˚
 *
m≠pög
, 
block_t
 
iblock
);

689 
buf„r_hód
 *
blockªad
(
addªss_•a˚
 *
m≠pög
, 
block_t
 
iblock
);

690 
buf„r_hód
 *
blockgë
(
addªss_•a˚
 *
m≠pög
, 
block_t
 
iblock
);

694 
block_t
 
bôm≠_dump
(
öode
 *öode, block_à
°¨t
, block_à
cou¡
);

695 
bÆloc_‰om_ønge
(
sb
 *sb, 
block_t
 
°¨t
, block_à
cou¡
,

696 
blocks
, 
Êags
,

697 
block_£gmít
 *
£g
, 
£gs
);

698 
bÆloc
(
sb
 *sb, 
blocks
, 
block_£gmít
 *
£g
, 
£gs
);

699 
bÆloc_∑πül
(
sb
 *sb, 
blocks
,

700 
block_£gmít
 *
£g
, 
£gs
);

701 
b‰ì
(
sb
 *sb, 
block_t
 
°¨t
, 
blocks
);

702 
ª∂ay_upd©e_bôm≠
(
ª∂ay
 *
Ω
, 
block_t
 
°¨t
, 
blocks
, 
£t
);

705 
ˇlc_íåõs_≥r_node
(
blocksize
);

706 
buf„r_hód
 *
curs‹_Àafbuf
(
curs‹
 *cursor);

707 
ªÀa£_curs‹
(
curs‹
 *cursor);

708 
curs‹
 *
Æloc_curs‹
(
båì
 *btree, );

709 
‰ì_curs‹
(
curs‹
 *cursor);

711 
öô_båì
(
båì
 *båì, 
sb
 *sb, 
roŸ
ÑoŸ, 
båì_›s
 *
›s
);

712 
Æloc_em±y_båì
(
båì
 *btree);

713 
‰ì_em±y_båì
(
båì
 *btree);

714 
buf„r_hód
 *
√w_Àaf
(
båì
 *btree);

715 
tuxkey_t
 
curs‹_√xt_key
(
curs‹
 *cursor);

716 
tuxkey_t
 
curs‹_this_key
(
curs‹
 *cursor);

717 
båì_¥obe
(
curs‹
 *curs‹, 
tuxkey_t
 
key
);

718 (*
	tbåì_åavî£_func_t
)(
	tbåì
 *båì, 
	ttuxkey_t
 
	tkey_bŸtom
,

719 
	ttuxkey_t
 
	tkey_limô
, *
	tÀaf
,

720 
	ttuxkey_t
 
	tkey
, 
	tu64
 
	tÀn
, *
	td©a
);

721 
	`båì_åavî£
(
curs‹
 *curs‹, 
tuxkey_t
 
key
, 
u64
 
Àn
,

722 
båì_åavî£_func_t
 
func
, *
d©a
);

723 
	`båì_ch›
(
båì
 *båì, 
tuxkey_t
 
°¨t
, 
u64
 
Àn
);

724 
	`båì_ö£π_Àaf
(
curs‹
 *curs‹, 
tuxkey_t
 
key
, 
buf„r_hód
 *
Àafbuf
);

725 *
	`båì_ex∑nd
(
curs‹
 *curs‹, 
tuxkey_t
 
key
, 
√wsize
);

726 
	`båì_wrôe
(
curs‹
 *curs‹, 
båì_key_ønge
 *
key
);

727 
	`båì_ªad
(
curs‹
 *curs‹, 
båì_key_ønge
 *
key
);

728 
	`show_åì_ønge
(
båì
 *båì, 
tuxkey_t
 
°¨t
, 
cou¡
);

729 
	`show_åì
(
båì
 *btree);

730 
	`curs‹_ªdúe˘
(
curs‹
 *cursor);

731 
	`ª∂ay_bnode_ªdúe˘
(
ª∂ay
 *
Ω
, 
block_t
 
ﬁdblock
, block_à
√wblock
);

732 
	`ª∂ay_bnode_roŸ
(
ª∂ay
 *
Ω
, 
block_t
 
roŸ
, 
cou¡
,

733 
block_t
 
À·
, block_à
right
, 
tuxkey_t
 
rkey
);

734 
	`ª∂ay_bnode_•lô
(
ª∂ay
 *
Ω
, 
block_t
 
§c
, 
pos
, block_à
d°
);

735 
	`ª∂ay_bnode_add
(
ª∂ay
 *
Ω
, 
block_t
 
∑ª¡
, block_à
chûd
, 
tuxkey_t
 
key
);

736 
	`ª∂ay_bnode_upd©e
(
ª∂ay
 *
Ω
, 
block_t
 
∑ª¡
, block_à
chûd
, 
tuxkey_t
 
key
);

737 
	`ª∂ay_bnode_mîge
(
ª∂ay
 *
Ω
, 
block_t
 
§c
, block_à
d°
);

738 
	`ª∂ay_bnode_dñ
(
ª∂ay
 *
Ω
, 
block_t
 
bnode
, 
tuxkey_t
 
key
, 
cou¡
);

739 
	`ª∂ay_bnode_adju°
(
ª∂ay
 *
Ω
, 
block_t
 
bnode
, 
tuxkey_t
 
‰om
,Åuxkey_à
to
);

742 
	`£tup_sb
(
sb
 *sb, 
disksu≥r
 *
su≥r
);

743 
	`lﬂd_sb
(
sb
 *sb);

744 
	`ßve_sb
(
sb
 *sb);

745 
	`≠∂y_de„ªd_b‰ì
(
sb
 *sb, 
u64
 
vÆ
);

746 
	`tux3_°¨t_backíd
(
sb
 *sb);

747 
	`tux3_íd_backíd
();

748 
	`tux3_undî_backíd
(
sb
 *sb);

749 
	`f‹˚_unify
(
sb
 *sb);

750 
	`f‹˚_dñè
(
sb
 *sb);

751 
	`tux3_gë_cuºít_dñè
();

752 
	`tux3_öode_dñè
(
öode
 *inode);

753 
	`ch™ge_begö_©omic
(
sb
 *sb);

754 
	`ch™ge_íd_©omic
(
sb
 *sb);

755 
	`ch™ge_begö_©omic_√°ed
(
sb
 *sb, **
±r
);

756 
	`ch™ge_íd_©omic_√°ed
(
sb
 *sb, *
±r
);

757 
	`ch™ge_begö
(
sb
 *sb);

758 
	`ch™ge_íd
(
sb
 *sb);

759 
	`ch™ge_begö_if_√eded
(
sb
 *sb);

760 
	`ch™ge_íd_if_√eded
(
sb
 *sb);

763 
	~"commô_Êushî.h
"

766 
	`tux_upd©e_dúít
(
öode
 *
dú
, 
buf„r_hód
 *
buf„r
,

767 
tux_dúít
 *
íåy
, 
öode
 *
√w_öode
);

768 
	`tux_¸óã_dúít
(
öode
 *
dú
, c⁄° 
q°r
 *q°r, 
öum_t
 
öum
,

769 
umode_t
 
mode
);

770 
tux_dúít
 *
	`tux_föd_dúít
(
öode
 *
dú
, c⁄° 
q°r
 *qstr,

771 
buf„r_hód
 **
ªsu…
);

772 
	`tux_dñëe_íåy
(
öode
 *
dú
, 
buf„r_hód
 *
buf„r
,

773 
tux_dúít
 *
íåy
);

774 
	`tux_dñëe_dúít
(
öode
 *
dú
, 
buf„r_hód
 *
buf„r
,

775 
tux_dúít
 *
íåy
);

776 
	`tux_ªaddú
(
fûe
 *fûe, *
°©e
, 
fûldú_t
 
fûldú
);

777 
	`tux_dú_is_em±y
(
öode
 *
dú
);

780 
	~"dÀaf.h
"

783 
båì_›s
 
dåì2_›s
;

784 
ölöe
 
båì_›s
 *
	$dåì_›s
()

786  &
dåì2_›s
;

787 
	}
}

790 
tux3_fûem≠_ovîwrôe_io
(
rw
, 
bufvec
 *bufvec);

791 
tux3_fûem≠_ªdúe˘_io
(
rw
, 
bufvec
 *bufvec);

794 
dump_©ås
(
öode
 *inode);

795 *
ícode_köd
(*
©ås
, 
köd
, 
vîsi⁄
);

796 *
decode_köd
(*
©ås
, *
köd
, *
vîsi⁄
);

797 
ûóf_©å_›s
 
üâr_›s
;

800 
	gûóf
;

801 *
ûóf_lookup
(
båì
 *båì, 
öum_t
 
öum
, 
ûóf
 *
Àaf
, *
ªsu…
);

802 
ûóf_föd_‰ì
(
båì
 *båì, 
tuxkey_t
 
key_bŸtom
,

803 
tuxkey_t
 
key_limô
, *
Àaf
,

804 
tuxkey_t
 
key
, 
u64
 
Àn
, *
d©a
);

805 
	sûóf_íumøã_cb
 {

806 (*
	mˇŒback
)(
båì
 *
	mbåì
, 
öum_t
 
	möum
, *
	m©ås
,

807 
	msize
, *
	md©a
);

808 *
	md©a
;

810 
ûóf_íumî©e
(
båì
 *båì, 
tuxkey_t
 
key_bŸtom
,

811 
tuxkey_t
 
key_limô
, *
Àaf
,

812 
tuxkey_t
 
key
, 
u64
 
Àn
, *
d©a
);

813 
båì_›s
 
ôªe_›s
;

814 
båì_›s
 
Ÿªe_›s
;

817 
tux3_öode_c›y_©ås
(
öode
 *öode, 
dñè
);

818 
öode
 *
tux_√w_vﬁm≠
(
sb
 *sb);

819 
öode
 *
tux_√w_logm≠
(
sb
 *sb);

820 
dñ_de„r_Æloc_öum
(
öode
 *inode);

821 
öode
 *
tux_¸óã_öode
(öodê*
dú
, 
tux_üâr
 *
üâr
,

822 
dev_t
 
rdev
);

823 
öode
 *
tux_¸óã_•ecific_öode
(öodê*
dú
, 
öum_t
 
öum
,

824 
tux_üâr
 *
üâr
, 
dev_t
 
rdev
);

825 
öode
 *
tux3_igë
(
sb
 *sb, 
öum_t
 
öum
);

826 
öode
 *
tux3_ûookup_nowaô
(
sb
 *sb, 
öum_t
 
öum
);

827 
öode
 *
tux3_ûookup
(
sb
 *sb, 
öum_t
 
öum
);

828 
tux3_ßve_öode
(
öode
 *öode, 
tux3_üâr_d©a
 *
id©a
,

829 
dñè
);

830 
tux3_purge_öode
(
öode
 *öode, 
tux3_üâr_d©a
 *
id©a
,

831 
dñè
);

832 
tux3_dr›_öode
(
öode
 *inode);

833 
tux3_evi˘_öode
(
öode
 *inode);

834 
igë_if_dúty
(
öode
 *inode);

837 
log_size
[];

838 
log_√xt
(
sb
 *sb);

839 
log_dr›
(
sb
 *sb);

840 
log_föish
(
sb
 *sb);

841 
log_föish_cy˛e
(
sb
 *sb, 
disˇrd
);

842 
tux3_logm≠_io
(
rw
, 
bufvec
 *bufvec);

843 
log_bÆloc
(
sb
 *sb, 
block_t
 
block
, 
cou¡
);

844 
log_b‰ì
(
sb
 *sb, 
block_t
 
block
, 
cou¡
);

845 
log_b‰ì_⁄_unify
(
sb
 *sb, 
block_t
 
block
, 
cou¡
);

846 
log_b‰ì_ªlog
(
sb
 *sb, 
block_t
 
block
, 
cou¡
);

847 
log_Àaf_ªdúe˘
(
sb
 *sb, 
block_t
 
ﬁdblock
, block_à
√wblock
);

848 
log_Àaf_‰ì
(
sb
 *sb, 
block_t
 
Àaf
);

849 
log_bnode_ªdúe˘
(
sb
 *sb, 
block_t
 
ﬁdblock
, block_à
√wblock
);

850 
log_bnode_roŸ
(
sb
 *sb, 
block_t
 
roŸ
, 
cou¡
,

851 
block_t
 
À·
, block_à
right
, 
tuxkey_t
 
rkey
);

852 
log_bnode_•lô
(
sb
 *sb, 
block_t
 
§c
, 
pos
, block_à
d°
);

853 
log_bnode_add
(
sb
 *sb, 
block_t
 
∑ª¡
, block_à
chûd
, 
tuxkey_t
 
key
);

854 
log_bnode_upd©e
(
sb
 *sb, 
block_t
 
∑ª¡
, block_à
chûd
,

855 
tuxkey_t
 
key
);

856 
log_bnode_mîge
(
sb
 *sb, 
block_t
 
§c
, block_à
d°
);

857 
log_bnode_dñ
(
sb
 *sb, 
block_t
 
node
, 
tuxkey_t
 
key
, 
cou¡
);

858 
log_bnode_adju°
(
sb
 *sb, 
block_t
 
node
, 
tuxkey_t
 
‰om
,Åuxkey_à
to
);

859 
log_bnode_‰ì
(
sb
 *sb, 
block_t
 
bnode
);

860 
log_‹ph™_add
(
sb
 *sb, 
vîsi⁄
, 
tuxkey_t
 
öum
);

861 
log_‹ph™_dñ
(
sb
 *sb, 
vîsi⁄
, 
tuxkey_t
 
öum
);

862 
log_‰ìblocks
(
sb
 *sb, 
block_t
 
‰ìblocks
);

863 
log_dñè
(
sb
 *sb);

864 
log_unify
(
sb
 *sb);

866 (*
	tun°ash_t
)(
	tsb
 *sb, 
	tu64
 
	tvÆ
);

867 
	`°ash_öô
(
°ash
 *stash);

868 
	`°ash_vÆue
(
°ash
 *°ash, 
u64
 
vÆue
);

869 
	`un°ash
(
sb
 *sb, 
°ash
 *
de‰ì
, 
un°ash_t
 
a˘‹
);

870 
	`°ash_wÆk
(
sb
 *sb, 
°ash
 *°ash, 
un°ash_t
 
a˘‹
);

871 
	`de„r_b‰ì
(
°ash
 *
de‰ì
, 
block_t
 
block
, 
cou¡
);

872 
	`de°roy_de„r_b‰ì
(
°ash
 *
de‰ì
);

875 
	`˛ón_‹ph™_li°
(
li°_hód
 *
hód
);

876 
ûóf_©å_›s
 
ﬂâr_›s
;

877 
	`tux3_unify_‹ph™_add
(
sb
 *sb, 
li°_hód
 *
‹ph™_add
);

878 
	`tux3_unify_‹ph™_dñ
(
sb
 *sb, 
li°_hód
 *
‹ph™_dñ
);

879 
	`tux3_make_‹ph™_add
(
öode
 *inode);

880 
	`tux3_make_‹ph™_dñ
(
öode
 *inode);

881 
	`ª∂ay_‹ph™_add
(
ª∂ay
 *
Ω
, 
vîsi⁄
, 
öum_t
 
öum
);

882 
	`ª∂ay_‹ph™_dñ
(
ª∂ay
 *
Ω
, 
vîsi⁄
, 
öum_t
 
öum
);

883 
	`ª∂ay_ùut_‹ph™_öodes
(
sb
 *sb,

884 
li°_hód
 *
‹ph™_ö_Ÿªe
,

885 
de°roy
);

886 
	`ª∂ay_lﬂd_‹ph™_öodes
(
ª∂ay
 *
Ω
);

889 
ª∂ay
 *
	`tux3_öô_fs
(
sb
 *
sbi
);

892 
ª∂ay
 *
	`ª∂ay_°age1
(
sb
 *sb);

893 
	`ª∂ay_°age2
(
ª∂ay
 *
Ω
);

894 
	`ª∂ay_°age3
(
ª∂ay
 *
Ω
, 
≠∂y
);

897 
	$__¥ötf
(4, 5)

898 
	`__tux3_msg
(
sb
 *sb, c⁄° *
Àvñ
, c⁄° *
¥efix
,

899 c⁄° *
fmt
, ...);

900 
	$__¥ötf
(1, 2)

901 
	`__tux3_dbg
(c⁄° *
fmt
, ...);

902 
	#tux3_dbg
(
fmt
 , ...) \

903 
	`__tux3_dbg
("%s:%d: " 
fmt
 "\n", 
__func__
, 
__LINE__
, ##
__VA_ARGS__
)

	)

904 
	$__¥ötf
(4, 5)

905 
	`__tux3_fs_îr‹
(
sb
 *sb, c⁄° *
func
, 
löe
,

906 c⁄° *
fmt
, ...);

907 
	#tux3_fs_îr‹
(
sb
, 
fmt
, ...) \

908 
	`__tux3_fs_îr‹
(
sb
, 
__func__
, 
__LINE__
, 
fmt
 , ##
__VA_ARGS__
)

	)

910 
	`hexdump
(*
d©a
, 
size
);

911 
	`£t_bôs
(
u8
 *
bôm≠
, 
°¨t
, 
cou¡
);

912 
	`˛ór_bôs
(
u8
 *
bôm≠
, 
°¨t
, 
cou¡
);

913 
	`Æl_£t
(
u8
 *
bôm≠
, 
°¨t
, 
cou¡
);

914 
	`Æl_˛ór
(
u8
 *
bôm≠
, 
°¨t
, 
cou¡
);

915 
	`byãbôs
(
u8
 
c
);

918 
	`tux3_£t_öode_no_Êush
(
öode
 *inode);

919 
	`tux3_£t_öode_Æways_dúty
(
öode
 *inode);

920 
	`tux3_m¨k_båì_dúty
(
båì
 *btree);

921 
	`__tux3_m¨k_öode_dúty
(
öode
 *öode, 
Êags
);

922 
ölöe
 
	$tux3_m¨k_öode_dúty
(
öode
 *inode)

924 
	`__tux3_m¨k_öode_dúty
(
öode
, 
I_DIRTY
);

925 
	}
}

926 
ölöe
 
	$tux3_m¨k_öode_dúty_sync
(
öode
 *inode)

928 
	`__tux3_m¨k_öode_dúty
(
öode
, 
I_DIRTY_SYNC
);

929 
	}
}

931 
tux3_dúty_öode
(
öode
 *öode, 
Êags
);

932 
tux3_m¨k_öode_to_dñëe
(
öode
 *inode);

933 
tux3_üârdúty
(
öode
 *inode);

934 
tux3_x©ådúty
(
öode
 *inode);

935 
tux3_x©å_ªad_™d_˛ór
(
öode
 *inode);

936 
tux3_˛ór_dúty_öode
(
öode
 *inode);

937 
__tux3_m¨k_buf„r_dúty
(
buf„r_hód
 *
buf„r
, 
dñè
);

938 
tux3_m¨k_buf„r_dúty
(
buf„r_hód
 *
buf„r
);

939 
tux3_m¨k_buf„r_unify
(
buf„r_hód
 *
buf„r
);

940 
tux3_m¨k_öode_‹ph™
(
tux3_öode
 *
tuxnode
);

941 
tux3_öode_is_‹ph™
(
tux3_öode
 *
tuxnode
);

942 
tux3_Êush_öode_öã∫Æ
(
öode
 *öode, 
dñè
);

943 
tux3_Êush_öode
(
öode
 *öode, 
dñè
);

944 
tux3_Êush_öodes
(
sb
 *sb, 
dñè
);

945 
tux3_˛ór_dúty_öodes
(
sb
 *sb, 
dñè
);

946 
tux3_check_de°roy_öode_Êags
(
öode
 *inode);

949 #i‚de‡
ENOATTR


950 
	#ENOATTR
 
ENODATA


	)

953 
©abÀ_öô_ba£
(
sb
 *sb);

954 
xˇche_dump
(
öode
 *inode);

955 
‰ì_xˇche
(
öode
 *inode);

956 
√w_xˇche
(
öode
 *öode, 
size
);

957 
xˇche_ªmove_Æl
(
öode
 *inode);

958 
gë_x©å
(
öode
 *öode, c⁄° *
«me
, 
Àn
,

959 *
d©a
, 
size
);

960 
£t_x©å
(
öode
 *öode, c⁄° *
«me
, 
Àn
,

961 c⁄° *
d©a
, 
size
, 
Êags
);

962 
dñ_x©å
(
öode
 *öode, c⁄° *
«me
, 
Àn
);

963 
li°_x©å
(
öode
 *öode, *
ãxt
, 
size_t
 
size
);

964 
ícode_xsize
(
öode
 *inode);

965 *
ícode_x©ås
(
öode
 *öode, *
©ås
, 
size
);

966 
decode_xsize
(
öode
 *öode, *
©ås
, 
size
);

967 *
decode_x©å
(
öode
 *öode, *
©ås
);

969 
ölöe
 
buf„r_hód
 *
	$vﬁ_föd_gë_block
(
sb
 *sb, 
block_t
 
block
)

971  
	`≥ekblk
(
	`m≠pög
(
sb
->
vﬁm≠
), 
block
);

972 
	}
}

974 
ölöe
 
buf„r_hód
 *
	$vﬁ_gëblk
(
sb
 *sb, 
block_t
 
block
)

976  
	`blockgë
(
	`m≠pög
(
sb
->
vﬁm≠
), 
block
);

977 
	}
}

979 
ölöe
 
buf„r_hód
 *
	$vﬁ_bªad
(
sb
 *sb, 
block_t
 
block
)

981  
	`blockªad
(
	`m≠pög
(
sb
->
vﬁm≠
), 
block
);

982 
	}
}

984 
ölöe
 
	$is_com¥es£d_fûe
(
öode
 *inode)

986  
ENABLE_TRANSPARENT_COMPRESSION
;

987 
	}
}

989 
	~"dúty-buf„r.h
"

	@kernel/tux3_fork.h

1 #i‚de‡
TUX3_FORK_H


2 
	#TUX3_FORK_H


	)

4 #ifde‡
__KERNEL__


5 
	~<löux/log2.h
>

7 
	~<libklib/log2.h
>

14 
	#TUX3_DEFINE_STATE_FNS
(
ty≥
, 
«me
, 
avaû_ba£
, 
bôs
, 
shi·
) \

15 
ölöe
 
ty≥
 
tux3_
##
«me
##
	`°a_mask
() \

17 
ty≥
 
mask
 = (1 << (
bôs
)) - 1; \

18  
mask
 << (
shi·
); \

21 
ölöe
 
ty≥
 
tux3_
##
«me
##
	`°a
—y≥ 
°©e
) \

23  (
°©e
 & 
tux3_
##
«me
##
	`°a_mask
()Ë>> (
shi·
); \

26 
ölöe
 
ty≥
 
tux3_
##
«me
##
	`°a_has_dñè
—y≥ 
°©e
) \

28  
tux3_
##
«me
##
	`°a
(
°©e
Ë>(
avaû_ba£
); \

31 
ölöe
 
ty≥
 
tux3_
##
«me
##
	`°a_gë_dñè
—y≥ 
°©e
) \

33  
tux3_
##
«me
##
	`°a
(
°©e
Ë- (
avaû_ba£
); \

36 
ölöe
 
ty≥
 
tux3_
##
«me
##
	`°a_dñè
(
dñè
) \

38  ((
avaû_ba£
Ë+ 
	`tux3_dñè
(
dñè
)Ë<< (
shi·
); \

41 
ölöe
 
ty≥
 
tux3_
##
«me
##
	`°a_˛ór
—y≥ 
°©e
) \

43  
°©e
 & ~
tux3_
##
«me
##
	`°a_mask
(); \

46 
ölöe
 
ty≥
 
tux3_
##
«me
##
	`°a_upd©e
—y≥ 
°©e
, 
dñè
) \

48  
tux3_
##
«me
##
	`°a_˛ór
(
°©e
Ë|Åux3_##«me##
	`°a_dñè
(
dñè
); \

49 }

	)

	@kernel/utility.c

4 #ifde‡
__KERNEL__


5 
	~"tux3.h
"

7 
	$vecio
(
rw
, 
block_devi˚
 *
dev
, 
loff_t
 
off£t
, 
vecs
, 
bio_vec
 *
vec
,

8 
bio_íd_io_t
 
ídio
, *
öfo
)

10 if(
DEBUG_MODE_K
==1)

12 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

14 
	`BUG_ON
(
vecs
 > 
	`bio_gë_ƒ_vecs
(
dev
));

15 
bio
 *biÿ
	`bio_Æloc
(
GFP_NOIO
, 
vecs
);

16 i‡(!
bio
)

17  -
ENOMEM
;

18 
bio
->
bi_bdev
 = 
dev
;

19 
bio
->
bi_£˘‹
 = 
off£t
 >> 9;

20 
bio
->
bi_íd_io
 = 
ídio
;

21 
bio
->
bi_¥iv©e
 = 
öfo
;

22 
bio
->
bi_v˙t
 = 
vecs
;

23 
	`mem˝y
(
bio
->
bi_io_vec
, 
vec
, (*vecË* 
vecs
);

24 
vecs
--)

25 
bio
->
bi_size
 +bio->
bi_io_vec
[
vecs
].
bv_Àn
;

26 
	`submô_bio
(
rw
, 
bio
);

28 
	}
}

30 
	sbiosync
 { 
com∂ëi⁄
 
	md⁄e
; 
	mîr
; };

32 
	$biosync_ídio
(
bio
 *bio, 
îr
)

34 if(
DEBUG_MODE_K
==1)

36 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

38 
biosync
 *
sync
 = 
bio
->
bi_¥iv©e
;

39 
	`bio_put
(
bio
);

40 
sync
->
îr
 =Érr;

41 
	`com∂ëe
(&
sync
->
d⁄e
);

42 
	}
}

44 
	$syncio
(
rw
, 
block_devi˚
 *
dev
, 
loff_t
 
off£t
, 
vecs
, 
bio_vec
 *
vec
)

46 if(
DEBUG_MODE_K
==1)

48 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

50 
biosync
 
sync
 = { .
d⁄e
 = 
	`COMPLETION_INITIALIZER_ONSTACK
(sync.done) };

51 i‡(!(
sync
.
îr
 = 
	`vecio
(
rw
, 
dev
, 
off£t
, 
vecs
, 
vec
, 
biosync_ídio
, &sync)))

52 
	`waô_f‹_com∂ëi⁄
(&
sync
.
d⁄e
);

53  
sync
.
îr
;

54 
	}
}

56 
	$devio
(
rw
, 
block_devi˚
 *
dev
, 
loff_t
 
off£t
, *
d©a
, 
Àn
)

58 if(
DEBUG_MODE_K
==1)

60 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

62  
	`syncio
(
rw
, 
dev
, 
off£t
, 1, &(
bio_vec
){

63 .
bv_∑ge
 = 
	`vút_to_∑ge
(
d©a
),

64 .
bv_off£t
 = 
	`off£t_ö_∑ge
(
d©a
),

65 .
bv_Àn
 = 
Àn
 });

66 
	}
}

68 
	$blockio
(
rw
, 
sb
 *sb, 
buf„r_hód
 *
buf„r
, 
block_t
 
block
)

70 if(
DEBUG_MODE_K
==1)

72 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

74 
bio_vec
 
vec
 = {

75 .
bv_∑ge
 = 
buf„r
->
b_∑ge
,

76 .
bv_off£t
 = 
	`bh_off£t
(
buf„r
),

77 .
bv_Àn
 = 
sb
->
blocksize
,

80  
	`syncio
(
rw
, 
	`sb_dev
(
sb
), 
block
 << sb->
blockbôs
, 1, &
vec
);

81 
	}
}

90 
	$blockio_vec
(
rw
, 
bufvec
 *bufvec, 
block_t
 
block
, 
cou¡
)

92 if(
DEBUG_MODE_K
==1)

94 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

96  
	`bufvec_io
(
rw
, 
bufvec
, 
block
, 
cou¡
);

97 
	}
}

99 
	$hexdump
(*
d©a
, 
size
)

101 if(
DEBUG_MODE_K
==1)

103 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

105 
	`¥öt_hex_dump
(
KERN_INFO
, "", 
DUMP_PREFIX_ADDRESS
, 16, 1, 
d©a
, 
size
, 1);

106 
	}
}

112 
	$__tux3_msg
(
sb
 *sb, c⁄° *
Àvñ
, c⁄° *
¥efix
,

113 c⁄° *
fmt
, ...)

115 if(
DEBUG_MODE_K
==1)

117 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

119 
va_f‹m©
 
vaf
;

120 
va_li°
 
¨gs
;

122 
	`va_°¨t
(
¨gs
, 
fmt
);

123 
vaf
.
fmt
 = fmt;

124 
vaf
.
va
 = &
¨gs
;

125 
	`¥ötk
("%sTUX3-fs%†(%s): %pV\n", 
Àvñ
, 
¥efix
,

126 
	`vfs_sb
(
sb
)->
s_id
, &
vaf
);

127 
	`va_íd
(
¨gs
);

128 
	}
}

130 
	$__tux3_fs_îr‹
(
sb
 *sb, c⁄° *
func
, 
löe
,

131 c⁄° *
fmt
, ...)

133 if(
DEBUG_MODE_K
==1)

135 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

137 
va_f‹m©
 
vaf
;

138 
va_li°
 
¨gs
;

140 
	`va_°¨t
(
¨gs
, 
fmt
);

141 
vaf
.
fmt
 = fmt;

142 
vaf
.
va
 = &
¨gs
;

143 
	`¥ötk
(
KERN_ERR
 "TUX3-fsÉrror (%s): %s:%d: %pV\n",

144 
	`vfs_sb
(
sb
)->
s_id
, 
func
, 
löe
, &
vaf
);

145 
	`va_íd
(
¨gs
);

147 
	`BUG
();

148 
	}
}

150 
	$__tux3_dbg
(c⁄° *
fmt
, ...)

152 if(
DEBUG_MODE_K
==1)

154 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

156 
va_li°
 
¨gs
;

158 
	`va_°¨t
(
¨gs
, 
fmt
);

159 
	`v¥ötk
(
fmt
, 
¨gs
);

160 
	`va_íd
(
¨gs
);

161 
	}
}

166 
	$£t_bôs
(
u8
 *
bôm≠
, 
°¨t
, 
cou¡
)

168 if(
DEBUG_MODE_K
==1)

170 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

172 
limô
 = 
°¨t
 + 
cou¡
;

173 
lmask
 = (-1 << (
°¨t
 & 7)) & 0xff;

174 
rmask
 = ~(-1 << (
limô
 & 7)) & 0xff;

175 
loff
 = 
°¨t
 >> 3, 
roff
 = 
limô
 >> 3;

177 i‡(
loff
 =
roff
) {

178 
bôm≠
[
loff
] |
lmask
 & 
rmask
;

181 
bôm≠
[
loff
] |
lmask
;

182 
	`mem£t
(
bôm≠
 + 
loff
 + 1, -1, 
roff
 -Üoff - 1);

183 i‡(
rmask
)

184 
bôm≠
[
roff
] |
rmask
;

185 
	}
}

187 
	$˛ór_bôs
(
u8
 *
bôm≠
, 
°¨t
, 
cou¡
)

189 if(
DEBUG_MODE_K
==1)

191 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

193 
limô
 = 
°¨t
 + 
cou¡
;

194 
lmask
 = (-1 << (
°¨t
 & 7)) & 0xff;

195 
rmask
 = ~(-1 << (
limô
 & 7)) & 0xff;

196 
loff
 = 
°¨t
 >> 3, 
roff
 = 
limô
 >> 3;

198 i‡(
loff
 =
roff
) {

199 
bôm≠
[
loff
] &~
lmask
 | ~
rmask
;

202 
bôm≠
[
loff
] &~
lmask
;

203 
	`mem£t
(
bôm≠
 + 
loff
 + 1, 0, 
roff
 -Üoff - 1);

204 i‡(
rmask
)

205 
bôm≠
[
roff
] &~
rmask
;

206 
	}
}

208 
	$Æl_£t
(
u8
 *
bôm≠
, 
°¨t
, 
cou¡
)

210 if(
DEBUG_MODE_K
==1)

212 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

216 
limô
 = 
°¨t
 + 
cou¡
;

218  
	`föd_√xt_zîo_bô_À
(
bôm≠
, 
limô
, 
°¨t
) ==Üimit;

220 
limô
 = 
°¨t
 + 
cou¡
;

221 
lmask
 = (-1 << (
°¨t
 & 7)) & 0xff;

222 
rmask
 = ~(-1 << (
limô
 & 7)) & 0xff;

223 
loff
 = 
°¨t
 >> 3, 
roff
 = 
limô
 >> 3;

225 i‡(
loff
 =
roff
) {

226 
mask
 = 
lmask
 & 
rmask
;

227  (
bôm≠
[
loff
] & 
mask
) == mask;

229 
i
 = 
loff
 + 1; i < 
roff
; i++)

230 i‡(
bôm≠
[
i
] != 0xff)

232  (
bôm≠
[
loff
] & 
lmask
) ==Ümask &&

233 (!
rmask
 || (
bôm≠
[
roff
] &Ñmask) ==Ñmask);

235 
	}
}

237 
	$Æl_˛ór
(
u8
 *
bôm≠
, 
°¨t
, 
cou¡
)

239 if(
DEBUG_MODE_K
==1)

241 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

245 
limô
 = 
°¨t
 + 
cou¡
;

247  
	`föd_√xt_bô_À
(
bôm≠
, 
limô
, 
°¨t
) ==Üimit;

249 
limô
 = 
°¨t
 + 
cou¡
;

250 
lmask
 = (-1 << (
°¨t
 & 7)) & 0xff;

251 
rmask
 = ~(-1 << (
limô
 & 7)) & 0xff;

252 
loff
 = 
°¨t
 >> 3, 
roff
 = 
limô
 >> 3;

254 i‡(
loff
 =
roff
) {

255 
mask
 = 
lmask
 & 
rmask
;

256  !(
bôm≠
[
loff
] & 
mask
);

258 
i
 = 
loff
 + 1; i < 
roff
; i++)

259 i‡(
bôm≠
[
i
])

261  !(
bôm≠
[
loff
] & 
lmask
) &&

262 (!
rmask
 || !(
bôm≠
[
roff
] &Ñmask));

264 
	}
}

266 
	$byãbôs
(
u8
 
c
)

268 if(
DEBUG_MODE_K
==1)

270 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

272 
cou¡
 = 0;

274 ; 
c
; c >>= 1)

275 
cou¡
 +
c
 & 1;

276  
cou¡
;

277 
	}
}

	@kernel/writeback.c

11 
	~"tux3.h
"

12 
	~"fûem≠_hﬁe.h
"

14 #i‚de‡
åa˚


15 
	#åa˚
 
åa˚_⁄


	)

20 #i‡
I_DIRTY
 != ((1 << 0) | (1 << 1) | (1 << 2))

37 
	#NUM_DIRTY_BITS
 3

	)

39 
	#IATTR_DIRTY
 1

	)

41 
	#XATTR_DIRTY
 1

	)

43 
	#DEAD_DIRTY
 1

	)

45 
	#IFLAGS_DIRTY_BITS
 (
NUM_DIRTY_BITS
 * 
TUX3_MAX_DELTA
)

	)

46 
	#IFLAGS_IATTR_BITS
 (
	`‹dî_ba£_2
(
IATTR_DIRTY
 + 
TUX3_MAX_DELTA
))

	)

47 
	#IFLAGS_XATTR_BITS
 (
	`‹dî_ba£_2
(
XATTR_DIRTY
 + 
TUX3_MAX_DELTA
))

	)

48 
	#IFLAGS_DEAD_BITS
 (
	`‹dî_ba£_2
(
DEAD_DIRTY
 + 
TUX3_MAX_DELTA
))

	)

50 
	#IFLAGS_IATTR_SHIFT
 
IFLAGS_DIRTY_BITS


	)

51 
	#IFLAGS_XATTR_SHIFT
 (
IFLAGS_IATTR_SHIFT
 + 
IFLAGS_IATTR_BITS
)

	)

52 
	#IFLAGS_DEAD_SHIFT
 (
IFLAGS_XATTR_SHIFT
 + 
IFLAGS_XATTR_BITS
)

	)

55 
	#TUX3_DIRTY_BTREE
 (1 << 28)

	)

57 
	#TUX3_INODE_ORPHANED
 (1 << 29)

	)

59 
	#TUX3_INODE_DEAD
 (1 << 30)

	)

61 
	#TUX3_INODE_NO_FLUSH
 (1 << 31)

	)

63 
	#NON_DIRTY_FLAGS
 \

64 (
TUX3_INODE_ORPHANED
 | 
TUX3_INODE_DEAD
 | 
TUX3_INODE_NO_FLUSH
)

	)

74 
	$tux3_£t_öode_no_Êush
(
öode
 *inode)

76 if(
DEBUG_MODE_K
==1)

78 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

80 
	`tux_öode
(
öode
)->
Êags
 |
TUX3_INODE_NO_FLUSH
;

81 
	}
}

84 
	$tux3_is_öode_no_Êush
(
öode
 *inode)

86 if(
DEBUG_MODE_K
==1)

88 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

90  
	`tux_öode
(
öode
)->
Êags
 & 
TUX3_INODE_NO_FLUSH
;

91 
	}
}

104 
	$tux3_£t_öode_Æways_dúty
(
öode
 *inode)

106 if(
DEBUG_MODE_K
==1)

108 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

110 #ifde‡
__KERNEL__


111 
öode
->
i_°©e
 |
I_DIRTY_PAGES
;

113 
	}
}

118 
ölöe
 
	$tux3_dúty_shi·
(
dñè
)

120 if(
DEBUG_MODE_K
==1)

122 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

124  
	`tux3_dñè
(
dñè
Ë* 
NUM_DIRTY_BITS
;

125 
	}
}

127 
ölöe
 
	$tux3_dúty_mask
(
Êags
, 
dñè
)

129 if(
DEBUG_MODE_K
==1)

131 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

133  
Êags
 << 
	`tux3_dúty_shi·
(
dñè
);

134 
	}
}

136 
ölöe
 
	$tux3_dúty_Êags
(
öode
 *öode, 
dñè
)

138 if(
DEBUG_MODE_K
==1)

140 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

142 
Êags
 = 
	`tux_öode
(
öode
)->flags;

143 
ªt
;

145 
ªt
 = (
Êags
 >> 
	`tux3_dúty_shi·
(
dñè
)Ë& 
I_DIRTY
;

146 
ªt
 |
Êags
 & 
TUX3_DIRTY_BTREE
;

147  
ªt
;

148 
	}
}

151 
	$tux3_dúty_öode
(
öode
 *öode, 
Êags
)

153 if(
DEBUG_MODE_K
==1)

155 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

157 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

158 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

159 
dñè
 = 
	`tux3_öode_dñè
(
öode
);

160 
mask
 = 
	`tux3_dúty_mask
(
Êags
, 
dñè
);

161 
sb_dñè_dúty
 *
s_ddc
;

162 
öode_dñè_dúty
 *
i_ddc
;

163 
was_˛ón
 = 0;

165 i‡((
tuxnode
->
Êags
 & 
mask
) == mask)

174 i‡(
	`tux3_is_öode_no_Êush
(
öode
))

175 
s_ddc
 = 
NULL
;

177 
s_ddc
 = 
	`tux3_sb_ddc
(
sb
, 
dñè
);

178 
i_ddc
 = 
	`tux3_öode_ddc
(
öode
, 
dñè
);

181 
	`•ö_lock
(&
tuxnode
->
lock
);

182 i‡((
tuxnode
->
Êags
 & 
mask
) != mask) {

183 
tuxnode
->
Êags
 |
mask
;

185 i‡(
s_ddc
) {

186 
	`•ö_lock
(&
sb
->
dúty_öodes_lock
);

187 
was_˛ón
 = 
	`li°_em±y
(&
s_ddc
->
dúty_öodes
);

188 i‡(
	`li°_em±y
(&
i_ddc
->
dúty_li°
))

189 
	`li°_add_èû
(&
i_ddc
->
dúty_li°
,

190 &
s_ddc
->
dúty_öodes
);

191 
	`•ö_u∆ock
(&
sb
->
dúty_öodes_lock
);

194 
	`•ö_u∆ock
(&
tuxnode
->
lock
);

200 i‡(
was_˛ón
)

201 
	`tux3_°¨t_≥riodiˇl_Êushî
(
sb
);

202 
	}
}

208 
	$tux3_m¨k_båì_dúty
(
båì
 *btree)

210 if(
DEBUG_MODE_K
==1)

212 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

214 i‡(
båì
 !
	`ôªe_båì
(båì->
sb
) &&

215 
båì
 !
	`Ÿªe_båì
(båì->
sb
)) {

216 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
	`båì_öode
(
båì
));

218 
	`•ö_lock
(&
tuxnode
->
lock
);

221 
tuxnode
->
Êags
 |
TUX3_DIRTY_BTREE
;

222 
	`•ö_u∆ock
(&
tuxnode
->
lock
);

224 
	}
}

226 
	~"wrôeback_öodedñëe.c
"

227 
	~"wrôeback_üârf‹k.c
"

228 
	~"wrôeback_x©åf‹k.c
"

234 
ölöe
 
	$tux3_öode_wb_lock
(
öode
 *inode)

236 if(
DEBUG_MODE_K
==1)

238 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

240 #ifde‡
__KERNEL__


241 
backög_dev_öfo
 *
bdi
 = 
öode
->
i_sb
->
s_bdi
;

242 
	`•ö_lock
(&
bdi
->
wb
.
li°_lock
);

244 
	}
}

246 
ölöe
 
	$tux3_öode_wb_u∆ock
(
öode
 *inode)

248 if(
DEBUG_MODE_K
==1)

250 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

252 #ifde‡
__KERNEL__


253 
backög_dev_öfo
 *
bdi
 = 
öode
->
i_sb
->
s_bdi
;

254 
	`•ö_u∆ock
(&
bdi
->
wb
.
li°_lock
);

256 
	}
}

258 
ölöe
 
	$tux3_öode_wb_li°_dñ
(
öode
 *inode)

260 if(
DEBUG_MODE_K
==1)

262 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

264 #ifde‡
__KERNEL__


265 
	`li°_dñ_öô
(&
öode
->
i_wb_li°
);

267 
	}
}

270 
	$tux3_˛ór_dúty_öode_nﬁock
(
öode
 *öode, 
dñè
,

271 
‰⁄ãnd
)

273 if(
DEBUG_MODE_K
==1)

275 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

277 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

278 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

279 
mask
 = 
	`tux3_dúty_mask
(
I_DIRTY
, 
dñè
);

280 
ﬁd_dúty
;

282 
ﬁd_dúty
 = 
tuxnode
->
Êags
 & (
TUX3_DIRTY_BTREE
 | 
mask
);

284 
tuxnode
->
Êags
 &~(
TUX3_DIRTY_BTREE
 | 
mask
);

289 i‡(
ﬁd_dúty
) {

291 i‡(
‰⁄ãnd
)

292 
	`•ö_lock
(&
sb
->
dúty_öodes_lock
);

294 
	`li°_dñ_öô
(&
	`tux3_öode_ddc
(
öode
, 
dñè
)->
dúty_li°
);

296 i‡(
‰⁄ãnd
)

297 
	`•ö_u∆ock
(&
sb
->
dúty_öodes_lock
);

301 i‡(
tuxnode
->
Êags
 & ~
NON_DIRTY_FLAGS
)

302 
öode
->
i_°©e
 |
I_DIRTY
;

304 
öode
->
i_°©e
 &~
I_DIRTY
;

305 
	`tux3_öode_wb_li°_dñ
(
öode
);

307 
	}
}

310 
	$__tux3_˛ór_dúty_öode
(
öode
 *öode, 
dñè
)

312 if(
DEBUG_MODE_K
==1)

314 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

316 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

317 
	`tux3_öode_wb_lock
(
öode
);

318 
	`•ö_lock
(&
öode
->
i_lock
);

319 
	`•ö_lock
(&
tuxnode
->
lock
);

320 
	`tux3_˛ór_dúty_öode_nﬁock
(
öode
, 
dñè
, 0);

321 
	`•ö_u∆ock
(&
tuxnode
->
lock
);

322 
	`•ö_u∆ock
(&
öode
->
i_lock
);

323 
	`tux3_öode_wb_u∆ock
(
öode
);

324 
	}
}

327 
	$tux3_˛ór_dúty_öode
(
öode
 *inode)

329 if(
DEBUG_MODE_K
==1)

331 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

333 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

334 
	`tux3_öode_wb_lock
(
öode
);

335 
	`•ö_lock
(&
öode
->
i_lock
);

336 
	`•ö_lock
(&
tuxnode
->
lock
);

337 
	`tux3_üâr_˛ór_dúty
(
tuxnode
);

338 
	`tux3_˛ór_dúty_öode_nﬁock
(
öode
, 
	`tux3_öode_dñè
(inode), 1);

339 
	`•ö_u∆ock
(&
tuxnode
->
lock
);

340 
	`•ö_u∆ock
(&
öode
->
i_lock
);

341 
	`tux3_öode_wb_u∆ock
(
öode
);

342 
	}
}

344 
	$__tux3_m¨k_öode_dúty
(
öode
 *öode, 
Êags
)

346 if(
DEBUG_MODE_K
==1)

348 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

351 i‡((
Êags
 & 
I_DIRTY
Ë=
I_DIRTY_PAGES
)

352 
	`tux3_dúty_öode
(
öode
, 
Êags
);

354 
	`__m¨k_öode_dúty
(
öode
, 
Êags
);

355 
	}
}

363 
	$__tux3_m¨k_buf„r_dúty
(
buf„r_hód
 *
buf„r
, 
dñè
)

365 if(
DEBUG_MODE_K
==1)

367 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

369 
öode
 *inode;

377 i‡(
	`buf„r_dúty
(
buf„r
)) {

378 
	`smp_mb
();

379 i‡(
	`buf„r_dúty
(
buf„r
))

383 
öode
 = 
	`buf„r_öode
(
buf„r
);

384 #ifde‡
__KERNEL__


385 
	`as£π
(
	`tux_öode
(
öode
)->
öum
 =
TUX_VOLMAP_INO
 ||

386 
	`tux_öode
(
öode
)->
öum
 =
TUX_LOGMAP_INO
 ||

387 
	`PageLocked
(
buf„r
->
b_∑ge
));

390 
	`tux3_£t_buf„r_dúty
(
	`m≠pög
(
öode
), 
buf„r
, 
dñè
);

393 
	`__tux3_m¨k_öode_dúty
(
öode
, 
I_DIRTY_PAGES
);

394 
	}
}

402 
	$tux3_m¨k_buf„r_dúty
(
buf„r_hód
 *
buf„r
)

404 if(
DEBUG_MODE_K
==1)

406 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

408 
öode
 *öodê
	`buf„r_öode
(
buf„r
);

409 
	`as£π
(
	`tux_öode
(
öode
)->
öum
 =
TUX_VOLMAP_INO
 ||

410 
	`tux_öode
(
öode
)->
öum
 =
TUX_LOGMAP_INO
);

411 
	`__tux3_m¨k_buf„r_dúty
(
buf„r
, 
TUX3_INIT_DELTA
);

412 
	}
}

420 
	$tux3_m¨k_buf„r_unify
(
buf„r_hód
 *
buf„r
)

422 if(
DEBUG_MODE_K
==1)

424 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

426 
sb
 *sb;

427 
öode
 *inode;

435 i‡(
	`buf„r_dúty
(
buf„r
)) {

436 
	`smp_mb
();

437 i‡(
	`buf„r_dúty
(
buf„r
))

441 
öode
 = 
	`buf„r_öode
(
buf„r
);

442 
sb
 = 
	`tux_sb
(
öode
->
i_sb
);

443 
	`as£π
(
öode
 =
sb
->
vﬁm≠
);

445 
	`tux3_£t_buf„r_dúty_li°
(
	`m≠pög
(
öode
), 
buf„r
, 
sb
->
unify
,

446 &
sb
->
unify_buf„rs
);

452 
	}
}

455 
	$tux3_m¨k_öode_‹ph™
(
tux3_öode
 *
tuxnode
)

457 if(
DEBUG_MODE_K
==1)

459 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

461 
tuxnode
->
Êags
 |
TUX3_INODE_ORPHANED
;

462 
	}
}

464 
	$tux3_öode_is_‹ph™
(
tux3_öode
 *
tuxnode
)

466 if(
DEBUG_MODE_K
==1)

468 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

470  !!(
tuxnode
->
Êags
 & 
TUX3_INODE_ORPHANED
);

471 
	}
}

473 
	$tux3_°©e_ªad_™d_˛ór
(
öode
 *inode,

474 
tux3_üâr_d©a
 *
id©a
,

475 *
‹ph™ed
, *
dñëed
,

476 
dñè
)

478 if(
DEBUG_MODE_K
==1)

480 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

482 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

484 
	`•ö_lock
(&
tuxnode
->
lock
);

487 
	`tux3_üâr_ªad_™d_˛ór
(
öode
, 
id©a
, 
dñè
);

490 *
‹ph™ed
 = 0;

491 i‡(
id©a
->
i_∆ök
 =0 && !(
tuxnode
->
Êags
 & 
TUX3_INODE_ORPHANED
)) {

493 *
‹ph™ed
 = 1;

494 
	`tux3_m¨k_öode_‹ph™
(
tuxnode
);

498 
	`tux3_dód_ªad_™d_˛ór
(
öode
, 
dñëed
, 
dñè
);

500 
	`•ö_u∆ock
(&
tuxnode
->
lock
);

501 
	}
}

503 
ölöe
 
	$tux3_Êush_buf„rs
(
öode
 *inode,

504 
tux3_üâr_d©a
 *
id©a
,

505 
dñè
)

507 if(
DEBUG_MODE_K
==1)

509 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

511 
li°_hód
 *
dúty_buf„rs
 = 
	`tux3_dúty_buf„rs
(
öode
, 
dñè
);

512 
îr
;

517 
îr
 = 
	`tux3_Êush_hﬁe
(
öode
, 
dñè
);

518 i‡(
îr
)

519  
îr
;

522  
	`Êush_li°
(
	`m≠pög
(
öode
), 
id©a
, 
dúty_buf„rs
);

523 
	}
}

532 
	$tux3_Êush_öode
(
öode
 *öode, 
dñè
)

534 if(
DEBUG_MODE_K
==1)

536 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

540 
tux3_üâr_d©a
 
id©a
;

541 
dúty
 = 0, 
‹ph™ed
, 
dñëed
;

542 
ªt
 = 0, 
îr
;

548 
	`tux3_°©e_ªad_™d_˛ór
(
öode
, &
id©a
, &
‹ph™ed
, &
dñëed
, 
dñè
);

550 
	`åa˚
("inum %Lu, idata %p, orphaned %d, deleted %d, delta %u",

551 
	`tux_öode
(
öode
)->
öum
, &
id©a
, 
‹ph™ed
, 
dñëed
, 
dñè
);

553 i‡(!
dñëed
) {

555 i‡(
‹ph™ed
) {

556 
îr
 = 
	`tux3_make_‹ph™_add
(
öode
);

557 i‡(
îr
 && !
ªt
)

558 
ªt
 = 
îr
;

562 i‡(!
‹ph™ed
) {

563 
îr
 = 
	`tux3_make_‹ph™_dñ
(
öode
);

564 i‡(
îr
 && !
ªt
)

565 
ªt
 = 
îr
;

573 
	`ªmove_öode_hash
(
öode
);

576 
îr
 = 
	`tux3_purge_öode
(
öode
, &
id©a
, 
dñè
);

577 i‡(
îr
 && !
ªt
)

578 
ªt
 = 
îr
;

581 
îr
 = 
	`tux3_Êush_buf„rs
(
öode
, &
id©a
, 
dñè
);

582 i‡(
îr
 && !
ªt
)

583 
ªt
 = 
îr
;

589 i‡(!
dñëed
)

590 
dúty
 = 
	`tux3_dúty_Êags
(
öode
, 
dñè
);

592 i‡(
dúty
 & (
TUX3_DIRTY_BTREE
 | 
I_DIRTY_SYNC
 | 
I_DIRTY_DATASYNC
)) {

597 
	`tux3_üâr_adju°_f‹_båì
(
öode
, &
id©a
);

599 
îr
 = 
	`tux3_ßve_öode
(
öode
, &
id©a
, 
dñè
);

600 i‡(
îr
 && !
ªt
)

601 
ªt
 = 
îr
;

607  
ªt
;

608 
	}
}

616 
	$tux3_Êush_öode_öã∫Æ
(
öode
 *öode, 
dñè
)

618 if(
DEBUG_MODE_K
==1)

620 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

622 
îr
;

624 
	`as£π
(
	`tux3_is_öode_no_Êush
(
öode
));

625 
	`as£π
(
	`©omic_ªad
(&
öode
->
i_cou¡
) >= 1);

632 i‡(!(
öode
->
i_°©e
 & 
I_DIRTY
))

635 
îr
 = 
	`tux3_Êush_öode
(
öode
, 
dñè
);

637 
	`__tux3_˛ór_dúty_öode
(
öode
, 
dñè
);

639  
îr
;

640 
	}
}

642 
	$öode_öum_cmp
(*
¥iv
, 
li°_hód
 *
a
, li°_hód *
b
)

644 if(
DEBUG_MODE_K
==1)

646 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

648 
tux3_öode
 *
è
, *
tb
;

649 
öode_dñè_dúty
 *
i_ddc
;

650 
dñè
 = *(*)
¥iv
;

652 
i_ddc
 = 
	`li°_íåy
(
a
, 
öode_dñè_dúty
, 
dúty_li°
);

653 
è
 = 
	`i_ddc_to_öode
(
i_ddc
, 
dñè
);

654 
i_ddc
 = 
	`li°_íåy
(
b
, 
öode_dñè_dúty
, 
dúty_li°
);

655 
tb
 = 
	`i_ddc_to_öode
(
i_ddc
, 
dñè
);

657 i‡(
è
->
öum
 < 
tb
->inum)

659 i‡(
è
->
öum
 > 
tb
->inum)

662 
	}
}

664 
	$tux3_Êush_öodes
(
sb
 *sb, 
dñè
)

666 if(
DEBUG_MODE_K
==1)

668 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

670 
sb_dñè_dúty
 *
s_ddc
 = 
	`tux3_sb_ddc
(
sb
, 
dñè
);

671 
li°_hód
 *
dúty_öodes
 = &
s_ddc
->dirty_inodes;

672 
öode_dñè_dúty
 *
i_ddc
, *
ß„
;

673 
îr
;

678 
	`li°_s‹t
(&
dñè
, 
dúty_öodes
, 
öode_öum_cmp
);

680 
	`li°_f‹_óch_íåy_ß„
(
i_ddc
, 
ß„
, 
dúty_öodes
, 
dúty_li°
) {

681 
tux3_öode
 *
tuxnode
 = 
	`i_ddc_to_öode
(
i_ddc
, 
dñè
);

682 
öode
 *öodê&
tuxnode
->
vfs_öode
;

684 
	`as£π
(!
	`tux3_is_öode_no_Êush
(
öode
));

686 
îr
 = 
	`tux3_Êush_öode
(
öode
, 
dñè
);

687 i‡(
îr
)

688 
îr‹
;

693 
îr‹
:

695  
îr
;

696 
	}
}

701 
	$tux3_˛ór_dúty_öodes
(
sb
 *sb, 
dñè
)

703 if(
DEBUG_MODE_K
==1)

705 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

707 
sb_dñè_dúty
 *
s_ddc
 = 
	`tux3_sb_ddc
(
sb
, 
dñè
);

708 
li°_hód
 *
dúty_öodes
 = &
s_ddc
->dirty_inodes;

709 
öode_dñè_dúty
 *
i_ddc
, *
ß„
;

711 
	`li°_f‹_óch_íåy_ß„
(
i_ddc
, 
ß„
, 
dúty_öodes
, 
dúty_li°
) {

712 
tux3_öode
 *
tuxnode
 = 
	`i_ddc_to_öode
(
i_ddc
, 
dñè
);

713 
öode
 *öodê&
tuxnode
->
vfs_öode
;

715 
	`as£π
(!
	`tux3_is_öode_no_Êush
(
öode
));

724 
	`•ö_lock
(&
öode
->
i_lock
);

725 
	`igë_if_dúty
(
öode
);

726 
	`•ö_u∆ock
(&
öode
->
i_lock
);

728 
	`__tux3_˛ór_dúty_öode
(
öode
, 
dñè
);

730 
	`ùut
(
öode
);

733 
	`as£π
(
	`li°_em±y
(
dúty_öodes
));

734 
	}
}

736 
	$tux3_check_de°roy_öode_Êags
(
öode
 *inode)

738 if(
DEBUG_MODE_K
==1)

740 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

742 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

743 
tuxnode
->
Êags
 &~
NON_DIRTY_FLAGS
;

744 
	`as£π
(
tuxnode
->
Êags
 == 0);

745 
	}
}

	@kernel/writeback_iattrfork.c

22 
	~"tux3_f‹k.h
"

23 
	~"üâr.h
"

25 
TUX3_DEFINE_STATE_FNS
(, 
üâr
, 
IATTR_DIRTY
,

26 
IFLAGS_IATTR_BITS
, 
IFLAGS_IATTR_SHIFT
);

32 
	$id©a_c›y
(
öode
 *öode, 
tux3_üâr_d©a
 *
id©a
)

34 
id©a
->
¥e£¡
 = 
	`tux_öode
(
öode
)->present;

35 
id©a
->
i_mode
 = 
öode
->i_mode;

36 
id©a
->
i_uid
 = 
	`i_uid_ªad
(
öode
);

37 
id©a
->
i_gid
 = 
	`i_gid_ªad
(
öode
);

38 
id©a
->
i_∆ök
 = 
öode
->i_nlink;

39 
id©a
->
i_rdev
 = 
öode
->i_rdev;

40 
id©a
->
i_size
 = 
öode
->i_size;

42 
id©a
->
i_mtime
 = 
öode
->i_mtime;

43 
id©a
->
i_˘ime
 = 
öode
->i_ctime;

44 
id©a
->
i_vîsi⁄
 = 
öode
->i_version;

45 
	}
}

47 
	$tux3_üârdúty
(
öode
 *inode)

49 if(
DEBUG_MODE_K
==1)

51 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

53 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

54 
dñè
 = 
	`tux3_öode_dñè
(
öode
);

55 
Êags
 = 
tuxnode
->flags;

58 i‡(
	`tux3_üâr°a_has_dñè
(
Êags
) &&

59 
	`tux3_üâr°a_gë_dñè
(
Êags
Ë=
	`tux3_dñè
(
dñè
))

62 
	`åa˚
("öum %Lu, dñè %u", 
tuxnode
->
öum
, 
dñè
);

64 
	`•ö_lock
(&
tuxnode
->
lock
);

65 
Êags
 = 
tuxnode
->flags;

66 i‡(
	`S_ISREG
(
öode
->
i_mode
Ë|| 
	`tux3_üâr°a_has_dñè
(
Êags
)) {

67 
ﬁd_dñè
;

87 i‡(
	`S_ISREG
(
öode
->
i_mode
Ë&& !
	`tux3_üâr°a_has_dñè
(
Êags
))

88 
ﬁd_dñè
 = 
	`tux3_dñè
(
dñè
 - 1);

90 
ﬁd_dñè
 = 
	`tux3_üâr°a_gë_dñè
(
Êags
);

93 i‡(
ﬁd_dñè
 !
	`tux3_dñè
(
dñè
)) {

94 
tux3_üâr_d©a
 *
id©a
 =

95 &
	`tux3_öode_ddc
(
öode
, 
ﬁd_dñè
)->
id©a
;

96 
	`id©a_c›y
(
öode
, 
id©a
);

100 
tuxnode
->
Êags
 = 
	`tux3_üâr°a_upd©e
(Êags, 
dñè
);

101 
	`•ö_u∆ock
(&
tuxnode
->
lock
);

102 
	}
}

105 
	$tux3_üâr_˛ór_dúty
(
tux3_öode
 *
tuxnode
)

107 if(
DEBUG_MODE_K
==1)

109 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

111 
	`åa˚
("öum %Lu", 
tuxnode
->
öum
);

112 
tuxnode
->
Êags
 = 
	`tux3_üâr°a_˛ór
(tuxnode->flags);

113 
	}
}

121 
	$tux3_üâr_ªad_™d_˛ór
(
öode
 *inode,

122 
tux3_üâr_d©a
 *
ªsu…
,

123 
dñè
)

125 if(
DEBUG_MODE_K
==1)

127 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

129 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

130 
Êags
;

132 
	`åa˚
("öum %Lu, dñè %u", 
tuxnode
->
öum
, 
dñè
);

138 
Êags
 = 
tuxnode
->flags;

139 i‡(!
	`tux3_üâr°a_has_dñè
(
Êags
) ||

140 
	`tux3_üâr°a_gë_dñè
(
Êags
Ë=
	`tux3_dñè
(
dñè
)) {

145 
	`id©a_c›y
(
öode
, 
ªsu…
);

146 
tuxnode
->
Êags
 = 
	`tux3_üâr°a_˛ór
(flags);

149 
tux3_üâr_d©a
 *
id©a
 =

150 &
	`tux3_öode_ddc
(
öode
, 
dñè
)->
id©a
;

151 
	`as£π
(
id©a
->
¥e£¡
 !
TUX3_INVALID_PRESENT
);

152 *
ªsu…
 = *
id©a
;

156 
	`tux3_öode_ddc
(
öode
, 
dñè
)->
id©a
.
¥e£¡
 = 
TUX3_INVALID_PRESENT
;

157 
	}
}

163 
	$tux3_üâr_adju°_f‹_båì
(
öode
 *inode,

164 
tux3_üâr_d©a
 *
id©a
)

166 if(
DEBUG_MODE_K
==1)

168 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

170 i‡(
	`has_roŸ
(&
	`tux_öode
(
öode
)->
båì
))

171 
id©a
->
¥e£¡
 |
DATA_BTREE_BIT
;

172 
	}
}

	@kernel/writeback_inodedelete.c

15 
	~"tux3_f‹k.h
"

17 
TUX3_DEFINE_STATE_FNS
(, 
dód
, 
DEAD_DIRTY
,

18 
IFLAGS_DEAD_BITS
, 
IFLAGS_DEAD_SHIFT
);

20 
	$tux3_öode_is_dód
(
tux3_öode
 *
tuxnode
)

22 if(
DEBUG_MODE_K
==1)

24 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

26  
	`tux3_dód°a_has_dñè
(
tuxnode
->
Êags
) ||

27 (
tuxnode
->
Êags
 & 
TUX3_INODE_DEAD
);

28 
	}
}

34 
	$__tux3_m¨k_öode_to_dñëe
(
öode
 *öode, 
dñè
)

36 if(
DEBUG_MODE_K
==1)

38 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

40 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

41 
Êags
;

43 
	`åa˚
("m¨ká†dód: inum %Lu, dñè %d", 
tuxnode
->
öum
, 
dñè
);

45 
	`•ö_lock
(&
tuxnode
->
lock
);

46 
Êags
 = 
tuxnode
->flags;

47 
	`as£π
(!
	`tux3_dód°a_has_dñè
(
Êags
));

49 
tuxnode
->
Êags
 |
	`tux3_dód°a_dñè
(
dñè
);

50 
	`•ö_u∆ock
(&
tuxnode
->
lock
);

59 
	`tux3_dúty_öode
(
öode
, 
I_DIRTY_SYNC
);

60 
öode
->
i_°©e
 |
I_DIRTY_SYNC
;

61 
	}
}

63 
	$tux3_m¨k_öode_to_dñëe
(
öode
 *inode)

65 if(
DEBUG_MODE_K
==1)

67 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

69 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

70 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

71 
dñè
;

74 i‡(
	`tux3_öode_is_dód
(
tuxnode
))

77 
	`ch™ge_begö_©omic
(
sb
);

79 
dñè
 = 
	`tux3_öode_dñè
(
öode
);

80 
	`__tux3_m¨k_öode_to_dñëe
(
öode
, 
dñè
);

82 
	`ch™ge_íd_©omic
(
sb
);

83 
	}
}

89 
	$tux3_dód_ªad_™d_˛ór
(
öode
 *inode,

90 *
dñëed
,

91 
dñè
)

93 if(
DEBUG_MODE_K
==1)

95 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

97 
tux3_öode
 *
tuxnode
 = 
	`tux_öode
(
öode
);

98 
Êags
 = 
tuxnode
->flags;

100 *
dñëed
 = 0;

102 i‡(
	`tux3_dód°a_has_dñè
(
Êags
) &&

103 
	`tux3_dód°a_gë_dñè
(
Êags
Ë=
	`tux3_dñè
(
dñè
)) {

104 *
dñëed
 = 1;

105 
Êags
 |
TUX3_INODE_DEAD
;

106 
tuxnode
->
Êags
 = 
	`tux3_dód°a_˛ór
(flags);

108 
	}
}

	@kernel/writeback_xattrfork.c

6 
	$tux3_x©ådúty
(
öode
 *inode)

8 if(
DEBUG_MODE_K
==1)

10 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

12 
	}
}

14 
	$tux3_x©å_ªad_™d_˛ór
(
öode
 *inode)

16 if(
DEBUG_MODE_K
==1)

18 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

20 
	}
}

	@kernel/xattr.c

12 
	~"tux3.h
"

13 
	~"üâr.h
"

15 #i‚de‡
åa˚


16 
	#åa˚
 
åa˚_⁄


	)

44 
u32
 
	t©om_t
;

47 
	#HEAD_ALIGN
 (
öum_t
)

	)

48 
	#HEAD_SIZE
 
	`off£tof
(
tux_dúít
, 
«me
)

	)

50 
	#MAX_ATOM_NAME_LEN
 (256 - 
HEAD_SIZE
)

	)

52 
	#MAX_ATABLE_SIZE_BITS
 48

	)

53 
	#ATOM_DICT_BITS
 40

	)

54 
	#ATOMREF_TABLE_BITS
 34

	)

60 
	#ATOMREF_SIZE
 2

	)

61 
	#ATOMREF_BLKBITS
 1

	)

63 
	#UNATOM_SIZE
 8

	)

64 
	#UNATOM_BLKBITS
 3

	)

66 
	#UNATOM_FREE_MAGIC
 (0x6ódf˚eULL << ((
©om_t
Ë* 8))

	)

67 
	#UNATOM_FREE_MASK
 (0xffffffffULL << ((
©om_t
Ë* 8))

	)

70 
	$©abÀ_öô_ba£
(
sb
 *sb)

72 if(
DEBUG_MODE_K
==1)

74 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

76 
sb
->
©omªf_ba£
 = 1U << (
ATOM_DICT_BITS
 - sb->
blockbôs
);

77 
sb
->
u«tom_ba£
 =

78 
sb
->
©omªf_ba£
 + (1U << (
ATOMREF_TABLE_BITS
 - sb->
blockbôs
));

79 
	}
}

81 
ölöe
 
©om_t
 
	$íåy_©om
(
tux_dúít
 *
íåy
)

83 if(
DEBUG_MODE_K
==1)

85 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

87  
	`be64_to_˝u
(
íåy
->
öum
);

88 
	}
}

90 
buf„r_hód
 *
	$blockªad_u«tom
(
öode
 *
©abÀ
, 
©om_t
 
©om
,

91 *
off£t
)

93 if(
DEBUG_MODE_K
==1)

95 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

97 
sb
 *sb = 
	`tux_sb
(
©abÀ
->
i_sb
);

98 
shi·
 = 
sb
->
blockbôs
 - 
UNATOM_BLKBITS
;

100 *
off£t
 = 
©om
 & ~(-1 << 
shi·
);

101  
	`blockªad
(
	`m≠pög
(
©abÀ
), 
sb
->
u«tom_ba£
 + (
©om
 >> 
shi·
));

102 
	}
}

104 
loff_t
 
	$u«tom_di˘_ªad
(
öode
 *
©abÀ
, 
©om_t
 
©om
)

106 if(
DEBUG_MODE_K
==1)

108 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

110 
buf„r_hód
 *
buf„r
;

111 
off£t
;

113 
buf„r
 = 
	`blockªad_u«tom
(
©abÀ
, 
©om
, &
off£t
);

114 i‡(!
buf„r
)

115  -
EIO
;

117 
__be64
 *
u«tom_di˘
 = 
	`bufd©a
(
buf„r
);

118 
loff_t
 
whîe
 = 
	`be64_to_˝u
(
u«tom_di˘
[
off£t
]);

119 
	`blockput
(
buf„r
);

121  
whîe
;

122 
	}
}

124 
loff_t
 
	$u«tom_di˘_wrôe
(
öode
 *
©abÀ
, 
©om_t
 
©om
, 
loff_t
 
whîe
)

126 if(
DEBUG_MODE_K
==1)

128 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

130 
dñè
 = 
	`tux3_gë_cuºít_dñè
();

131 
buf„r_hód
 *
buf„r
, *
˛⁄e
;

132 
loff_t
 
ﬁd
;

133 
off£t
;

135 
buf„r
 = 
	`blockªad_u«tom
(
©abÀ
, 
©om
, &
off£t
);

136 i‡(!
buf„r
)

137  -
EIO
;

144 
˛⁄e
 = 
	`blockdúty
(
buf„r
, 
dñè
);

145 i‡(
	`IS_ERR
(
˛⁄e
)) {

146 
	`as£π
(
	`PTR_ERR
(
˛⁄e
Ë!-
EAGAIN
);

147 
	`blockput
(
buf„r
);

148  
	`PTR_ERR
(
˛⁄e
);

151 
__be64
 *
u«tom_di˘
 = 
	`bufd©a
(
˛⁄e
);

152 
ﬁd
 = 
	`be64_to_˝u
(
u«tom_di˘
[
off£t
]);

153 
u«tom_di˘
[
off£t
] = 
	`˝u_to_be64
(
whîe
);

154 
	`m¨k_buf„r_dúty_n⁄
(
˛⁄e
);

155 
	`blockput
(
˛⁄e
);

157  
ﬁd
;

158 
	}
}

160 
	$is_‰ì_u«tom
(
loff_t
 
whîe
)

162 if(
DEBUG_MODE_K
==1)

164 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

166  (
whîe
 & 
UNATOM_FREE_MASK
Ë=
UNATOM_FREE_MAGIC
;

167 
	}
}

170 
	$u«tom
(
öode
 *
©abÀ
, 
©om_t
 
©om
, *
«me
, 
size
)

172 if(
DEBUG_MODE_K
==1)

174 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

176 
sb
 *sb = 
	`tux_sb
(
©abÀ
->
i_sb
);

177 
buf„r_hód
 *
buf„r
;

178 
îr
;

180 
loff_t
 
whîe
 = 
	`u«tom_di˘_ªad
(
©abÀ
, 
©om
);

181 i‡(
whîe
 < 0) {

182 
îr
 = 
whîe
;

183 
îr‹
;

186 
buf„r
 = 
	`blockªad
(
	`m≠pög
(
©abÀ
), 
whîe
 >> 
sb
->
blockbôs
);

187 i‡(!
buf„r
) {

188 
îr
 = -
EIO
;

189 
îr‹
;

191 
tux_dúít
 *
íåy
 = 
	`bufd©a
(
buf„r
Ë+ (
whîe
 & 
sb
->
blockmask
);

192 i‡(
	`íåy_©om
(
íåy
Ë!
©om
) {

193 
	`tux3_fs_îr‹
(
sb
, "©om %xÑevî£É¡ry brokí", 
©om
);

194 
îr
 = -
EIO
;

195 
îr‹_blockput
;

197 
Àn
 = 
íåy
->
«me_Àn
;

198 i‡(
size
) {

199 i‡(
Àn
 > 
size
) {

200 
îr
 = -
ERANGE
;

201 
îr‹_blockput
;

203 
	`mem˝y
(
«me
, 
íåy
->«me, 
Àn
);

205 
	`blockput
(
buf„r
);

207  
Àn
;

209 
îr‹_blockput
:

210 
	`blockput
(
buf„r
);

211 
îr‹
:

212  
îr
;

213 
	}
}

216 
	$gë_‰ì©om
(
öode
 *
©abÀ
, 
©om_t
 *
©om
)

218 if(
DEBUG_MODE_K
==1)

220 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

222 
sb
 *sb = 
	`tux_sb
(
©abÀ
->
i_sb
);

223 
©om_t
 
‰ì©om
 = 
sb
->freeatom;

225 i‡(!
‰ì©om
) {

226 *
©om
 = 
sb
->
©omgí
++;

230 
loff_t
 
√xt
 = 
	`u«tom_di˘_ªad
(
©abÀ
, 
‰ì©om
);

231 i‡(
√xt
 < 0)

232  
√xt
;

233 i‡(!
	`is_‰ì_u«tom
(
√xt
)) {

234 
	`tux3_fs_îr‹
(
sb
, "something horrible happened");

235  -
EIO
;

238 *
©om
 = 
‰ì©om
;

239 
sb
->
‰ì©om
 = 
√xt
 & ~
UNATOM_FREE_MASK
;

242 
	}
}

245 
tux_dúít
 *
tux_föd_íåy
(
öode
 *
dú
, c⁄° *
«me
, 
Àn
, 
buf„r_hód
 **
ªsu…
, 
loff_t
 
size
);

246 
loff_t
 
tux_¸óã_íåy
(
öode
 *
dú
, c⁄° *
«me
, 
Àn
, 
öum_t
 
öum
, 
umode_t
 
mode
,Üoff_à*
size
);

249 
	$föd_©om
(
öode
 *
©abÀ
, c⁄° *
«me
, 
Àn
,

250 
©om_t
 *
©om
)

252 if(
DEBUG_MODE_K
==1)

254 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

256 
sb
 *sb = 
	`tux_sb
(
©abÀ
->
i_sb
);

257 
buf„r_hód
 *
buf„r
;

258 
tux_dúít
 *
íåy
;

260 
íåy
 = 
	`tux_föd_íåy
(
©abÀ
, 
«me
, 
Àn
, &
buf„r
, 
sb
->
©omdi˘size
);

261 i‡(
	`IS_ERR
(
íåy
)) {

262 
îr
 = 
	`PTR_ERR
(
íåy
);

263 i‡(
îr
 =-
ENOENT
)

264  -
ENODATA
;

265  
îr
;

268 *
©om
 = 
	`íåy_©om
(
íåy
);

269 
	`blockput
(
buf„r
);

271 
	}
}

274 
	$make_©om
(
öode
 *
©abÀ
, c⁄° *
«me
, 
Àn
,

275 
©om_t
 *
©om
)

277 if(
DEBUG_MODE_K
==1)

279 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

281 
sb
 *sb = 
	`tux_sb
(
©abÀ
->
i_sb
);

282 
îr
;

284 
îr
 = 
	`föd_©om
(
©abÀ
, 
«me
, 
Àn
, 
©om
);

285 i‡(!
îr
)

287 i‡(
îr
 !-
ENODATA
)

288  
îr
;

290 
îr
 = 
	`gë_‰ì©om
(
©abÀ
, 
©om
);

291 i‡(
îr
)

292  
îr
;

294 
loff_t
 
whîe
 = 
	`tux_¸óã_íåy
(
©abÀ
, 
«me
, 
Àn
, *
©om
, 0,

295 &
sb
->
©omdi˘size
);

296 i‡(
whîe
 < 0) {

298  
whîe
;

302 
whîe
 = 
	`u«tom_di˘_wrôe
(
©abÀ
, *
©om
, where);

303 i‡(
whîe
 < 0) {

305  
whîe
;

309 
	}
}

312 
	$upd©e_ªfcou¡
(
sb
 *sb, 
buf„r_hód
 *
buf„r
,

313 
off£t
, 
u16
 
vÆ
)

315 if(
DEBUG_MODE_K
==1)

317 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

319 
dñè
 = 
	`tux3_gë_cuºít_dñè
();

320 
buf„r_hód
 *
˛⁄e
;

321 
__be16
 *
ªfcou¡
;

328 
˛⁄e
 = 
	`blockdúty
(
buf„r
, 
dñè
);

329 i‡(
	`IS_ERR
(
˛⁄e
)) {

330 
	`as£π
(
	`PTR_ERR
(
˛⁄e
Ë!-
EAGAIN
);

331 
	`blockput
(
buf„r
);

332  
	`PTR_ERR
(
˛⁄e
);

335 
ªfcou¡
 = 
	`bufd©a
(
˛⁄e
);

336 
ªfcou¡
[
off£t
] = 
	`˝u_to_be16
(
vÆ
);

337 
	`m¨k_buf„r_dúty_n⁄
(
˛⁄e
);

338 
	`blockput
(
˛⁄e
);

341 
	}
}

344 
	$©omªf
(
öode
 *
©abÀ
, 
©om_t
 
©om
, 
u£
)

346 if(
DEBUG_MODE_K
==1)

348 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

350 
sb
 *sb = 
	`tux_sb
(
©abÀ
->
i_sb
);

351 
shi·
 = 
sb
->
blockbôs
 - 
ATOMREF_BLKBITS
;

352 
block
 = 
sb
->
©omªf_ba£
 + 
ATOMREF_SIZE
 * (
©om
 >> 
shi·
);

353 
off£t
 = 
©om
 & ~(-1 << 
shi·
), 
kûl
 = 0;

354 
buf„r_hód
 *
buf„r
;

355 
__be16
 *
ªfcou¡
;

356 
îr
;

358 
buf„r
 = 
	`blockªad
(
	`m≠pög
(
©abÀ
), 
block
);

359 i‡(!
buf„r
)

360  -
EIO
;

362 
ªfcou¡
 = 
	`bufd©a
(
buf„r
);

363 
low
 = 
	`be16_to_˝u
(
ªfcou¡
[
off£t
]Ë+ 
u£
;

364 
	`åa˚
("incátom %x by %d, offset %x[%x],Üow = %d",

365 
©om
, 
u£
, 
block
, 
off£t
, 
low
);

368 
îr
 = 
	`upd©e_ªfcou¡
(
sb
, 
buf„r
, 
off£t
, 
low
);

369 i‡(
îr
)

370  
îr
;

372 i‡(!
low
 || (low & (-1 << 16))) {

373 
buf„r
 = 
	`blockªad
(
	`m≠pög
(
©abÀ
), 
block
 + 1);

374 i‡(!
buf„r
)

375  -
EIO
;

377 
ªfcou¡
 = 
	`bufd©a
(
buf„r
);

378 
high
 = 
	`be16_to_˝u
(
ªfcou¡
[
off£t
]);

379 i‡(!
low
)

380 
	`blockput
(
buf„r
);

382 
	`åa˚
("carry %d, offset %x[%x], high = %d",

383 (
low
 >> 16), 
block
, 
off£t
, 
high
);

384 
high
 +(
low
 >> 16);

385 
	`as£π
(
high
 >= 0);

388 
îr
 = 
	`upd©e_ªfcou¡
(
sb
, 
buf„r
, 
off£t
, 
high
);

389 i‡(
îr
) {

392  
îr
;

396 
kûl
 = !(
low
 | 
high
);

399 i‡(
kûl
) {

400 
	`åa˚
("dñëê©om %x", 
©om
);

401 
loff_t
 
√xt
 = 
UNATOM_FREE_MAGIC
 | 
sb
->
‰ì©om
;

402 
loff_t
 
whîe
 = 
	`u«tom_di˘_wrôe
(
©abÀ
, 
©om
, 
√xt
);

403 i‡(
whîe
 < 0) {

406  -
EIO
;

408 
sb
->
‰ì©om
 = 
©om
;

410 
buf„r
 = 
	`blockªad
(
	`m≠pög
(
©abÀ
), 
whîe
 >> 
sb
->
blockbôs
);

411 i‡(!
buf„r
) {

414  -
EIO
;

417 
tux_dúít
 *
íåy
 = 
	`bufd©a
(
buf„r
Ë+ (
whîe
 & 
sb
->
blockmask
);

418 i‡(
	`íåy_©om
(
íåy
Ë=
©om
) {

421 
îr
 = 
	`tux_dñëe_íåy
(
©abÀ
, 
buf„r
, 
íåy
);

422 i‡(
îr
)

423  
îr
;

428 
	`tux3_fs_îr‹
(
sb
, "atomÉntryÇot found");

429 
	`blockput
(
buf„r
);

430  -
EIO
;

435 
	}
}

438 
	$dump_©oms
(
öode
 *
©abÀ
)

440 if(
DEBUG_MODE_K
==1)

442 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

444 
sb
 *sb = 
	`tux_sb
(
©abÀ
->
i_sb
);

445 
blocks
 = (
sb
->
©omgí
 + (sb->
blockmask
 >> 
ATOMREF_BLKBITS
))

446 >> (
sb
->
blockbôs
 - 
ATOMREF_BLKBITS
);

448 
j
 = 0; j < 
blocks
; j++) {

449 
block
 = 
sb
->
©omªf_ba£
 + 
ATOMREF_SIZE
 * 
j
;

450 
buf„r_hód
 *
lobuf
, *
hibuf
;

451 i‡(!(
lobuf
 = 
	`blockªad
(
	`m≠pög
(
©abÀ
), 
block
)))

452 
ìk
;

453 i‡(!(
hibuf
 = 
	`blockªad
(
	`m≠pög
(
©abÀ
), 
block
 + 1))) {

454 
	`blockput
(
lobuf
);

455 
ìk
;

457 
__be16
 *
l‹efs
 = 
	`bufd©a
(
lobuf
), *
húefs
 = bufd©a(
hibuf
);

458 
i
 = 0; i < (
sb
->
blocksize
 >> 
ATOMREF_BLKBITS
); i++) {

459 
ªfs
 = (
	`be16_to_˝u
(
húefs
[
i
]Ë<< 16Ë| be16_to_˝u(
l‹efs
[i]);

460 i‡(!
ªfs
)

462 
©om_t
 
©om
 = 
i
;

463 
«me
[100];

464 
Àn
 = 
	`u«tom
(
©abÀ
, 
©om
, 
«me
, (name));

465 i‡(
Àn
 < 0)

466 
ìk
;

467 
	`__tux3_dbg
("%.*s:átom 0x%08x,Ñef %u\n",

468 
Àn
, 
«me
, 
©om
, 
ªfs
);

470 
	`blockput
(
lobuf
);

471 
	`blockput
(
hibuf
);

475 
ìk
:

476 
	`tux3_îr
(
sb
, "atomÇameÜookup failed");

477 
	}
}

480 
	$show_‰ì©oms
(
sb
 *sb)

482 if(
DEBUG_MODE_K
==1)

484 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

486 
öode
 *
©abÀ
 = 
sb
->atable;

487 
©om_t
 
©om
 = 
sb
->
‰ì©om
;

489 
©om
) {

490 
	`tux3_dbg
("‰ìátom: %x", 
©om
);

491 
loff_t
 
√xt
 = 
	`u«tom_di˘_ªad
(
©abÀ
, 
©om
);

492 i‡(
√xt
 < 0)

493 
ìk
;

494 i‡(!
	`is_‰ì_u«tom
(
√xt
))

495 
ìk
;

496 
©om
 = 
√xt
 & ~
UNATOM_FREE_MASK
;

500 
ìk
:

501 
	`tux3_îr
(
sb
, "eek");

502 
	}
}

506 
	sxˇche_íåy
 {

508 
u16
 
	m©om
;

509 
u16
 
	msize
;

510 
	mbody
[];

513 
	sxˇche
 {

514 
u16
 
	msize
;

515 
u16
 
	mmaxsize
;

516 
xˇche_íåy
 
	mx©ås
[];

520 
	$‰ì_xˇche
(
öode
 *inode)

522 if(
DEBUG_MODE_K
==1)

524 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

526 i‡(
	`tux_öode
(
öode
)->
xˇche
) {

527 
	`‰ì
(
	`tux_öode
(
öode
)->
xˇche
);

528 
	`tux_öode
(
öode
)->
xˇche
 = 
NULL
;

530 
	}
}

533 
	$√w_xˇche
(
öode
 *öode, 
size
)

535 if(
DEBUG_MODE_K
==1)

537 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

539 
xˇche
 *xcache;

541 
xˇche
 = 
	`mÆloc
((*xˇcheË+ 
size
);

542 i‡(!
xˇche
)

543  -
ENOMEM
;

545 
xˇche
->
size
 = 0;

546 
xˇche
->
maxsize
 = 
size
;

547 
	`tux_öode
(
öode
)->
xˇche
 = xcache;

550 
	}
}

553 
	$ex∑nd_xˇche
(
öode
 *öode, 
size
)

555 if(
DEBUG_MODE_K
==1)

557 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

559 
	#MIN_ALLOC_SIZE
 (1 << 7)

	)

560 
xˇche
 *xˇche, *
ﬁd
 = 
	`tux_öode
(
öode
)->xcache;

562 
	`as£π
(!
ﬁd
 || 
size
 > old->
maxsize
);

565 i‡(
ﬁd
)

566 
size
 = 
	`max_t
(, 
ﬁd
->
maxsize
 * 2, size);

568 
size
 = 
	`ALIGN
(size, 
MIN_ALLOC_SIZE
);

569 
	`åa˚
("ªÆlo¯xˇchêtÿ%i", 
size
);

571 
	`as£π
(
size
);

572 
	`as£π
(
size
 <
USHRT_MAX
);

574 
xˇche
 = 
	`mÆloc
((*xˇcheË+ 
size
);

575 i‡(!
xˇche
)

576  -
ENOMEM
;

578 i‡(!
ﬁd
)

579 
xˇche
->
size
 = 0;

581 
xˇche
->
size
 = 
ﬁd
->size;

582 
	`mem˝y
(
xˇche
->
x©ås
, 
ﬁd
->x©ås, old->
size
);

583 
	`‰ì
(
ﬁd
);

585 
xˇche
->
maxsize
 = 
size
;

587 
	`tux_öode
(
öode
)->
xˇche
 = xcache;

590 
	}
}

592 
ölöe
 
xˇche_íåy
 *
	$xˇche_√xt
(
xˇche_íåy
 *
x©å
)

594 if(
DEBUG_MODE_K
==1)

596 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

598  (*)
x©å
->
body
 + x©å->
size
;

599 
	}
}

601 
ölöe
 
xˇche_íåy
 *
	$xˇche_limô
(
xˇche
 *xcache)

603 if(
DEBUG_MODE_K
==1)

605 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

607  (*)
xˇche
->
x©ås
 + xˇche->
size
;

608 
	}
}

610 
	$xˇche_dump
(
öode
 *inode)

612 if(
DEBUG_MODE_K
==1)

614 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

616 
xˇche
 *xˇchê
	`tux_öode
(
öode
)->xcache;

618 i‡(!
xˇche
)

621 
xˇche_íåy
 *
x©å
 = 
xˇche
->
x©ås
;

622 
xˇche_íåy
 *
xlimô
 = 
	`xˇche_limô
(
xˇche
);

625 
x©å
 < 
xlimô
) {

626 i‡(
x©å
->
size
 > 
	`tux_sb
(
öode
->
i_sb
)->
blocksize
)

627 
baû
;

628 
	`__tux3_dbg
("©om %.3x => ", 
x©å
->
©om
);

629 i‡(
x©å
->
size
)

630 
	`hexdump
(
x©å
->
body
, x©å->
size
);

632 
	`__tux3_dbg
("<empty>\n");

633 i‡((
x©å
 = 
	`xˇche_√xt
(x©å)Ë> 
xlimô
)

634 
Áû
;

636 
	`as£π
(
x©å
 =
xlimô
);

639 
Áû
:

640 
	`tux3_îr
(
	`tux_sb
(
öode
->
i_sb
), "corrupt xattrs");

642 
baû
:

643 
	`tux3_îr
(
	`tux_sb
(
öode
->
i_sb
), "xattrÅoo big");

645 
	}
}

647 
xˇche_íåy
 *
	$xˇche_lookup
(
xˇche
 *xˇche, 
©om
)

649 if(
DEBUG_MODE_K
==1)

651 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

653 i‡(
xˇche
) {

654 
xˇche_íåy
 *
x©å
 = 
xˇche
->
x©ås
;

655 
xˇche_íåy
 *
xlimô
 = 
	`xˇche_limô
(
xˇche
);

656 
x©å
 < 
xlimô
) {

657 i‡(
x©å
->
©om
 ==átom)

658  
x©å
;

659 i‡((
x©å
 = 
	`xˇche_√xt
(x©å)Ë> 
xlimô
)

660  
	`ERR_PTR
(-
EINVAL
);

662 
	`as£π
(
x©å
 =
xlimô
);

664  
	`ERR_PTR
(-
ENOATTR
);

665 
	}
}

667 
ölöe
 
	$ªmove_ﬁd
(
xˇche
 *xˇche, 
xˇche_íåy
 *
x©å
)

669 if(
DEBUG_MODE_K
==1)

671 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

673 i‡(
x©å
) {

674 *
xlimô
 = 
	`xˇche_limô
(
xˇche
);

675 *
√xt
 = 
	`xˇche_√xt
(
x©å
);

676 
	`memmove
(
x©å
, 
√xt
, 
xlimô
 -Çext);

677 
xˇche
->
size
 -
√xt
 - (*)
x©å
;

681 
	}
}

694 
	$xˇche_upd©e
(
öode
 *öode, 
©om
, c⁄° *
d©a
,

695 
Àn
, 
Êags
)

697 if(
DEBUG_MODE_K
==1)

699 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

701 
xˇche
 *xˇchê
	`tux_öode
(
öode
)->xcache;

702 
xˇche_íåy
 *
x©å
 = 
	`xˇche_lookup
(
xˇche
, 
©om
);

703 
u£
 = 0;

705 i‡(
	`IS_ERR
(
x©å
)) {

706 i‡(
	`PTR_ERR
(
x©å
Ë!-
ENOATTR
 || (
Êags
 & 
XATTR_REPLACE
))

707  
	`PTR_ERR
(
x©å
);

709 
	`tux3_x©ådúty
(
öode
);

711 i‡(
Êags
 & 
XATTR_CREATE
)

712  -
EEXIST
;

714 
	`tux3_x©ådúty
(
öode
);

716 
u£
 -
	`ªmove_ﬁd
(
xˇche
, 
x©å
);

720 
m‹e
 = (*
x©å
Ë+ 
Àn
;

721 i‡(!
xˇche
 || xˇche->
size
 + 
m‹e
 > xˇche->
maxsize
) {

722 
ﬁdsize
 = 
xˇche
 ? xˇche->
size
 : 0;

723 
îr
 = 
	`ex∑nd_xˇche
(
öode
, 
ﬁdsize
 + 
m‹e
);

724 i‡(
îr
)

725  
îr
;

727 
x©å
 = 
	`xˇche_limô
(
	`tux_öode
(
öode
)->
xˇche
);

729 
	`tux_öode
(
öode
)->
xˇche
->
size
 +
m‹e
;

730 
	`mem˝y
(
x©å
->
body
, 
d©a
, (x©å->
size
 = 
Àn
));

731 
x©å
->
©om
 =átom;

732 
	`tux3_m¨k_öode_dúty
(
öode
);

734 
u£
++;

735 i‡(
u£
) {

737 
	`©omªf
(
	`tux_sb
(
öode
->
i_sb
)->
©abÀ
, 
©om
, 
u£
);

741 
	}
}

744 
	$xˇche_ªmove_Æl
(
öode
 *inode)

746 if(
DEBUG_MODE_K
==1)

748 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

750 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

751 
xˇche
 *xˇchê
	`tux_öode
(
öode
)->xcache;

753 i‡(
xˇche
) {

754 
xˇche_íåy
 *
x©å
 = 
xˇche
->
x©ås
;

755 
xˇche_íåy
 *
xlimô
 = 
	`xˇche_limô
(
xˇche
);

756 
x©å
 < 
xlimô
) {

761 
îr
 = 
	`©omªf
(
sb
->
©abÀ
, 
x©å
->
©om
, -1);

762 i‡(
îr
)

763  
îr
;

765 
x©å
 = 
	`xˇche_√xt
(xattr);

767 
	`as£π
(
x©å
 =
xlimô
);

770 
	`‰ì_xˇche
(
öode
);

773 
	}
}

775 
	$gë_x©å
(
öode
 *öode, c⁄° *
«me
, 
Àn
, *
d©a
,

776 
size
)

778 if(
DEBUG_MODE_K
==1)

780 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

782 
öode
 *
©abÀ
 = 
	`tux_sb
(öode->
i_sb
)->atable;

783 
©om_t
 
©om
;

784 
ªt
;

786 
	`muãx_lock
(&
©abÀ
->
i_muãx
);

787 
ªt
 = 
	`föd_©om
(
©abÀ
, 
«me
, 
Àn
, &
©om
);

788 i‡(
ªt
)

789 
out
;

791 
xˇche
 *xˇchê
	`tux_öode
(
öode
)->xcache;

792 
xˇche_íåy
 *
x©å
 = 
	`xˇche_lookup
(
xˇche
, 
©om
);

793 i‡(
	`IS_ERR
(
x©å
)) {

794 
ªt
 = 
	`PTR_ERR
(
x©å
);

795 
out
;

797 
ªt
 = 
x©å
->
size
;

798 i‡(
ªt
 <
size
)

799 
	`mem˝y
(
d©a
, 
x©å
->
body
, 
ªt
);

800 i‡(
size
)

801 
ªt
 = -
ERANGE
;

802 
out
:

803 
	`muãx_u∆ock
(&
©abÀ
->
i_muãx
);

804  
ªt
;

805 
	}
}

807 
	$£t_x©å
(
öode
 *öode, c⁄° *
«me
, 
Àn
,

808 c⁄° *
d©a
, 
size
, 
Êags
)

810 if(
DEBUG_MODE_K
==1)

812 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

814 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

815 
öode
 *
©abÀ
 = 
sb
->atable;

817 
	`muãx_lock
(&
©abÀ
->
i_muãx
);

818 
	`ch™ge_begö
(
sb
);

820 
©om_t
 
©om
;

821 
îr
 = 
	`make_©om
(
©abÀ
, 
«me
, 
Àn
, &
©om
);

822 i‡(!
îr
) {

823 
îr
 = 
	`xˇche_upd©e
(
öode
, 
©om
, 
d©a
, 
size
, 
Êags
);

824 i‡(
îr
) {

829 
	`ch™ge_íd
(
sb
);

830 
	`muãx_u∆ock
(&
©abÀ
->
i_muãx
);

832  
îr
;

833 
	}
}

835 
	$dñ_x©å
(
öode
 *öode, c⁄° *
«me
, 
Àn
)

837 if(
DEBUG_MODE_K
==1)

839 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

841 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

842 
öode
 *
©abÀ
 = 
sb
->atable;

843 
îr
;

845 
	`muãx_lock
(&
©abÀ
->
i_muãx
);

846 
	`ch™ge_begö
(
sb
);

848 
©om_t
 
©om
;

849 
îr
 = 
	`föd_©om
(
©abÀ
, 
«me
, 
Àn
, &
©om
);

850 i‡(!
îr
) {

851 
xˇche
 *xˇchê
	`tux_öode
(
öode
)->xcache;

852 
xˇche_íåy
 *
x©å
 = 
	`xˇche_lookup
(
xˇche
, 
©om
);

853 i‡(
	`IS_ERR
(
x©å
)) {

854 
îr
 = 
	`PTR_ERR
(
x©å
);

855 
out
;

858 
	`tux3_x©ådúty
(
öode
);

859 
u£d
 = 
	`ªmove_ﬁd
(
xˇche
, 
x©å
);

860 i‡(
u£d
) {

861 
	`tux3_m¨k_öode_dúty
(
öode
);

863 
	`©omªf
(
©abÀ
, 
©om
, -
u£d
);

866 
out
:

867 
	`ch™ge_íd
(
sb
);

868 
	`muãx_u∆ock
(&
©abÀ
->
i_muãx
);

870  
îr
;

871 
	}
}

873 
	$li°_x©å
(
öode
 *öode, *
ãxt
, 
size_t
 
size
)

875 if(
DEBUG_MODE_K
==1)

877 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

879 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

880 
öode
 *
©abÀ
 = 
sb
->atable;

882 
	`muãx_lock
(&
©abÀ
->
i_muãx
);

884 
xˇche
 *xˇchê
	`tux_öode
(
öode
)->xcache;

885 i‡(!
xˇche
)

888 
xˇche_íåy
 *
x©å
 = 
xˇche
->
x©ås
;

889 
xˇche_íåy
 *
xlimô
 = 
	`xˇche_limô
(
xˇche
);

890 *
ba£
 = 
ãxt
, *
t›
 =Åexà+ 
size
;

891 
îr
;

893 
x©å
 < 
xlimô
) {

894 
©om_t
 
©om
 = 
x©å
->atom;

895 i‡(
size
) {

897 
èû
 = 
t›
 - 
ãxt
;

898 
Àn
 = 
	`u«tom
(
©abÀ
, 
©om
, 
ãxt
, 
èû
);

899 i‡(
Àn
 < 0) {

900 
îr
 = 
Àn
;

901 
îr‹
;

903 i‡(
Àn
 =
èû
) {

904 
îr
 = -
ERANGE
;

905 
îr‹
;

908 *(
ãxt
 +
Àn
) = 0;

909 
ãxt
++;

911 
Àn
 = 
	`u«tom
(
©abÀ
, 
©om
, 
NULL
, 0);

912 i‡(
Àn
 < 0) {

913 
îr
 = 
Àn
;

914 
îr‹
;

916 
ãxt
 +
Àn
 + 1;

919 i‡((
x©å
 = 
	`xˇche_√xt
(x©å)Ë> 
xlimô
) {

920 
	`tux3_fs_îr‹
(
sb
, "xcache bug");

921 
îr
 = -
EIO
;

922 
îr‹
;

925 
	`as£π
(
x©å
 =
xlimô
);

926 
	`muãx_u∆ock
(&
©abÀ
->
i_muãx
);

928  
ãxt
 - 
ba£
;

930 
îr‹
:

931 
	`muãx_u∆ock
(&
©abÀ
->
i_muãx
);

932  
îr
;

933 
	}
}

937 
	$ícode_xsize
(
öode
 *inode)

939 if(
DEBUG_MODE_K
==1)

941 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

943 
xˇche
 *xˇchê
	`tux_öode
(
öode
)->xcache;

945 i‡(!
xˇche
)

948 
size
 = 0, 
x©size
 = 
©size
[
XATTR_ATTR
];

949 
xˇche_íåy
 *
x©å
 = 
xˇche
->
x©ås
;

950 
xˇche_íåy
 *
xlimô
 = 
	`xˇche_limô
(
xˇche
);

952 
x©å
 < 
xlimô
) {

953 
size
 +2 + 
x©size
 + 
x©å
->size;

954 
x©å
 = 
	`xˇche_√xt
(xattr);

956 
	`as£π
(
x©å
 =
xlimô
);

957  
size
;

958 
	}
}

960 *
	$ícode_x©ås
(
öode
 *öode, *
©ås
, 
size
)

962 if(
DEBUG_MODE_K
==1)

964 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

966 
xˇche
 *xˇchê
	`tux_öode
(
öode
)->xcache;

968 i‡(!
xˇche
)

969  
©ås
;

971 
xˇche_íåy
 *
x©å
 = 
xˇche
->
x©ås
;

972 
xˇche_íåy
 *
xlimô
 = 
	`xˇche_limô
(
xˇche
);

973 *
limô
 = 
©ås
 + 
size
 - 3;

975 
x©å
 < 
xlimô
) {

976 i‡(
©ås
 >
limô
)

980 
©ås
 = 
	`ícode_köd
◊ârs, 
XATTR_ATTR
, 
	`tux_sb
(
öode
->
i_sb
)->
vîsi⁄
);

981 
©ås
 = 
	`ícode16
◊ârs, 
x©å
->
size
 + 2);

982 
©ås
 = 
	`ícode16
◊ârs, 
x©å
->
©om
);

983 
	`mem˝y
(
©ås
, 
x©å
->
body
, x©å->
size
);

984 
©ås
 +
x©å
->
size
;

985 
x©å
 = 
	`xˇche_√xt
(xattr);

987  
©ås
;

988 
	}
}

990 
	$decode_xsize
(
öode
 *öode, *
©ås
, 
size
)

992 if(
DEBUG_MODE_K
==1)

994 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

996 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

997 
tŸÆ
 = 0, 
byãs
;

998 *
limô
 = 
©ås
 + 
size
;

1000 
©ås
 < 
limô
 - 1) {

1001 
köd
, 
vîsi⁄
;

1002 
©ås
 = 
	`decode_köd
◊ârs, &
köd
, &
vîsi⁄
);

1003 
köd
) {

1004 
XATTR_ATTR
:

1005 
IDATA_ATTR
:

1008 
©ås
 = 
	`decode16
◊ârs, &
byãs
);

1009 
©ås
 +
byãs
;

1010 i‡(
vîsi⁄
 =
sb
->version)

1011 
tŸÆ
 +(
xˇche_íåy
Ë+ 
byãs
 - 2;

1014 
©ås
 +
©size
[
köd
];

1016  
tŸÆ
;

1017 
	}
}

1019 *
	$decode_x©å
(
öode
 *öode, *
©ås
)

1021 if(
DEBUG_MODE_K
==1)

1023 
	`¥ötf
("\t\t\t\t%25s[K] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1026 
xˇche
 *xˇchê
	`tux_öode
(
öode
)->xcache;

1027 
xˇche_íåy
 *
x©å
 = 
	`xˇche_limô
(
xˇche
);

1028 *
limô
 = 
xˇche
->
x©ås
 + xˇche->
maxsize
;

1029 
xsize
, 
byãs
, 
©om
;

1031 
©ås
 = 
	`decode16
◊ârs, &
byãs
);

1032 
©ås
 = 
	`decode16
◊ârs, &
©om
);

1035 
	`as£π
((*)
x©å
 + (*x©åË<
limô
);

1036 *
x©å
 = (
xˇche_íåy
){

1037 .
©om
 =átom,

1038 .
size
 = 
byãs
 - 2,

1040 
xsize
 = (*
x©å
Ë+ x©å->
size
;

1041 
	`as£π
((*)
x©å
 + 
xsize
 <
limô
);

1043 
	`mem˝y
(
x©å
->
body
, 
©ås
, x©å->
size
);

1044 
©ås
 +
x©å
->
size
;

1045 
xˇche
->
size
 +
xsize
;

1047  
©ås
;

1048 
	}
}

	@libklib/atomic.h

1 #i‚de‡
LIBKLIB_ATOMIC_H


2 
	#LIBKLIB_ATOMIC_H


	)

5 
	mcou¡î
;

6 } 
	t©omic_t
;

8 
	#ATOMIC_INIT
(
i
Ë{ (iË}

	)

16 
ölöe
 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
)

18  (*(vﬁ©ûê*)&(
v
)->
cou¡î
);

19 
	}
}

28 
ölöe
 
	$©omic_£t
(
©omic_t
 *
v
, 
i
)

30 
v
->
cou¡î
 = 
i
;

31 
	}
}

40 
ölöe
 
	$©omic_add_ªtu∫
(
i
, 
©omic_t
 *
v
)

42 
ãmp
;

44 
ãmp
 = 
v
->
cou¡î
;

45 
ãmp
 +
i
;

46 
v
->
cou¡î
 = 
ãmp
;

48  
ãmp
;

49 
	}
}

58 
ölöe
 
	$©omic_sub_ªtu∫
(
i
, 
©omic_t
 *
v
)

60 
ãmp
;

62 
ãmp
 = 
v
->
cou¡î
;

63 
ãmp
 -
i
;

64 
v
->
cou¡î
 = 
ãmp
;

66  
ãmp
;

67 
	}
}

69 
	#©omic_dec_ªtu∫
(
v
Ë
	`©omic_sub_ªtu∫
(1, (v))

	)

70 
	#©omic_öc_ªtu∫
(
v
Ë
	`©omic_add_ªtu∫
(1, (v))

	)

81 
ölöe
 
	$©omic_add_√g©ive
(
i
, 
©omic_t
 *
v
)

83  
	`©omic_add_ªtu∫
(
i
, 
v
) < 0;

84 
	}
}

93 
ölöe
 
	$©omic_add
(
i
, 
©omic_t
 *
v
)

95 
	`©omic_add_ªtu∫
(
i
, 
v
);

96 
	}
}

105 
ölöe
 
	$©omic_sub
(
i
, 
©omic_t
 *
v
)

107 
	`©omic_sub_ªtu∫
(
i
, 
v
);

108 
	}
}

116 
ölöe
 
	$©omic_öc
(
©omic_t
 *
v
)

118 
	`©omic_öc_ªtu∫
(
v
);

119 
	}
}

127 
ölöe
 
	$©omic_dec
(
©omic_t
 *
v
)

129 
	`©omic_dec_ªtu∫
(
v
);

130 
	}
}

141 
ölöe
 
	$©omic_sub_™d_ã°
(
i
, 
©omic_t
 *
v
)

143  
	`©omic_sub_ªtu∫
(
i
, 
v
) == 0;

144 
	}
}

154 
ölöe
 
	$©omic_öc_™d_ã°
(
©omic_t
 *
v
)

156  
	`©omic_öc_ªtu∫
(
v
) == 0;

157 
	}
}

167 
ölöe
 
	$©omic_dec_™d_ã°
(
©omic_t
 *
v
)

169 
	`as£π
(
	`©omic_ªad
(
v
) > 0);

170  
	`©omic_dec_ªtu∫
(
v
) == 0;

171 
	}
}

173 
ölöe
 
	$©omic_cmpxchg
(
©omic_t
 *
v
, 
ﬁd
, 
√w
)

175 
¥ev
 = 
v
->
cou¡î
;

176 i‡(
¥ev
 =
ﬁd
)

177 
v
->
cou¡î
 = 
√w
;

178  
¥ev
;

179 
	}
}

181 
ölöe
 
	$©omic_xchg
(
©omic_t
 *
v
, 
√w
)

183 
¥ev
 = 
v
->
cou¡î
;

184 
v
->
cou¡î
 = 
√w
;

185  
¥ev
;

186 
	}
}

188 
ölöe
 
	$__©omic_add_u∆ess
(
©omic_t
 *
v
, 
a
, 
u
)

190 
c
, 
ﬁd
;

191 
c
 = 
	`©omic_ªad
(
v
);

192 
c
 !
u
 && (
ﬁd
 = 
	`©omic_cmpxchg
(
v
, c, c + 
a
)) != c)

193 
c
 = 
ﬁd
;

194  
c
;

195 
	}
}

204 
ölöe
 
	$©omic_˛ór_mask
(
mask
, 
©omic_t
 *
v
)

206 
mask
 = ~mask;

207 
v
->
cou¡î
 &
mask
;

208 
	}
}

217 
ölöe
 
	$©omic_£t_mask
(
mask
, 
©omic_t
 *
v
)

219 
v
->
cou¡î
 |
mask
;

220 
	}
}

223 
	#smp_mb__bef‹e_©omic_dec
(Ë
	`b¨rõr
()

	)

224 
	#smp_mb__a·î_©omic_dec
(Ë
	`b¨rõr
()

	)

225 
	#smp_mb__bef‹e_©omic_öc
(Ë
	`b¨rõr
()

	)

226 
	#smp_mb__a·î_©omic_öc
(Ë
	`b¨rõr
()

	)

237 
ölöe
 
	$©omic_add_u∆ess
(
©omic_t
 *
v
, 
a
, 
u
)

239  
	`__©omic_add_u∆ess
(
v
, 
a
, 
u
) != u;

240 
	}
}

249 
	#©omic_öc_nŸ_zîo
(
v
Ë
	`©omic_add_u∆ess
((v), 1, 0)

	)

263 
ölöe
 
	$©omic_öc_nŸ_zîo_höt
(
©omic_t
 *
v
, 
höt
)

265 
vÆ
, 
c
 = 
höt
;

268 i‡(!
höt
)

269  
	`©omic_öc_nŸ_zîo
(
v
);

272 
vÆ
 = 
	`©omic_cmpxchg
(
v
, 
c
, c + 1);

273 i‡(
vÆ
 =
c
)

275 
c
 = 
vÆ
;

276 } 
c
);

279 
	}
}

281 
ölöe
 
	$©omic_öc_u∆ess_√g©ive
(
©omic_t
 *
p
)

283 
v
, 
v1
;

284 
v
 = 0; v >0; v = 
v1
) {

285 
v1
 = 
	`©omic_cmpxchg
(
p
, 
v
, v + 1);

286 i‡(
	`likñy
(
v1
 =
v
))

290 
	}
}

292 
ölöe
 
	$©omic_dec_u∆ess_posôive
(
©omic_t
 *
p
)

294 
v
, 
v1
;

295 
v
 = 0; v <0; v = 
v1
) {

296 
v1
 = 
	`©omic_cmpxchg
(
p
, 
v
, v - 1);

297 i‡(
	`likñy
(
v1
 =
v
))

301 
	}
}

310 
ölöe
 
	$©omic_dec_if_posôive
(
©omic_t
 *
v
)

312 
c
, 
ﬁd
, 
dec
;

313 
c
 = 
	`©omic_ªad
(
v
);

315 
dec
 = 
c
 - 1;

316 i‡(
	`u∆ikñy
(
dec
 < 0))

318 
ﬁd
 = 
	`©omic_cmpxchg
((
v
), 
c
, 
dec
);

319 i‡(
	`likñy
(
ﬁd
 =
c
))

321 
c
 = 
ﬁd
;

323  
dec
;

324 
	}
}

326 
ölöe
 
	$©omic_‹
(
i
, 
©omic_t
 *
v
)

328 
ﬁd
;

329 
√w
;

332 
ﬁd
 = 
	`©omic_ªad
(
v
);

333 
√w
 = 
ﬁd
 | 
i
;

334 } 
	`©omic_cmpxchg
(
v
, 
ﬁd
, 
√w
) != old);

335 
	}
}

	@libklib/barrier.h

1 #i‚de‡
LIBKLIB_BARRIER_H


2 
	#LIBKLIB_BARRIER_H


	)

12 
	#mb
(Ë
	`b¨rõr
()

	)

13 
	#rmb
(Ë
	`mb
()

	)

14 
	#wmb
(Ë
	`b¨rõr
()

	)

16 #ifde‡
CONFIG_SMP


17 
	#smp_mb
(Ë
	`mb
()

	)

18 
	#smp_rmb
(Ë
	`rmb
()

	)

19 
	#smp_wmb
(Ë
	`wmb
()

	)

21 
	#smp_mb
(Ë
	`b¨rõr
()

	)

22 
	#smp_rmb
(Ë
	`b¨rõr
()

	)

23 
	#smp_wmb
(Ë
	`b¨rõr
()

	)

26 
	#£t_mb
(
v¨
, 
vÆue
Ëdÿ{ v¨ = vÆue; 
	`mb
(); } 0)

	)

27 
	#£t_wmb
(
v¨
, 
vÆue
Ëdÿ{ v¨ = vÆue; 
	`wmb
(); } 0)

	)

29 
	#ªad_b¨rõr_dïíds
(Ëdÿ{} 0)

	)

30 
	#smp_ªad_b¨rõr_dïíds
(Ëdÿ{} 0)

	)

	@libklib/bitops.h

1 #i‚de‡
LIBKLIB_BITOPS_H


2 
	#LIBKLIB_BITOPS_H


	)

4 
	~<limôs.h
>

6 
	#BITS_PER_LONG
 
LONG_BIT


	)

8 
	#BIT
(
ƒ
Ë(1UL << (ƒ))

	)

9 
	#BIT_MASK
(
ƒ
Ë(1UL << (“rË% 
BITS_PER_LONG
))

	)

10 
	#BIT_WORD
(
ƒ
Ë(“rË/ 
BITS_PER_LONG
)

	)

11 
	#BITS_PER_BYTE
 8

	)

12 
	#BITS_TO_LONGS
(
ƒ
Ë
	`DIV_ROUND_UP
“r, 
BITS_PER_BYTE
 * ())

	)

14 
	~<libklib/bô›s/__ffs.h
>

15 
	~<libklib/bô›s/ffz.h
>

16 
	~<libklib/bô›s/Ês.h
>

17 
	~<libklib/bô›s/__Ês.h
>

18 
	~<libklib/bô›s/Ês64.h
>

19 
	~<libklib/bô›s/föd.h
>

21 
	~<libklib/bô›s/©omic.h
>

22 
	~<libklib/bô›s/n⁄-©omic.h
>

23 
	~<libklib/bô›s/À.h
>

25 
ölöe
 
	$Ês_l⁄g
(
l
)

27 i‡((
l
) == 4)

28  
	`Ês
(
l
);

29  
	`Ês64
(
l
);

30 
	}
}

	@libklib/bitops/__ffs.h

1 #i‚de‡
LIBKLIB_BITOPS__FFS_H


2 
	#LIBKLIB_BITOPS__FFS_H


	)

10 
__Æways_ölöe
 
	$__ffs
(
w‹d
)

12 
num
 = 0;

14 #i‡
BITS_PER_LONG
 == 64

15 i‡((
w‹d
 & 0xffffffff) == 0) {

16 
num
 += 32;

17 
w‹d
 >>= 32;

20 i‡((
w‹d
 & 0xffff) == 0) {

21 
num
 += 16;

22 
w‹d
 >>= 16;

24 i‡((
w‹d
 & 0xff) == 0) {

25 
num
 += 8;

26 
w‹d
 >>= 8;

28 i‡((
w‹d
 & 0xf) == 0) {

29 
num
 += 4;

30 
w‹d
 >>= 4;

32 i‡((
w‹d
 & 0x3) == 0) {

33 
num
 += 2;

34 
w‹d
 >>= 2;

36 i‡((
w‹d
 & 0x1) == 0)

37 
num
 += 1;

38  
num
;

39 
	}
}

	@libklib/bitops/__fls.h

1 #i‚de‡
LIBKLIB_BITOPS__FLS_H


2 
	#LIBKLIB_BITOPS__FLS_H


	)

10 
__Æways_ölöe
 
	$__Ês
(
w‹d
)

12 
num
 = 
BITS_PER_LONG
 - 1;

14 #i‡
BITS_PER_LONG
 == 64

15 i‡(!(
w‹d
 & (~0ul << 32))) {

16 
num
 -= 32;

17 
w‹d
 <<= 32;

20 i‡(!(
w‹d
 & (~0u»<< (
BITS_PER_LONG
-16)))) {

21 
num
 -= 16;

22 
w‹d
 <<= 16;

24 i‡(!(
w‹d
 & (~0u»<< (
BITS_PER_LONG
-8)))) {

25 
num
 -= 8;

26 
w‹d
 <<= 8;

28 i‡(!(
w‹d
 & (~0u»<< (
BITS_PER_LONG
-4)))) {

29 
num
 -= 4;

30 
w‹d
 <<= 4;

32 i‡(!(
w‹d
 & (~0u»<< (
BITS_PER_LONG
-2)))) {

33 
num
 -= 2;

34 
w‹d
 <<= 2;

36 i‡(!(
w‹d
 & (~0u»<< (
BITS_PER_LONG
-1))))

37 
num
 -= 1;

38  
num
;

39 
	}
}

	@libklib/bitops/atomic.h

1 #i‚de‡
LIBKLIB_BITOPS_ATOMIC_H


2 
	#LIBKLIB_BITOPS_ATOMIC_H


	)

4 #i‚de‡
_©omic_•ö_lock_úqßve


6 
	#_©omic_•ö_lock
(
l
)

	)

7 
	#_©omic_•ö_u∆ock
(
l
)

	)

35 
ölöe
 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
)

37 
mask
 = 
	`BIT_MASK
(
ƒ
);

38 *
p
 = ((*)
addr
Ë+ 
	`BIT_WORD
(
ƒ
);

40 
	`_©omic_•ö_lock
(
p
);

41 *
p
 |
mask
;

42 
	`_©omic_•ö_u∆ock
(
p
);

43 
	}
}

55 
ölöe
 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
)

57 
mask
 = 
	`BIT_MASK
(
ƒ
);

58 *
p
 = ((*)
addr
Ë+ 
	`BIT_WORD
(
ƒ
);

60 
	`_©omic_•ö_lock
(
p
);

61 *
p
 &~
mask
;

62 
	`_©omic_•ö_u∆ock
(
p
);

63 
	}
}

75 
ölöe
 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
)

77 
mask
 = 
	`BIT_MASK
(
ƒ
);

78 *
p
 = ((*)
addr
Ë+ 
	`BIT_WORD
(
ƒ
);

80 
	`_©omic_•ö_lock
(
p
);

81 *
p
 ^
mask
;

82 
	`_©omic_•ö_u∆ock
(
p
);

83 
	}
}

94 
ölöe
 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
)

96 
mask
 = 
	`BIT_MASK
(
ƒ
);

97 *
p
 = ((*)
addr
Ë+ 
	`BIT_WORD
(
ƒ
);

98 
ﬁd
;

100 
	`_©omic_•ö_lock
(
p
);

101 
ﬁd
 = *
p
;

102 *
p
 = 
ﬁd
 | 
mask
;

103 
	`_©omic_•ö_u∆ock
(
p
);

105  (
ﬁd
 & 
mask
) != 0;

106 
	}
}

117 
ölöe
 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
)

119 
mask
 = 
	`BIT_MASK
(
ƒ
);

120 *
p
 = ((*)
addr
Ë+ 
	`BIT_WORD
(
ƒ
);

121 
ﬁd
;

123 
	`_©omic_•ö_lock
(
p
);

124 
ﬁd
 = *
p
;

125 *
p
 = 
ﬁd
 & ~
mask
;

126 
	`_©omic_•ö_u∆ock
(
p
);

128  (
ﬁd
 & 
mask
) != 0;

129 
	}
}

139 
ölöe
 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
)

141 
mask
 = 
	`BIT_MASK
(
ƒ
);

142 *
p
 = ((*)
addr
Ë+ 
	`BIT_WORD
(
ƒ
);

143 
ﬁd
;

145 
	`_©omic_•ö_lock
(
p
);

146 
ﬁd
 = *
p
;

147 *
p
 = 
ﬁd
 ^ 
mask
;

148 
	`_©omic_•ö_u∆ock
(
p
);

150  (
ﬁd
 & 
mask
) != 0;

151 
	}
}

	@libklib/bitops/ffz.h

1 #i‚de‡
LIBKLIB_BITOPS_FFZ_H


2 
	#LIBKLIB_BITOPS_FFZ_H


	)

10 
	#ffz
(
x
Ë
	`__ffs
(~(x))

	)

	@libklib/bitops/find.h

1 #i‚de‡
LIBKLIB_BITOPS_FIND_H


2 
	#LIBKLIB_BITOPS_FIND_H


	)

4 
föd_√xt_bô
(c⁄° *
addr
, 
size
,

5 
off£t
);

6 
föd_√xt_zîo_bô
(c⁄° *
addr
, 
size
,

7 
off£t
);

9 
	#föd_fú°_bô
(
addr
, 
size
Ë
	`föd_√xt_bô
(◊ddr), (size), 0)

	)

10 
	#föd_fú°_zîo_bô
(
addr
, 
size
Ë
	`föd_√xt_zîo_bô
(◊ddr), (size), 0)

	)

	@libklib/bitops/fls.h

1 #i‚de‡
LIBKLIB_BITOPS_FLS_H


2 
	#LIBKLIB_BITOPS_FLS_H


	)

12 
__Æways_ölöe
 
	$Ês
(
x
)

14 
r
 = 32;

16 i‡(!
x
)

18 i‡(!(
x
 & 0xffff0000u)) {

19 
x
 <<= 16;

20 
r
 -= 16;

22 i‡(!(
x
 & 0xff000000u)) {

23 
x
 <<= 8;

24 
r
 -= 8;

26 i‡(!(
x
 & 0xf0000000u)) {

27 
x
 <<= 4;

28 
r
 -= 4;

30 i‡(!(
x
 & 0xc0000000u)) {

31 
x
 <<= 2;

32 
r
 -= 2;

34 i‡(!(
x
 & 0x80000000u)) {

35 
x
 <<= 1;

36 
r
 -= 1;

38  
r
;

39 
	}
}

	@libklib/bitops/fls64.h

1 #i‚de‡
LIBKLIB_BITOPS_FLS64_H


2 
	#LIBKLIB_BITOPS_FLS64_H


	)

15 #i‡
BITS_PER_LONG
 == 32

16 
__Æways_ölöe
 
	$Ês64
(
__u64
 
x
)

18 
__u32
 
h
 = 
x
 >> 32;

19 i‡(
h
)

20  
	`Ês
(
h
) + 32;

21  
	`Ês
(
x
);

22 
	}
}

23 #ñi‡
BITS_PER_LONG
 == 64

24 
__Æways_ölöe
 
	$Ês64
(
__u64
 
x
)

26 i‡(
x
 == 0)

28  
	`__Ês
(
x
) + 1;

29 
	}
}

31 #îr‹ 
BITS_PER_LONG
 
nŸ
 32 
‹
 64

	@libklib/bitops/le.h

1 #i‚de‡
LIBKLIB_BITOPS_LE_H


2 
	#LIBKLIB_BITOPS_LE_H


	)

4 
	~<ídün.h
>

6 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


8 
	#BITOP_LE_SWIZZLE
 0

	)

10 
ölöe
 
	$föd_√xt_zîo_bô_À
(c⁄° *
addr
,

11 
size
, 
off£t
)

13  
	`föd_√xt_zîo_bô
(
addr
, 
size
, 
off£t
);

14 
	}
}

16 
ölöe
 
	$föd_√xt_bô_À
(c⁄° *
addr
,

17 
size
, 
off£t
)

19  
	`föd_√xt_bô
(
addr
, 
size
, 
off£t
);

20 
	}
}

22 
ölöe
 
	$föd_fú°_zîo_bô_À
(c⁄° *
addr
,

23 
size
)

25  
	`föd_fú°_zîo_bô
(
addr
, 
size
);

26 
	}
}

28 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


30 
	#BITOP_LE_SWIZZLE
 ((
BITS_PER_LONG
-1Ë& ~0x7)

	)

32 
föd_√xt_zîo_bô_À
(c⁄° *
addr
,

33 
size
, 
off£t
);

35 
föd_√xt_bô_À
(c⁄° *
addr
,

36 
size
, 
off£t
);

38 
	#föd_fú°_zîo_bô_À
(
addr
, 
size
) \

39 
	`föd_√xt_zîo_bô_À
((
addr
), (
size
), 0)

	)

45 
ölöe
 
	$ã°_bô_À
(
ƒ
, c⁄° *
addr
)

47  
	`ã°_bô
(
ƒ
 ^ 
BITOP_LE_SWIZZLE
, 
addr
);

48 
	}
}

50 
ölöe
 
	$__£t_bô_À
(
ƒ
, *
addr
)

52 
	`__£t_bô
(
ƒ
 ^ 
BITOP_LE_SWIZZLE
, 
addr
);

53 
	}
}

55 
ölöe
 
	$__˛ór_bô_À
(
ƒ
, *
addr
)

57 
	`__˛ór_bô
(
ƒ
 ^ 
BITOP_LE_SWIZZLE
, 
addr
);

58 
	}
}

60 
ölöe
 
	$ã°_™d_£t_bô_À
(
ƒ
, *
addr
)

62  
	`ã°_™d_£t_bô
(
ƒ
 ^ 
BITOP_LE_SWIZZLE
, 
addr
);

63 
	}
}

65 
ölöe
 
	$ã°_™d_˛ór_bô_À
(
ƒ
, *
addr
)

67  
	`ã°_™d_˛ór_bô
(
ƒ
 ^ 
BITOP_LE_SWIZZLE
, 
addr
);

68 
	}
}

70 
ölöe
 
	$__ã°_™d_£t_bô_À
(
ƒ
, *
addr
)

72  
	`__ã°_™d_£t_bô
(
ƒ
 ^ 
BITOP_LE_SWIZZLE
, 
addr
);

73 
	}
}

75 
ölöe
 
	$__ã°_™d_˛ór_bô_À
(
ƒ
, *
addr
)

77  
	`__ã°_™d_˛ór_bô
(
ƒ
 ^ 
BITOP_LE_SWIZZLE
, 
addr
);

78 
	}
}

	@libklib/bitops/non-atomic.h

1 #i‚de‡
LIBKLIB_BITOPS_NON_ATOMIC_H


2 
	#LIBKLIB_BITOPS_NON_ATOMIC_H


	)

13 
ölöe
 
	$__£t_bô
(
ƒ
, vﬁ©ûê*
addr
)

15 
mask
 = 
	`BIT_MASK
(
ƒ
);

16 *
p
 = ((*)
addr
Ë+ 
	`BIT_WORD
(
ƒ
);

18 *
p
 |
mask
;

19 
	}
}

21 
ölöe
 
	$__˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
)

23 
mask
 = 
	`BIT_MASK
(
ƒ
);

24 *
p
 = ((*)
addr
Ë+ 
	`BIT_WORD
(
ƒ
);

26 *
p
 &~
mask
;

27 
	}
}

38 
ölöe
 
	$__ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
)

40 
mask
 = 
	`BIT_MASK
(
ƒ
);

41 *
p
 = ((*)
addr
Ë+ 
	`BIT_WORD
(
ƒ
);

43 *
p
 ^
mask
;

44 
	}
}

55 
ölöe
 
	$__ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
)

57 
mask
 = 
	`BIT_MASK
(
ƒ
);

58 *
p
 = ((*)
addr
Ë+ 
	`BIT_WORD
(
ƒ
);

59 
ﬁd
 = *
p
;

61 *
p
 = 
ﬁd
 | 
mask
;

62  (
ﬁd
 & 
mask
) != 0;

63 
	}
}

74 
ölöe
 
	$__ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
)

76 
mask
 = 
	`BIT_MASK
(
ƒ
);

77 *
p
 = ((*)
addr
Ë+ 
	`BIT_WORD
(
ƒ
);

78 
ﬁd
 = *
p
;

80 *
p
 = 
ﬁd
 & ~
mask
;

81  (
ﬁd
 & 
mask
) != 0;

82 
	}
}

85 
ölöe
 
	$__ã°_™d_ch™ge_bô
(
ƒ
,

86 vﬁ©ûê*
addr
)

88 
mask
 = 
	`BIT_MASK
(
ƒ
);

89 *
p
 = ((*)
addr
Ë+ 
	`BIT_WORD
(
ƒ
);

90 
ﬁd
 = *
p
;

92 *
p
 = 
ﬁd
 ^ 
mask
;

93  (
ﬁd
 & 
mask
) != 0;

94 
	}
}

101 
ölöe
 
	$ã°_bô
(
ƒ
, c⁄° vﬁ©ûê*
addr
)

103  1UL & (
addr
[
	`BIT_WORD
(
ƒ
)] >> (ƒ & (
BITS_PER_LONG
-1)));

104 
	}
}

	@libklib/byteorder.h

1 #i‚de‡
LIBKLIB_BYTEORDER_H


2 
	#LIBKLIB_BYTEORDER_H


	)

4 
	~<ídün.h
>

6 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


7 
	~<libklib/byã‹dî/lôée_ídün.h
>

8 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


9 
	~<libklib/byã‹dî/big_ídün.h
>

	@libklib/byteorder/big_endian.h

1 #i‚de‡
LIBKLIB_BYTEORDER_BIG_ENDIAN_H


2 
	#LIBKLIB_BYTEORDER_BIG_ENDIAN_H


	)

4 
	~<libklib/ty≥s.h
>

5 
	~<libklib/swab.h
>

13 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__f‹˚
 
__À64
)
	`___c⁄°™t_swab64
((x)))

	)

14 
	#__c⁄°™t_À64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__f‹˚
 
__u64
)(
__À64
)(x))

	)

15 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__f‹˚
 
__À32
)
	`___c⁄°™t_swab32
((x)))

	)

16 
	#__c⁄°™t_À32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__f‹˚
 
__u32
)(
__À32
)(x))

	)

17 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__f‹˚
 
__À16
)
	`___c⁄°™t_swab16
((x)))

	)

18 
	#__c⁄°™t_À16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__f‹˚
 
__u16
)(
__À16
)(x))

	)

19 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__f‹˚
 
__be64
)(
__u64
)(x))

	)

20 
	#__c⁄°™t_be64_to_˝u
(
x
Ë((
__f‹˚
 
__u64
)(
__be64
)(x))

	)

21 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__f‹˚
 
__be32
)(
__u32
)(x))

	)

22 
	#__c⁄°™t_be32_to_˝u
(
x
Ë((
__f‹˚
 
__u32
)(
__be32
)(x))

	)

23 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__f‹˚
 
__be16
)(
__u16
)(x))

	)

24 
	#__c⁄°™t_be16_to_˝u
(
x
Ë((
__f‹˚
 
__u16
)(
__be16
)(x))

	)

25 
	#__˝u_to_À64
(
x
Ë((
__f‹˚
 
__À64
)
	`__swab64
((x)))

	)

26 
	#__À64_to_˝u
(
x
Ë
	`__swab64
((
__f‹˚
 
__u64
)(
__À64
)(x))

	)

27 
	#__˝u_to_À32
(
x
Ë((
__f‹˚
 
__À32
)
	`__swab32
((x)))

	)

28 
	#__À32_to_˝u
(
x
Ë
	`__swab32
((
__f‹˚
 
__u32
)(
__À32
)(x))

	)

29 
	#__˝u_to_À16
(
x
Ë((
__f‹˚
 
__À16
)
	`__swab16
((x)))

	)

30 
	#__À16_to_˝u
(
x
Ë
	`__swab16
((
__f‹˚
 
__u16
)(
__À16
)(x))

	)

31 
	#__˝u_to_be64
(
x
Ë((
__f‹˚
 
__be64
)(
__u64
)(x))

	)

32 
	#__be64_to_˝u
(
x
Ë((
__f‹˚
 
__u64
)(
__be64
)(x))

	)

33 
	#__˝u_to_be32
(
x
Ë((
__f‹˚
 
__be32
)(
__u32
)(x))

	)

34 
	#__be32_to_˝u
(
x
Ë((
__f‹˚
 
__u32
)(
__be32
)(x))

	)

35 
	#__˝u_to_be16
(
x
Ë((
__f‹˚
 
__be16
)(
__u16
)(x))

	)

36 
	#__be16_to_˝u
(
x
Ë((
__f‹˚
 
__u16
)(
__be16
)(x))

	)

38 
ölöe
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

40  (
__f‹˚
 
__À64
)
	`__swab64p
(
p
);

41 
	}
}

42 
ölöe
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

44  
	`__swab64p
((
__u64
 *)
p
);

45 
	}
}

46 
ölöe
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

48  (
__f‹˚
 
__À32
)
	`__swab32p
(
p
);

49 
	}
}

50 
ölöe
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

52  
	`__swab32p
((
__u32
 *)
p
);

53 
	}
}

54 
ölöe
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

56  (
__f‹˚
 
__À16
)
	`__swab16p
(
p
);

57 
	}
}

58 
ölöe
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

60  
	`__swab16p
((
__u16
 *)
p
);

61 
	}
}

62 
ölöe
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

64  (
__f‹˚
 
__be64
)*
p
;

65 
	}
}

66 
ölöe
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

68  (
__f‹˚
 
__u64
)*
p
;

69 
	}
}

70 
ölöe
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

72  (
__f‹˚
 
__be32
)*
p
;

73 
	}
}

74 
ölöe
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

76  (
__f‹˚
 
__u32
)*
p
;

77 
	}
}

78 
ölöe
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

80  (
__f‹˚
 
__be16
)*
p
;

81 
	}
}

82 
ölöe
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

84  (
__f‹˚
 
__u16
)*
p
;

85 
	}
}

86 
	#__˝u_to_À64s
(
x
Ë
	`__swab64s
((x))

	)

87 
	#__À64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

88 
	#__˝u_to_À32s
(
x
Ë
	`__swab32s
((x))

	)

89 
	#__À32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

90 
	#__˝u_to_À16s
(
x
Ë
	`__swab16s
((x))

	)

91 
	#__À16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

92 
	#__˝u_to_be64s
(
x
Ëdÿ{ ()(x); } 0)

	)

93 
	#__be64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__˝u_to_be32s
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__be32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__˝u_to_be16s
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__be16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

99 
	~<libklib/byã‹dî/gíîic.h
>

	@libklib/byteorder/generic.h

1 #i‚de‡
LIBKLIB_BYTEORDER_GENERIC_H


2 
	#LIBKLIB_BYTEORDER_GENERIC_H


	)

85 
	#˝u_to_À64
 
__˝u_to_À64


	)

86 
	#À64_to_˝u
 
__À64_to_˝u


	)

87 
	#˝u_to_À32
 
__˝u_to_À32


	)

88 
	#À32_to_˝u
 
__À32_to_˝u


	)

89 
	#˝u_to_À16
 
__˝u_to_À16


	)

90 
	#À16_to_˝u
 
__À16_to_˝u


	)

91 
	#˝u_to_be64
 
__˝u_to_be64


	)

92 
	#be64_to_˝u
 
__be64_to_˝u


	)

93 
	#˝u_to_be32
 
__˝u_to_be32


	)

94 
	#be32_to_˝u
 
__be32_to_˝u


	)

95 
	#˝u_to_be16
 
__˝u_to_be16


	)

96 
	#be16_to_˝u
 
__be16_to_˝u


	)

97 
	#˝u_to_À64p
 
__˝u_to_À64p


	)

98 
	#À64_to_˝up
 
__À64_to_˝up


	)

99 
	#˝u_to_À32p
 
__˝u_to_À32p


	)

100 
	#À32_to_˝up
 
__À32_to_˝up


	)

101 
	#˝u_to_À16p
 
__˝u_to_À16p


	)

102 
	#À16_to_˝up
 
__À16_to_˝up


	)

103 
	#˝u_to_be64p
 
__˝u_to_be64p


	)

104 
	#be64_to_˝up
 
__be64_to_˝up


	)

105 
	#˝u_to_be32p
 
__˝u_to_be32p


	)

106 
	#be32_to_˝up
 
__be32_to_˝up


	)

107 
	#˝u_to_be16p
 
__˝u_to_be16p


	)

108 
	#be16_to_˝up
 
__be16_to_˝up


	)

109 
	#˝u_to_À64s
 
__˝u_to_À64s


	)

110 
	#À64_to_˝us
 
__À64_to_˝us


	)

111 
	#˝u_to_À32s
 
__˝u_to_À32s


	)

112 
	#À32_to_˝us
 
__À32_to_˝us


	)

113 
	#˝u_to_À16s
 
__˝u_to_À16s


	)

114 
	#À16_to_˝us
 
__À16_to_˝us


	)

115 
	#˝u_to_be64s
 
__˝u_to_be64s


	)

116 
	#be64_to_˝us
 
__be64_to_˝us


	)

117 
	#˝u_to_be32s
 
__˝u_to_be32s


	)

118 
	#be32_to_˝us
 
__be32_to_˝us


	)

119 
	#˝u_to_be16s
 
__˝u_to_be16s


	)

120 
	#be16_to_˝us
 
__be16_to_˝us


	)

144 
ölöe
 
	$À16_add_˝u
(
__À16
 *
v¨
, 
u16
 
vÆ
)

146 *
v¨
 = 
	`˝u_to_À16
(
	`À16_to_˝u
(*v¨Ë+ 
vÆ
);

147 
	}
}

149 
ölöe
 
	$À32_add_˝u
(
__À32
 *
v¨
, 
u32
 
vÆ
)

151 *
v¨
 = 
	`˝u_to_À32
(
	`À32_to_˝u
(*v¨Ë+ 
vÆ
);

152 
	}
}

154 
ölöe
 
	$À64_add_˝u
(
__À64
 *
v¨
, 
u64
 
vÆ
)

156 *
v¨
 = 
	`˝u_to_À64
(
	`À64_to_˝u
(*v¨Ë+ 
vÆ
);

157 
	}
}

159 
ölöe
 
	$be16_add_˝u
(
__be16
 *
v¨
, 
u16
 
vÆ
)

161 *
v¨
 = 
	`˝u_to_be16
(
	`be16_to_˝u
(*v¨Ë+ 
vÆ
);

162 
	}
}

164 
ölöe
 
	$be32_add_˝u
(
__be32
 *
v¨
, 
u32
 
vÆ
)

166 *
v¨
 = 
	`˝u_to_be32
(
	`be32_to_˝u
(*v¨Ë+ 
vÆ
);

167 
	}
}

169 
ölöe
 
	$be64_add_˝u
(
__be64
 *
v¨
, 
u64
 
vÆ
)

171 *
v¨
 = 
	`˝u_to_be64
(
	`be64_to_˝u
(*v¨Ë+ 
vÆ
);

172 
	}
}

	@libklib/byteorder/little_endian.h

1 #i‚de‡
LIBKLIB_BYTEORDER_LITTLE_ENDIAN_H


2 
	#LIBKLIB_BYTEORDER_LITTLE_ENDIAN_H


	)

4 
	~<libklib/ty≥s.h
>

5 
	~<libklib/swab.h
>

13 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__f‹˚
 
__À64
)(
__u64
)(x))

	)

14 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__f‹˚
 
__u64
)(
__À64
)(x))

	)

15 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__f‹˚
 
__À32
)(
__u32
)(x))

	)

16 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__f‹˚
 
__u32
)(
__À32
)(x))

	)

17 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__f‹˚
 
__À16
)(
__u16
)(x))

	)

18 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__f‹˚
 
__u16
)(
__À16
)(x))

	)

19 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__f‹˚
 
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

20 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__f‹˚
 
__u64
)(
__be64
)(x))

	)

21 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__f‹˚
 
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

22 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__f‹˚
 
__u32
)(
__be32
)(x))

	)

23 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__f‹˚
 
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

24 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__f‹˚
 
__u16
)(
__be16
)(x))

	)

25 
	#__˝u_to_À64
(
x
Ë((
__f‹˚
 
__À64
)(
__u64
)(x))

	)

26 
	#__À64_to_˝u
(
x
Ë((
__f‹˚
 
__u64
)(
__À64
)(x))

	)

27 
	#__˝u_to_À32
(
x
Ë((
__f‹˚
 
__À32
)(
__u32
)(x))

	)

28 
	#__À32_to_˝u
(
x
Ë((
__f‹˚
 
__u32
)(
__À32
)(x))

	)

29 
	#__˝u_to_À16
(
x
Ë((
__f‹˚
 
__À16
)(
__u16
)(x))

	)

30 
	#__À16_to_˝u
(
x
Ë((
__f‹˚
 
__u16
)(
__À16
)(x))

	)

31 
	#__˝u_to_be64
(
x
Ë((
__f‹˚
 
__be64
)
	`__swab64
((x)))

	)

32 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__f‹˚
 
__u64
)(
__be64
)(x))

	)

33 
	#__˝u_to_be32
(
x
Ë((
__f‹˚
 
__be32
)
	`__swab32
((x)))

	)

34 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__f‹˚
 
__u32
)(
__be32
)(x))

	)

35 
	#__˝u_to_be16
(
x
Ë((
__f‹˚
 
__be16
)
	`__swab16
((x)))

	)

36 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__f‹˚
 
__u16
)(
__be16
)(x))

	)

38 
ölöe
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

40  (
__f‹˚
 
__À64
)*
p
;

41 
	}
}

42 
ölöe
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

44  (
__f‹˚
 
__u64
)*
p
;

45 
	}
}

46 
ölöe
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

48  (
__f‹˚
 
__À32
)*
p
;

49 
	}
}

50 
ölöe
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

52  (
__f‹˚
 
__u32
)*
p
;

53 
	}
}

54 
ölöe
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

56  (
__f‹˚
 
__À16
)*
p
;

57 
	}
}

58 
ölöe
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

60  (
__f‹˚
 
__u16
)*
p
;

61 
	}
}

62 
ölöe
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

64  (
__f‹˚
 
__be64
)
	`__swab64p
(
p
);

65 
	}
}

66 
ölöe
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

68  
	`__swab64p
((
__u64
 *)
p
);

69 
	}
}

70 
ölöe
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

72  (
__f‹˚
 
__be32
)
	`__swab32p
(
p
);

73 
	}
}

74 
ölöe
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

76  
	`__swab32p
((
__u32
 *)
p
);

77 
	}
}

78 
ölöe
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

80  (
__f‹˚
 
__be16
)
	`__swab16p
(
p
);

81 
	}
}

82 
ölöe
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

84  
	`__swab16p
((
__u16
 *)
p
);

85 
	}
}

86 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

87 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

88 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

89 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

90 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

91 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

92 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

93 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

94 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

95 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

96 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

97 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

99 
	~<libklib/byã‹dî/gíîic.h
>

	@libklib/compiler.h

1 #i‚de‡
LIBKLIB_COMPILER_H


2 
	#LIBKLIB_COMPILER_H


	)

4 #ifde‡
__CHECKER__


5 
	#__f‹˚
 
	`__©åibuã__
((
f‹˚
))

	)

6 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

7 
	#__kî√l
 
	`__©åibuã__
((
	`addªss_•a˚
(0)))

	)

8 
	#__rcu
 
	`__©åibuã__
((
nodîef
, 
	`addªss_•a˚
(4)))

	)

10 
	#__f‹˚


	)

11 
	#__bôwi£__


	)

12 
	#__kî√l


	)

13 
	#__rcu


	)

16 #ifde‡
__GNUC__


17 
	#__∑cked
 
	`__©åibuã__
((
∑cked
))

	)

18 
	#__wók
 
	`__©åibuã__
((
wók
))

	)

20 #i‚de‡
__©åibuã_c⁄°__


21 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
((
__c⁄°__
))

	)

26 
	#b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

28 #ifde‡
__CHECKER__


29 
	#__mu°_be_¨øy
(
¨r
Ë0

	)

32 
	#__mu°_be_¨øy
(
a
Ë
	`BUILD_BUG_ON_ZERO
(
	`__ßme_ty≥
(◊), &◊)[0]))

	)

35 #i‡
__GNUC__
 < 3

37 #ñi‡
__GNUC__
 == 3

39 #i‡
__GNUC_MINOR__
 >= 4

40 
	#__mu°_check
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

42 #ñi‡
__GNUC__
 == 4

44 
	#__mu°_check
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

49 
	#__¥ötf
(
a
, 
b
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,á, b)))

	)

55 
	#unöôülized_v¨
(
x
Ëx = 
	)
x

57 
	#unöôülized_v¨
(
x
Ë
	)
x

60 #i‚de‡
__mu°_check


61 
	#__mu°_check


	)

64 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

65 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

68 #i‚de‡
__ßme_ty≥


69 
	#__ßme_ty≥
(
a
, 
b
Ë
	`__buûtö_ty≥s_com∑tibÀ_p
(
	`ty≥of
◊),Åy≥of(b))

	)

72 #i‚de‡
__mu°_be_¨øy


73 
	#__mu°_be_¨øy
(
¨r
Ë0

	)

88 
	#ACCESS_ONCE
(
x
Ë(*(vﬁ©ûê
	`ty≥of
(xË*)&(x))

	)

	@libklib/err.h

1 #i‚de‡
LIBKLIB_ERR_H


2 
	#LIBKLIB_ERR_H


	)

4 
	~<libklib/compûî.h
>

8 
	#MAX_ERRNO
 4095

	)

9 
	#IS_ERR_VALUE
(
x
Ë((xË>()-
MAX_ERRNO
)

	)

11 
ölöe
 * 
__mu°_check
 
	$ERR_PTR
(
îr‹
)

13  (*)
îr‹
;

14 
	}
}

16 
ölöe
 
__mu°_check
 
	$PTR_ERR
(c⁄° *
±r
)

18  ()
±r
;

19 
	}
}

21 
ölöe
 
__mu°_check
 
	$IS_ERR
(c⁄° *
±r
)

23  
	`IS_ERR_VALUE
(()
±r
);

24 
	}
}

26 
ölöe
 
__mu°_check
 
	$IS_ERR_OR_NULL
(c⁄° *
±r
)

28  !
±r
 || 
	`IS_ERR_VALUE
(()ptr);

29 
	}
}

31 
ölöe
 * 
__mu°_check
 
	$ERR_CAST
(c⁄° *
±r
)

33  (*)
±r
;

34 
	}
}

36 
ölöe
 
__mu°_check
 
	$PTR_RET
(c⁄° *
±r
)

38 i‡(
	`IS_ERR
(
±r
))

39  
	`PTR_ERR
(
±r
);

42 
	}
}

	@libklib/find_next_bit.c

1 
	~<libklib/libklib.h
>

3 
	#BITOP_WORD
(
ƒ
Ë(“rË/ 
BITS_PER_LONG
)

	)

5 
	$föd_√xt_bô
(c⁄° *
addr
, 
size
,

6 
off£t
)

8 if(
DEBUG_MODE_L
==1)

10 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

12 c⁄° *
p
 = 
addr
 + 
	`BITOP_WORD
(
off£t
);

13 
ªsu…
 = 
off£t
 & ~(
BITS_PER_LONG
-1);

14 
tmp
;

16 i‡(
off£t
 >
size
)

17  
size
;

18 
size
 -
ªsu…
;

19 
off£t
 %
BITS_PER_LONG
;

20 i‡(
off£t
) {

21 
tmp
 = *(
p
++);

22 
tmp
 &(~0UL << 
off£t
);

23 i‡(
size
 < 
BITS_PER_LONG
)

24 
found_fú°
;

25 i‡(
tmp
)

26 
found_middÀ
;

27 
size
 -
BITS_PER_LONG
;

28 
ªsu…
 +
BITS_PER_LONG
;

30 
size
 & ~(
BITS_PER_LONG
-1)) {

31 i‡((
tmp
 = *(
p
++)))

32 
found_middÀ
;

33 
ªsu…
 +
BITS_PER_LONG
;

34 
size
 -
BITS_PER_LONG
;

36 i‡(!
size
)

37  
ªsu…
;

38 
tmp
 = *
p
;

40 
found_fú°
:

41 
tmp
 &(~0UL >> (
BITS_PER_LONG
 - 
size
));

42 i‡(
tmp
 == 0UL)

43  
ªsu…
 + 
size
;

44 
found_middÀ
:

45  
ªsu…
 + 
	`__ffs
(
tmp
);

46 
	}
}

48 
	$föd_√xt_zîo_bô
(c⁄° *
addr
, 
size
,

49 
off£t
)

51 if(
DEBUG_MODE_L
==1)

53 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

55 c⁄° *
p
 = 
addr
 + 
	`BITOP_WORD
(
off£t
);

56 
ªsu…
 = 
off£t
 & ~(
BITS_PER_LONG
-1);

57 
tmp
;

59 i‡(
off£t
 >
size
)

60  
size
;

61 
size
 -
ªsu…
;

62 
off£t
 %
BITS_PER_LONG
;

63 i‡(
off£t
) {

64 
tmp
 = *(
p
++);

65 
tmp
 |~0UL >> (
BITS_PER_LONG
 - 
off£t
);

66 i‡(
size
 < 
BITS_PER_LONG
)

67 
found_fú°
;

68 i‡(~
tmp
)

69 
found_middÀ
;

70 
size
 -
BITS_PER_LONG
;

71 
ªsu…
 +
BITS_PER_LONG
;

73 
size
 & ~(
BITS_PER_LONG
-1)) {

74 i‡(~(
tmp
 = *(
p
++)))

75 
found_middÀ
;

76 
ªsu…
 +
BITS_PER_LONG
;

77 
size
 -
BITS_PER_LONG
;

79 i‡(!
size
)

80  
ªsu…
;

81 
tmp
 = *
p
;

83 
found_fú°
:

84 
tmp
 |~0UL << 
size
;

85 i‡(
tmp
 == ~0UL)

86  
ªsu…
 + 
size
;

87 
found_middÀ
:

88  
ªsu…
 + 
	`ffz
(
tmp
);

89 
	}
}

91 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


92 
ölöe
 
	$ext2_swabp
(c⁄° * 
x
)

94 if(
DEBUG_MODE_L
==1)

96 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

98 #i‡
BITS_PER_LONG
 == 64

99  (Ë
	`bsw≠_64
(*(
u64
 *Ë
x
);

100 #ñi‡
BITS_PER_LONG
 == 32

101  (Ë
	`bsw≠_32
(*(
u32
 *Ë
x
);

103 #îr‹ 
BITS_PER_LONG
 
nŸ
 
deföed


105 
	}
}

107 
ölöe
 
	$ext2_swab
(c⁄° 
y
)

109 if(
DEBUG_MODE_L
==1)

111 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

113 #i‡
BITS_PER_LONG
 == 64

114  (Ë
	`bsw≠_64
((
u64
Ë
y
);

115 #ñi‡
BITS_PER_LONG
 == 32

116  (Ë
	`bsw≠_32
((
u32
Ë
y
);

118 #îr‹ 
BITS_PER_LONG
 
nŸ
 
deföed


120 
	}
}

122 
	$föd_√xt_zîo_bô_À
(c⁄° *
addr
, 

123 
size
, 
off£t
)

125 if(
DEBUG_MODE_L
==1)

127 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

129 c⁄° *
p
 = 
addr
;

130 
ªsu…
 = 
off£t
 & ~(
BITS_PER_LONG
 - 1);

131 
tmp
;

133 i‡(
off£t
 >
size
)

134  
size
;

135 
p
 +
	`BITOP_WORD
(
off£t
);

136 
size
 -
ªsu…
;

137 
off£t
 &(
BITS_PER_LONG
 - 1UL);

138 i‡(
off£t
) {

139 
tmp
 = 
	`ext2_swabp
(
p
++);

140 
tmp
 |(~0UL >> (
BITS_PER_LONG
 - 
off£t
));

141 i‡(
size
 < 
BITS_PER_LONG
)

142 
found_fú°
;

143 i‡(~
tmp
)

144 
found_middÀ
;

145 
size
 -
BITS_PER_LONG
;

146 
ªsu…
 +
BITS_PER_LONG
;

149 
size
 & ~(
BITS_PER_LONG
 - 1)) {

150 i‡(~(
tmp
 = *(
p
++)))

151 
found_middÀ_sw≠
;

152 
ªsu…
 +
BITS_PER_LONG
;

153 
size
 -
BITS_PER_LONG
;

155 i‡(!
size
)

156  
ªsu…
;

157 
tmp
 = 
	`ext2_swabp
(
p
);

158 
found_fú°
:

159 
tmp
 |~0UL << 
size
;

160 i‡(
tmp
 == ~0UL)

161  
ªsu…
 + 
size
;

162 
found_middÀ
:

163  
ªsu…
 + 
	`ffz
(
tmp
);

165 
found_middÀ_sw≠
:

166  
ªsu…
 + 
	`ffz
(
	`ext2_swab
(
tmp
));

167 
	}
}

169 
	$föd_√xt_bô_À
(c⁄° *
addr
, 

170 
size
, 
off£t
)

172 if(
DEBUG_MODE_L
==1)

174 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

176 c⁄° *
p
 = 
addr
;

177 
ªsu…
 = 
off£t
 & ~(
BITS_PER_LONG
 - 1);

178 
tmp
;

180 i‡(
off£t
 >
size
)

181  
size
;

182 
p
 +
	`BITOP_WORD
(
off£t
);

183 
size
 -
ªsu…
;

184 
off£t
 &(
BITS_PER_LONG
 - 1UL);

185 i‡(
off£t
) {

186 
tmp
 = 
	`ext2_swabp
(
p
++);

187 
tmp
 &(~0UL << 
off£t
);

188 i‡(
size
 < 
BITS_PER_LONG
)

189 
found_fú°
;

190 i‡(
tmp
)

191 
found_middÀ
;

192 
size
 -
BITS_PER_LONG
;

193 
ªsu…
 +
BITS_PER_LONG
;

196 
size
 & ~(
BITS_PER_LONG
 - 1)) {

197 
tmp
 = *(
p
++);

198 i‡(
tmp
)

199 
found_middÀ_sw≠
;

200 
ªsu…
 +
BITS_PER_LONG
;

201 
size
 -
BITS_PER_LONG
;

203 i‡(!
size
)

204  
ªsu…
;

205 
tmp
 = 
	`ext2_swabp
(
p
);

206 
found_fú°
:

207 
tmp
 &(~0UL >> (
BITS_PER_LONG
 - 
size
));

208 i‡(
tmp
 == 0UL)

209  
ªsu…
 + 
size
;

210 
found_middÀ
:

211  
ªsu…
 + 
	`__ffs
(
tmp
);

213 
found_middÀ_sw≠
:

214  
ªsu…
 + 
	`__ffs
(
	`ext2_swab
(
tmp
));

215 
	}
}

	@libklib/fs.c

1 
	~<tux3u£r.h
>

5 
	$öc_∆ök
(
öode
 *inode)

7 if(
DEBUG_MODE_L
==1)

9 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

11 
öode
->
i_∆ök
++;

12 
	}
}

14 
	$dr›_∆ök
(
öode
 *inode)

16 if(
DEBUG_MODE_L
==1)

18 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

20 
	`as£π
(
öode
->
i_∆ök
 > 0);

21 
öode
->
i_∆ök
--;

22 
	}
}

24 
	$˛ór_∆ök
(
öode
 *inode)

26 if(
DEBUG_MODE_L
==1)

28 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

30 
öode
->
i_∆ök
 = 0;

31 
	}
}

33 
	$£t_∆ök
(
öode
 *öode, 
∆ök
)

35 if(
DEBUG_MODE_L
==1)

37 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

39 i‡(!
∆ök
)

40 
	`˛ór_∆ök
(
öode
);

42 
öode
->
i_∆ök
 = 
∆ök
;

43 
	}
}

45 
	$d_ö°™tüã
(
díåy
 *díåy, 
öode
 *inode)

47 if(
DEBUG_MODE_L
==1)

49 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

51 
díåy
->
d_öode
 = 
öode
;

52 
	}
}

54 
díåy
 *
	$d_•li˚_Æüs
(
öode
 *öode, 
díåy
 *dentry)

56 i‡(
	`IS_ERR
(
öode
))

57  
	`ERR_CAST
(
öode
);

58 
	`d_ö°™tüã
(
díåy
, 
öode
);

59  
NULL
;

60 
	}
}

62 
	$åunˇã_∑geˇche
(
öode
 *öode, 
loff_t
 
ﬁdsize
,Üoff_à
√wsize
)

64 if(
DEBUG_MODE_L
==1)

66 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

68 
	`åunˇã_öode_∑ges
(
	`m≠pög
(
öode
), 
√wsize
);

69 
	}
}

71 
	$åunˇã_£tsize
(
öode
 *öode, 
loff_t
 
√wsize
)

73 if(
DEBUG_MODE_L
==1)

75 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

77 
loff_t
 
ﬁdsize
 = 
öode
->
i_size
;

79 
öode
->
i_size
 = 
√wsize
;

80 i‡(
√wsize
 < 
ﬁdsize
)

81 
	`åunˇã_∑geˇche
(
öode
, 
ﬁdsize
, 
√wsize
);

82 
	}
}

	@libklib/fs.h

1 #i‚de‡
LIBKLIB_FS_H


2 
	#LIBKLIB_FS_H


	)

6 
	~<libklib/lockdebug.h
>

7 
	~<libklib/uidgid.h
>

9 
	s«meid©a
 {

13 
	söode
 {

14 
sb
 *
	mi_sb
;

16 
muãx
 
	mi_muãx
;

17 
	mi_°©e
;

18 
©omic_t
 
	mi_cou¡
;

20 
umode_t
 
	mi_mode
;

21 
kuid_t
 
	mi_uid
;

22 
kgid_t
 
	mi_gid
;

23 
	mi_∆ök
;

24 
dev_t
 
	mi_rdev
;

25 
loff_t
 
	mi_size
;

26 
time•ec
 
	mi_©ime
;

27 
time•ec
 
	mi_mtime
;

28 
time•ec
 
	mi_˘ime
;

29 
•ölock_t
 
	mi_lock
;

30 
u64
 
	mi_vîsi⁄
;

32 
m≠_t
 *
	mm≠
;

33 
hli°_node
 
	mi_hash
;

42 
ölöe
 
uid_t
 
	$i_uid_ªad
(c⁄° 
öode
 *inode)

44  
	`‰om_kuid
(&
öô_u£r_ns
, 
öode
->
i_uid
);

45 
	}
}

47 
ölöe
 
gid_t
 
	$i_gid_ªad
(c⁄° 
öode
 *inode)

49  
	`‰om_kgid
(&
öô_u£r_ns
, 
öode
->
i_gid
);

50 
	}
}

52 
ölöe
 
	$i_uid_wrôe
(
öode
 *öode, 
uid_t
 
uid
)

54 
öode
->
i_uid
 = 
	`make_kuid
(&
öô_u£r_ns
, 
uid
);

55 
	}
}

57 
ölöe
 
	$i_gid_wrôe
(
öode
 *öode, 
gid_t
 
gid
)

59 
öode
->
i_gid
 = 
	`make_kgid
(&
öô_u£r_ns
, 
gid
);

60 
	}
}

66 
	sq°r
 {

68 
	mÀn
;

69 c⁄° *
	m«me
;

72 
	sdíåy
 {

73 
q°r
 
	md_«me
;

74 
öode
 *
	md_öode
;

77 
d_ö°™tüã
(
díåy
 *díåy, 
öode
 *inode);

78 
díåy
 *
d_•li˚_Æüs
(
öode
 *inode, dentry *dentry);

84 
	#REQ_WRITE
 1

	)

85 
	#REQ_SYNC
 0

	)

86 
	#REQ_META
 0

	)

87 
	#REQ_PRIO
 0

	)

88 
	#REQ_NOIDLE
 0

	)

90 
	#REQ_RAHEAD
 0

	)

92 
	#REQ_FUA
 0

	)

93 
	#REQ_FLUSH
 0

	)

95 
	#RW_MASK
 
REQ_WRITE


	)

96 
	#RWA_MASK
 
REQ_RAHEAD


	)

98 
	#READ
 0

	)

99 
	#WRITE
 
RW_MASK


	)

100 
	#READA
 
RWA_MASK


	)

102 
	#READ_SYNC
 (
READ
 | 
REQ_SYNC
)

	)

103 
	#WRITE_SYNC
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
)

	)

104 
	#WRITE_ODIRECT
 (
WRITE
 | 
REQ_SYNC
)

	)

105 
	#WRITE_FLUSH
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
)

	)

106 
	#WRITE_FUA
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
 | 
REQ_FUA
)

	)

107 
	#WRITE_FLUSH_FUA
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
 | 
REQ_FUA
)

	)

115 
	#DT_UNKNOWN
 0

	)

116 
	#DT_FIFO
 1

	)

117 
	#DT_CHR
 2

	)

118 
	#DT_DIR
 4

	)

119 
	#DT_BLK
 6

	)

120 
	#DT_REG
 8

	)

121 
	#DT_LNK
 10

	)

122 
	#DT_SOCK
 12

	)

123 
	#DT_WHT
 14

	)

125 (*
	tfûldú_t
)(*, c⁄° *, , 
	tloff_t
, 
	tu64
, );

127 
	`öc_∆ök
(
öode
 *inode);

128 
	`dr›_∆ök
(
öode
 *inode);

129 
	`˛ór_∆ök
(
öode
 *inode);

130 
	`£t_∆ök
(
öode
 *öode, 
∆ök
);

132 
	`m¨k_öode_dúty
(
öode
 *inode);

133 
ölöe
 
	$öode_öc_lök_cou¡
(
öode
 *inode)

135 
	`öc_∆ök
(
öode
);

136 
	`m¨k_öode_dúty
(
öode
);

137 
	}
}

139 
ölöe
 
	$öode_dec_lök_cou¡
(
öode
 *inode)

141 
	`dr›_∆ök
(
öode
);

142 
	`m¨k_öode_dúty
(
öode
);

143 
	}
}

	@libklib/hash.h

1 #i‚de‡
LIBKLIB_HASH_H


2 
	#LIBKLIB_HASH_H


	)

5 
	#GOLDEN_RATIO_PRIME_32
 0x9e370001UL

	)

7 
	#GOLDEN_RATIO_PRIME_64
 0x9e37fffffffc0001UL

	)

9 #i‡
BITS_PER_LONG
 == 32

10 
	#GOLDEN_RATIO_PRIME
 
GOLDEN_RATIO_PRIME_32


	)

11 
	#hash_l⁄g
(
vÆ
, 
bôs
Ë
	`hash_32
(vÆ, bôs)

	)

12 #ñi‡
BITS_PER_LONG
 == 64

13 
	#hash_l⁄g
(
vÆ
, 
bôs
Ë
	`hash_64
(vÆ, bôs)

	)

14 
	#GOLDEN_RATIO_PRIME
 
GOLDEN_RATIO_PRIME_64


	)

16 #îr‹ 
W‹dsize
 
nŸ
 32 
‹
 64

19 
ölöe
 
u64
 
	$hash_64
(
u64
 
vÆ
, 
bôs
)

21 
u64
 
hash
 = 
vÆ
;

24 
u64
 
n
 = 
hash
;

25 
n
 <<= 18;

26 
hash
 -
n
;

27 
n
 <<= 33;

28 
hash
 -
n
;

29 
n
 <<= 3;

30 
hash
 +
n
;

31 
n
 <<= 3;

32 
hash
 -
n
;

33 
n
 <<= 4;

34 
hash
 +
n
;

35 
n
 <<= 2;

36 
hash
 +
n
;

39  
hash
 >> (64 - 
bôs
);

40 
	}
}

42 
ölöe
 
u32
 
	$hash_32
(
u32
 
vÆ
, 
bôs
)

45 
u32
 
hash
 = 
vÆ
 * 
GOLDEN_RATIO_PRIME_32
;

48  
hash
 >> (32 - 
bôs
);

49 
	}
}

51 
ölöe
 
	$hash_±r
(c⁄° *
±r
, 
bôs
)

53  
	`hash_l⁄g
(()
±r
, 
bôs
);

54 
	}
}

	@libklib/init.h

1 #i‚de‡
LIBKLIB_INIT_H


2 
	#LIBKLIB_INIT_H


	)

4 
	#__öô


	)

5 
	#__öôd©a


	)

6 
	#__öôc⁄°


	)

7 
	#__exôd©a


	)

8 
	#__exô


	)

	@libklib/kdev_t.h

1 #i‚de‡
LIBKLIB_KDEV_T_H


2 
	#LIBKLIB_KDEV_T_H


	)

4 
	#MINORBITS
 20

	)

5 
	#MINORMASK
 ((1U << 
MINORBITS
Ë- 1)

	)

7 
	#MAJOR
(
dev
Ë((Ë((devË>> 
MINORBITS
))

	)

8 
	#MINOR
(
dev
Ë((Ë((devË& 
MINORMASK
))

	)

9 
	#MKDEV
(
ma
,
mi
Ë(((maË<< 
MINORBITS
Ë| (mi))

	)

11 
ölöe
 
u32
 
	$√w_ícode_dev
(
dev_t
 
dev
)

13 
maj‹
 = 
	`MAJOR
(
dev
);

14 
mö‹
 = 
	`MINOR
(
dev
);

15  (
mö‹
 & 0xffË| (
maj‹
 << 8) | ((minor & ~0xff) << 12);

16 
	}
}

18 
ölöe
 
dev_t
 
	$√w_decode_dev
(
u32
 
dev
)

20 
maj‹
 = (
dev
 & 0xfff00) >> 8;

21 
mö‹
 = (
dev
 & 0xff) | ((dev >> 12) & 0xfff00);

22  
	`MKDEV
(
maj‹
, 
mö‹
);

23 
	}
}

25 
ölöe
 
	$huge_vÆid_dev
(
dev_t
 
dev
)

28 
	}
}

30 
ölöe
 
u64
 
	$huge_ícode_dev
(
dev_t
 
dev
)

32  
	`√w_ícode_dev
(
dev
);

33 
	}
}

35 
ölöe
 
dev_t
 
	$huge_decode_dev
(
u64
 
dev
)

37  
	`√w_decode_dev
(
dev
);

38 
	}
}

	@libklib/libklib.h

1 #i‚de‡
LIBKLIB_H


2 
	#LIBKLIB_H


	)

4 
	~<°ddef.h
>

5 
	~<°dboﬁ.h
>

6 
	~<°dlib.h
>

7 
	~<limôs.h
>

8 
	~<ídün.h
>

9 
	~<sys/ty≥s.h
>

11 
	~"√wDeföes.h
"

12 
	~<libklib/ty≥check.h
>

13 
	~<libklib/öô.h
>

14 
	~<libklib/li°.h
>

15 
	~<libklib/îr.h
>

16 
	~<libklib/compûî.h
>

17 
	~<libklib/ty≥s.h
>

18 
	~<libklib/bô›s.h
>

19 
	~<libklib/byã‹dî.h
>

20 
	~<libklib/hash.h
>

21 
	~<libklib/kdev_t.h
>

22 
	~<libklib/li°_s‹t.h
>

23 
	~<libklib/b¨rõr.h
>

24 
	~<libklib/log2.h
>

25 
	~<libklib/rcupd©e.h
>

26 
	~<libklib/waô.h
>

27 
	~<°dio.h
>

28 #ifde‡
__CHECKER__


29 
	#BUILD_BUG_ON
(
c⁄dôi⁄
)

	)

30 
	#BUILD_BUG_ON_ZERO
(
e
Ë(0)

	)

31 
	#BUILD_BUG_ON_NULL
(
e
Ë((*)0)

	)

37 
	#BUILD_BUG_ON_ZERO
(
e
Ë((°ru˘ { :-!!”); }))

	)

38 
	#BUILD_BUG_ON_NULL
(
e
Ë((*)(°ru˘ { :-!!”); }))

	)

40 #i‚de‡
__OPTIMIZE__


41 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()([1 - 2*!!(c⁄dôi⁄)]))

	)

43 
__buûd_bug_⁄_Áûed
;

44 
	#BUILD_BUG_ON
(
c⁄dôi⁄
) \

46 (()([1 - 2*!!(
c⁄dôi⁄
)])); \

47 i‡(
c⁄dôi⁄
Ë
__buûd_bug_⁄_Áûed
 = 1; \

48 } 0)

	)

52 
	#ALIGN
(
x
, 
a
Ë
	`__ALIGN_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

53 
	#__ALIGN_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

55 
	#ARRAY_SIZE
(
¨r
Ë(◊ºË/ (◊º)[0]Ë+ 
	`__mu°_be_¨øy
◊º))

	)

63 
	#__round_mask
(
x
, 
y
Ë((
	`__ty≥of__
(x))((y)-1))

	)

64 
	#round_up
(
x
, 
y
Ë((((x)-1Ë| 
	`__round_mask
(x, y))+1)

	)

65 
	#round_down
(
x
, 
y
Ë((xË& ~
	`__round_mask
(x, y))

	)

67 
	#FIELD_SIZEOF
(
t
, 
f
Ë(((—*)0)->f))

	)

68 
	#DIV_ROUND_UP
(
n
,
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

75 
	#mö
(
x
, 
y
) ({ \

76 
	`ty≥of
(
x
Ë
_mö1
 = (x); \

77 
	`ty≥of
(
y
Ë
_mö2
 = (y); \

78 (Ë(&
_mö1
 =&
_mö2
); \

79 
_mö1
 < 
_mö2
 ? _mö1 : _mö2; })

	)

81 
	#max
(
x
, 
y
) ({ \

82 
	`ty≥of
(
x
Ë
_max1
 = (x); \

83 
	`ty≥of
(
y
Ë
_max2
 = (y); \

84 (Ë(&
_max1
 =&
_max2
); \

85 
_max1
 > 
_max2
 ? _max1 : _max2; })

	)

93 
	#mö_t
(
ty≥
, 
x
, 
y
) ({ \

94 
ty≥
 
__mö1
 = (
x
); \

95 
ty≥
 
__mö2
 = (
y
); \

96 
__mö1
 < 
__mö2
 ? __mö1: __mö2; })

	)

98 
	#max_t
(
ty≥
, 
x
, 
y
) ({ \

99 
ty≥
 
__max1
 = (
x
); \

100 
ty≥
 
__max2
 = (
y
); \

101 
__max1
 > 
__max2
 ? __max1: __max2; })

	)

103 
	#S_IRWXUGO
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

104 
	#S_IALLUGO
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXUGO
)

	)

105 
	#S_IRUGO
 (
S_IRUSR
|
S_IRGRP
|
S_IROTH
)

	)

106 
	#S_IWUGO
 (
S_IWUSR
|
S_IWGRP
|
S_IWOTH
)

	)

107 
	#S_IXUGO
 (
S_IXUSR
|
S_IXGRP
|
S_IXOTH
)

	)

	@libklib/list.h

2 #i‚de‡
LIBKLIB_LIST_H


3 
	#LIBKLIB_LIST_H


	)

5 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

6 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

7 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

9 
	#LIST_POISON1
 ((*Ë0x00100100)

	)

10 
	#LIST_POISON2
 ((*Ë0x00200200)

	)

12 
	sli°_hód
 { 
li°_hód
 *
	m√xt
, *
	m¥ev
; };

24 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

26 
	#LIST_HEAD
(
«me
) \

27 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

29 
ölöe
 
	$INIT_LIST_HEAD
(
li°_hód
 *
li°
)

31 
li°
->
√xt
 =Üist;

32 
li°
->
¥ev
 =Üist;

33 
	}
}

41 
ölöe
 
	$__li°_add
(
li°_hód
 *
√w
,

42 
li°_hód
 *
¥ev
,

43 
li°_hód
 *
√xt
)

45 
√xt
->
¥ev
 = 
√w
;

46 
√w
->
√xt
 =Çext;

47 
√w
->
¥ev
 =Örev;

48 
¥ev
->
√xt
 = 
√w
;

49 
	}
}

59 
ölöe
 
	$li°_add
(
li°_hód
 *
√w
, li°_hód *
hód
)

61 
	`__li°_add
(
√w
, 
hód
, hód->
√xt
);

62 
	}
}

73 
ölöe
 
	$li°_add_èû
(
li°_hód
 *
√w
, li°_hód *
hód
)

75 
	`__li°_add
(
√w
, 
hód
->
¥ev
, head);

76 
	}
}

85 
ölöe
 
	$__li°_dñ
(
li°_hód
 * 
¥ev
, li°_hód * 
√xt
)

87 
√xt
->
¥ev
 =Örev;

88 
¥ev
->
√xt
 =Çext;

89 
	}
}

97 
ölöe
 
	$__li°_dñ_íåy
(
li°_hód
 *
íåy
)

99 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

100 
	}
}

102 
ölöe
 
	$li°_dñ
(
li°_hód
 *
íåy
)

104 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

105 
íåy
->
√xt
 = 
LIST_POISON1
;

106 
íåy
->
¥ev
 = 
LIST_POISON2
;

107 
	}
}

116 
ölöe
 
	$li°_ª∂a˚
(
li°_hód
 *
ﬁd
,

117 
li°_hód
 *
√w
)

119 
√w
->
√xt
 = 
ﬁd
->next;

120 
√w
->
√xt
->
¥ev
 =Çew;

121 
√w
->
¥ev
 = 
ﬁd
->prev;

122 
√w
->
¥ev
->
√xt
 =Çew;

123 
	}
}

125 
ölöe
 
	$li°_ª∂a˚_öô
(
li°_hód
 *
ﬁd
,

126 
li°_hód
 *
√w
)

128 
	`li°_ª∂a˚
(
ﬁd
, 
√w
);

129 
	`INIT_LIST_HEAD
(
ﬁd
);

130 
	}
}

136 
ölöe
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

138 
	`__li°_dñ_íåy
(
íåy
);

139 
	`INIT_LIST_HEAD
(
íåy
);

140 
	}
}

147 
ölöe
 
	$li°_move
(
li°_hód
 *
li°
, li°_hód *
hód
)

149 
	`__li°_dñ_íåy
(
li°
);

150 
	`li°_add
(
li°
, 
hód
);

151 
	}
}

158 
ölöe
 
	$li°_move_èû
(
li°_hód
 *
li°
,

159 
li°_hód
 *
hód
)

161 
	`__li°_dñ_íåy
(
li°
);

162 
	`li°_add_èû
(
li°
, 
hód
);

163 
	}
}

170 
ölöe
 
	$li°_is_œ°
(c⁄° 
li°_hód
 *
li°
,

171 c⁄° 
li°_hód
 *
hód
)

173  
li°
->
√xt
 =
hód
;

174 
	}
}

180 
ölöe
 
	$li°_em±y
(c⁄° 
li°_hód
 *
hód
)

182  
hód
->
√xt
 == head;

183 
	}
}

198 
ölöe
 
	$li°_em±y_ˇªful
(c⁄° 
li°_hód
 *
hód
)

200 
li°_hód
 *
√xt
 = 
hód
->next;

201  (
√xt
 =
hód
Ë&& (√xà=hód->
¥ev
);

202 
	}
}

208 
ölöe
 
	$li°_rŸ©e_À·
(
li°_hód
 *
hód
)

210 
li°_hód
 *
fú°
;

212 i‡(!
	`li°_em±y
(
hód
)) {

213 
fú°
 = 
hód
->
√xt
;

214 
	`li°_move_èû
(
fú°
, 
hód
);

216 
	}
}

222 
ölöe
 
	$li°_is_söguœr
(c⁄° 
li°_hód
 *
hód
)

224  !
	`li°_em±y
(
hód
Ë&& (hód->
√xt
 =hód->
¥ev
);

225 
	}
}

227 
ölöe
 
	$__li°_cut_posôi⁄
(
li°_hód
 *
li°
,

228 
li°_hód
 *
hód
, li°_hód *
íåy
)

230 
li°_hód
 *
√w_fú°
 = 
íåy
->
√xt
;

231 
li°
->
√xt
 = 
hód
->next;

232 
li°
->
√xt
->
¥ev
 =Üist;

233 
li°
->
¥ev
 = 
íåy
;

234 
íåy
->
√xt
 = 
li°
;

235 
hód
->
√xt
 = 
√w_fú°
;

236 
√w_fú°
->
¥ev
 = 
hód
;

237 
	}
}

253 
ölöe
 
	$li°_cut_posôi⁄
(
li°_hód
 *
li°
,

254 
li°_hód
 *
hód
, li°_hód *
íåy
)

256 i‡(
	`li°_em±y
(
hód
))

258 i‡(
	`li°_is_söguœr
(
hód
) &&

259 (
hód
->
√xt
 !
íåy
 && head !=Éntry))

261 i‡(
íåy
 =
hód
)

262 
	`INIT_LIST_HEAD
(
li°
);

264 
	`__li°_cut_posôi⁄
(
li°
, 
hód
, 
íåy
);

265 
	}
}

267 
ölöe
 
	$__li°_•li˚
(c⁄° 
li°_hód
 *
li°
,

268 
li°_hód
 *
¥ev
,

269 
li°_hód
 *
√xt
)

271 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

272 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

274 
fú°
->
¥ev
 =Örev;

275 
¥ev
->
√xt
 = 
fú°
;

277 
œ°
->
√xt
 =Çext;

278 
√xt
->
¥ev
 = 
œ°
;

279 
	}
}

286 
ölöe
 
	$li°_•li˚
(c⁄° 
li°_hód
 *
li°
,

287 
li°_hód
 *
hód
)

289 i‡(!
	`li°_em±y
(
li°
))

290 
	`__li°_•li˚
(
li°
, 
hód
, hód->
√xt
);

291 
	}
}

298 
ölöe
 
	$li°_•li˚_èû
(
li°_hód
 *
li°
,

299 
li°_hód
 *
hód
)

301 i‡(!
	`li°_em±y
(
li°
))

302 
	`__li°_•li˚
(
li°
, 
hód
->
¥ev
, head);

303 
	}
}

312 
ölöe
 
	$li°_•li˚_öô
(
li°_hód
 *
li°
,

313 
li°_hód
 *
hód
)

315 i‡(!
	`li°_em±y
(
li°
)) {

316 
	`__li°_•li˚
(
li°
, 
hód
, hód->
√xt
);

317 
	`INIT_LIST_HEAD
(
li°
);

319 
	}
}

329 
ölöe
 
	$li°_•li˚_èû_öô
(
li°_hód
 *
li°
,

330 
li°_hód
 *
hód
)

332 i‡(!
	`li°_em±y
(
li°
)) {

333 
	`__li°_•li˚
(
li°
, 
hód
->
¥ev
, head);

334 
	`INIT_LIST_HEAD
(
li°
);

336 
	}
}

344 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

345 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

355 
	#li°_fú°_íåy
(
±r
, 
ty≥
, 
membî
) \

356 
	`li°_íåy
((
±r
)->
√xt
, 
ty≥
, 
membî
)

	)

363 
	#li°_f‹_óch
(
pos
, 
hód
) \

364 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

374 
	#__li°_f‹_óch
(
pos
, 
hód
) \

375 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

382 
	#li°_f‹_óch_¥ev
(
pos
, 
hód
) \

383 
pos
 = (
hód
)->
¥ev
;Öo†!(hód);Öo†pos->¥ev)

	)

391 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

392 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

393 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

401 
	#li°_f‹_óch_¥ev_ß„
(
pos
, 
n
, 
hód
) \

402 
pos
 = (
hód
)->
¥ev
, 
n
 =Öos->prev; \

403 
pos
 !(
hód
); \

404 
pos
 = 
n
,Ç =Öos->
¥ev
)

	)

412 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

413 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
); \

414 &
pos
->
membî
 !(
hód
); \

415 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

423 
	#li°_f‹_óch_íåy_ªvî£
(
pos
, 
hód
, 
membî
) \

424 
pos
 = 
	`li°_íåy
((
hód
)->
¥ev
, 
	`ty≥of
(*pos), 
membî
); \

425 &
pos
->
membî
 !(
hód
); \

426 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
	`ty≥of
(*pos), membî))

	)

436 
	#li°_¥ï¨e_íåy
(
pos
, 
hód
, 
membî
) \

437 ((
pos
Ë? : 
	`li°_íåy
(
hód
, 
	`ty≥of
(*pos), 
membî
))

	)

448 
	#li°_f‹_óch_íåy_c⁄töue
(
pos
, 
hód
, 
membî
) \

449 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

450 &
pos
->
membî
 !(
hód
); \

451 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

462 
	#li°_f‹_óch_íåy_c⁄töue_ªvî£
(
pos
, 
hód
, 
membî
) \

463 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
	`ty≥of
(*pos), member); \

464 &
pos
->
membî
 !(
hód
); \

465 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
	`ty≥of
(*pos), membî))

	)

475 
	#li°_f‹_óch_íåy_‰om
(
pos
, 
hód
, 
membî
) \

476 ; &
pos
->
membî
 !(
hód
); \

477 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

486 
	#li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

487 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
), \

488 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

489 &
pos
->
membî
 !(
hód
); \

490 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

502 
	#li°_f‹_óch_íåy_ß„_c⁄töue
(
pos
, 
n
, 
hód
, 
membî
) \

503 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), member), \

504 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

505 &
pos
->
membî
 !(
hód
); \

506 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

518 
	#li°_f‹_óch_íåy_ß„_‰om
(
pos
, 
n
, 
hód
, 
membî
) \

519 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

520 &
pos
->
membî
 !(
hód
); \

521 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

533 
	#li°_f‹_óch_íåy_ß„_ªvî£
(
pos
, 
n
, 
hód
, 
membî
) \

534 
pos
 = 
	`li°_íåy
((
hód
)->
¥ev
, 
	`ty≥of
(*pos), 
membî
), \

535 
n
 = 
	`li°_íåy
(
pos
->
membî
.
¥ev
, 
	`ty≥of
(*pos), member); \

536 &
pos
->
membî
 !(
hód
); \

537 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
¥ev
, 
	`ty≥of
(*n), membî))

	)

551 
	#li°_ß„_ª£t_√xt
(
pos
, 
n
, 
membî
) \

552 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), membî)

	)

561 
	shli°_hód
 {

562 
hli°_node
 *
	mfú°
;

565 
	shli°_node
 {

566 
hli°_node
 *
	m√xt
, **
	mµªv
;

569 
	#HLIST_HEAD_INIT
 { .
fú°
 = 
NULL
 }

	)

570 
	#HLIST_HEAD
(
«me
Ë
hli°_hód
Çamê{ .
fú°
 = 
NULL
 }

	)

571 
	#INIT_HLIST_HEAD
(
±r
Ë(’å)->
fú°
 = 
NULL
)

	)

572 
ölöe
 
	$INIT_HLIST_NODE
(
hli°_node
 *
h
)

574 
h
->
√xt
 = 
NULL
;

575 
h
->
µªv
 = 
NULL
;

576 
	}
}

578 
ölöe
 
	$hli°_unhashed
(c⁄° 
hli°_node
 *
h
)

580  !
h
->
µªv
;

581 
	}
}

583 
ölöe
 
	$hli°_em±y
(c⁄° 
hli°_hód
 *
h
)

585  !
h
->
fú°
;

586 
	}
}

588 
ölöe
 
	$__hli°_dñ
(
hli°_node
 *
n
)

590 
hli°_node
 *
√xt
 = 
n
->next;

591 
hli°_node
 **
µªv
 = 
n
->pprev;

592 *
µªv
 = 
√xt
;

593 i‡(
√xt
)

594 
√xt
->
µªv
 =Öprev;

595 
	}
}

597 
ölöe
 
	$hli°_dñ
(
hli°_node
 *
n
)

599 
	`__hli°_dñ
(
n
);

600 
n
->
√xt
 = 
LIST_POISON1
;

601 
n
->
µªv
 = 
LIST_POISON2
;

602 
	}
}

604 
ölöe
 
	$hli°_dñ_öô
(
hli°_node
 *
n
)

606 i‡(!
	`hli°_unhashed
(
n
)) {

607 
	`__hli°_dñ
(
n
);

608 
	`INIT_HLIST_NODE
(
n
);

610 
	}
}

612 
ölöe
 
	$hli°_add_hód
(
hli°_node
 *
n
, 
hli°_hód
 *
h
)

614 
hli°_node
 *
fú°
 = 
h
->first;

615 
n
->
√xt
 = 
fú°
;

616 i‡(
fú°
)

617 
fú°
->
µªv
 = &
n
->
√xt
;

618 
h
->
fú°
 = 
n
;

619 
n
->
µªv
 = &
h
->
fú°
;

620 
	}
}

623 
ölöe
 
	$hli°_add_bef‹e
(
hli°_node
 *
n
,

624 
hli°_node
 *
√xt
)

626 
n
->
µªv
 = 
√xt
->pprev;

627 
n
->
√xt
 =Çext;

628 
√xt
->
µªv
 = &
n
->next;

629 *(
n
->
µªv
) =Ç;

630 
	}
}

632 
ölöe
 
	$hli°_add_a·î
(
hli°_node
 *
n
,

633 
hli°_node
 *
√xt
)

635 
√xt
->√xà
n
->next;

636 
n
->
√xt
 =Çext;

637 
√xt
->
µªv
 = &
n
->next;

639 if(
√xt
->next)

640 
√xt
->√xt->
µªv
 = &next->next;

641 
	}
}

644 
ölöe
 
	$hli°_add_Áke
(
hli°_node
 *
n
)

646 
n
->
µªv
 = &n->
√xt
;

647 
	}
}

653 
ölöe
 
	$hli°_move_li°
(
hli°_hód
 *
ﬁd
,

654 
hli°_hód
 *
√w
)

656 
√w
->
fú°
 = 
ﬁd
->first;

657 i‡(
√w
->
fú°
)

658 
√w
->
fú°
->
µªv
 = &new->first;

659 
ﬁd
->
fú°
 = 
NULL
;

660 
	}
}

662 
	#hli°_íåy
(
±r
, 
ty≥
, 
membî
Ë
	`c⁄èöî_of
’å,ty≥,membî)

	)

664 
	#hli°_f‹_óch
(
pos
, 
hód
) \

665 
pos
 = (
hód
)->
fú°
;Öo†;Öo†pos->
√xt
)

	)

667 
	#hli°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

668 
pos
 = (
hód
)->
fú°
;Öo†&& ({ 
n
 =Öos->
√xt
; 1; }); \

669 
pos
 = 
n
)

	)

671 
	#hli°_íåy_ß„
(
±r
, 
ty≥
, 
membî
) \

672 ({ 
	`ty≥of
(
±r
Ë
____±r
 = (ptr); \

673 
____±r
 ? 
	`hli°_íåy
(____±r, 
ty≥
, 
membî
Ë: 
NULL
; \

674 })

	)

682 
	#hli°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

683 
pos
 = 
	`hli°_íåy_ß„
((
hód
)->
fú°
, 
	`ty≥of
(*’os)), 
membî
);\

684 
pos
; \

685 
pos
 = 
	`hli°_íåy_ß„
(’os)->
membî
.
√xt
, 
	`ty≥of
(*’os)), membî))

	)

692 
	#hli°_f‹_óch_íåy_c⁄töue
(
pos
, 
membî
) \

693 
pos
 = 
	`hli°_íåy_ß„
(’os)->
membî
.
√xt
, 
	`ty≥of
(*(pos)), member);\

694 
pos
; \

695 
pos
 = 
	`hli°_íåy_ß„
(’os)->
membî
.
√xt
, 
	`ty≥of
(*’os)), membî))

	)

702 
	#hli°_f‹_óch_íåy_‰om
(
pos
, 
membî
) \

703 ; 
pos
; \

704 
pos
 = 
	`hli°_íåy_ß„
(’os)->
membî
.
√xt
, 
	`ty≥of
(*’os)), membî))

	)

713 
	#hli°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

714 
pos
 = 
	`hli°_íåy_ß„
((
hód
)->
fú°
, 
	`ty≥of
(*pos), 
membî
);\

715 
pos
 && ({ 
n
 =Öos->
membî
.
√xt
; 1; }); \

716 
pos
 = 
	`hli°_íåy_ß„
(
n
, 
	`ty≥of
(*pos), 
membî
))

	)

	@libklib/list_sort.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~<libklib/libklib.h
>

6 
	#MAX_LIST_LENGTH_BITS
 20

	)

13 
li°_hód
 *
mîge
(*
¥iv
,

14 (*
cmp
)(*
¥iv
, 
li°_hód
 *
a
,

15 
li°_hód
 *
b
),

16 
li°_hód
 *
a
, li°_hód *
b
)

18 if(
DEBUG_MODE_L
==1)

20 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

22 
li°_hód
 
hód
, *
èû
 = &head;

24 
a
 && 
b
) {

26 i‡((*
cmp
)(
¥iv
, 
a
, 
b
) <= 0) {

27 
èû
->
√xt
 = 
a
;

28 
a
 =á->
√xt
;

30 
èû
->
√xt
 = 
b
;

31 
b
 = b->
√xt
;

33 
èû
 =Åaû->
√xt
;

35 
èû
->
√xt
 = 
a
?:
b
;

36  
hód
.
√xt
;

37 
	}
}

46 
mîge_™d_ª°‹e_back_löks
(*
¥iv
,

47 (*
cmp
)(*
¥iv
, 
li°_hód
 *
a
,

48 
li°_hód
 *
b
),

49 
li°_hód
 *
hód
,

50 
li°_hód
 *
a
, li°_hód *
b
)

52 if(
DEBUG_MODE_L
==1)

54 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

56 
li°_hód
 *
èû
 = 
hód
;

58 
a
 && 
b
) {

60 i‡((*
cmp
)(
¥iv
, 
a
, 
b
) <= 0) {

61 
èû
->
√xt
 = 
a
;

62 
a
->
¥ev
 = 
èû
;

63 
a
 =á->
√xt
;

65 
èû
->
√xt
 = 
b
;

66 
b
->
¥ev
 = 
èû
;

67 
b
 = b->
√xt
;

69 
èû
 =Åaû->
√xt
;

71 
èû
->
√xt
 = 
a
 ? : 
b
;

80 (*
cmp
)(
¥iv
, 
èû
->
√xt
,Åail->next);

82 
èû
->
√xt
->
¥ev
 =Åail;

83 
èû
 =Åaû->
√xt
;

84 } 
èû
->
√xt
);

86 
èû
->
√xt
 = 
hód
;

87 
hód
->
¥ev
 = 
èû
;

88 
	}
}

104 
li°_s‹t
(*
¥iv
, 
li°_hód
 *
hód
,

105 (*
cmp
)(*
¥iv
, 
li°_hód
 *
a
,

106 
li°_hód
 *
b
))

108 if(
DEBUG_MODE_L
==1)

110 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

112 
li°_hód
 *
∑π
[
MAX_LIST_LENGTH_BITS
+1];

114 
Àv
;

115 
max_Àv
 = 0;

116 
li°_hód
 *
li°
;

118 i‡(
	`li°_em±y
(
hód
))

121 
	`mem£t
(
∑π
, 0, (part));

123 
hód
->
¥ev
->
√xt
 = 
NULL
;

124 
li°
 = 
hód
->
√xt
;

126 
li°
) {

127 
li°_hód
 *
cur
 = 
li°
;

128 
li°
 =Üi°->
√xt
;

129 
cur
->
√xt
 = 
NULL
;

131 
Àv
 = 0; 
∑π
[lev];Üev++) {

132 
cur
 = 
	`mîge
(
¥iv
, 
cmp
, 
∑π
[
Àv
], cur);

133 
∑π
[
Àv
] = 
NULL
;

135 i‡(
Àv
 > 
max_Àv
) {

136 i‡(
	`u∆ikñy
(
Àv
 >
	`ARRAY_SIZE
(
∑π
)-1)) {

137 
	`¥ötf
("listÖassedÅo"

140 
Àv
--;

142 
max_Àv
 = 
Àv
;

144 
∑π
[
Àv
] = 
cur
;

147 
Àv
 = 0;Üev < 
max_Àv
;Üev++)

148 i‡(
∑π
[
Àv
])

149 
li°
 = 
	`mîge
(
¥iv
, 
cmp
, 
∑π
[
Àv
],Üist);

151 
	`mîge_™d_ª°‹e_back_löks
(
¥iv
, 
cmp
, 
hód
, 
∑π
[
max_Àv
], 
li°
);

152 
	}
}

	@libklib/list_sort.h

1 #i‚de‡
LIBKLIB_LIST_SORT_H


2 
	#LIBKLIB_LIST_SORT_H


	)

4 
	~<libklib/ty≥s.h
>

6 
	gli°_hód
;

8 
li°_s‹t
(*
¥iv
, 
li°_hód
 *
hód
,

9 (*
cmp
)(*
¥iv
, 
li°_hód
 *
a
,

10 
li°_hód
 *
b
));

	@libklib/lockdebug.h

1 #i‚de‡
LIBKLIB_LOCKDEBUG_H


2 
	#LIBKLIB_LOCKDEBUG_H


	)

4 
	~<libklib/©omic.h
>

6 
	#SPINLOCK_MAGIC
 0xdód4ód

	)

8 #ifde‡
LOCK_DEBUG


9 
	mmagic
;

10 
	mlock
;

12 } 
	t•ölock_t
;

14 #ifde‡
LOCK_DEBUG


15 
	#__SPIN_LOCK_UNLOCKED
 \

16 (
•ölock_t
){ .
magic
 = 
SPINLOCK_MAGIC
, .
lock
 = 0, }

	)

18 
	#__SPIN_LOCK_UNLOCKED
 \

19 (
•ölock_t
){ }

	)

21 
	#DEFINE_SPINLOCK
(
x
Ë
•ölock_t
 x = 
__SPIN_LOCK_UNLOCKED


	)

22 
	#•ö_lock_öô
(
lock
Ëdÿ{ *÷ockË
__SPIN_LOCK_UNLOCKED
; } 0)

	)

24 
ölöe
 
	$•ö_lock
(
•ölock_t
 *
lock
)

26 #ifde‡
LOCK_DEBUG


27 
	`as£π
(
lock
->
magic
 =
SPINLOCK_MAGIC
);

28 
	`as£π
(
lock
->lock == 0);

29 
lock
->lock++;

31 
	}
}

32 
ölöe
 
	$•ö_u∆ock
(
•ölock_t
 *
lock
)

34 #ifde‡
LOCK_DEBUG


35 
	`as£π
(
lock
->
magic
 =
SPINLOCK_MAGIC
);

36 
	`as£π
(
lock
->lock == 1);

37 
lock
->lock--;

39 
	}
}

49 
ölöe
 
	$©omic_dec_™d_lock
(
©omic_t
 *
v
, 
•ölock_t
 *
lock
)

51 
	`•ö_lock
(
lock
);

52 i‡(
	`©omic_dec_™d_ã°
(
v
))

54 
	`•ö_u∆ock
(
lock
);

56 
	}
}

58 
	srw_£m≠h‹e
 {

59 #ifde‡
LOCK_DEBUG


60 
	mmagic
;

61 
	mcou¡
;

65 #ifde‡
LOCK_DEBUG


66 
	#__RWSEM_INITIALIZER
 \

67 (
rw_£m≠h‹e
){ .
magic
 = 
SPINLOCK_MAGIC
, .
cou¡
 = 0, }

	)

69 
	#__RWSEM_INITIALIZER
 \

70 (
rw_£m≠h‹e
){ }

	)

72 
	#DECLARE_RWSEM
(
«me
Ë
rw_£m≠h‹e
Çamê
__RWSEM_INITIALIZER


	)

73 
	#öô_rw£m
(
£m
Ëdÿ{ *(£mË
__RWSEM_INITIALIZER
; } 0)

	)

75 
ölöe
 
	$down_ªad
(
rw_£m≠h‹e
 *
lock
)

77 #ifde‡
LOCK_DEBUG


78 
	`as£π
(
lock
->
magic
 =
SPINLOCK_MAGIC
);

79 
	`as£π
(
lock
->
cou¡
 >= 0);

80 
lock
->
cou¡
++;

82 
	}
}

83 
	#down_ªad_√°ed
(
lock
, 
sub
Ë
	`down_ªad
÷ock)

	)

84 
ölöe
 
	$down_wrôe
(
rw_£m≠h‹e
 *
lock
)

86 #ifde‡
LOCK_DEBUG


87 
	`as£π
(
lock
->
magic
 =
SPINLOCK_MAGIC
);

88 
	`as£π
(
lock
->
cou¡
 == 0);

89 
lock
->
cou¡
--;

91 
	}
}

92 
	#down_wrôe_√°ed
(
lock
, 
sub
Ë
	`down_wrôe
÷ock)

	)

93 
ölöe
 
	$up_ªad
(
rw_£m≠h‹e
 *
lock
)

95 #ifde‡
LOCK_DEBUG


96 
	`as£π
(
lock
->
magic
 =
SPINLOCK_MAGIC
);

97 
	`as£π
(
lock
->
cou¡
 >= 1);

98 
lock
->
cou¡
--;

100 
	}
}

101 
ölöe
 
	$up_wrôe
(
rw_£m≠h‹e
 *
lock
)

103 #ifde‡
LOCK_DEBUG


104 
	`as£π
(
lock
->
magic
 =
SPINLOCK_MAGIC
);

105 
	`as£π
(
lock
->
cou¡
 == -1);

106 
lock
->
cou¡
++;

108 
	}
}

110 
	smuãx
 {

111 #ifde‡
LOCK_DEBUG


112 
rw_£m≠h‹e
 
	m£m
;

116 #ifde‡
LOCK_DEBUG


117 
	#__MUTEX_INITIALIZER
 \

118 (
muãx
){ .
£m
 = 
__RWSEM_INITIALIZER
, }

	)

120 
	#__MUTEX_INITIALIZER
 \

121 (
muãx
){ }

	)

123 
	#DEFINE_MUTEX
(
muãx«me
Ë
muãx
 muãx«mê
__MUTEX_INITIALIZER


	)

124 
	#muãx_öô
(
muãx
Ëdÿ{ *(muãxË
__MUTEX_INITIALIZER
; } 0)

	)

126 
ölöe
 
	$muãx_lock
(
muãx
 *
lock
)

128 #ifde‡
LOCK_DEBUG


129 
	`down_wrôe
(&
lock
->
£m
);

131 
	}
}

132 
	#muãx_lock_√°ed
(
lock
, 
sub
Ë
	`muãx_lock
÷ock)

	)

133 
ölöe
 
	$muãx_u∆ock
(
muãx
 *
lock
)

135 #ifde‡
LOCK_DEBUG


136 
	`up_wrôe
(&
lock
->
£m
);

138 
	}
}

	@libklib/log2.h

1 #i‚de‡
LIBKLIB_LOG2_H


2 
	#LIBKLIB_LOG2_H


	)

4 
	~<°dboﬁ.h
>

5 
	~<libklib/ty≥s.h
>

6 
	~<libklib/bô›s.h
>

11 
____ûog2_NaN
();

19 #i‚de‡
CONFIG_ARCH_HAS_ILOG2_U32


20 
ölöe
 
__©åibuã_c⁄°__


21 
	$__ûog2_u32
(
u32
 
n
)

23  
	`Ês
(
n
) - 1;

24 
	}
}

27 #i‚de‡
CONFIG_ARCH_HAS_ILOG2_U64


28 
ölöe
 
__©åibuã_c⁄°__


29 
	$__ûog2_u64
(
u64
 
n
)

31  
	`Ês64
(
n
) - 1;

32 
	}
}

40 
ölöe
 
__©åibuã_c⁄°__


41 
boﬁ
 
	$is_powî_of_2
(
n
)

43  (
n
 != 0 && ((n & (n - 1)) == 0));

44 
	}
}

49 
ölöe
 
__©åibuã_c⁄°__


50 
	$__roundup_pow_of_two
(
n
)

52  1UL << 
	`Ês_l⁄g
(
n
 - 1);

53 
	}
}

58 
ölöe
 
__©åibuã_c⁄°__


59 
	$__rounddown_pow_of_two
(
n
)

61  1UL << (
	`Ês_l⁄g
(
n
) - 1);

62 
	}
}

74 
	#ûog2
(
n
) \

76 
	`__buûtö_c⁄°™t_p
(
n
) ? ( \

77 (
n
Ë< 1 ? 
	`____ûog2_NaN
() : \

78 (
n
) & (1ULL << 63) ? 63 : \

79 (
n
) & (1ULL << 62) ? 62 : \

80 (
n
) & (1ULL << 61) ? 61 : \

81 (
n
) & (1ULL << 60) ? 60 : \

82 (
n
) & (1ULL << 59) ? 59 : \

83 (
n
) & (1ULL << 58) ? 58 : \

84 (
n
) & (1ULL << 57) ? 57 : \

85 (
n
) & (1ULL << 56) ? 56 : \

86 (
n
) & (1ULL << 55) ? 55 : \

87 (
n
) & (1ULL << 54) ? 54 : \

88 (
n
) & (1ULL << 53) ? 53 : \

89 (
n
) & (1ULL << 52) ? 52 : \

90 (
n
) & (1ULL << 51) ? 51 : \

91 (
n
) & (1ULL << 50) ? 50 : \

92 (
n
) & (1ULL << 49) ? 49 : \

93 (
n
) & (1ULL << 48) ? 48 : \

94 (
n
) & (1ULL << 47) ? 47 : \

95 (
n
) & (1ULL << 46) ? 46 : \

96 (
n
) & (1ULL << 45) ? 45 : \

97 (
n
) & (1ULL << 44) ? 44 : \

98 (
n
) & (1ULL << 43) ? 43 : \

99 (
n
) & (1ULL << 42) ? 42 : \

100 (
n
) & (1ULL << 41) ? 41 : \

101 (
n
) & (1ULL << 40) ? 40 : \

102 (
n
) & (1ULL << 39) ? 39 : \

103 (
n
) & (1ULL << 38) ? 38 : \

104 (
n
) & (1ULL << 37) ? 37 : \

105 (
n
) & (1ULL << 36) ? 36 : \

106 (
n
) & (1ULL << 35) ? 35 : \

107 (
n
) & (1ULL << 34) ? 34 : \

108 (
n
) & (1ULL << 33) ? 33 : \

109 (
n
) & (1ULL << 32) ? 32 : \

110 (
n
) & (1ULL << 31) ? 31 : \

111 (
n
) & (1ULL << 30) ? 30 : \

112 (
n
) & (1ULL << 29) ? 29 : \

113 (
n
) & (1ULL << 28) ? 28 : \

114 (
n
) & (1ULL << 27) ? 27 : \

115 (
n
) & (1ULL << 26) ? 26 : \

116 (
n
) & (1ULL << 25) ? 25 : \

117 (
n
) & (1ULL << 24) ? 24 : \

118 (
n
) & (1ULL << 23) ? 23 : \

119 (
n
) & (1ULL << 22) ? 22 : \

120 (
n
) & (1ULL << 21) ? 21 : \

121 (
n
) & (1ULL << 20) ? 20 : \

122 (
n
) & (1ULL << 19) ? 19 : \

123 (
n
) & (1ULL << 18) ? 18 : \

124 (
n
) & (1ULL << 17) ? 17 : \

125 (
n
) & (1ULL << 16) ? 16 : \

126 (
n
) & (1ULL << 15) ? 15 : \

127 (
n
) & (1ULL << 14) ? 14 : \

128 (
n
) & (1ULL << 13) ? 13 : \

129 (
n
) & (1ULL << 12) ? 12 : \

130 (
n
) & (1ULL << 11) ? 11 : \

131 (
n
) & (1ULL << 10) ? 10 : \

132 (
n
) & (1ULL << 9) ? 9 : \

133 (
n
) & (1ULL << 8) ? 8 : \

134 (
n
) & (1ULL << 7) ? 7 : \

135 (
n
) & (1ULL << 6) ? 6 : \

136 (
n
) & (1ULL << 5) ? 5 : \

137 (
n
) & (1ULL << 4) ? 4 : \

138 (
n
) & (1ULL << 3) ? 3 : \

139 (
n
) & (1ULL << 2) ? 2 : \

140 (
n
) & (1ULL << 1) ? 1 : \

141 (
n
) & (1ULL << 0) ? 0 : \

142 
	`____ûog2_NaN
() \

144 ((
n
) <= 4) ? \

145 
	`__ûog2_u32
(
n
) : \

146 
	`__ûog2_u64
(
n
) \

147 )

	)

157 
	#roundup_pow_of_two
(
n
) \

159 
	`__buûtö_c⁄°™t_p
(
n
) ? ( \

160 (
n
 == 1) ? 1 : \

161 (1UL << (
	`ûog2
((
n
) - 1) + 1)) \

163 
	`__roundup_pow_of_two
(
n
) \

164 )

	)

174 
	#rounddown_pow_of_two
(
n
) \

176 
	`__buûtö_c⁄°™t_p
(
n
) ? ( \

177 (1UL << 
	`ûog2
(
n
))) : \

178 
	`__rounddown_pow_of_two
(
n
) \

179 )

	)

195 
	#‹dî_ba£_2
(
n
Ë
	`ûog2
(
	`roundup_pow_of_two
“))

	)

	@libklib/mm.h

1 #i‚de‡
LIBKLIB_MM_H


2 
	#LIBKLIB_MM_H


	)

10 
	#GFP_KERNEL
 ((
__f‹˚
 
gÂ_t
)0x10u)

	)

11 
	#GFP_NOFS
 ((
__f‹˚
 
gÂ_t
)0x20u)

	)

12 
	#__GFP_ZERO
 ((
__f‹˚
 
gÂ_t
)0x8000u)

	)

14 
	s∑ge
 {

15 *
	maddªss
;

16 
	m¥iv©e
;

19 
	#PAGE_SIZE
 (1 << 6)

	)

20 
	#PAGE_CACHE_SIZE
 
PAGE_SIZE


	)

22 
ölöe
 *
	$∑ge_addªss
(
∑ge
 *page)

24  
∑ge
->
addªss
;

25 
	}
}

27 
ölöe
 
∑ge
 *
	$Æloc_∑ges
(
gÂ_t
 
gÂ_mask
, 
‹dî
)

29 
∑ge
 *∑gê
	`mÆloc
((*page));

30 *
d©a
 = 
	`mÆloc
(
PAGE_SIZE
);

31 i‡(!
∑ge
 || !
d©a
)

32 
îr‹
;

33 *
∑ge
 = (∑ge){ .
addªss
 = 
d©a
 };

34  
∑ge
;

36 
îr‹
:

37 i‡(
∑ge
)

38 
	`‰ì
(
∑ge
);

39 i‡(
d©a
)

40 
	`‰ì
(
d©a
);

41  
NULL
;

42 
	}
}

43 
	#Æloc_∑ge
(
gÂ_mask
Ë
	`Æloc_∑ges
(gÂ_mask, 0)

	)

45 
ölöe
 
	$__‰ì_∑ges
(
∑ge
 *∑ge, 
‹dî
)

47 
	`‰ì
(
	`∑ge_addªss
(
∑ge
));

48 
	`‰ì
(
∑ge
);

49 
	}
}

50 
	#__‰ì_∑ge
(
∑ge
Ë
	`__‰ì_∑ges
(’age), 0)

	)

56 
ölöe
 
	$åunˇã_öode_∑ges_ønge
(
m≠_t
 *
m≠
, 
loff_t
 
l°¨t
,Üoff_à
Ànd
)

58 
	`åunˇã_buf„rs_ønge
(
m≠
, 
l°¨t
, 
Ànd
);

59 
	}
}

61 
ölöe
 
	$åunˇã_öode_∑ges
(
m≠_t
 *
m≠
, 
loff_t
 
l°¨t
)

63 
	`åunˇã_buf„rs_ønge
(
m≠
, 
l°¨t
, 
LLONG_MAX
);

64 
	}
}

66 
åunˇã_∑geˇche
(
öode
 *öode, 
loff_t
 
ﬁdsize
,Üoff_à
√wsize
);

67 
åunˇã_£tsize
(
öode
 *öode, 
loff_t
 
√wsize
);

	@libklib/rcupdate.h

1 #i‚de‡
LIBKLIB_RCUPDATE_H


2 
	#LIBKLIB_RCUPDATE_H


	)

4 
	#rcu_lockdï_as£π
(
c
, 
s
Ëdÿ{ } 0)

	)

15 #ifde‡
__CHECKER__


16 
	#rcu_dîe„ªn˚_•¨£
(
p
, 
•a˚
) \

17 (()(((
	`ty≥of
(*
p
Ë
•a˚
 *ÌË=p))

	)

19 
	#rcu_dîe„ªn˚_•¨£
(
p
, 
•a˚
)

	)

22 
	#__rcu_ac˚ss_poöãr
(
p
, 
•a˚
) \

24 
	`ty≥of
(*
p
Ë*
_________p1
 = (ty≥of(*p)*
__f‹˚
 )
	`ACCESS_ONCE
(p); \

25 
	`rcu_dîe„ªn˚_•¨£
(
p
, 
•a˚
); \

26 ((
	`ty≥of
(*
p
Ë
__f‹˚
 
__kî√l
 *)(
_________p1
)); \

27 })

	)

28 
	#__rcu_dîe„ªn˚_check
(
p
, 
c
, 
•a˚
) \

30 
	`ty≥of
(*
p
Ë*
_________p1
 = (ty≥of(*p)*
__f‹˚
 )
	`ACCESS_ONCE
(p); \

31 
	`rcu_lockdï_as£π
(
c
, "suspiciousÑcu_dereference_check()" \

33 
	`rcu_dîe„ªn˚_•¨£
(
p
, 
•a˚
); \

34 
	`smp_ªad_b¨rõr_dïíds
(); \

35 ((
	`ty≥of
(*
p
Ë
__f‹˚
 
__kî√l
 *)(
_________p1
)); \

36 })

	)

37 
	#__rcu_dîe„ªn˚_¥Ÿe˘ed
(
p
, 
c
, 
•a˚
) \

39 
	`rcu_lockdï_as£π
(
c
, "suspiciousÑcu_dereference_protected()" \

41 
	`rcu_dîe„ªn˚_•¨£
(
p
, 
•a˚
); \

42 ((
	`ty≥of
(*
p
Ë
__f‹˚
 
__kî√l
 *)(p)); \

43 })

	)

45 
	#__rcu_ac˚ss_ödex
(
p
, 
•a˚
) \

47 
	`ty≥of
(
p
Ë
_________p1
 = 
	`ACCESS_ONCE
(p); \

48 
	`rcu_dîe„ªn˚_•¨£
(
p
, 
•a˚
); \

49 (
_________p1
); \

50 })

	)

51 
	#__rcu_dîe„ªn˚_ödex_check
(
p
, 
c
) \

53 
	`ty≥of
(
p
Ë
_________p1
 = 
	`ACCESS_ONCE
(p); \

54 
	`rcu_lockdï_as£π
(
c
, \

57 
	`smp_ªad_b¨rõr_dïíds
(); \

58 (
_________p1
); \

59 })

	)

60 
	#__rcu_assign_poöãr
(
p
, 
v
, 
•a˚
) \

62 
	`smp_wmb
(); \

63 (
p
Ë(
	`ty≥of
(*
v
Ë
__f‹˚
 
•a˚
 *)(v); \

64 } 0)

	)

86 
	#rcu_ac˚ss_poöãr
(
p
Ë
	`__rcu_ac˚ss_poöãr
(’), 
__rcu
)

	)

121 
	#rcu_dîe„ªn˚_check
(
p
, 
c
) \

122 
	`__rcu_dîe„ªn˚_check
((
p
), 
	`rcu_ªad_lock_hñd
(Ë|| (
c
), 
__rcu
)

	)

131 
	#rcu_dîe„ªn˚_bh_check
(
p
, 
c
) \

132 
	`__rcu_dîe„ªn˚_check
((
p
), 
	`rcu_ªad_lock_bh_hñd
(Ë|| (
c
), 
__rcu
)

	)

141 
	#rcu_dîe„ªn˚_sched_check
(
p
, 
c
) \

142 
	`__rcu_dîe„ªn˚_check
((
p
), 
	`rcu_ªad_lock_sched_hñd
(Ë|| (
c
), \

143 
__rcu
)

	)

145 
	#rcu_dîe„ªn˚_øw
(
p
Ë
	`rcu_dîe„ªn˚_check
’, 1Ë

	)

159 
	#rcu_ac˚ss_ödex
(
p
Ë
	`__rcu_ac˚ss_ödex
(’), 
__rcu
)

	)

179 
	#rcu_dîe„ªn˚_ödex_check
(
p
, 
c
) \

180 
	`__rcu_dîe„ªn˚_ödex_check
((
p
), (
c
))

	)

199 
	#rcu_dîe„ªn˚_¥Ÿe˘ed
(
p
, 
c
) \

200 
	`__rcu_dîe„ªn˚_¥Ÿe˘ed
((
p
), (
c
), 
__rcu
)

	)

209 
	#rcu_dîe„ªn˚
(
p
Ë
	`rcu_dîe„ªn˚_check
’, 0)

	)

217 
	#rcu_dîe„ªn˚_bh
(
p
Ë
	`rcu_dîe„ªn˚_bh_check
’, 0)

	)

225 
	#rcu_dîe„ªn˚_sched
(
p
Ë
	`rcu_dîe„ªn˚_sched_check
’, 0)

	)

250 
	#rcu_assign_poöãr
(
p
, 
v
) \

251 
	`__rcu_assign_poöãr
((
p
), (
v
), 
__rcu
)

	)

	@libklib/slab.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	~<tux3u£r.h
>

5 
	~<libklib/libklib.h
>

6 
	~<libklib/¶ab.h
>

8 
kmem_ˇche
 *
kmem_ˇche_¸óã
(c⁄° *
«me
, 
size_t
 
size
,

9 
size_t
 
Æign
, 
Êags
,

10 (*
˘‹
)(*))

12 if(
DEBUG_MODE_L
==1)

14 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

16 
kmem_ˇche
 *
ˇchï
;

18 
ˇchï
 = 
	`mÆloc
((*cachep));

19 i‡(
ˇchï
) {

20 
ˇchï
->
«me
 =Çame;

21 
ˇchï
->
obje˘_size
 = 
size
;

22 
ˇchï
->
Æign
 =álign;

23 
ˇchï
->
Êags
 = flags;

24 
ˇchï
->
˘‹
 = ctor;

26  
ˇchï
;

27 
	}
}

29 
	$kmem_ˇche_de°roy
(
kmem_ˇche
 *
ˇchï
)

31 if(
DEBUG_MODE_L
==1)

33 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

35 
	`‰ì
(
ˇchï
);

36 
	}
}

38 
	$kmem_ˇche_‰ì
(
kmem_ˇche
 *
ˇchï
, *
objp
)

40 if(
DEBUG_MODE_L
==1)

42 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

44 
	`‰ì
(
objp
);

45 
	}
}

47 *
	$kmem_ˇche_Æloc
(
kmem_ˇche
 *
ˇchï
, 
gÂ_t
 
Êags
)

49 if(
DEBUG_MODE_L
==1)

51 
	`¥ötf
("\t\t\t\t%25s[L] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

53 *
objp
;

55 i‡(
ˇchï
->
Æign
) {

56 
îr
;

57 
îr
 = 
	`posix_memÆign
(&
objp
, 
ˇchï
->
Æign
, cachï->
obje˘_size
);

58 i‡(
îr
)

59 
objp
 = 
NULL
;

61 
objp
 = 
	`mÆloc
(
ˇchï
->
obje˘_size
);

63 i‡(
objp
) {

64 i‡(
ˇchï
->
˘‹
)

65 
ˇchï
->
	`˘‹
(
objp
);

66 i‡(
Êags
 & 
__GFP_ZERO
)

67 
	`mem£t
(
objp
, 0, 
ˇchï
->
obje˘_size
);

70  
objp
;

71 
	}
}

	@libklib/slab.h

1 #i‚de‡
LIBKLIB_SLAB_H


2 
	#LIBKLIB_SLAB_H


	)

4 
	~<libklib/mm.h
>

10 
	#SLAB_DEBUG_FREE
 0x00000100UL

	)

11 
	#SLAB_RED_ZONE
 0x00000400UL

	)

12 
	#SLAB_POISON
 0x00000800UL

	)

13 
	#SLAB_HWCACHE_ALIGN
 0x00002000UL

	)

14 
	#SLAB_CACHE_DMA
 0x00004000UL

	)

15 
	#SLAB_STORE_USER
 0x00010000UL

	)

16 
	#SLAB_PANIC
 0x00040000UL

	)

45 
	#SLAB_DESTROY_BY_RCU
 0x00080000UL

	)

46 
	#SLAB_MEM_SPREAD
 0x00100000UL

	)

47 
	#SLAB_TRACE
 0x00200000UL

	)

50 #ifde‡
CONFIG_DEBUG_OBJECTS


51 
	#SLAB_DEBUG_OBJECTS
 0x00400000UL

	)

53 
	#SLAB_DEBUG_OBJECTS
 0x00000000UL

	)

56 
	#SLAB_NOLEAKTRACE
 0x00800000UL

	)

59 #ifde‡
CONFIG_KMEMCHECK


60 
	#SLAB_NOTRACK
 0x01000000UL

	)

62 
	#SLAB_NOTRACK
 0x00000000UL

	)

64 #ifde‡
CONFIG_FAILSLAB


65 
	#SLAB_FAILSLAB
 0x02000000UL

	)

67 
	#SLAB_FAILSLAB
 0x00000000UL

	)

71 
	#SLAB_RECLAIM_ACCOUNT
 0x00020000UL

	)

72 
	#SLAB_TEMPORARY
 
SLAB_RECLAIM_ACCOUNT


	)

74 
	skmem_ˇche
 {

75 
	mobje˘_size
;

76 
	mÆign
;

77 
	mÊags
;

78 c⁄° *
	m«me
;

79 (*
	m˘‹
)(*);

82 
kmem_ˇche
 *
kmem_ˇche_¸óã
(c⁄° *, 
size_t
, size_t,

85 
	`kmem_ˇche_de°roy
(
kmem_ˇche
 *);

86 
	`kmem_ˇche_‰ì
(
kmem_ˇche
 *, *);

88 *
	`kmem_ˇche_Æloc
(
kmem_ˇche
 *, 
gÂ_t
);

93 
ölöe
 *
	$kmem_ˇche_zÆloc
(
kmem_ˇche
 *
k
, 
gÂ_t
 
Êags
)

95  
	`kmem_ˇche_Æloc
(
k
, 
Êags
 | 
__GFP_ZERO
);

96 
	}
}

	@libklib/swab.h

1 #i‚de‡
LIBKLIB_SWAB_H


2 
	#LIBKLIB_SWAB_H


	)

4 
	~<byãsw≠.h
>

6 
	~<libklib/ty≥s.h
>

7 
	~<libklib/compûî.h
>

13 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

14 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

15 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

17 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

18 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

19 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

20 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

21 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

23 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

24 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

25 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

26 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

27 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

28 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

29 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

30 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

31 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

33 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

34 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

35 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

37 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

38 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

39 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

47 
ölöe
 
__©åibuã_c⁄°__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

49  
	`bsw≠_16
(
vÆ
);

50 
	}
}

52 
ölöe
 
__©åibuã_c⁄°__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

54  
	`bsw≠_32
(
vÆ
);

55 
	}
}

57 
ölöe
 
__©åibuã_c⁄°__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

59  
	`bsw≠_64
(
vÆ
);

60 
	}
}

62 
ölöe
 
__©åibuã_c⁄°__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

64 #ifde‡
__¨ch_swahw32


65  
	`__¨ch_swahw32
(
vÆ
);

67  
	`___c⁄°™t_swahw32
(
vÆ
);

69 
	}
}

71 
ölöe
 
__©åibuã_c⁄°__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

73 #ifde‡
__¨ch_swahb32


74  
	`__¨ch_swahb32
(
vÆ
);

76  
	`___c⁄°™t_swahb32
(
vÆ
);

78 
	}
}

84 
	#__swab16
(
x
) \

85 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

86 
	`___c⁄°™t_swab16
(
x
) : \

87 
	`__fswab16
(
x
))

	)

93 
	#__swab32
(
x
) \

94 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

95 
	`___c⁄°™t_swab32
(
x
) : \

96 
	`__fswab32
(
x
))

	)

102 
	#__swab64
(
x
) \

103 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

104 
	`___c⁄°™t_swab64
(
x
) : \

105 
	`__fswab64
(
x
))

	)

113 
	#__swahw32
(
x
) \

114 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

115 
	`___c⁄°™t_swahw32
(
x
) : \

116 
	`__fswahw32
(
x
))

	)

124 
	#__swahb32
(
x
) \

125 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

126 
	`___c⁄°™t_swahb32
(
x
) : \

127 
	`__fswahb32
(
x
))

	)

133 
ölöe
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

135 #ifde‡
__¨ch_swab16p


136  
	`__¨ch_swab16p
(
p
);

138  
	`__swab16
(*
p
);

140 
	}
}

146 
ölöe
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

148 #ifde‡
__¨ch_swab32p


149  
	`__¨ch_swab32p
(
p
);

151  
	`__swab32
(*
p
);

153 
	}
}

159 
ölöe
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

161 #ifde‡
__¨ch_swab64p


162  
	`__¨ch_swab64p
(
p
);

164  
	`__swab64
(*
p
);

166 
	}
}

174 
ölöe
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

176 #ifde‡
__¨ch_swahw32p


177  
	`__¨ch_swahw32p
(
p
);

179  
	`__swahw32
(*
p
);

181 
	}
}

189 
ölöe
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

191 #ifde‡
__¨ch_swahb32p


192  
	`__¨ch_swahb32p
(
p
);

194  
	`__swahb32
(*
p
);

196 
	}
}

202 
ölöe
 
	$__swab16s
(
__u16
 *
p
)

204 #ifde‡
__¨ch_swab16s


205 
	`__¨ch_swab16s
(
p
);

207 *
p
 = 
	`__swab16p
(p);

209 
	}
}

214 
ölöe
 
	$__swab32s
(
__u32
 *
p
)

216 #ifde‡
__¨ch_swab32s


217 
	`__¨ch_swab32s
(
p
);

219 *
p
 = 
	`__swab32p
(p);

221 
	}
}

227 
ölöe
 
	$__swab64s
(
__u64
 *
p
)

229 #ifde‡
__¨ch_swab64s


230 
	`__¨ch_swab64s
(
p
);

232 *
p
 = 
	`__swab64p
(p);

234 
	}
}

242 
ölöe
 
	$__swahw32s
(
__u32
 *
p
)

244 #ifde‡
__¨ch_swahw32s


245 
	`__¨ch_swahw32s
(
p
);

247 *
p
 = 
	`__swahw32p
(p);

249 
	}
}

257 
ölöe
 
	$__swahb32s
(
__u32
 *
p
)

259 #ifde‡
__¨ch_swahb32s


260 
	`__¨ch_swahb32s
(
p
);

262 *
p
 = 
	`__swahb32p
(p);

264 
	}
}

266 
	#swab16
 
__swab16


	)

267 
	#swab32
 
__swab32


	)

268 
	#swab64
 
__swab64


	)

269 
	#swahw32
 
__swahw32


	)

270 
	#swahb32
 
__swahb32


	)

271 
	#swab16p
 
__swab16p


	)

272 
	#swab32p
 
__swab32p


	)

273 
	#swab64p
 
__swab64p


	)

274 
	#swahw32p
 
__swahw32p


	)

275 
	#swahb32p
 
__swahb32p


	)

276 
	#swab16s
 
__swab16s


	)

277 
	#swab32s
 
__swab32s


	)

278 
	#swab64s
 
__swab64s


	)

279 
	#swahw32s
 
__swahw32s


	)

280 
	#swahb32s
 
__swahb32s


	)

	@libklib/typecheck.h

1 #i‚de‡
LIBKLIB_TYPECHECK_H


2 
	#LIBKLIB_TYPECHECK_H


	)

8 
	#ty≥check
(
ty≥
,
x
) \

9 ({ 
ty≥
 
__dummy
; \

10 
	`ty≥of
(
x
Ë
__dummy2
; \

11 ()(&
__dummy
 =&
__dummy2
); \

13 })

	)

19 
	#ty≥check_‚
(
ty≥
,
fun˘i⁄
) \

20 ({ 
	`ty≥of
(
ty≥
Ë
__tmp
 = 
fun˘i⁄
; \

21 ()
__tmp
; \

22 })

	)

	@libklib/types.h

1 #i‚de‡
LIBKLIB_TYPES_H


2 
	#LIBKLIB_TYPES_H


	)

4 
	~<libklib/compûî.h
>

6 
	tumode_t
;

8 sig√d 
	t__s8
;

9 
	t__u8
;

10 sig√d 
	t__s16
;

11 
	t__u16
;

12 sig√d 
	t__s32
;

13 
	t__u32
;

14 sig√d 
	t__s64
;

15 
	t__u64
;

17 sig√d 
	ts8
;

18 
	tu8
;

19 sig√d 
	ts16
;

20 
	tu16
;

21 sig√d 
	ts32
;

22 
	tu32
;

23 sig√d 
	ts64
;

24 
	tu64
;

26 #ifde‡
__CHECK_ENDIAN__


27 
	#__bôwi£
 
__bôwi£__


	)

29 
	#__bôwi£


	)

32 
__u16
 
	t__bôwi£
 
	t__À16
;

33 
__u16
 
	t__bôwi£
 
	t__be16
;

34 
__u32
 
	t__bôwi£
 
	t__À32
;

35 
__u32
 
	t__bôwi£
 
	t__be32
;

36 
__u64
 
	t__bôwi£
 
	t__À64
;

37 
__u64
 
	t__bôwi£
 
	t__be64
;

39 
	t__bôwi£__
 
	tgÂ_t
;

	@libklib/uidgid.c

1 
	~<tux3u£r.h
>

4 
u£r_«me•a˚
 
	göô_u£r_ns
;

	@libklib/uidgid.h

1 #i‚de‡
LIBKLIB_UIDGID_H


2 
	#LIBKLIB_UIDGID_H


	)

4 
	~<°dboﬁ.h
>

17 
	#DEFAULT_OVERFLOWUID
 65534

	)

18 
	#DEFAULT_OVERFLOWGID
 65534

	)

20 
	su£r_«me•a˚
 {

23 
u£r_«me•a˚
 
öô_u£r_ns
;

25 
ölöe
 
u£r_«me•a˚
 *
	$cuºít_u£r_ns
()

27  &
öô_u£r_ns
;

28 
	}
}

31 
uid_t
 
	mvÆ
;

32 } 
	tkuid_t
;

35 
gid_t
 
	mvÆ
;

36 } 
	tkgid_t
;

38 
	#KUIDT_INIT
(
vÆue
Ë(
kuid_t
){ vÆuê}

	)

39 
	#KGIDT_INIT
(
vÆue
Ë(
kgid_t
){ vÆuê}

	)

41 
ölöe
 
uid_t
 
	$__kuid_vÆ
(
kuid_t
 
uid
)

43  
uid
.
vÆ
;

44 
	}
}

46 
ölöe
 
gid_t
 
	$__kgid_vÆ
(
kgid_t
 
gid
)

48  
gid
.
vÆ
;

49 
	}
}

51 
	#GLOBAL_ROOT_UID
 
	`KUIDT_INIT
(0)

	)

52 
	#GLOBAL_ROOT_GID
 
	`KGIDT_INIT
(0)

	)

54 
	#INVALID_UID
 
	`KUIDT_INIT
(-1)

	)

55 
	#INVALID_GID
 
	`KGIDT_INIT
(-1)

	)

57 
ölöe
 
boﬁ
 
	$uid_eq
(
kuid_t
 
À·
, kuid_à
right
)

59  
	`__kuid_vÆ
(
À·
Ë=__kuid_vÆ(
right
);

60 
	}
}

62 
ölöe
 
boﬁ
 
	$gid_eq
(
kgid_t
 
À·
, kgid_à
right
)

64  
	`__kgid_vÆ
(
À·
Ë=__kgid_vÆ(
right
);

65 
	}
}

67 
ölöe
 
boﬁ
 
	$uid_gt
(
kuid_t
 
À·
, kuid_à
right
)

69  
	`__kuid_vÆ
(
À·
Ë> __kuid_vÆ(
right
);

70 
	}
}

72 
ölöe
 
boﬁ
 
	$gid_gt
(
kgid_t
 
À·
, kgid_à
right
)

74  
	`__kgid_vÆ
(
À·
Ë> __kgid_vÆ(
right
);

75 
	}
}

77 
ölöe
 
boﬁ
 
	$uid_gã
(
kuid_t
 
À·
, kuid_à
right
)

79  
	`__kuid_vÆ
(
À·
Ë>__kuid_vÆ(
right
);

80 
	}
}

82 
ölöe
 
boﬁ
 
	$gid_gã
(
kgid_t
 
À·
, kgid_à
right
)

84  
	`__kgid_vÆ
(
À·
Ë>__kgid_vÆ(
right
);

85 
	}
}

87 
ölöe
 
boﬁ
 
	$uid_…
(
kuid_t
 
À·
, kuid_à
right
)

89  
	`__kuid_vÆ
(
À·
Ë< __kuid_vÆ(
right
);

90 
	}
}

92 
ölöe
 
boﬁ
 
	$gid_…
(
kgid_t
 
À·
, kgid_à
right
)

94  
	`__kgid_vÆ
(
À·
Ë< __kgid_vÆ(
right
);

95 
	}
}

97 
ölöe
 
boﬁ
 
	$uid_…e
(
kuid_t
 
À·
, kuid_à
right
)

99  
	`__kuid_vÆ
(
À·
Ë<__kuid_vÆ(
right
);

100 
	}
}

102 
ölöe
 
boﬁ
 
	$gid_…e
(
kgid_t
 
À·
, kgid_à
right
)

104  
	`__kgid_vÆ
(
À·
Ë<__kgid_vÆ(
right
);

105 
	}
}

107 
ölöe
 
boﬁ
 
	$uid_vÆid
(
kuid_t
 
uid
)

109  !
	`uid_eq
(
uid
, 
INVALID_UID
);

110 
	}
}

112 
ölöe
 
boﬁ
 
	$gid_vÆid
(
kgid_t
 
gid
)

114  !
	`gid_eq
(
gid
, 
INVALID_GID
);

115 
	}
}

117 
ölöe
 
kuid_t
 
	$make_kuid
(
u£r_«me•a˚
 *
‰om
, 
uid_t
 
uid
)

119  
	`KUIDT_INIT
(
uid
);

120 
	}
}

122 
ölöe
 
kgid_t
 
	$make_kgid
(
u£r_«me•a˚
 *
‰om
, 
gid_t
 
gid
)

124  
	`KGIDT_INIT
(
gid
);

125 
	}
}

127 
ölöe
 
uid_t
 
	$‰om_kuid
(
u£r_«me•a˚
 *
to
, 
kuid_t
 
kuid
)

129  
	`__kuid_vÆ
(
kuid
);

130 
	}
}

132 
ölöe
 
gid_t
 
	$‰om_kgid
(
u£r_«me•a˚
 *
to
, 
kgid_t
 
kgid
)

134  
	`__kgid_vÆ
(
kgid
);

135 
	}
}

137 
ölöe
 
uid_t
 
	$‰om_kuid_munged
(
u£r_«me•a˚
 *
to
, 
kuid_t
 
kuid
)

139 
uid_t
 
uid
 = 
	`‰om_kuid
(
to
, 
kuid
);

140 i‡(
uid
 =(
uid_t
)-1)

141 
uid
 = 
DEFAULT_OVERFLOWUID
;

142  
uid
;

143 
	}
}

145 
ölöe
 
gid_t
 
	$‰om_kgid_munged
(
u£r_«me•a˚
 *
to
, 
kgid_t
 
kgid
)

147 
gid_t
 
gid
 = 
	`‰om_kgid
(
to
, 
kgid
);

148 i‡(
gid
 =(
gid_t
)-1)

149 
gid
 = 
DEFAULT_OVERFLOWGID
;

150  
gid
;

151 
	}
}

153 
ölöe
 
boﬁ
 
	$kuid_has_m≠pög
(
u£r_«me•a˚
 *
ns
, 
kuid_t
 
uid
)

155  
åue
;

156 
	}
}

158 
ölöe
 
boﬁ
 
	$kgid_has_m≠pög
(
u£r_«me•a˚
 *
ns
, 
kgid_t
 
gid
)

160  
åue
;

161 
	}
}

	@libklib/wait.h

1 #i‚de‡
LIBKLIB_WAIT_H


2 
	#LIBKLIB_WAIT_H


	)

4 
	~<libklib/ty≥check.h
>

10 
	s__waô_queue
 {

12 
__waô_queue
 
	twaô_queue_t
;

14 
	s__waô_queue_hód
 {

16 
__waô_queue_hód
 
	twaô_queue_hód_t
;

18 
	#__WAITQUEUE_INITIALIZER
(
«me
, 
tsk
Ë{}

	)

20 
	#DECLARE_WAITQUEUE
(
«me
, 
tsk
) \

21 
waô_queue_t
 
«me
 = 
	`__WAITQUEUE_INITIALIZER
“ame, 
tsk
)

	)

23 
	#__WAIT_QUEUE_HEAD_INITIALIZER
(
«me
Ë{}

	)

25 
	#DECLARE_WAIT_QUEUE_HEAD
(
«me
) \

26 
waô_queue_hód_t
 
«me
 = 
	`__WAIT_QUEUE_HEAD_INITIALIZER
“ame)

	)

28 
	#öô_waôqueue_hód
(
q
) \

30 
	`ty≥check
(
waô_queue_hód_t
 *, 
q
); \

31 } 0)

	)

33 
	#DECLARE_WAIT_QUEUE_HEAD_ONSTACK
(
«me
Ë
	`DECLARE_WAIT_QUEUE_HEAD
“ame)

	)

35 
	#__wake_up
(
q
, 
mode
, 
ƒ
, 
key
) \

37 
	`ty≥check
(
waô_queue_hód_t
 *, 
q
); \

38 } 0)

	)

40 
	#wake_up
(
x
Ë
	`__wake_up
(x, 
TASK_NORMAL
, 1, 
NULL
)

	)

41 
	#wake_up_ƒ
(
x
, 
ƒ
Ë
	`__wake_up
(x, 
TASK_NORMAL
,Çr, 
NULL
)

	)

42 
	#wake_up_Æl
(
x
Ë
	`__wake_up
(x, 
TASK_NORMAL
, 0, 
NULL
)

	)

43 
	#wake_up_locked
(
x
Ë
	`__wake_up_locked
((x), 
TASK_NORMAL
, 1)

	)

44 
	#wake_up_Æl_locked
(
x
Ë
	`__wake_up_locked
((x), 
TASK_NORMAL
, 0)

	)

46 
	#wake_up_öãºu±ibÀ
(
x
Ë
	`__wake_up
(x, 
TASK_INTERRUPTIBLE
, 1, 
NULL
)

	)

47 
	#wake_up_öãºu±ibÀ_ƒ
(
x
, 
ƒ
Ë
	`__wake_up
(x, 
TASK_INTERRUPTIBLE
,Çr, 
NULL
)

	)

48 
	#wake_up_öãºu±ibÀ_Æl
(
x
Ë
	`__wake_up
(x, 
TASK_INTERRUPTIBLE
, 0, 
NULL
)

	)

49 
	#wake_up_öãºu±ibÀ_sync
(
x
Ë
	`__wake_up_sync
((x), 
TASK_INTERRUPTIBLE
, 1)

	)

51 
	#__waô_evít
(
wq
, 
c⁄dôi⁄
) \

53 
	`ty≥check
(
waô_queue_hód_t
, 
wq
); \

55 i‡(
c⁄dôi⁄
) \

58 } 0)

	)

60 
	#waô_evít
(
wq
, 
c⁄dôi⁄
) \

62 i‡(
c⁄dôi⁄
) \

64 
	`__waô_evít
(
wq
, 
c⁄dôi⁄
); \

65 } 0)

	)

67 
	#waô_evít_timeout
(
wq
, 
c⁄dôi⁄
, 
timeout
) \

69 
__ªt
 = 
timeout
; \

70 i‡(!(
c⁄dôi⁄
)) \

71 
	`__waô_evít
(
wq
, 
c⁄dôi⁄
); \

72 
__ªt
; \

73 })

	)

75 
	#waô_evít_öãºu±ibÀ
(
wq
, 
c⁄dôi⁄
) \

77 
__ªt
 = 0; \

78 i‡(!(
c⁄dôi⁄
)) \

79 
	`__waô_evít
(
wq
, 
c⁄dôi⁄
); \

80 
__ªt
; \

81 })

	)

83 
	#waô_evít_öãºu±ibÀ_timeout
(
wq
, 
c⁄dôi⁄
, 
timeout
) \

85 
__ªt
 = 
timeout
; \

86 i‡(!(
c⁄dôi⁄
)) \

87 
	`__waô_evít
(
wq
, 
c⁄dôi⁄
); \

88 
__ªt
; \

89 })

	)

91 
	#waô_evít_öãºu±ibÀ_ex˛usive
(
wq
, 
c⁄dôi⁄
) \

93 
__ªt
 = 0; \

94 i‡(!(
c⁄dôi⁄
)) \

95 
	`__waô_evít
(
wq
, 
c⁄dôi⁄
); \

96 
__ªt
; \

97 })

	)

99 
	#waô_evít_kûœbÀ
(
wq
, 
c⁄dôi⁄
) \

101 
__ªt
 = 0; \

102 i‡(!(
c⁄dôi⁄
)) \

103 
	`__waô_evít
(
wq
, 
c⁄dôi⁄
); \

104 
__ªt
; \

105 })

	)

	@namei.c

12 
	~"tux3u£r.h
"

14 
	~"kî√l/«mei.c
"

16 
	$tuxlookup
(
öode
 *
dú
, 
díåy
 *dentry)

18 if(
DEBUG_MODE_U
==1)

20 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

22 
díåy
 *
ªsu…
;

24 
ªsu…
 = 
	`tux3_lookup
(
dú
, 
díåy
, 0);

25 i‡(
ªsu…
 && 
	`IS_ERR
(result))

26  
	`PTR_ERR
(
ªsu…
);

27 
	`as£π
(
ªsu…
 =
NULL
);

29 i‡(!
díåy
->
d_öode
)

30  -
ENOENT
;

33 
	}
}

35 
öode
 *
	$tux›í
(
öode
 *
dú
, c⁄° *
«me
, 
Àn
)

37 if(
DEBUG_MODE_U
==1)

39 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

41 
díåy
 dentry = {

42 .
d_«me
.
«me
 = (*)name,

43 .
d_«me
.
Àn
 =Üen,

45 
îr
;

47 
îr
 = 
	`tuxlookup
(
dú
, &
díåy
);

48 i‡(
îr
)

49  
	`ERR_PTR
(
îr
);

51  
díåy
.
d_öode
;

52 
	}
}

54 
	$tux_check_exi°
(
öode
 *
dú
, 
q°r
 *qstr)

56 if(
DEBUG_MODE_U
==1)

58 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

60 
buf„r_hód
 *
buf„r
;

61 
tux_dúít
 *
íåy
;

63 
íåy
 = 
	`tux_föd_dúít
(
dú
, 
q°r
, &
buf„r
);

64 i‡(!
	`IS_ERR
(
íåy
)) {

65 
	`blockput
(
buf„r
);

66  -
EEXIST
;

68 i‡(
	`PTR_ERR
(
íåy
Ë!-
ENOENT
)

69  
	`PTR_ERR
(
íåy
);

72 
	}
}

74 
öode
 *
	$__tuxmknod
(
öode
 *
dú
, c⁄° *
«me
, 
Àn
,

75 
tux_üâr
 *
üâr
, 
dev_t
 
rdev
)

77 if(
DEBUG_MODE_U
==1)

79 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

81 
díåy
 dentry = {

82 .
d_«me
.
«me
 = (*)name,

83 .
d_«me
.
Àn
 =Üen,

85 
îr
;

87 
îr
 = 
	`__tux3_mknod
(
dú
, &
díåy
, 
üâr
, 
rdev
);

88 i‡(
îr
)

89  
	`ERR_PTR
(
îr
);

91  
díåy
.
d_öode
;

92 
	}
}

94 
öode
 *
	$tux¸óã
(
öode
 *
dú
, c⁄° *
«me
, 
Àn
,

95 
tux_üâr
 *
üâr
)

97 if(
DEBUG_MODE_U
==1)

99 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

101 
q°r
 qstr = {

102 .
«me
 = (*)name,

103 .
Àn
 =Üen,

105 
îr
;

111 
îr
 = 
	`tux_check_exi°
(
dú
, &
q°r
);

112 i‡(
îr
) {

113 i‡(
îr
 =-
EEXIST
) {

116  
	`ERR_PTR
(
îr
);

119  
	`__tuxmknod
(
dú
, 
«me
, 
Àn
, 
üâr
, 0);

120 
	}
}

122 
öode
 *
	$__tuxlök
(
öode
 *
§c_öode
, öodê*
dú
,

123 c⁄° *
d°«me
, 
d°Àn
)

125 if(
DEBUG_MODE_U
==1)

127 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

129 
díåy
 
§c
 = {

130 .
d_öode
 = 
§c_öode
,

132 
díåy
 
d°
 = {

133 .
d_«me
.
«me
 = (*)
d°«me
,

134 .
d_«me
.
Àn
 = 
d°Àn
,

136 
îr
;

138 
îr
 = 
	`tux3_lök
(&
§c
, 
dú
, &
d°
);

139 i‡(
îr
)

140  
	`ERR_PTR
(
îr
);

141 
	`as£π
(
d°
.
d_öode
 =
§c_öode
);

142  
d°
.
d_öode
;

143 
	}
}

145 
	$tuxlök
(
öode
 *
dú
, c⁄° *
§˙ame
, 
§˛í
,

146 c⁄° *
d°«me
, 
d°Àn
)

148 if(
DEBUG_MODE_U
==1)

150 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

152 
öode
 *
§c_öode
;

153 
îr
;

155 
§c_öode
 = 
	`tux›í
(
dú
, 
§˙ame
, 
§˛í
);

156 i‡(
	`IS_ERR
(
§c_öode
))

157  
	`PTR_ERR
(
§c_öode
);

159 i‡(
	`S_ISDIR
(
§c_öode
->
i_mode
)) {

160 
îr
 = -
EPERM
;

161 
îr‹_§c
;

164 i‡(
§c_öode
->
i_∆ök
 == 0) {

165 
îr
 = -
ENOENT
;

166 
îr‹_§c
;

173 
q°r
 
d°°r
 = {

174 .
«me
 = (*)
d°«me
,

175 .
Àn
 = 
d°Àn
,

177 
îr
 = 
	`tux_check_exi°
(
dú
, &
d°°r
);

178 i‡(
îr
)

179 
îr‹_§c
;

181 
öode
 *öodê
	`__tuxlök
(
§c_öode
, 
dú
, 
d°«me
, 
d°Àn
);

182 
îr
 = 
	`PTR_ERR
(
öode
);

183 i‡(!
îr
)

184 
	`ùut
(
öode
);

185 
îr‹_§c
:

186 
	`ùut
(
§c_öode
);

188  
îr
;

189 
	}
}

191 
	$tuxªadlök
(
öode
 *
dú
, c⁄° *
«me
, 
Àn
,

192 *
buf
, 
bufsize
)

194 if(
DEBUG_MODE_U
==1)

196 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

198 
öode
 *inode;

199 
îr
;

201 
öode
 = 
	`tux›í
(
dú
, 
«me
, 
Àn
);

202 i‡(
	`IS_ERR
(
öode
))

203  
	`PTR_ERR
(
öode
);

205 
îr
 = -
EINVAL
;

206 i‡(
	`S_ISLNK
(
öode
->
i_mode
))

207 
îr
 = 
	`∑ge_ªadlök
(
öode
, 
buf
, 
bufsize
);

208 
	`ùut
(
öode
);

210  
îr
;

211 
	}
}

213 
öode
 *
	$__tuxsymlök
(
öode
 *
dú
, c⁄° *
«me
, 
Àn
,

214 
tux_üâr
 *
üâr
, c⁄° *
sym«me
)

216 if(
DEBUG_MODE_U
==1)

218 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

220 
díåy
 dentry = {

221 .
d_«me
.
«me
 = (*)name,

222 .
d_«me
.
Àn
 =Üen,

224 
îr
;

226 
üâr
->
mode
 = 
S_IFLNK
 | 
S_IRWXUGO
;

227 
îr
 = 
	`__tux3_symlök
(
dú
, &
díåy
, 
üâr
, 
sym«me
);

228 i‡(
îr
)

229  
	`ERR_PTR
(
îr
);

230  
díåy
.
d_öode
;

231 
	}
}

233 
	$tuxsymlök
(
öode
 *
dú
, c⁄° *
«me
, 
Àn
,

234 
tux_üâr
 *
üâr
, c⁄° *
sym«me
)

236 if(
DEBUG_MODE_U
==1)

238 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

240 
q°r
 qstr = {

241 .
«me
 = (*)name,

242 .
Àn
 =Üen,

244 
öode
 *inode;

245 
îr
;

251 
îr
 = 
	`tux_check_exi°
(
dú
, &
q°r
);

252 i‡(
îr
)

253  
îr
;

255 
öode
 = 
	`__tuxsymlök
(
dú
, 
«me
, 
Àn
, 
üâr
, 
sym«me
);

256 
îr
 = 
	`PTR_ERR
(
öode
);

257 i‡(!
	`IS_ERR
(
öode
)) {

258 
	`ùut
(
öode
);

259 
îr
 = 0;

262  
îr
;

263 
	}
}

265 
	$tuxu∆ök
(
öode
 *
dú
, c⁄° *
«me
, 
Àn
)

267 if(
DEBUG_MODE_U
==1)

269 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

271 
díåy
 dentry = {

272 .
d_«me
.
«me
 = (*)name,

273 .
d_«me
.
Àn
 =Üen,

275 
îr
;

282 
îr
 = 
	`tuxlookup
(
dú
, &
díåy
);

283 i‡(
îr
)

284  
îr
;

286 
îr
 = 
	`tux3_u∆ök
(
dú
, &
díåy
);

289 
	`ùut
(
díåy
.
d_öode
);

291  
îr
;

292 
	}
}

294 
	$tuxrmdú
(
öode
 *
dú
, c⁄° *
«me
, 
Àn
)

296 if(
DEBUG_MODE_U
==1)

298 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

300 
díåy
 dentry = {

301 .
d_«me
.
«me
 = (*)name,

302 .
d_«me
.
Àn
 =Üen,

304 
îr
;

311 
îr
 = 
	`tuxlookup
(
dú
, &
díåy
);

312 i‡(
îr
)

313  
îr
;

315 
îr
 = -
ENOTDIR
;

316 i‡(
	`S_ISDIR
(
díåy
.
d_öode
->
i_mode
))

317 
îr
 = 
	`tux3_rmdú
(
dú
, &
díåy
);

320 
	`ùut
(
díåy
.
d_öode
);

322  
îr
;

323 
	}
}

325 
	$tuxª«me
(
öode
 *
ﬁd_dú
, c⁄° *
ﬁd_«me
, 
ﬁd_Àn
,

326 
öode
 *
√w_dú
, c⁄° *
√w_«me
, 
√w_Àn
)

328 if(
DEBUG_MODE_U
==1)

330 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

332 
díåy
 
ﬁd
 = {

333 .
d_«me
.
«me
 = (*)
ﬁd_«me
,

334 .
d_«me
.
Àn
 = 
ﬁd_Àn
,

336 
díåy
 
√w
 = {

337 .
d_«me
.
«me
 = (*)
√w_«me
,

338 .
d_«me
.
Àn
 = 
√w_Àn
,

340 
îr
;

347 
îr
 = 
	`tuxlookup
(
ﬁd_dú
, &
ﬁd
);

348 i‡(
îr
)

349  
îr
;

351 
îr
 = 
	`tuxlookup
(
√w_dú
, &
√w
);

352 i‡(
îr
 &&Éº !-
ENOENT
)

353 
îr‹_ﬁd
;

356 
îr
 = 0;

357 i‡(
ﬁd
.
d_öode
 =
√w
.d_inode)

358 
out
;

359 i‡(
√w
.
d_öode
) {

360 i‡(
	`S_ISDIR
(
ﬁd
.
d_öode
->
i_mode
)) {

361 i‡(!
	`S_ISDIR
(
√w
.
d_öode
->
i_mode
)) {

362 
îr
 = -
ENOTDIR
;

363 
out
;

366 i‡(
	`S_ISDIR
(
√w
.
d_öode
->
i_mode
)) {

367 
îr
 = -
EISDIR
;

368 
out
;

373 
îr
 = 
	`tux3_ª«me
(
ﬁd_dú
, &
ﬁd
, 
√w_dú
, &
√w
);

374 
out
:

375 i‡(
√w
.
d_öode
)

376 
	`ùut
(
√w
.
d_öode
);

377 
îr‹_ﬁd
:

378 
	`ùut
(
ﬁd
.
d_öode
);

380  
îr
;

381 
	}
}

	@newDefines.h

1 
	#DEBUG_MODE_U
 0

	)

2 
	#DEBUG_MODE_L
 0

	)

3 
	#DEBUG_MODE_K
 0

	)

4 
	#DEBUG_RW
 1

	)

5 
	#ALLOW_BUILTIN_LOG
 1

	)

6 
	#PAGE_SIZE_1
 4096

	)

7 
	#COMPRESSION_STRIDE_LEN
 4

	)

8 
	#ENABLE_TRANSPARENT_COMPRESSION
 1

	)

	@options.c

8 
	~"tux3u£r.h
"

9 
	~"›ti⁄s.h
"

11 
›tv
 *
	$›t°¨t
(*
w‹k
, 
size
)

13 if(
DEBUG_MODE_U
==1)

15 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

17 
›tv
 *›tv = 
w‹k
;

18 *
›tv
 = (›tv){ .
size
 = size };

19  
›tv
;

20 
	}
}

22 
	$is_numbî
(c⁄° *
°r
)

24 if(
DEBUG_MODE_U
==1)

26 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

28 c⁄° *
num
 = (c⁄° *)
°r
;

29 
c
;

31 (
c
 = *
num
++)) {

32 i‡(
c
 - '0' >= 10)

37 
	}
}

39 
	$›ç¨£
(
›ti⁄s
 *›ti⁄s, 
›tv
 *›tv, c⁄° **
¨gv
, 
¨gc
, *
pos
)

41 if(
DEBUG_MODE_U
==1)

43 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

45 
›t
 *
t›
 = (*)
›tv
 + o±v->
size
;

46 c⁄° *
¨g
, *
why
;

47 *
îrout
 = (*)
›tv
->
¨gv
;

48 
Áke
 = !
›tv
->
size
, 
ãr£
 = 0, 
l⁄gÀn
 = 0, 
ruÀ
;

49 
‰ì
 = (*)(
t›
 - 
›tv
->
›tc
Ë- (*)(›tv->
¨gv
 + o±v->
¨gc
);

50 
maxîr
 = 
Áke
 ? 0 : (*)
t›
 - 
îrout
;

51 
›ti⁄s
 *
›ti⁄
;

53 
›tv
->
îr
 = 0;

55 
¨g
 = 
¨gv
[(*
pos
)++];

56 i‡(
›ti⁄s
 && *
¨g
 == '-' && *(arg + 1)) {

57 c⁄° *
vÆ
 = 
NULL
;

58 i‡(*++
¨g
 == '-') {

59 i‡(!*++
¨g
)

61 
l⁄gÀn
 = (
vÆ
 = 
	`°rchr
(
¨g
, '=')Ë? vÆ++ -árg : 
	`°æí
(arg);

62 
ãr£
 = 0;

64 
ãr£
 = *
¨g
++;

67 
›ti⁄
 = 
›ti⁄s
; o±i⁄->
«me
; option++)

68 i‡(
ãr£
 ? !!
	`°rchr
(
›ti⁄
->ãr£,Åî£Ë: !
	`memcmp
(›ti⁄->
«me
, 
¨g
, 
l⁄gÀn
))

70 i‡(!
›ti⁄
->
«me
)

71 
«me
;

72 i‡(
ãr£
 && (
›ti⁄
->
ruÀ
 & 
OPT_ANYARG
Ë&& *
¨g
)

73 
vÆ
 = 
¨g
;

74 i‡((
›ti⁄
->
ruÀ
 & 
OPT_ANYARG
Ë=
OPT_HASARG
 && !
vÆ
) {

75 
why
 = "must haveá value";

76 i‡(*
pos
 >
¨gc
)

77 
Áû
;

78 
vÆ
 = 
¨gv
[(*
pos
)++];

80 
›tv
->
›tc
++;

81 i‡(!(
ruÀ
 = 
›ti⁄
->ruÀË&& 
vÆ
) {

82 
why
 = "mustÇot haveá value";

83 
Áû
;

85 i‡(!
Áke
) {

86 i‡((
‰ì
 -(
›t
)) < 0)

87 
fuŒ
;

88 i‡(!(
ruÀ
 & 
OPT_MANY
)) {

89 
›t
 *
£í
 = 
t›
;

90 
why
 = "given moreÅhan once";

91 --
£í
 > 
t›
 - 
›tv
->
›tc
)

92 i‡(
›ti⁄
 - 
›ti⁄s
 =
£í
->
ödex
)

93 
Áû
;

95 i‡(
ruÀ
 & 
OPT_NUMBER
) {

96 i‡(!
	`is_numbî
(
vÆ
)) {

97 
why
 = "must beÇumeric";

98 
Áû
;

101 *(
t›
 - 
›tv
->
›tc
Ë(
›t
){
›ti⁄
 - 
›ti⁄s
, 
vÆ
 ? : o±i⁄->
deÁrg
};

103 } 
ãr£
 && !(
ruÀ
 & ~
OPT_MANY
Ë&& (ãr£ = *
¨g
++));

107 i‡(!
Áke
) {

108 i‡((
‰ì
 -(
¨g
)) < 0)

109 
fuŒ
;

110 
›tv
->
¨gv
[›tv->
¨gc
] = 
¨g
;

112 
›tv
->
¨gc
++;

116 
«me
:

117 i‡(
ãr£
)

118 
	`¢¥ötf
(
îrout
, 
maxîr
, "Unknow¿›ti⁄ -%c", 
ãr£
);

120 
	`¢¥ötf
(
îrout
, 
maxîr
, "Unknow¿›ti⁄ --%.*s", 
l⁄gÀn
, 
¨g
);

121  
›tv
->
îr
 = -
EINVAL
;

123 
Áû
:

124 i‡(
ãr£
)

125 
	`¢¥ötf
(
îrout
, 
maxîr
, "O±i⁄ -%¯(%sË%s", 
ãr£
, 
›ti⁄
->
«me
, 
why
);

127 
	`¢¥ötf
(
îrout
, 
maxîr
, "O±i⁄ --%†%s", 
›ti⁄
->
«me
, 
why
);

128  
›tv
->
îr
 = -
EINVAL
;

130 
fuŒ
:

131 
	`¢¥ötf
((*)
›tv
->
¨gv
, 
maxîr
, "Out of space in optv");

132  
›tv
->
îr
 = -
E2BIG
;

133 
	}
}

135 
	$›thód
(
›ti⁄s
 *›ti⁄s, *
¨gc
, c⁄° ***
¨gv
, *
w‹k
, 
size
, 
°›
)

137 if(
DEBUG_MODE_U
==1)

139 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

141 
›tv
 *›tv = 
	`›t°¨t
(
w‹k
, 
size
);

142 
pos
 = 0;

144 
pos
 < *
¨gc
) {

145 
îr
 = 
	`›ç¨£
(
›ti⁄s
, 
›tv
, *
¨gv
, *
¨gc
, &
pos
);

146 i‡(
îr
) {

147 i‡(
îr
 < 0)

148  
îr
;

149 
›ti⁄s
 = 
NULL
;

151 i‡(
°›
 && 
›tv
->
¨gc
 >= stop) {

152 
pos
 < *
¨gc
)

153 
›tv
->
¨gv
[›tv->
¨gc
++] = (*¨gv)[
pos
++];

157 i‡(
›tv
->
size
) {

158 *
¨gc
 = 
›tv
->argc;

159 *
¨gv
 = 
›tv
->argv;

162  
›tv
->
›tc
;

163 
	}
}

165 
	$›tsˇn
(
›ti⁄s
 *›ti⁄s, *
¨gc
, c⁄° ***
¨gv
, *
w‹k
, 
size
)

167 if(
DEBUG_MODE_U
==1)

169 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

171  
	`›thód
(
›ti⁄s
, 
¨gc
, 
¨gv
, 
w‹k
, 
size
, 0);

172 
	}
}

174 
	$›t•a˚
(
›ti⁄s
 *›ti⁄s, 
¨gc
, c⁄° *
¨gv
[])

176 if(
DEBUG_MODE_U
==1)

178 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

180 
›tv
 
Áke
 = {};

181 
	`›tsˇn
(
›ti⁄s
, &
¨gc
, &
¨gv
, &
Áke
, 0);

182 
size
 = (
Áke
Ë+ fake.
¨gc
 * (*Ë+ fake.
›tc
 * (
›t
);

183  
Áke
.
îr
 ? 100 : 
size
;

184 
	}
}

186 
	$›tcou¡
(*
w‹k
, 
›t
)

188 if(
DEBUG_MODE_U
==1)

190 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

192 
cou¡
 = 0;

193 
i
 = 0; i < ((
›tv
 *)
w‹k
)->
›tc
; i++)

194 
cou¡
 +
	`›tödex
(
w‹k
, 
i
Ë=
›t
;

195  
cou¡
;

196 
	}
}

198 c⁄° *
	$›ãº‹
(*
w‹k
)

200 if(
DEBUG_MODE_U
==1)

202 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

204 
›tv
 *›tv = 
w‹k
;

205  
›tv
->
îr
 ? (c⁄° *)›tv->
¨gv
 : 
NULL
;

206 
	}
}

210 
	semô
 {

211 *
	mãxt
;

212 
	mfuŒ
, 
	msize
, 
	movî
;

215 
	$__¥ötf
(2, 3)

216 
	$emô
(
emô
 *
ãxt
, *
fmt
, ...)

218 if(
DEBUG_MODE_U
==1)

220 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

222 
va_li°
 
¨gs
;

223 
	`va_°¨t
(
¨gs
, 
fmt
);

224 
room
 = 
ãxt
->
fuŒ
 -Åext->
size
, 
ovî
 = 0;

225 
size
 = 
	`v¢¥ötf
(
ãxt
->ãxà+Åext->size, 
room
, 
fmt
, 
¨gs
);

226 
	`va_íd
(
¨gs
);

227 i‡(
size
 > 
room
) {

228 
ãxt
->
ovî
 +ovî = 
size
 - 
room
;

229 
size
 = 
room
;

231 
ãxt
->
size
 += size;

232  
ovî
;

233 
	}
}

235 
	$emô∑d
(
emô
 *
ãxt
, 
∑d
)

237 if(
DEBUG_MODE_U
==1)

239 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

241  
	`emô
(
ãxt
, "%*s", 
∑d
, "");

242 
	}
}

244 
	$emôíd
(
emô
 *
ãxt
)

246 if(
DEBUG_MODE_U
==1)

248 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

250  
	`emô
(
ãxt
, "\n");

251 
	}
}

253 
	$emôruÀ
(
emô
 *
ãxt
, 
›ti⁄s
 *
›ti⁄
)

255 if(
DEBUG_MODE_U
==1)

257 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

259 i‡((
›ti⁄
->
ruÀ
 & 3)) {

260 c⁄° *
ty≥
 = 
›ti⁄
->
¨ghñp
 ? : (›ti⁄->
ruÀ
 & 
OPT_NUMBER
) ? "number" : "value";

261 
›ti⁄Æ
 = (
›ti⁄
->
ruÀ
 & 3Ë=
OPT_OPTARG
;

262 i‡(
›ti⁄Æ
)

263 
	`emô
(
ãxt
, "[=%s]", 
ty≥
);

265 
	`emô
(
ãxt
, "=%s", 
ty≥
);

268 
	}
}

270 
	$›thñp
(*
buf
, 
bufsize
, 
›ti⁄s
 *›ti⁄s, 
èbs
[3], *
Àad
, 
brõf
)

272 if(
DEBUG_MODE_U
==1)

274 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

276 
èb0
 = 
èbs
 ?Åabs[0] : 3;

277 
èb1
 = 
èbs
 ?Åabs[1] : 30;

278 
èb2
 = 
èbs
 ?Åabs[2] : 80;

279 
emô
 *
ãxt
 = &(emit){

280 .
ãxt
 = 
buf
,

281 .
fuŒ
 = 
bufsize
,

283 
›ti⁄s
 *
›ti⁄
;

285 
	`emô
(
ãxt
, "%s%s", 
Àad
, 
brõf
 ? " " :Üead[0] ? "\n" : "");

287 
i
, 
À·
 = 
brõf
 ? 0 : 
ãxt
->
size
;

288 
›ti⁄
 = 
›ti⁄s
; o±i⁄->
«me
; option++) {

289 c⁄° *
ãr£
 = 
›ti⁄
->terse;

290 i‡(
brõf
) {

291 
i
 = 0; i < 2; i++) {

292 
m¨k
 = 
ãxt
->
size
, 
ovî
 =Åext->over;

293 
	`emô
(
ãxt
, "[");

294 *
ãr£
) {

295 
c
 = *
ãr£
++;

296 i‡(
c
 > ' ')

297 
	`emô
(
ãxt
, "-%c|", 
c
);

299 
	`emô
(
ãxt
, "--%s", 
›ti⁄
->
«me
);

300 
	`emôruÀ
(
ãxt
, 
›ti⁄
);

301 
	`emô
(
ãxt
, "] ");

302 i‡(
ãxt
->
size
 - 
À·
 < 
èb2
)

304 
ãxt
->
size
 = 
m¨k
;

305 
ãxt
->
ovî
 = over;

306 
	`emôíd
(
ãxt
);

307 
À·
 = 
ãxt
->
size
;

308 
	`emô∑d
(
ãxt
, 
èb0
);

313 
	`emô∑d
(
ãxt
, 
èb0
);

314 
	`emô
(
ãxt
, "--%s", 
›ti⁄
->
«me
);

315 
	`emôruÀ
(
ãxt
, 
›ti⁄
);

316 *
ãr£
) {

317 
c
 = *
ãr£
++;

318 i‡(
c
 > ' ')

319 
	`emô
(
ãxt
, ", -%c", 
c
);

321 i‡(
›ti⁄
->
hñp
) {

322 
cﬁ
 = 
ãxt
->
size
 +Åext->
ovî
 - 
À·
, 
∑d
 = 
èb1
 > col ?Åab1 - col : 0;

323 
	`emô
(
ãxt
, "%*s", 
∑d
, " ");

324 c⁄° *
hñp
 = 
›ti⁄
->help;

325 
èû
 = 
	`°æí
(
hñp
);

327 *
t›
 = 
ãxt
->ãxà+Åext->
fuŒ
;

328 
cﬁ
 = 
ãxt
->
size
 +Åext->
ovî
 - 
À·
;

329 
room
 = 
èb2
 > 
cﬁ
 ?Åab2 - col : 0;

330 
size
 = 
èû
 < 
room
 ?Åail :Ñoom;

331 
‰ì
 = 
t›
 - (
ãxt
->ãxà+Åext->
size
);

332 
m¨k
 = 
ãxt
->
size
, 
ovî
 =Åext->over;

333 i‡(
size
 > 
‰ì
) {

334 
ãxt
->
ovî
 +
size
 - 
‰ì
;

335 
size
 = 
‰ì
;

337 i‡(
ãxt
->
size
 =ãxt->
fuŒ
)

339 
	`mem˝y
(
ãxt
->ãxà+Åext->
size
, 
hñp
, size);

340 
ãxt
->
size
 += size;

341 i‡(
èû
 <
size
)

343 
ãxt
->
size
 = 
m¨k
;

344 
ãxt
->
ovî
 = over;

345 
wøp
 = 
size
, 
mo°
 = 
èb2
 - 
èb1
 - 1;

346 i‡(
mo°
 > 10)

347 
mo°
 = 10;

348 
wøp
 > 
size
 - 
mo°
)

349 i‡(
hñp
[
wøp
--] == ' ') {

350 
size
 = 
wøp
 + 2;

351 
ãxt
->
size
--;

354 
ãxt
->
size
 += size;

355 
hñp
 +
size
;

356 
èû
 -
size
;

357 
	`emôíd
(
ãxt
);

358 
À·
 = 
ãxt
->
size
 +Åext->
ovî
;

359 
	`emô∑d
(
ãxt
, 
èb1
);

362 
	`emôíd
(
ãxt
);

363 
À·
 = 
ãxt
->
size
 +Åext->
ovî
;

366  -
ãxt
->
ovî
;

367 
	}
}

369 c⁄° *
	$›tba£«me
(c⁄° *
¨gv0
)

371 if(
DEBUG_MODE_U
==1)

373 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

375 c⁄° *
p
;

377 i‡(!
¨gv0
 || !*argv0)

380 
p
 = 
¨gv0
 + 
	`°æí
(argv0);

382 
¨gv0
 < 
p
) {

383 i‡(*
p
 == '/')

384  
p
 + 1;

385 
p
--;

388  
¨gv0
;

389 
	}
}

	@options.h

1 #i‚de‡
OPTIONS_H


2 
	#OPTIONS_H


	)

11 
	s›tv
 {

12 
	msize
, 
	m¨gc
, 
	m›tc
, 
	mîr
;

13 c⁄° *
	m¨gv
[];

16 
	s›ti⁄s
 {

17 c⁄° *
	m«me
, *
	mãr£
;

18 
	mruÀ
;

19 c⁄° *
	mhñp
, *
	m¨ghñp
, *
	mdeÁrg
;

22 
	s›t
 {

23 
	mödex
;

24 c⁄° *
	mvÆue
;

28 
	mOPT_NOARG
,

29 
	mOPT_HASARG
,

30 
	mOPT_OPTARG
,

32 
	mOPT_NUMBER
 = 4,

33 
	mOPT_MANY
 = 8,

34 
	mOPT_MAX
,

36 
	mOPT_ANYARG
 = 
OPT_HASARG
 | 
OPT_OPTARG
,

39 
ölöe
 
›t
 *
	$›ã¡ry
(*
w‹k
, 
i
)

41 
›tv
 *›tv = 
w‹k
;

42  (
›t
 *)((
w‹k
 + 
›tv
->
size
)Ë- 
i
 - 1;

43 
	}
}

45 
ölöe
 
	$›tödex
(*
w‹k
, 
i
)

47  
	`›ã¡ry
(
w‹k
, 
i
)->
ödex
;

48 
	}
}

50 
ölöe
 c⁄° *
	$›tvÆue
(*
w‹k
, 
i
)

52  
	`›ã¡ry
(
w‹k
, 
i
)->
vÆue
;

53 
	}
}

55 
ölöe
 
›tv
 *
	$¨gv2›tv
(c⁄° *
¨gv
[])

57  (
›tv
 *)((*)
¨gv
 - 
	`off£tof
(optv,árgv));

58 
	}
}

60 
›thód
(
›ti⁄s
 *›ti⁄s, *
¨gc
, c⁄° ***
¨gv
, *
w‹k
, 
size
, 
°›
);

61 
›tsˇn
(
›ti⁄s
 *›ti⁄s, *
¨gc
, c⁄° ***
¨gv
, *
w‹k
, 
size
);

62 
›t•a˚
(
›ti⁄s
 *›ti⁄s, 
¨gc
, c⁄° *
¨gv
[]);

63 
›tcou¡
(*
w‹k
, 
›t
);

64 c⁄° *
›ãº‹
(*
w‹k
);

65 
›thñp
(*
buf
, 
bufsize
, 
›ti⁄s
 *›ti⁄s, 
èbs
[3], *
Àad
, 
brõf
);

66 c⁄° *
›tba£«me
(c⁄° *
¨gv0
);

	@super.c

11 
	~"tux3u£r.h
"

13 #i‚de‡
åa˚


14 
	#åa˚
 
åa˚_⁄


	)

17 
	$öode_öô_⁄˚
(
öode
 *inode)

19 if(
DEBUG_MODE_U
==1)

21 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

23 
	`mem£t
(
öode
, 0, (*inode));

25 
	`•ö_lock_öô
(&
öode
->
i_lock
);

26 
	`muãx_öô
(&
öode
->
i_muãx
);

27 
	`INIT_HLIST_NODE
(&
öode
->
i_hash
);

28 
	}
}

30 
	~"kî√l/su≥r.c
"

32 
	$öode_öô
(
tux3_öode
 *
tuxnode
, 
sb
 *sb, 
umode_t
 
mode
)

34 if(
DEBUG_MODE_U
==1)

36 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

38 
öode
 *öodê&
tuxnode
->
vfs_öode
;

40 
	`tux3_öode_öô_⁄˚
(
tuxnode
);

41 
	`tux3_öode_öô_Æways
(
tuxnode
);

43 
öode
->
i_sb
 = 
sb
;

44 
öode
->
i_mode
 = 
mode
;

45 
öode
->
i_∆ök
 = 1;

46 
	`©omic_£t
(&
öode
->
i_cou¡
, 1);

47 
	}
}

49 
	$‰ì_öode_check
(
tux3_öode
 *
tuxnode
)

51 if(
DEBUG_MODE_U
==1)

53 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

55 
öode
 *öodê&
tuxnode
->
vfs_öode
;

57 
	`tux3_check_de°roy_öode
(
öode
);

59 
	`as£π
(
	`hli°_unhashed
(&
öode
->
i_hash
));

60 
	`as£π
(
öode
->
i_°©e
 =
I_FREEING
);

61 
	`as£π
(
	`m≠pög
(
öode
));

62 
	}
}

64 
	$put_su≥r
(
sb
 *sb)

71 if(
DEBUG_MODE_U
==1)

73 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

75 
	`__tux3_put_su≥r
(
sb
);

77 
	`öode_Àak_check
();

80 
	}
}

83 
	$˛ór_Ÿhî_magic
(
sb
 *sb)

85 if(
DEBUG_MODE_U
==1)

87 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

90 
loff_t
 
loc
;

91 
Àn
;

92 } 
¨ó
[] = {

93 { 0, 
SB_LOC
 },

94 { (
sb
->
vﬁblocks
 - 1Ë<< sb->
blockbôs
, sb->
blocksize
 },

96 *
d©a
;

97 
maxÀn
 = 0;

98 
îr
;

100 
i
 = 0; i < 
	`ARRAY_SIZE
(
¨ó
); i++)

101 
maxÀn
 = 
	`max
(maxÀn, 
¨ó
[
i
].
Àn
);

103 
d©a
 = 
	`mÆloc
(
maxÀn
);

104 i‡(!
d©a
)

105  -
ENOMEM
;

106 
	`mem£t
(
d©a
, 0, 
maxÀn
);

108 
i
 = 0; i < 
	`ARRAY_SIZE
(
¨ó
); i++) {

109 
îr
 = 
	`devio
(
WRITE
, 
sb
->
dev
, 
¨ó
[
i
].
loc
, 
d©a
,áªa[i].
Àn
);

110 i‡(
îr
)

114 
	`‰ì
(
d©a
);

116  
îr
;

117 
	}
}

119 
	$ª£rve_su≥rblock
(
sb
 *sb)

122 if(
DEBUG_MODE_U
==1)

124 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

126 
cou¡
 = 1 << (
sb
->
blockbôs
 > 13 ? 0 : 13 - sb->blockbits);

127 
block_£gmít
 
£g
;

128 
îr
;

130 
	`åa˚
("reserve superblock");

133 
îr
 = 
	`bÆloc_‰om_ønge
(
sb
, 0, 
cou¡
, cou¡, 0, &
£g
, 1);

134 i‡(
îr
 < 0)

135  
îr
;

137 
	`log_bÆloc
(
sb
, 
£g
.
block
, seg.
cou¡
);

138 
	`åa˚
("ª£rvê%Lx", 
£g
.
block
);

141 
	}
}

143 
	$make_tux3
(
sb
 *sb)

145 if(
DEBUG_MODE_U
==1)

147 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

149 
îr
;

151 
îr
 = 
	`˛ór_Ÿhî_magic
(
sb
);

152 i‡(
îr
)

153  
îr
;

155 
	`ch™ge_begö_©omic
(
sb
);

157 
	`åa˚
("create bitmap");

158 
sb
->
bôm≠
 = 
	`¸óã_öã∫Æ_öode
(sb, 
TUX_BITMAP_INO
, 
NULL
);

159 i‡(
	`IS_ERR
(
sb
->
bôm≠
)) {

160 
îr
 = 
	`PTR_ERR
(
sb
->
bôm≠
);

161 
îr‹_ch™ge_íd
;

164 
	`ch™ge_íd_©omic
(
sb
);

167 
	`tux3_°¨t_backíd
(
sb
);

168 
îr
 = 
	`ª£rve_su≥rblock
(
sb
);

169 
	`tux3_íd_backíd
();

170 i‡(
îr
)

171 
îr‹
;

173 
	`ch™ge_begö_©omic
(
sb
);

175 
	`åa˚
("create versionÅable");

176 
sb
->
vèbÀ
 = 
	`¸óã_öã∫Æ_öode
(sb, 
TUX_VTABLE_INO
, 
NULL
);

177 i‡(
	`IS_ERR
(
sb
->
vèbÀ
)) {

178 
îr
 = 
	`PTR_ERR
(
sb
->
vèbÀ
);

179 
îr‹_ch™ge_íd
;

182 
	`åa˚
("createátom dictionary");

183 
sb
->
©abÀ
 = 
	`¸óã_öã∫Æ_öode
(sb, 
TUX_ATABLE_INO
, 
NULL
);

184 i‡(
	`IS_ERR
(
sb
->
©abÀ
)) {

185 
îr
 = 
	`PTR_ERR
(
sb
->
©abÀ
);

186 
îr‹_ch™ge_íd
;

189 
	`åa˚
("createÑoot directory");

190 
tux_üâr
 
roŸ_üâr
 = { .
mode
 = 
S_IFDIR
 | 0755, };

191 
sb
->
roŸdú
 = 
	`¸óã_öã∫Æ_öode
(sb, 
TUX_ROOTDIR_INO
, &
roŸ_üâr
);

192 i‡(
	`IS_ERR
(
sb
->
roŸdú
)) {

193 
îr
 = 
	`PTR_ERR
(
sb
->
roŸdú
);

194 
îr‹_ch™ge_íd
;

197 
	`ch™ge_íd_©omic
(
sb
);

199 
îr
 = 
	`sync_su≥r
(
sb
);

200 i‡(
îr
)

201 
îr‹
;

203 
	`show_buf„rs
(
	`m≠pög
(
sb
->
bôm≠
));

204 
	`show_buf„rs
(
	`m≠pög
(
sb
->
roŸdú
));

205 
	`show_buf„rs
(
sb
->
vﬁm≠
->
m≠
);

209 
îr‹_ch™ge_íd
:

210 
	`ch™ge_íd_©omic
(
sb
);

211 
îr‹
:

212 
	`tux3_îr
(
sb
, "ìk, %s", 
	`°ªº‹
(-
îr
));

213 
	`ùut
(
sb
->
bôm≠
);

214 
sb
->
bôm≠
 = 
NULL
;

216  
îr
;

217 
	}
}

219 
	$tux3_öô_mem
()

221 if(
DEBUG_MODE_U
==1)

223 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

225  
	`tux3_öô_hﬁe_ˇche
();

226 
	}
}

228 
	$tux3_exô_mem
()

230 if(
DEBUG_MODE_U
==1)

232 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

234 
	`tux3_de°roy_hﬁe_ˇche
();

235 
	}
}

	@trace.h

1 #i‚de‡
USER_TRACE_H


2 
	#USER_TRACE_H


	)

4 
	~"√wDeföes.h
"

5 
	~<°rög.h
>

6 
	~<°dio.h
>

7 
	~<time.h
>

8 
	~<execöfo.h
>

9 
	~<°d¨g.h
>

11 
	#dõ
(
code
Ëdÿ{ *
__p
 = 
NULL
; *__∞code; } 0)

	)

12 
	#as£π
(
ex¥
) do { \

13 i‡(!(
ex¥
)) { \

14 i‡(
ALLOW_BUILTIN_LOG
==1) \

15 
	`Ârötf
(
°dîr
, "%s:%d: Failedássert(" #expr ")\n", \

16 
__func__
, 
__LINE__
); \

17 
	`dõ
(99); \

19 } 0)

	)

21 
	~"kî√l/åa˚.h
"

	@tux3.c

11 
	~"tux3u£r.h
"

12 
	~"diskio.h
"

14 
	~"tux3_fsck.c
"

15 
	~"tux3_image.c
"

17 
	#VERSION
 0.0

	)

18 
	#STRINGIFY2
(
ãxt
Ë#ãxt

	)

19 
	#STRINGIFY
(
ãxt
Ë
	`STRINGIFY2
—ext)

	)

21 
	$›í_vﬁume
(c⁄° *
vﬁ«me
)

23 if(
DEBUG_MODE_U
==1)

25 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

27 
fd
 = 
	`›í
(
vﬁ«me
, 
O_RDWR
);

28 i‡(
fd
 < 0)

29 
	`°ªº‹_exô
(1, 
î∫o
, "couldÇŸ o≥¿'%s'", 
vﬁ«me
);

30  
fd
;

31 
	}
}

33 
	$›í_sb
(c⁄° *
vﬁ«me
, 
sb
 *sb)

35 if(
DEBUG_MODE_U
==1)

37 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

39 
sb
->
dev
->
fd
 = 
	`›í_vﬁume
(
vﬁ«me
);

41 
îr
 = 
	`lﬂd_sb
(
sb
);

42 i‡(!
îr
) {

43 
sb
->
dev
->
bôs
 = sb->
blockbôs
;

44 
	`öô_buf„rs
(
sb
->
dev
, 1 << 20, 2);

46  
îr
;

47 
	}
}

49 
	$›í_fs
(c⁄° *
vﬁ«me
, 
sb
 *sb)

51 if(
DEBUG_MODE_U
==1)

53 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

55 
îr
 = 
	`›í_sb
(
vﬁ«me
, 
sb
);

56 i‡(
îr
)

57  
îr
;

59 
ª∂ay
 *
Ω
 = 
	`tux3_öô_fs
(
sb
);

60 i‡(
	`IS_ERR
(
Ω
))

61  
	`PTR_ERR
(
Ω
);

62 
	`show_åì_ønge
(&
	`tux_öode
(
sb
->
roŸdú
)->
båì
, 0, -1);

63 
	`show_åì_ønge
(&
	`tux_öode
(
sb
->
bôm≠
)->
båì
, 0, -1);

65  
	`ª∂ay_°age3
(
Ω
, 1);

66 
	}
}

68 
	$mkfs
(c⁄° *
vﬁ«me
, 
sb
 *sb, 
blocksize
)

70 if(
DEBUG_MODE_U
==1)

72 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

74 
fd
 = 
	`›í_vﬁume
(
vﬁ«me
);

76 
loff_t
 
vﬁsize
 = 0;

77 i‡(
	`fdsize64
(
fd
, &
vﬁsize
))

78 
	`°ªº‹_exô
(1, 
î∫o
, "fdsize64 faûed f‹ '%s'", 
vﬁ«me
);

80 
	`¥ötf
("Vﬁumêsizê%Lu byãs\n", (
s64
)
vﬁsize
);

82 
blockbôs
 = 
	`ffs
(
blocksize
) - 1;

83 i‡(1 << 
blockbôs
 !
blocksize
)

84 
	`îr‹_exô
("blocksize must beáÖower ofÅwo");

86 
sb
->
dev
->
fd
 = fd;

87 
sb
->
dev
->
bôs
 = 
blockbôs
;

88 
	`öô_buf„rs
(
sb
->
dev
, 1 << 20, 2);

90 
sb
->
su≥r
 = 
	`INIT_DISKSB
(
blockbôs
, 
vﬁsize
 >> blockbits);

91 
	`£tup_sb
(
sb
, &sb->
su≥r
);

93 
sb
->
vﬁm≠
 = 
	`tux_√w_vﬁm≠
(sb);

94 i‡(!
sb
->
vﬁm≠
)

95  -
ENOMEM
;

97 
sb
->
logm≠
 = 
	`tux_√w_logm≠
(sb);

98 i‡(!
sb
->
logm≠
)

99  -
ENOMEM
;

101  
	`make_tux3
(
sb
);

102 
	}
}

104 
	$ußge
(
›ti⁄s
 *›ti⁄s, c⁄° *
¥og«me
,

105 c⁄° *
cmd«me
, c⁄° *
«me
, c⁄° *
blurb
)

107 if(
DEBUG_MODE_U
==1)

109 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

111 
cﬁs
 = 80, 
èbs
[] = { 3, 40, cols < 60 ? 60 : cols };

112 
Àad
[300], 
hñp
[3000] = {};

114 i‡(
cmd«me
)

115 
	`¢¥ötf
(
Àad
, (lead), "Usage: %s %s %s%s",

116 
¥og«me
, 
cmd«me
, 
«me
, 
blurb
 ? : "");

118 
	`¢¥ötf
(
Àad
, (lead), "Usage: %s %s%s",

119 
¥og«me
, 
«me
, 
blurb
 ? : "");

121 
	`›thñp
(
hñp
, (hñp), 
›ti⁄s
, 
èbs
, 
Àad
, !
blurb
);

122 
	`¥ötf
("%s\n", 
hñp
);

123 
	}
}

125 
	sv¨s
 { c⁄° *
	mvﬁ«me
; 
	mblocksize
; 
	m£ek
; 
	mvîbo£
; };

127 
	$comm™d_›ti⁄s
(*
¨gc
, c⁄° ***
¨gs
,

128 
›ti⁄s
 *›ti⁄s, 
√ed
, c⁄° *
¥og«me
,

129 c⁄° *
cmd«me
, c⁄° *
blurb
, 
v¨s
 *vars)

131 if(
DEBUG_MODE_U
==1)

133 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

135 
•a˚
 = 
	`›t•a˚
(
›ti⁄s
, *
¨gc
, *
¨gs
);

136 *
›tv
 = 
	`mÆloc
(
•a˚
);

137 i‡(!
›tv
)

138 
	`°ªº‹_exô
(1, 
î∫o
, "malloc");

140 
›tc
 = 
	`›tsˇn
(
›ti⁄s
, 
¨gc
, 
¨gs
, 
›tv
, 
•a˚
);

141 i‡(
›tc
 < 0)

142 
	`îr‹_exô
("%s!", 
	`›ãº‹
(
›tv
));

144 
i
 = 0; i < 
›tc
; i++) {

145 c⁄° *
vÆue
 = 
	`›tvÆue
(
›tv
, 
i
);

146 
›ti⁄s
[
	`›tödex
(
›tv
, 
i
)].
ãr£
[0]) {

148 
v¨s
->
blocksize
 = 
	`°πoul
(
vÆue
, 
NULL
, 0);

151 
v¨s
->
£ek
 = 
	`°πouŒ
(
vÆue
, 
NULL
, 0);

154 
v¨s
->
vîbo£
++;

157 
	`ußge
(
›ti⁄s
, 
¥og«me
, 
cmd«me
, 
blurb
, " [OPTIONS]");

158 
	`exô
(0);

160 
	`ußge
(
›ti⁄s
, 
¥og«me
, 
cmd«me
, 
blurb
, 
NULL
);

161 
	`exô
(0);

165 i‡(*
¨gc
 !
√ed
) {

166 
	`ußge
(
›ti⁄s
, 
¥og«me
, 
cmd«me
, 
blurb
, 
NULL
);

167 
	`exô
(1);

170 
	`as£π
(
√ed
 > 2);

171 
v¨s
->
vﬁ«me
 = (*
¨gs
)[2];

172 
	}
}

174 
	$maö
(
¨gc
, *
¨gv
[])

176 if(
DEBUG_MODE_U
==1)

178 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

180 c⁄° *
¥og«me
 = 
	`›tba£«me
(
¨gv
[0]);

181 c⁄° **
¨gs
 = (c⁄° **)
¨gv
;

182 c⁄° *
blurb
 = "<command> <volume>";

185 
CMD_MKFS
, 
CMD_FSCK
, 
CMD_DELTA
, 
CMD_UNIFY
, 
CMD_IMAGE
,

186 
CMD_READ
, 
CMD_WRITE
, 
CMD_GET
, 
CMD_SET
, 
CMD_STAT
, 
CMD_DELETE
,

187 
CMD_TRUNCATE
, 
CMD_UNKNOWN
,

190 *
comm™ds
[] = {

191 [
CMD_MKFS
] = "mkfs", [
CMD_FSCK
] = "fsck", [
CMD_DELTA
] = "delta",

192 [
CMD_UNIFY
] = "unify", [
CMD_IMAGE
] = "image",

193 [
CMD_READ
] = "ªad", [
CMD_WRITE
] = "write",

194 [
CMD_GET
] = "gë", [
CMD_SET
] = "set",

195 [
CMD_STAT
] = "°©", [
CMD_DELETE
] = "delete",

196 [
CMD_TRUNCATE
] = "truncate",

199 
›ti⁄s
 options[] = {

201 { "vîbo£", "v", 
OPT_MANY
, "Verbose output", },

208 
•a˚
 = 
	`›t•a˚
(
›ti⁄s
, 
¨gc
, 
¨gs
);

209 *
›tv
 = 
	`mÆloc
(
•a˚
);

210 i‡(!
›tv
)

211 
	`°ªº‹_exô
(1, 
î∫o
, "malloc");

214 
›tc
 = 
	`›thód
(
›ti⁄s
, &
¨gc
, &
¨gs
, 
›tv
, 
•a˚
, 2);

215 i‡(
›tc
 < 0)

216 
	`îr‹_exô
("%s!", 
	`›ãº‹
(
›tv
));

218 
vîbo£
 = 0;

220 
i
 = 0; i < 
›tc
; i++) {

221 
›ti⁄s
[
	`›tödex
(
›tv
, 
i
)].
ãr£
[0]) {

223 
j
 = 0; j < 
	`ARRAY_SIZE
(
comm™ds
); j++)

224 
	`¥ötf
("%†", 
comm™ds
[
j
]);

225 
	`¥ötf
("\n");

226 
	`exô
(0);

228 
vîbo£
++;

231 
	`¥ötf
("Tux3Åoﬁ†vîsi⁄ %s\n", 
	`STRINGIFY
(
VERSION
));

232 
	`exô
(0);

234 
	`ußge
(
›ti⁄s
, 
¥og«me
, 
NULL
, 
blurb
, " [OPTIONS]");

235 
	`exô
(0);

237 
	`ußge
(
›ti⁄s
, 
¥og«me
, 
NULL
, 
blurb
, NULL);

238 
	`exô
(0);

243 i‡(
¨gc
 < 2) {

244 
	`ußge
(
›ti⁄s
, 
¥og«me
, 
NULL
, 
blurb
, NULL);

245 
	`exô
(1);

248 c⁄° *
comm™d
 = 
¨gs
[1], *
fûíame
, *
©å«me
;

249 
v¨s
 v¨†{ .
blocksize
 = 1 << 12, .
vîbo£
 = verbose };

250 
öode
 *öodê
NULL
;

251 
fûe
 *fûê
NULL
;

253 
îr
 = 
	`tux3_öô_mem
();

254 i‡(
îr
)

255 
îr‹
;

257 
dev
 *dev = &(dev){};

258 
sb
 *sb = 
	`øpid_sb
(
dev
);

260 
›ti⁄s
 
⁄lyhñp
[] = {

261 { "vîbo£", "v", 
OPT_MANY
, "Verbose output", },

267 
›ti⁄s
 
⁄ly£ek
[] = {

268 { "£ek", "s", 
OPT_HASARG
 | 
OPT_NUMBER
, "Set fileÖosition", },

269 { "vîbo£", "v", 
OPT_MANY
, "Verbose output", },

275 
›ti⁄s
 
⁄lysize
[] = {

276 { "size", "s", 
OPT_HASARG
 | 
OPT_NUMBER
, "Specify file size", },

277 { "vîbo£", "v", 
OPT_MANY
, "Verbose output", },

283 
cmd
;

284 
cmd
 = 0; cmd < 
	`ARRAY_SIZE
(
comm™ds
); cmd++) {

285 i‡(
comm™ds
[
cmd
] && !
	`°rcmp
(
comm™d
, commands[cmd]))

289 
cmd
) {

290 
CMD_MKFS
: {

291 
›ti⁄s
 
mkfs_›ti⁄s
[] = {

292 { "blocksize", "b", 
OPT_HASARG
 | 
OPT_NUMBER
,

294 { "vîbo£", "v", 
OPT_MANY
, "Verbose output", },

299 
	`comm™d_›ti⁄s
(&
¨gc
, &
¨gs
, 
mkfs_›ti⁄s
, 3, 
¥og«me
, 
comm™d
,

300 "<vﬁume>", &
v¨s
);

302 
	`¥ötf
("MakeÅux3 filesystem on %s (blocksize %u)\n",

303 
v¨s
.
vﬁ«me
, v¨s.
blocksize
);

305 
îr
 = 
	`mkfs
(
v¨s
.
vﬁ«me
, 
sb
, v¨s.
blocksize
);

306 i‡(
îr
)

307 
îr‹
;

308 
	`show_åì_ønge
(
	`ôªe_båì
(
sb
), 0, -1);

312 
CMD_FSCK
:

313 
	`comm™d_›ti⁄s
(&
¨gc
, &
¨gs
, 
⁄lyhñp
, 3, 
¥og«me
, 
comm™d
,

314 "<vﬁume>", &
v¨s
);

315 
îr
 = 
	`›í_sb
(
v¨s
.
vﬁ«me
, 
sb
);

316 i‡(
îr
)

317 
îr‹
;

318 
îr
 = 
	`fsck_maö
(
sb
);

319 i‡(
îr
)

320 
îr‹
;

323 
CMD_IMAGE
:

324 
	`comm™d_›ti⁄s
(&
¨gc
, &
¨gs
, 
⁄lyhñp
, 4, 
¥og«me
, 
comm™d
,

325 "<§c> <de°>", &
v¨s
);

326 
fûíame
 = 
¨gs
[3];

327 
îr
 = 
	`›í_sb
(
v¨s
.
vﬁ«me
, 
sb
);

328 i‡(
îr
)

329 
îr‹
;

330 
îr
 = 
	`image_maö
(
sb
, 
fûíame
);

331 i‡(
îr
)

332 
îr‹
;

335 
CMD_DELTA
:

336 
	`comm™d_›ti⁄s
(&
¨gc
, &
¨gs
, 
⁄lyhñp
, 3, 
¥og«me
, 
comm™d
,

337 "<vﬁume>", &
v¨s
);

338 
îr
 = 
	`›í_fs
(
v¨s
.
vﬁ«me
, 
sb
);

339 i‡(
îr
)

340 
îr‹
;

341 
	`f‹˚_dñè
(
sb
);

344 
CMD_UNIFY
:

345 
	`comm™d_›ti⁄s
(&
¨gc
, &
¨gs
, 
⁄lyhñp
, 3, 
¥og«me
, 
comm™d
,

346 "<vﬁume>", &
v¨s
);

347 
îr
 = 
	`›í_fs
(
v¨s
.
vﬁ«me
, 
sb
);

348 i‡(
îr
)

349 
îr‹
;

350 
	`f‹˚_unify
(
sb
);

353 
CMD_WRITE
:

354 
	`comm™d_›ti⁄s
(&
¨gc
, &
¨gs
, 
⁄ly£ek
, 4, 
¥og«me
, 
comm™d
,

355 "<vﬁume> <fûíame>", &
v¨s
);

356 
fûíame
 = 
¨gs
[3];

357 
îr
 = 
	`›í_fs
(
v¨s
.
vﬁ«me
, 
sb
);

358 i‡(
îr
)

359 
îr‹
;

360 
öode
 = 
	`tux›í
(
sb
->
roŸdú
, 
fûíame
, 
	`°æí
(filename));

361 i‡(
	`IS_ERR
(
öode
Ë&& 
	`PTR_ERR
(öodeË=-
ENOENT
) {

362 
tux_üâr
 
üâr
 = { .
mode
 = 
S_IFREG
 | 
S_IRWXU
, };

363 
öode
 = 
	`tux¸óã
(
sb
->
roŸdú
, 
fûíame
, 
	`°æí
(filename),

364 &
üâr
);

366 i‡(
	`IS_ERR
(
öode
)) {

367 
îr
 = 
	`PTR_ERR
(
öode
);

368 
îr‹
;

370 
fûe
 = &(fûe){ .
f_öode
 = 
öode
 };

371 
°©
 stat;

372 i‡((
	`f°©
(0, &
°©
)) == -1)

373 
	`°ªº‹_exô
(1, 
î∫o
, "fstat");

374 i‡(
v¨s
.
£ek
)

375 
	`tux£ek
(
fûe
, 
v¨s
.
£ek
);

376 
ãxt
[1 << 16];

378 
ssize_t
 
Àn
 = 
	`ªad
(0, 
ãxt
, (text));

379 i‡(
Àn
 < 0)

380 
	`°ªº‹_exô
(1, 
î∫o
, "read");

381 i‡(!
Àn
)

383 
Àn
 = 
	`tuxwrôe
(
fûe
, 
ãxt
,Üen);

384 i‡(
Àn
 < 0) {

385 
îr
 = 
Àn
;

386 
îr‹
;

389 
	`ùut
(
öode
);

391 
îr
 = 
	`sync_su≥r
(
sb
);

392 i‡(
îr
)

393 
îr‹
;

399 
CMD_READ
:

400 
	`comm™d_›ti⁄s
(&
¨gc
, &
¨gs
, 
⁄ly£ek
, 4, 
¥og«me
, 
comm™d
,

401 "<vﬁume> <fûíame>", &
v¨s
);

402 
fûíame
 = 
¨gs
[3];

403 
îr
 = 
	`›í_fs
(
v¨s
.
vﬁ«me
, 
sb
);

404 i‡(
îr
)

405 
îr‹
;

408 
öode
 = 
	`tux›í
(
sb
->
roŸdú
, 
fûíame
, 
	`°æí
(filename));

409 i‡(
	`IS_ERR
(
öode
)) {

410 
îr
 = 
	`PTR_ERR
(
öode
);

411 
îr‹
;

413 
fûe
 = &(fûe){ .
f_öode
 = 
öode
 };

414 
buf
[100];

415 
	`mem£t
(
buf
, 0, (buf));

416 i‡(
v¨s
.
£ek
)

417 
	`tux£ek
(
fûe
, 
v¨s
.
£ek
);

418 
gŸ
 = 
	`tuxªad
(
fûe
, 
buf
, (buf));

420 
	`ùut
(
öode
);

421 i‡(
gŸ
 < 0) {

422 
îr
 = 
gŸ
;

423 
îr‹
;

425 
	`hexdump
(
buf
, 
gŸ
);

428 
CMD_SET
:

429 
	`comm™d_›ti⁄s
(&
¨gc
, &
¨gs
, 
⁄lyhñp
, 5, 
¥og«me
, 
comm™d
,

430 "<vﬁume> <fûíame> <©åibuã>", &
v¨s
);

431 
fûíame
 = 
¨gs
[3];

432 
©å«me
 = 
¨gs
[4];

433 
îr
 = 
	`›í_fs
(
v¨s
.
vﬁ«me
, 
sb
);

434 i‡(
îr
)

435 
îr‹
;

436 
öode
 = 
	`tux›í
(
sb
->
roŸdú
, 
fûíame
, 
	`°æí
(filename));

437 i‡(
	`IS_ERR
(
öode
)) {

438 
îr
 = 
	`PTR_ERR
(
öode
);

439 
îr‹
;

441 
ssize_t
 
Àn
;

442 
Àn
 = 
	`ªad
(0, 
ãxt
, (text));

443 i‡(
Àn
 < 0)

444 
	`°ªº‹_exô
(1, 
î∫o
, "read");

445 i‡(
vîbo£
)

446 
	`¥ötf
("gŸ %zd byãs\n", 
Àn
);

447 
îr
 = 
	`£t_x©å
(
öode
, 
©å«me
, 
	`°æí
◊â∫ame), 
ãxt
, 
Àn
, 0);

448 
	`ùut
(
öode
);

449 i‡(
îr
)

450 
îr‹
;

452 
îr
 = 
	`sync_su≥r
(
sb
);

453 i‡(
îr
)

454 
îr‹
;

457 
CMD_GET
:

458 
	`comm™d_›ti⁄s
(&
¨gc
, &
¨gs
, 
⁄lyhñp
, 5, 
¥og«me
, 
comm™d
,

459 "<vﬁume> <fûíame> <©åibuã>", &
v¨s
);

460 
fûíame
 = 
¨gs
[3];

461 
©å«me
 = 
¨gs
[4];

462 
îr
 = 
	`›í_fs
(
v¨s
.
vﬁ«me
, 
sb
);

463 i‡(
îr
)

464 
îr‹
;

465 
öode
 = 
	`tux›í
(
sb
->
roŸdú
, 
fûíame
, 
	`°æí
(filename));

466 i‡(
	`IS_ERR
(
öode
)) {

467 
îr
 = 
	`PTR_ERR
(
öode
);

468 
îr‹
;

470 
size
 = 
	`gë_x©å
(
öode
, 
©å«me
, 
	`°æí
◊â∫ame), 
NULL
, 0);

471 i‡(
size
 < 0) {

472 
îr
 = 
size
;

473 
îr‹
;

475 *
d©a
 = 
	`mÆloc
(
size
);

476 i‡(!
d©a
) {

477 
îr
 = -
ENOMEM
;

478 
îr‹
;

480 
size
 = 
	`gë_x©å
(
öode
, 
©å«me
, 
	`°æí
◊â∫ame), 
d©a
, size);

481 i‡(
size
 < 0) {

482 
	`‰ì
(
d©a
);

483 
îr
 = 
size
;

484 
îr‹
;

486 
	`hexdump
(
d©a
, 
size
);

487 
	`‰ì
(
d©a
);

488 
	`ùut
(
öode
);

491 
CMD_STAT
:

492 
	`comm™d_›ti⁄s
(&
¨gc
, &
¨gs
, 
⁄lyhñp
, 4, 
¥og«me
, 
comm™d
,

493 "<vﬁume> <fûíame>", &
v¨s
);

494 
fûíame
 = 
¨gs
[3];

495 
îr
 = 
	`›í_fs
(
v¨s
.
vﬁ«me
, 
sb
);

496 i‡(
îr
)

497 
îr‹
;

498 
öode
 = 
	`tux›í
(
sb
->
roŸdú
, 
fûíame
, 
	`°æí
(filename));

499 i‡(
	`IS_ERR
(
öode
)) {

500 
îr
 = 
	`PTR_ERR
(
öode
);

501 
îr‹
;

503 
	`dump_©ås
(
öode
);

504 
	`ùut
(
öode
);

507 
CMD_DELETE
:

508 
	`comm™d_›ti⁄s
(&
¨gc
, &
¨gs
, 
⁄lyhñp
, 4, 
¥og«me
, 
comm™d
,

509 "<vﬁume> <fûíame>", &
v¨s
);

510 
fûíame
 = 
¨gs
[3];

511 
îr
 = 
	`›í_fs
(
v¨s
.
vﬁ«me
, 
sb
);

512 i‡(
îr
)

513 
îr‹
;

514 
îr
 = 
	`tuxu∆ök
(
sb
->
roŸdú
, 
fûíame
, 
	`°æí
(filename));

515 i‡(
îr
) {

516 i‡(
îr
 =-
ENOENT
)

517 
	`¥ötf
("FileÇot found\n");

519 
îr‹
;

521 
	`tux_dump_íåõs
(
	`blockªad
(
sb
->
roŸdú
->
m≠
, 0));

523 
îr
 = 
	`sync_su≥r
(
sb
);

524 i‡(
îr
)

525 
îr‹
;

528 
CMD_TRUNCATE
:

529 
	`comm™d_›ti⁄s
(&
¨gc
, &
¨gs
, 
⁄lysize
, 4, 
¥og«me
, 
comm™d
,

530 "<vﬁume> <fûíame>", &
v¨s
);

531 
fûíame
 = 
¨gs
[3];

532 
îr
 = 
	`›í_fs
(
v¨s
.
vﬁ«me
, 
sb
);

533 i‡(
îr
)

534 
îr‹
;

535 
öode
 = 
	`tux›í
(
sb
->
roŸdú
, 
fûíame
, 
	`°æí
(filename));

536 i‡(
	`IS_ERR
(
öode
)) {

537 
îr
 = 
	`PTR_ERR
(
öode
);

538 
îr‹
;

540 
îr
 = 
	`tuxåunˇã
(
öode
, 
v¨s
.
£ek
);

541 
	`ùut
(
öode
);

542 i‡(
îr
)

543 
îr‹
;

545 
îr
 = 
	`sync_su≥r
(
sb
);

546 i‡(
îr
)

547 
îr‹
;

551 
	`îr‹_exô
("'%s' i†nŸá comm™d", 
comm™d
);

557 
	`put_su≥r
(
sb
);

558 
	`tux3_exô_mem
();

559 
	`‰ì
(
	`¨gv2›tv
(
¨gs
));

560 
	`‰ì
(
›tv
);

563 
îr‹
:

564 
	`°ªº‹_exô
(1, -
îr
, "eek!");

565 
	}
}

	@tux3_fsck.c

9 
	~"tux3u£r.h
"

10 
	~<sys/mm™.h
>

12 
	~"wÆk.c
"

14 
	#FSCK_BITMAP_ERROR
 100

	)

15 
	#FSCK_INODE_ERROR
 101

	)

17 
	sfsck_c⁄ãxt
 {

18 
	mîr‹
;

21 c⁄° *
	mshadow_«me
;

22 
	mshadow_fd
;

23 
	mshadow_size
;

25 *
	mm≠±r
;

26 
size_t
 
	mm≠size
;

27 
loff_t
 
	mm≠pos
;

29 
block_t
 
	m‰ìblocks
;

30 
block_t
 
	m‰ìöodes
;

37 
	$fsck_öô_c⁄ãxt
(
sb
 *sb, 
fsck_c⁄ãxt
 *
c⁄ãxt
,

38 
dñëe
)

40 if(
DEBUG_MODE_U
==1)

42 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

44 
size_t
 
size
 = (
sb
->
vﬁblocks
 + 7) >> 3;

45 
fd
;

48 
fd
 = 
	`›í
(
c⁄ãxt
->
shadow_«me
, 
O_CREAT
 | 
O_RDWR
 | 
O_EXCL
, 0644);

49 i‡(
fd
 < 0)

50 
	`°ªº‹_exô
(1, 
î∫o
, "couldn't create %s",

51 
c⁄ãxt
->
shadow_«me
);

53 i‡(
	`·runˇã
(
fd
, 
size
) < 0)

54 
	`°ªº‹_exô
(1, 
î∫o
, "ftruncate");

56 i‡(
dñëe
)

57 
	`u∆ök
(
c⁄ãxt
->
shadow_«me
);

59 
c⁄ãxt
->
shadow_fd
 = 
fd
;

60 
c⁄ãxt
->
shadow_size
 = 
size
;

61 
c⁄ãxt
->
m≠±r
 = 
NULL
;

62 
c⁄ãxt
->
m≠pos
 = -1;

63 
c⁄ãxt
->
m≠size
 = 0;

65 
c⁄ãxt
->
‰ìblocks
 = 
sb
->
vﬁblocks
;

66 
c⁄ãxt
->
‰ìöodes
 = 
MAX_INODES
 - 
TUX_NORMAL_INO
;

67 
	}
}

69 
	$fsck_de°roy_c⁄ãxt
(
fsck_c⁄ãxt
 *
c⁄ãxt
)

71 if(
DEBUG_MODE_U
==1)

73 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

75 i‡(
c⁄ãxt
->
m≠±r
)

76 
	`munm≠
(
c⁄ãxt
->
m≠±r
, c⁄ãxt->
m≠size
);

77 
	`˛o£
(
c⁄ãxt
->
shadow_fd
);

78 
	}
}

81 *
	$shadow_bôm≠_ªad
(
sb
 *sb, 
fsck_c⁄ãxt
 *
c⁄ãxt
,

82 
block_t
 
ödex
)

84 if(
DEBUG_MODE_U
==1)

86 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

88 
	#MAP_BITS
 28

	)

89 
	#MAP_SIZE
 ((
loff_t
)1 << 
MAP_BITS
)

	)

90 
	#MAP_MASK
 (
MAP_SIZE
 - 1)

	)

91 
loff_t
 
pos
 = 
ödex
 << 
sb
->
blockbôs
;

92 
loff_t
 
m≠pos
 = 
pos
 & ~
MAP_MASK
;

93 
m≠off£t
 = 
pos
 & 
MAP_MASK
;

94 *
±r
 = 
c⁄ãxt
->
m≠±r
;

96 i‡(
m≠pos
 !
c⁄ãxt
->mappos) {

97 
size_t
 
m≠size
;

99 i‡(
c⁄ãxt
->
m≠±r
)

100 
	`munm≠
(
c⁄ãxt
->
m≠±r
, c⁄ãxt->
m≠size
);

102 
m≠size
 = 
	`mö
(
c⁄ãxt
->
shadow_size
 - 
m≠pos
, 
MAP_SIZE
);

103 
±r
 = 
	`mm≠
(
NULL
, 
m≠size
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
,

104 
c⁄ãxt
->
shadow_fd
, 
m≠pos
);

105 i‡(
±r
 =
MAP_FAILED
)

106 
	`°ªº‹_exô
(1, 
î∫o
, "mmap");

108 
c⁄ãxt
->
m≠±r
 = 
±r
;

109 
c⁄ãxt
->
m≠pos
 = mappos;

110 
c⁄ãxt
->
m≠size
 = mapsize;

113  
±r
 + 
m≠off£t
;

114 
	}
}

116 
	$shadow_bôm≠_modify
(
sb
 *sb, 
fsck_c⁄ãxt
 *
c⁄ãxt
,

117 
block_t
 
°¨t
, 
cou¡
, 
£t
)

119 if(
DEBUG_MODE_U
==1)

121 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

123 
m≠shi·
 = 
sb
->
blockbôs
 + 3;

124 
m≠size
 = 1 << 
m≠shi·
;

125 
m≠mask
 = 
m≠size
 - 1;

126 
m≠off£t
 = 
°¨t
 & 
m≠mask
;

127 
block_t
 
m≠block
, 
m≠blocks
 = (
°¨t
 + 
cou¡
 + 
m≠mask
Ë>> 
m≠shi·
;

128 (*
ã°
)(
u8
 *, , Ë
£t
 ? 
Æl_˛ór
 : 
Æl_£t
;

129 (*
modify
)(
u8
 *, , Ë
£t
 ? 
£t_bôs
 : 
˛ór_bôs
;

131 
	`åa˚
("°¨à%Lu, cou¡ %u, së %d", 
°¨t
, 
cou¡
, 
£t
);

133 
m≠block
 = 
°¨t
 >> 
m≠shi·
; m≠block < 
m≠blocks
; mapblock++) {

134 *
p
 = 
	`shadow_bôm≠_ªad
(
sb
, 
c⁄ãxt
, 
m≠block
);

135 
Àn
 = 
	`mö
(
m≠size
, 
cou¡
);

137 i‡(!
	`ã°
(
p
, 
m≠off£t
, 
Àn
)) {

138 
	`îr‹_exô
("%s: start 0x%Lx, count %x",

139 
£t
 ? "alreadyállocated" : "double free",

140 
°¨t
, 
Àn
);

143 
	`modify
(
p
, 
m≠off£t
, 
Àn
);

145 i‡(
£t
)

146 
c⁄ãxt
->
‰ìblocks
 -
Àn
;

148 
c⁄ãxt
->
‰ìblocks
 +
Àn
;

150 
m≠off£t
 = 0;

151 
°¨t
 +
Àn
;

152 
cou¡
 -
Àn
;

154 
	}
}

160 
ölöe
 
	$À_l⁄g_to_˝u
(c⁄° 
y
)

162 if(
DEBUG_MODE_U
==1)

164 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

167 #i‡
BITS_PER_LONG
 == 64

168  (Ë
	`À64_to_˝u
((
__f‹˚
 
__À64
Ë
y
);

169 #ñi‡
BITS_PER_LONG
 == 32

170  (Ë
	`À32_to_˝u
((
__f‹˚
 
__À32
Ë
y
);

172 #îr‹ 
BITS_PER_LONG
 
nŸ
 
deföed


174 
	}
}

178 
	$fsck_cmp_bôm≠_dÀaf_cb
(
båì
 *båì, 
buf„r_hód
 *
∑ª¡
,

179 
block_t
 
ödex
, block_à
block
, 
cou¡
,

180 *
d©a
)

182 if(
DEBUG_MODE_U
==1)

184 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

186 
fsck_c⁄ãxt
 *
c⁄ãxt
 = 
d©a
;

187 
sb
 *sb = 
båì
->sb;

188 
öode
 *
bôm≠
 = 
sb
->bitmap;

189 
m≠shi·
 = 
sb
->
blockbôs
 + 3;

190 
m≠size
 = 1 << 
m≠shi·
;

191 
block_t
 
°¨t
 = 
ödex
 << 
m≠shi·
;

192 
block_t
 
limô
 = 
ödex
 + 
cou¡
;

194 
ödex
 < 
limô
) {

195 
buf„r_hód
 *
buf„r
;

196 *
bmp
, *
shw
;

197 
i
;

199 
buf„r
 = 
	`blockªad
(
	`m≠pög
(
bôm≠
), 
ödex
);

200 
	`as£π
(
buf„r
);

202 
bmp
 = 
	`bufd©a
(
buf„r
);

203 
shw
 = 
	`shadow_bôm≠_ªad
(
sb
, 
c⁄ãxt
, 
ödex
);

205 
i
 = 0; i < 
sb
->
blocksize
 / (*
bmp
); i++) {

206 
diff
 = 
shw
[
i
] ^ 
bmp
[i];

207 
s
, 
b
;

208 
j
;

210 i‡(!
diff
)

213 
s
 = 
	`À_l⁄g_to_˝u
(
shw
[
i
]);

214 
b
 = 
	`À_l⁄g_to_˝u
(
bmp
[
i
]);

215 
diff
 = 
s
 ^ 
b
;

216 
j
 = 0; j < 
BITS_PER_LONG
; j++) {

217 i‡(!(
diff
 & (1UL << 
j
)))

220 
	`tux3_îr
(
sb
,

222 
°¨t
 + (
i
 * 
BITS_PER_LONG
Ë+ 
j
,

223 !!(
s
 & (1UL << 
j
)),

224 !!(
b
 & (1UL << 
j
)));

226 
c⁄ãxt
->
îr‹
 = 
FSCK_BITMAP_ERROR
;

230 
	`blockput
(
buf„r
);

232 
ödex
++;

233 
°¨t
 +
m≠size
;

235 
	}
}

237 
	$fsck_cmp_bôm≠_dÀaf
(
båì
 *btree,

238 
buf„r_hód
 *
buf„r
, *
d©a
)

240 if(
DEBUG_MODE_U
==1)

242 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

244 
	`wÆk_dÀaf
(
båì
, 
buf„r
, 
fsck_cmp_bôm≠_dÀaf_cb
, 
d©a
);

245 
	}
}

247 
wÆk_båì_›s
 
	gwÆk_cmp_bôm≠_dåì_›s
 = {

248 .
Àaf
 = 
fsck_cmp_bôm≠_dÀaf
,

251 
	$fsck_check_bôm≠
(
sb
 *sb, 
fsck_c⁄ãxt
 *
c⁄ãxt
)

253 if(
DEBUG_MODE_U
==1)

255 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

257 
öode
 *
bôm≠
 = 
sb
->bitmap;

258 
båì
 *
dåì
 = &
	`tux_öode
(
bôm≠
)->btree;

260 
	`wÆk_båì
(
dåì
, &
wÆk_cmp_bôm≠_dåì_›s
, 
c⁄ãxt
);

262 i‡(
c⁄ãxt
->
‰ìblocks
 !
sb
->freeblocks) {

263 
	`tux3_îr
(
sb
, "shadow freeblocks %Lu, freeblocks %Lu",

264 
c⁄ãxt
->
‰ìblocks
, 
sb
->freeblocks);

265 
c⁄ãxt
->
îr‹
 = 
FSCK_BITMAP_ERROR
;

267 
	}
}

269 
	$fsck_check_öodes
(
sb
 *sb, 
fsck_c⁄ãxt
 *
c⁄ãxt
)

271 if(
DEBUG_MODE_U
==1)

273 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

275 i‡(
c⁄ãxt
->
‰ìöodes
 !
sb
->freeinodes) {

276 
	`tux3_îr
(
sb
, "shadow freeinodes %Lu, freeinodes %Lu",

277 
c⁄ãxt
->
‰ìöodes
, 
sb
->freeinodes);

278 
c⁄ãxt
->
îr‹
 = 
FSCK_INODE_ERROR
;

280 
	}
}

286 
	$fsck_bnode
(
båì
 *båì, 
buf„r_hód
 *
buf„r
,

287 
Àvñ
, *
d©a
)

289 if(
DEBUG_MODE_U
==1)

291 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

293 
fsck_c⁄ãxt
 *
c⁄ãxt
 = 
d©a
;

294 
	`shadow_bôm≠_modify
(
båì
->
sb
, 
c⁄ãxt
, 
	`bufödex
(
buf„r
), 1, 1);

295 
	}
}

297 
	$fsck_dÀaf_cb
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

298 
block_t
 
ödex
, block_à
block
, 
cou¡
,

299 *
d©a
)

301 if(
DEBUG_MODE_U
==1)

303 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

305 
fsck_c⁄ãxt
 *
c⁄ãxt
 = 
d©a
;

306 
	`shadow_bôm≠_modify
(
båì
->
sb
, 
c⁄ãxt
, 
block
, 
cou¡
, 1);

307 
	}
}

309 
	$fsck_dÀaf
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

310 *
d©a
)

312 if(
DEBUG_MODE_U
==1)

314 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

316 
fsck_c⁄ãxt
 *
c⁄ãxt
 = 
d©a
;

317 
	`shadow_bôm≠_modify
(
båì
->
sb
, 
c⁄ãxt
, 
	`bufödex
(
Àafbuf
), 1, 1);

319 
	`wÆk_dÀaf
(
båì
, 
Àafbuf
, 
fsck_dÀaf_cb
, 
d©a
);

320 
	}
}

322 
wÆk_båì_›s
 
	gfsck_dåì_›s
 = {

323 .
bnode
 = 
fsck_bnode
,

324 .
	gÀaf
 = 
fsck_dÀaf
,

327 
	$fsck_ûóf_cb
(
buf„r_hód
 *
Àafbuf
, 
©
,

328 
öode
 *öode, *
d©a
)

330 if(
DEBUG_MODE_U
==1)

332 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

334 
fsck_c⁄ãxt
 *
c⁄ãxt
 = 
d©a
;

335 
båì
 *
dåì
 = &
	`tux_öode
(
öode
)->btree;

337 i‡(
	`tux_öode
(
öode
)->
öum
 >
TUX_NORMAL_INO
)

338 
c⁄ãxt
->
‰ìöodes
--;

340 
	`wÆk_båì
(
dåì
, &
fsck_dåì_›s
, 
d©a
);

341 
	}
}

343 
	$fsck_ûóf
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

344 *
d©a
)

346 if(
DEBUG_MODE_U
==1)

348 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

350 
fsck_c⁄ãxt
 *
c⁄ãxt
 = 
d©a
;

351 
	`shadow_bôm≠_modify
(
båì
->
sb
, 
c⁄ãxt
, 
	`bufödex
(
Àafbuf
), 1, 1);

353 
	`wÆk_ûóf
(
båì
, 
Àafbuf
, 
fsck_ûóf_cb
, 
d©a
);

354 
	}
}

356 
wÆk_båì_›s
 
	gfsck_ôªe_›s
 = {

357 .
bnode
 = 
fsck_bnode
,

358 .
	gÀaf
 = 
fsck_ûóf
,

361 
	$fsck_ﬁóf
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

362 *
d©a
)

364 if(
DEBUG_MODE_U
==1)

366 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

368 
fsck_c⁄ãxt
 *
c⁄ãxt
 = 
d©a
;

369 
	`shadow_bôm≠_modify
(
båì
->
sb
, 
c⁄ãxt
, 
	`bufödex
(
Àafbuf
), 1, 1);

370 
	}
}

372 
wÆk_båì_›s
 
	gfsck_Ÿªe_›s
 = {

373 .
bnode
 = 
fsck_bnode
,

374 .
	gÀaf
 = 
fsck_ﬁóf
,

378 
fsck_c⁄ãxt
 *
	gfsck_un°ash_c⁄ãxt
;

379 
	$fsck_un°ash_m¨k
(
sb
 *sb, 
u64
 
vÆ
)

381 if(
DEBUG_MODE_U
==1)

383 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

385 
block_t
 
block
 = 
vÆ
 & ~(-1ULL << 48);

386 
cou¡
 = 
vÆ
 >> 48;

387 
	`shadow_bôm≠_modify
(
sb
, 
fsck_un°ash_c⁄ãxt
, 
block
, 
cou¡
, 1);

389 
	}
}

392 
	$fsck_m¨k_su≥rblock
(
sb
 *sb, 
fsck_c⁄ãxt
 *
c⁄ãxt
)

394 if(
DEBUG_MODE_U
==1)

396 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

399 
cou¡
 = 1 << (
sb
->
blockbôs
 > 13 ? 0 : 13 - sb->blockbits);

402 
	`shadow_bôm≠_modify
(
sb
, 
c⁄ãxt
, 0, 
cou¡
, 1);

403 
	}
}

405 
	$fsck_maö
(
sb
 *sb)

407 if(
DEBUG_MODE_U
==1)

409 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

411 
fsck_c⁄ãxt
 
c⁄ãxt
 = {

412 .
shadow_«me
 = "shadow_bitmap",

414 
îr
;

416 
ª∂ay
 *
Ω
 = 
	`tux3_öô_fs
(
sb
);

417 i‡(
	`IS_ERR
(
Ω
)) {

418 
îr
 = 
	`PTR_ERR
(
Ω
);

419  
îr
;

422 
	`fsck_öô_c⁄ãxt
(
sb
, &
c⁄ãxt
, 1);

424 
	`fsck_m¨k_su≥rblock
(
sb
, &
c⁄ãxt
);

426 
fsck_un°ash_c⁄ãxt
 = &
c⁄ãxt
;

427 
	`°ash_wÆk
(
sb
, &sb->
deunify
, 
fsck_un°ash_m¨k
);

429 
	`wÆk_båì
(
	`ôªe_båì
(
sb
), &
fsck_ôªe_›s
, &
c⁄ãxt
);

430 
	`wÆk_båì
(
	`Ÿªe_båì
(
sb
), &
fsck_Ÿªe_›s
, &
c⁄ãxt
);

432 
	`fsck_check_bôm≠
(
sb
, &
c⁄ãxt
);

433 
	`fsck_check_öodes
(
sb
, &
c⁄ãxt
);

435 
îr
 = 
	`ª∂ay_°age3
(
Ω
, 0);

436 i‡(
îr
)

437  
îr
;

439 
	`fsck_de°roy_c⁄ãxt
(&
c⁄ãxt
);

441 i‡(
c⁄ãxt
.
îr‹
)

442 
	`exô
(
c⁄ãxt
.
îr‹
);

445 
	}
}

	@tux3_image.c

9 
	~"tux3u£r.h
"

11 
	~"wÆk.c
"

18 
	g›t_vîbo£
;

20 
	g›t_d©a
;

22 
	simage_c⁄ãxt
 {

23 
sb
 *
	msb
;

24 
	mfd
;

27 
	$image_öô_c⁄ãxt
(
sb
 *sb, 
image_c⁄ãxt
 *
c⁄ãxt
,

28 c⁄° *
ouçut
)

30 if(
DEBUG_MODE_U
==1)

32 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

34 
fd
;

36 
fd
 = 
	`›í
(
ouçut
, 
O_CREAT
 | 
O_WRONLY
 | 
O_EXCL
, 0600);

37 i‡(
fd
 < 0)

38 
	`°ªº‹_exô
(1, 
î∫o
, "couldn'à¸óã %s", 
ouçut
);

40 i‡(
	`·runˇã
(
fd
, 
sb
->
vﬁblocks
 << sb->
blockbôs
) < 0)

41 
	`°ªº‹_exô
(1, 
î∫o
, "ftruncate");

43 
c⁄ãxt
->
sb
 = sb;

44 
c⁄ãxt
->
fd
 = fd;

45 
	}
}

47 
	$image_de°roy_c⁄ãxt
(
image_c⁄ãxt
 *
c⁄ãxt
)

49 if(
DEBUG_MODE_U
==1)

51 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

53 
	`˛o£
(
c⁄ãxt
->
fd
);

54 
	}
}

56 
	$image_wrôe
(
image_c⁄ãxt
 *
c⁄ãxt
,

57 
block_t
 
block
, 
cou¡
)

59 if(
DEBUG_MODE_U
==1)

61 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

63 
buf
[1024 * 1024];

64 
sb
 *sb = 
c⁄ãxt
->sb;

65 
loff_t
 
pos
 = 
block
 << 
sb
->
blockbôs
;

66 
ssize_t
 
ªt
;

68 
cou¡
--) {

69 
ªt
 = 
	`¥ód
(
sb
->
dev
->
fd
, 
buf
, sb->
blocksize
, 
pos
);

70 i‡(
ªt
 !
sb
->
blocksize
)

71 
	`°ªº‹_exô
(1, 
î∫o
, "¥ód %zd", 
ªt
);

73 
ªt
 = 
	`pwrôe
(
c⁄ãxt
->
fd
, 
buf
, 
sb
->
blocksize
, 
pos
);

74 i‡(
ªt
 !
sb
->
blocksize
)

75 
	`°ªº‹_exô
(1, 
î∫o
, "pwrôê%zd", 
ªt
);

77 
pos
 +
sb
->
blocksize
;

79 
	}
}

81 
	$image_wrôe_buf„r
(
image_c⁄ãxt
 *
c⁄ãxt
,

82 
buf„r_hód
 *
buf„r
, 
block_t
 
block
)

84 if(
DEBUG_MODE_U
==1)

86 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

88 i‡(!
	`buf„r_dúty
(
buf„r
))

89 
	`image_wrôe
(
c⁄ãxt
, 
block
, 1);

90 
	}
}

96 
	$image_bnode
(
båì
 *båì, 
buf„r_hód
 *
buf„r
,

97 
Àvñ
, *
d©a
)

99 if(
DEBUG_MODE_U
==1)

101 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

103 
image_c⁄ãxt
 *
c⁄ãxt
 = 
d©a
;

104 
	`image_wrôe_buf„r
(
c⁄ãxt
, 
buf„r
, 
	`bufödex
(buffer));

105 
	}
}

107 
	$image_dÀaf_cb
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

108 
block_t
 
ödex
, block_à
block
, 
cou¡
,

109 *
d©a
)

111 if(
DEBUG_MODE_U
==1)

113 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

115 
image_c⁄ãxt
 *
c⁄ãxt
 = 
d©a
;

116 
	`image_wrôe
(
c⁄ãxt
, 
block
, 
cou¡
);

117 
	}
}

119 
	$__image_dÀaf
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

120 *
d©a
, 
wrôe_d©a
)

122 if(
DEBUG_MODE_U
==1)

124 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

126 
image_c⁄ãxt
 *
c⁄ãxt
 = 
d©a
;

127 
	`image_wrôe_buf„r
(
c⁄ãxt
, 
Àafbuf
, 
	`bufödex
(leafbuf));

129 i‡(
wrôe_d©a
)

130 
	`wÆk_dÀaf
(
båì
, 
Àafbuf
, 
image_dÀaf_cb
, 
d©a
);

131 
	}
}

133 
	$image_dÀaf
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

134 *
d©a
)

136 if(
DEBUG_MODE_U
==1)

138 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

140 
	`__image_dÀaf
(
båì
, 
Àafbuf
, 
d©a
, 1);

141 
	}
}

143 
	$image_dÀaf_wôhout_d©a
(
båì
 *btree,

144 
buf„r_hód
 *
Àafbuf
, *
d©a
)

146 if(
DEBUG_MODE_U
==1)

148 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

150 
	`__image_dÀaf
(
båì
, 
Àafbuf
, 
d©a
, 0);

151 
	}
}

153 
wÆk_båì_›s
 
	gimage_dåì_›s
 = {

154 .
bnode
 = 
image_bnode
,

155 .
	gÀaf
 = 
image_dÀaf
,

158 
wÆk_båì_›s
 
	gimage_dåì_wôhout_d©a_›s
 = {

159 .
bnode
 = 
image_bnode
,

160 .
	gÀaf
 = 
image_dÀaf_wôhout_d©a
,

163 
	$image_ûóf_cb
(
buf„r_hód
 *
Àafbuf
, 
©
,

164 
öode
 *öode, *
d©a
)

166 if(
DEBUG_MODE_U
==1)

168 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

170 
båì
 *
dåì
 = &
	`tux_öode
(
öode
)->btree;

172 i‡(!
›t_d©a
 && 
	`S_ISREG
(
öode
->
i_mode
))

173 
	`wÆk_båì
(
dåì
, &
image_dåì_wôhout_d©a_›s
, 
d©a
);

175 
	`wÆk_båì
(
dåì
, &
image_dåì_›s
, 
d©a
);

176 
	}
}

178 
	$image_ûóf
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

179 *
d©a
)

181 if(
DEBUG_MODE_U
==1)

183 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

185 
image_c⁄ãxt
 *
c⁄ãxt
 = 
d©a
;

186 
	`image_wrôe_buf„r
(
c⁄ãxt
, 
Àafbuf
, 
	`bufödex
(leafbuf));

188 
	`wÆk_ûóf
(
båì
, 
Àafbuf
, 
image_ûóf_cb
, 
d©a
);

189 
	}
}

191 
wÆk_båì_›s
 
	gimage_ôªe_›s
 = {

192 .
bnode
 = 
image_bnode
,

193 .
	gÀaf
 = 
image_ûóf
,

196 
	$image_ﬁóf
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

197 *
d©a
)

199 if(
DEBUG_MODE_U
==1)

201 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

203 
image_c⁄ãxt
 *
c⁄ãxt
 = 
d©a
;

204 
	`image_wrôe_buf„r
(
c⁄ãxt
, 
Àafbuf
, 
	`bufödex
(leafbuf));

205 
	}
}

207 
wÆk_båì_›s
 
	gimage_Ÿªe_›s
 = {

208 .
bnode
 = 
image_bnode
,

209 .
	gÀaf
 = 
image_ﬁóf
,

212 
	$image_log_¥e
(
sb
 *sb, 
buf„r_hód
 *
buf„r
,

213 
logcou¡
, 
obsﬁëe
, *
d©a
)

215 if(
DEBUG_MODE_U
==1)

217 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

219 
image_c⁄ãxt
 *
c⁄ãxt
 = 
d©a
;

220 
	`image_wrôe_buf„r
(
c⁄ãxt
, 
buf„r
, 
	`bufödex
(buffer));

221 
	}
}

223 
	$image_log
(
sb
 *sb, 
buf„r_hód
 *
buf„r
,

224 
u8
 
code
, u8 *
p
, 
Àn
, 
obsﬁëe
, *
d©a
)

226 if(
DEBUG_MODE_U
==1)

228 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

230 
image_c⁄ãxt
 *
c⁄ãxt
 = 
d©a
;

232 i‡(
obsﬁëe
 && 
›t_vîbo£
 < 2)

235 
code
) {

236 
LOG_BFREE
:

237 
LOG_BFREE_RELOG
:

238 i‡(
›t_vîbo£
 < 2)

241 
LOG_BFREE_ON_UNIFY
: {

242 
u32
 
cou¡
;

243 
u64
 
block
;

244 
p
 = 
	`decode32
’, &
cou¡
);

245 
p
 = 
	`decode48
’, &
block
);

246 i‡(
›t_vîbo£
) {

247 
	`åa˚
("obsolete %d: [%s] block %Lu, count %u",

248 
obsﬁëe
, 
log_«me
[
code
], 
block
, 
cou¡
);

249 
	`image_wrôe
(
c⁄ãxt
, 
block
, 
cou¡
);

253 
LOG_LEAF_REDIRECT
:

254 i‡(
›t_vîbo£
 < 2)

257 
LOG_BNODE_REDIRECT
: {

258 
u64
 
ﬁd
, 
√w
;

259 
p
 = 
	`decode48
’, &
ﬁd
);

260 
p
 = 
	`decode48
’, &
√w
);

261 
	`åa˚
("obsolete %d: [%s] old %Lu",

262 
obsﬁëe
, 
log_«me
[
code
], 
ﬁd
);

263 
	`image_wrôe
(
c⁄ãxt
, 
ﬁd
, 1);

266 
LOG_LEAF_FREE
:

267 i‡(
›t_vîbo£
 < 2)

270 
LOG_BNODE_FREE
: {

271 
u64
 
block
;

272 
p
 = 
	`decode48
’, &
block
);

273 i‡(
›t_vîbo£
) {

274 
	`åa˚
("obsolete %d: [%s] block %Lu",

275 
obsﬁëe
, 
log_«me
[
code
], 
block
);

276 
	`image_wrôe
(
c⁄ãxt
, 
block
, 1);

281 
	}
}

283 
wÆk_logchaö_›s
 
	gimage_logchaö_›s
 = {

284 .
¥e
 = 
image_log_¥e
,

285 .
	glog
 = 
image_log
,

289 
	$image_c›y_su≥rblock
(
sb
 *sb, 
image_c⁄ãxt
 *
c⁄ãxt
)

291 if(
DEBUG_MODE_U
==1)

293 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

296 
cou¡
 = 1 << (
sb
->
blockbôs
 > 13 ? 0 : 13 - sb->blockbits);

299 
	`image_wrôe
(
c⁄ãxt
, 0, 
cou¡
);

300 
	}
}

302 
	$image_maö
(
sb
 *sb, c⁄° *
«me
)

304 if(
DEBUG_MODE_U
==1)

306 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

308 
image_c⁄ãxt
 
c⁄ãxt
;

309 
îr
;

311 
ª∂ay
 *
Ω
 = 
	`tux3_öô_fs
(
sb
);

312 i‡(
	`IS_ERR
(
Ω
)) {

313 
îr
 = 
	`PTR_ERR
(
Ω
);

314  
îr
;

317 
	`image_öô_c⁄ãxt
(
sb
, &
c⁄ãxt
, 
«me
);

319 
	`image_c›y_su≥rblock
(
sb
, &
c⁄ãxt
);

320 
	`wÆk_logchaö
(
sb
, &
image_logchaö_›s
, &
c⁄ãxt
);

321 
	`wÆk_båì
(
	`ôªe_båì
(
sb
), &
image_ôªe_›s
, &
c⁄ãxt
);

322 
	`wÆk_båì
(
	`Ÿªe_båì
(
sb
), &
image_Ÿªe_›s
, &
c⁄ãxt
);

324 
îr
 = 
	`ª∂ay_°age3
(
Ω
, 0);

325 i‡(
îr
)

326  
îr
;

328 
	`image_de°roy_c⁄ãxt
(&
c⁄ãxt
);

331 
	}
}

	@tux3fuse.c

39 
	~<löux/x©å.h
>

40 
	~"åa˚.h
"

41 
	~"tux3u£r.h
"

43 
	~<löux/fs.h
>

45 
	#FUSE_USE_VERSION
 26

	)

46 
	~<fu£.h
>

47 
	~<fu£/fu£_lowÀvñ.h
>

49 #unde‡
åa˚


50 
	#åa˚
 
åa˚_⁄


	)

52 
	stux3fu£
 {

53 
sb
 *
	msb
;

54 *
	mvﬁ«me
;

57 
	$tux3fu£_öô
(*
u£rd©a
, 
fu£_c⁄n_öfo
 *
c⁄n
)

59 if(
DEBUG_MODE_U
==1)

61 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

63 
tux3fu£
 *tux3fu£ = 
u£rd©a
;

64 c⁄° *
vﬁ«me
 = 
tux3fu£
->volname;

65 
dev
 *dev;

66 
sb
 *sb;

67 
îr
, 
fd
;

68 
fd
 = 
	`›í
(
vﬁ«me
, 
O_RDWR
);

69 i‡(
fd
 < 0)

70 
	`°ªº‹_exô
(1, 
î∫o
, "vﬁumê%†nŸ found", 
vﬁ«me
);

72 
îr
 = 
	`tux3_öô_mem
();

73 i‡(
îr
)

74 
îr‹
;

76 
îr
 = -
ENOMEM
;

77 
dev
 = 
	`mÆloc
((*dev));

78 i‡(!
dev
)

79 
îr‹
;

81 *
dev
 = (dev){ .
fd
 = fd };

83 
sb
 = 
	`mÆloc
((*sb));

84 i‡(!
sb
)

85 
îr‹
;

86 *
sb
 = *
	`øpid_sb
(
dev
);

88 
îr
 = 
	`lﬂd_sb
(
sb
);

89 i‡(
îr
)

90 
îr‹
;

92 
dev
->
bôs
 = 
sb
->
blockbôs
;

93 
	`öô_buf„rs
(
dev
, 50 << 20, 2);

95 
ª∂ay
 *
Ω
 = 
	`tux3_öô_fs
(
sb
);

96 i‡(
	`IS_ERR
(
Ω
)) {

97 
îr
 = 
	`PTR_ERR
(
Ω
);

98 
îr‹
;

101 
îr
 = 
	`ª∂ay_°age3
(
Ω
, 1);

102 i‡(
îr
)

103 
îr‹
;

105 
tux3fu£
->
sb
 = sb;

109 
îr‹
:

110 
	`°ªº‹_exô
(1, -
îr
, "Eek!");

111 
	}
}

114 
	$tux3fu£_de°roy
(*
u£rd©a
)

116 if(
DEBUG_MODE_U
==1)

118 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

120 
tux3fu£
 *tux3fu£ = 
u£rd©a
;

121 
sb
 *sb = 
tux3fu£
->sb;

122 
	`sync_su≥r
(
sb
);

123 
	`put_su≥r
(
sb
);

124 
	`tux3_exô_mem
();

126 i‡(
tux3fu£
->
sb
->
dev
)

127 
	`‰ì
(
tux3fu£
->
sb
->
dev
);

128 i‡(
tux3fu£
->
sb
)

129 
	`‰ì
(
tux3fu£
->
sb
);

130 
	}
}

132 
sb
 *
	$tux3fu£_gë_sb
(
fu£_ªq_t
 
ªq
)

134 if(
DEBUG_MODE_U
==1)

136 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

138 
tux3fu£
 *tux3fu£ = 
	`fu£_ªq_u£rd©a
(
ªq
);

139  
tux3fu£
->
sb
;

140 
	}
}

142 
öode
 *
	$tux3fu£_igë
(
sb
 *sb, 
fu£_öo_t
 
öo
)

144 if(
DEBUG_MODE_U
==1)

146 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

148 i‡(
öo
 =
FUSE_ROOT_ID
)

149 
öo
 = 
TUX_ROOTDIR_INO
;

151  
	`tux3_igë
(
sb
, 
öo
);

152 
	}
}

154 
	$tux3fu£_fûl_°©
(
°©
 *°©, 
öode
 *inode)

156 if(
DEBUG_MODE_U
==1)

158 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

160 
sb
 *sb = 
	`tux_sb
(
öode
->
i_sb
);

162 *
°©
 = (stat){

164 .
°_öo
 = 
	`tux_öode
(
öode
)->
öum
,

165 .
°_mode
 = 
öode
->
i_mode
,

166 .
°_∆ök
 = 
öode
->
i_∆ök
,

167 .
°_uid
 = 
	`i_uid_ªad
(
öode
),

168 .
°_gid
 = 
	`i_gid_ªad
(
öode
),

169 .
°_rdev
 = 
öode
->
i_rdev
,

170 .
°_size
 = 
öode
->
i_size
,

172 .
°_blksize
 = 
sb
->
blocksize
,

174 .
°_blocks
 = 
	`ALIGN
(
öode
->
i_size
, 
sb
->
blocksize
) >> 9,

175 .
°_©im
 = 
öode
->
i_©ime
,

176 .
°_mtim
 = 
öode
->
i_mtime
,

177 .
°_˘im
 = 
öode
->
i_˘ime
,

179 
	}
}

181 
	$tux3fu£_fûl_ï
(
fu£_íåy_∑øm
 *
ï
, 
öode
 *inode)

183 if(
DEBUG_MODE_U
==1)

185 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

187 *
ï
 = (
fu£_íåy_∑øm
){

188 .
öo
 = 
	`tux_öode
(
öode
)->
öum
,

189 .
gíî©i⁄
 = 1,

190 .
©å_timeout
 = 0.0,

191 .
íåy_timeout
 = 0.0,

193 
	`tux3fu£_fûl_°©
(&
ï
->
©å
, 
öode
);

194 
	}
}

196 
	$tux3fu£_lookup
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
)

198 if(
DEBUG_MODE_U
==1)

200 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

202 
	`åa˚
("(%lx, '%s')", 
∑ª¡
, 
«me
);

203 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

204 
öode
 *
dú
, *inode;

206 
dú
 = 
	`tux3fu£_igë
(
sb
, 
∑ª¡
);

207 i‡(
	`IS_ERR
(
dú
)) {

208 
	`fu£_ª∂y_îr
(
ªq
, -
	`PTR_ERR
(
dú
));

212 
öode
 = 
	`tux›í
(
dú
, 
«me
, 
	`°æí
(name));

213 
	`ùut
(
dú
);

214 i‡(
	`IS_ERR
(
öode
)) {

215 
	`fu£_ª∂y_îr
(
ªq
, -
	`PTR_ERR
(
öode
));

219 
fu£_íåy_∑øm
 
ï
;

220 
	`tux3fu£_fûl_ï
(&
ï
, 
öode
);

221 
	`ùut
(
öode
);

223 
	`fu£_ª∂y_íåy
(
ªq
, &
ï
);

224 
	}
}

226 
	$tux3fu£_f‹gë
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
,

227 
∆ookup
)

229 if(
DEBUG_MODE_U
==1)

231 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

233 
	`fu£_ª∂y_n⁄e
(
ªq
);

234 
	}
}

236 
	$tux3fu£_gë©å
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
,

237 
fu£_fûe_öfo
 *
fi
)

239 if(
DEBUG_MODE_U
==1)

241 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

243 
	`åa˚
("(%lx)", 
öo
);

244 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

245 
öode
 *inode;

247 
öode
 = 
	`tux3fu£_igë
(
sb
, 
öo
);

248 i‡(
	`IS_ERR
(
öode
)) {

249 
	`fu£_ª∂y_îr
(
ªq
, -
	`PTR_ERR
(
öode
));

253 
°©
 
°buf
;

254 
	`tux3fu£_fûl_°©
(&
°buf
, 
öode
);

256 
	`ùut
(
öode
);

257 
	`fu£_ª∂y_©å
(
ªq
, &
°buf
, 0.0);

258 
	}
}

260 
	$tux3fu£_£èâr
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
°©
 *
©å
,

261 
to_£t
, 
fu£_fûe_öfo
 *
fi
)

263 if(
DEBUG_MODE_U
==1)

265 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

267 
	`åa˚
("(%lx)", 
öo
);

268 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

269 
öode
 *inode;

271 
öode
 = 
	`tux3fu£_igë
(
sb
, 
öo
);

272 i‡(
	`IS_ERR
(
öode
)) {

273 
	`fu£_ª∂y_îr
(
ªq
, -
	`PTR_ERR
(
öode
));

277 
	`ch™ge_begö
(
sb
);

279 
	`tux3_üârdúty
(
öode
);

281 i‡(
to_£t
 & 
FUSE_SET_ATTR_SIZE
)

282 
	`__tuxåunˇã
(
öode
, 
©å
->
°_size
);

283 i‡(
to_£t
 & 
FUSE_SET_ATTR_MODE
)

284 
öode
->
i_mode
 = 
©å
->
°_mode
;

285 i‡(
to_£t
 & 
FUSE_SET_ATTR_UID
)

286 
	`i_uid_wrôe
(
öode
, 
©å
->
°_uid
);

287 i‡(
to_£t
 & 
FUSE_SET_ATTR_GID
)

288 
	`i_gid_wrôe
(
öode
, 
©å
->
°_gid
);

289 i‡(
to_£t
 & 
FUSE_SET_ATTR_ATIME
)

290 
öode
->
i_©ime
 = 
©å
->
°_©im
;

291 i‡(
to_£t
 & 
FUSE_SET_ATTR_MTIME
)

292 
öode
->
i_mtime
 = 
©å
->
°_mtim
;

293 i‡(
to_£t
)

294 
	`tux3_m¨k_öode_dúty
(
öode
);

295 
	`ch™ge_íd
(
sb
);

297 
°©
 
°buf
;

298 
	`tux3fu£_fûl_°©
(&
°buf
, 
öode
);

300 
	`ùut
(
öode
);

302 
	`fu£_ª∂y_©å
(
ªq
, &
°buf
, 0.0);

303 
	}
}

305 
	$tux3fu£_ªadlök
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
)

307 if(
DEBUG_MODE_U
==1)

309 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

311 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

312 
öode
 *inode;

313 
îr
;

315 
	`åa˚
("(%lx)", 
öo
);

317 
öode
 = 
	`tux3fu£_igë
(
sb
, 
öo
);

318 i‡(
	`IS_ERR
(
öode
)) {

319 
îr
 = 
	`PTR_ERR
(
öode
);

320 
îr‹
;

323 
îr
 = -
ENOMEM
;

324 *
buf
 = 
	`mÆloc
(
öode
->
i_size
);

325 i‡(
buf
) {

326 
îr
 = 
	`∑ge_ªadlök
(
öode
, 
buf
, inode->
i_size
);

327 i‡(!
îr
) {

328 
buf
[
öode
->
i_size
 - 1] = '\0';

329 
	`fu£_ª∂y_ªadlök
(
ªq
, 
buf
);

331 
	`‰ì
(
buf
);

333 
	`ùut
(
öode
);

334 
îr‹
:

335 i‡(
îr
)

336 
	`fu£_ª∂y_îr
(
ªq
, -
îr
);

337 
	}
}

339 
öode
 *
	$__tux3fu£_mknod
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
,

340 c⁄° *
«me
, 
mode_t
 
mode
, 
dev_t
 
rdev
)

342 if(
DEBUG_MODE_U
==1)

344 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

346 c⁄° 
fu£_˘x
 *
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

347 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

348 
tux_üâr
 
üâr
 = {

349 .
uid
 = 
	`make_kuid
(&
öô_u£r_ns
, 
˘x
->uid),

350 .
gid
 = 
	`make_kgid
(&
öô_u£r_ns
, 
˘x
->gid),

351 .
mode
 = mode,

353 
öode
 *
dú
, *inode;

355 
dú
 = 
	`tux3fu£_igë
(
sb
, 
∑ª¡
);

356 i‡(
	`IS_ERR
(
dú
))

357  
dú
;

359 
öode
 = 
	`__tuxmknod
(
dú
, 
«me
, 
	`°æí
“ame), &
üâr
, 
rdev
);

360 
	`ùut
(
dú
);

361  
öode
;

362 
	}
}

364 
	$tux3fu£_mknod
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
,

365 
mode_t
 
mode
, 
dev_t
 
rdev
)

367 if(
DEBUG_MODE_U
==1)

369 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

371 c⁄° 
fu£_˘x
 *
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

372 
öode
 *inode;

374 
	`åa˚
("(%lx, '%s', uid = %u, gid = %u, mode = %o,Ñdev %llx)",

375 
∑ª¡
, 
«me
, 
˘x
->
uid
, ctx->
gid
, 
mode
, (
u64
)
rdev
);

377 
öode
 = 
	`__tux3fu£_mknod
(
ªq
, 
∑ª¡
, 
«me
, 
mode
, 
rdev
);

378 i‡(
	`IS_ERR
(
öode
)) {

379 
	`fu£_ª∂y_îr
(
ªq
, -
	`PTR_ERR
(
öode
));

383 
fu£_íåy_∑øm
 
ï
;

384 
	`tux3fu£_fûl_ï
(&
ï
, 
öode
);

385 
	`ùut
(
öode
);

387 
	`fu£_ª∂y_íåy
(
ªq
, &
ï
);

388 
	}
}

390 
	$tux3fu£_mkdú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
,

391 
mode_t
 
mode
)

393 if(
DEBUG_MODE_U
==1)

395 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

397 c⁄° 
fu£_˘x
 *
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

398 
öode
 *inode;

400 
	`åa˚
("(%lx, '%s', uid = %u, gid = %u, mode = %o)",

401 
∑ª¡
, 
«me
, 
˘x
->
uid
, ctx->
gid
, 
mode
);

403 
öode
 = 
	`__tux3fu£_mknod
(
ªq
, 
∑ª¡
, 
«me
, 
S_IFDIR
 | 
mode
, 0);

404 i‡(
	`IS_ERR
(
öode
)) {

405 
	`fu£_ª∂y_îr
(
ªq
, -
	`PTR_ERR
(
öode
));

409 
fu£_íåy_∑øm
 
ï
;

410 
	`tux3fu£_fûl_ï
(&
ï
, 
öode
);

411 
	`ùut
(
öode
);

413 
	`fu£_ª∂y_íåy
(
ªq
, &
ï
);

414 
	}
}

416 
	$tux3fu£_lök
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
,

417 
fu£_öo_t
 
√w∑ª¡
, c⁄° *
√w«me
)

419 if(
DEBUG_MODE_U
==1)

421 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

423 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

424 
öode
 *
§c_öode
, *
dú
, *inode;

425 
îr
;

427 
	`åa˚
("(%lx, %lx, '%s')", 
öo
, 
√w∑ª¡
, 
√w«me
);

429 
§c_öode
 = 
	`tux3fu£_igë
(
sb
, 
öo
);

430 i‡(
	`IS_ERR
(
§c_öode
)) {

431 
îr
 = -
	`PTR_ERR
(
§c_öode
);

432 
îr‹
;

435 
dú
 = 
	`tux3fu£_igë
(
sb
, 
√w∑ª¡
);

436 i‡(
	`IS_ERR
(
dú
)) {

437 
îr
 = -
	`PTR_ERR
(
dú
);

438 
îr‹_öode
;

441 
öode
 = 
	`__tuxlök
(
§c_öode
, 
dú
, 
√w«me
, 
	`°æí
(newname));

442 
îr
 = -
	`PTR_ERR
(
öode
);

443 i‡(!
	`IS_ERR
(
öode
)) {

444 
fu£_íåy_∑øm
 
ï
;

445 
	`tux3fu£_fûl_ï
(&
ï
, 
öode
);

446 
	`ùut
(
öode
);

448 
	`fu£_ª∂y_íåy
(
ªq
, &
ï
);

449 
îr
 = 0;

452 
	`ùut
(
dú
);

453 
îr‹_öode
:

454 
	`ùut
(
§c_öode
);

455 
îr‹
:

456 i‡(
îr
)

457 
	`fu£_ª∂y_îr
(
ªq
, -
îr
);

458 
	}
}

460 
	$tux3fu£_symlök
(
fu£_ªq_t
 
ªq
, c⁄° *
lök
,

461 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
)

463 if(
DEBUG_MODE_U
==1)

465 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

467 c⁄° 
fu£_˘x
 *
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

468 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

469 
tux_üâr
 
üâr
 = {

470 .
uid
 = 
	`make_kuid
(&
öô_u£r_ns
, 
˘x
->uid),

471 .
gid
 = 
	`make_kgid
(&
öô_u£r_ns
, 
˘x
->gid),

473 
öode
 *
dú
, *inode;

474 
îr
;

476 
	`åa˚
("('%s', %lx, '%s')", 
lök
, 
∑ª¡
, 
«me
);

478 
dú
 = 
	`tux3fu£_igë
(
sb
, 
∑ª¡
);

479 i‡(
	`IS_ERR
(
dú
)) {

480 
îr
 = -
	`PTR_ERR
(
dú
);

481 
îr‹
;

484 
öode
 = 
	`__tuxsymlök
(
dú
, 
«me
, 
	`°æí
“ame), &
üâr
, 
lök
);

485 
îr
 = 
	`PTR_ERR
(
öode
);

486 i‡(!
	`IS_ERR
(
öode
)) {

487 
fu£_íåy_∑øm
 
ï
;

488 
	`tux3fu£_fûl_ï
(&
ï
, 
öode
);

489 
	`ùut
(
öode
);

491 
	`fu£_ª∂y_íåy
(
ªq
, &
ï
);

492 
îr
 = 0;

494 
	`ùut
(
dú
);

495 
îr‹
:

496 i‡(
îr
)

497 
	`fu£_ª∂y_îr
(
ªq
, -
îr
);

498 
	}
}

500 
	$tux3fu£_u∆ök
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
)

502 if(
DEBUG_MODE_U
==1)

504 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

506 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

507 
öode
 *
dú
;

508 
îr
;

510 
	`åa˚
("(%lx, '%s')", 
∑ª¡
, 
«me
);

512 
dú
 = 
	`tux3fu£_igë
(
sb
, 
∑ª¡
);

513 
îr
 = 
	`PTR_ERR
(
dú
);

514 i‡(!
	`IS_ERR
(
dú
)) {

515 
îr
 = 
	`tuxu∆ök
(
dú
, 
«me
, 
	`°æí
(name));

516 
	`ùut
(
dú
);

518 i‡(
îr
)

519 
	`tux3_w¨n
(
sb
, "Eek! %s", 
	`°ªº‹
(-
îr
));

521 
	`fu£_ª∂y_îr
(
ªq
, -
îr
);

522 
	}
}

524 
	$tux3fu£_rmdú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
)

526 if(
DEBUG_MODE_U
==1)

528 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

530 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

531 
öode
 *
dú
;

532 
îr
;

534 
	`åa˚
("(%lx, '%s')", 
∑ª¡
, 
«me
);

536 
dú
 = 
	`tux3fu£_igë
(
sb
, 
∑ª¡
);

537 
îr
 = 
	`PTR_ERR
(
dú
);

538 i‡(!
	`IS_ERR
(
dú
)) {

539 
îr
 = 
	`tuxrmdú
(
dú
, 
«me
, 
	`°æí
(name));

540 
	`ùut
(
dú
);

542 i‡(
îr
)

543 
	`tux3_w¨n
(
sb
, "Eek! %s", 
	`°ªº‹
(-
îr
));

545 
	`fu£_ª∂y_îr
(
ªq
, -
îr
);

546 
	}
}

548 
	$tux3fu£_ª«me
(
fu£_ªq_t
 
ªq
,

549 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
,

550 
fu£_öo_t
 
√w∑ª¡
, c⁄° *
√w«me
)

552 if(
DEBUG_MODE_U
==1)

554 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

556 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

557 
öode
 *
ﬁddú
, *
√wdú
;

558 
îr
;

560 
	`åa˚
("(%lx, '%s', %lx, '%s')", 
∑ª¡
, 
«me
, 
√w∑ª¡
, 
√w«me
);

562 
ﬁddú
 = 
	`tux3fu£_igë
(
sb
, 
∑ª¡
);

563 i‡(
	`IS_ERR
(
ﬁddú
)) {

564 
îr
 = 
	`PTR_ERR
(
ﬁddú
);

565 
îr‹
;

567 
√wdú
 = 
	`tux3fu£_igë
(
sb
, 
∑ª¡
);

568 i‡(
	`IS_ERR
(
√wdú
)) {

569 
îr
 = 
	`PTR_ERR
(
√wdú
);

570 
îr‹_ﬁd
;

573 
îr
 = 
	`tuxª«me
(
ﬁddú
, 
«me
, 
	`°æí
“ame), 
√wdú
, 
√w«me
,

574 
	`°æí
(
√w«me
));

576 
	`ùut
(
√wdú
);

577 
îr‹_ﬁd
:

578 
	`ùut
(
ﬁddú
);

579 
îr‹
:

580 
	`fu£_ª∂y_îr
(
ªq
, -
îr
);

581 
	}
}

583 
	$tux3fu£_¸óã
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
∑ª¡
, c⁄° *
«me
,

584 
mode_t
 
mode
, 
fu£_fûe_öfo
 *
fi
)

586 if(
DEBUG_MODE_U
==1)

588 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

590 c⁄° 
fu£_˘x
 *
˘x
 = 
	`fu£_ªq_˘x
(
ªq
);

591 
öode
 *inode;

593 
	`åa˚
("(%lx, '%s', uid = %u, gid = %u, mode = %o)",

594 
∑ª¡
, 
«me
, 
˘x
->
uid
, ctx->
gid
, 
mode
);

596 
öode
 = 
	`__tux3fu£_mknod
(
ªq
, 
∑ª¡
, 
«me
, 
mode
, 0);

597 i‡(
	`IS_ERR
(
öode
)) {

598 
	`fu£_ª∂y_îr
(
ªq
, -
	`PTR_ERR
(
öode
));

602 
fu£_íåy_∑øm
 
ï
;

603 
	`tux3fu£_fûl_ï
(&
ï
, 
öode
);

605 
fi
->
fh
 = (
uöt64_t
)()
öode
;

606 
	`fu£_ª∂y_¸óã
(
ªq
, &
ï
, 
fi
);

607 
	}
}

609 
	$tux3fu£_›í
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
,

610 
fu£_fûe_öfo
 *
fi
)

612 if(
DEBUG_MODE_U
==1)

614 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

616 
	`åa˚
("(%lx)", 
öo
);

617 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

618 
öode
 *inode;

620 
öode
 = 
	`tux3fu£_igë
(
sb
, 
öo
);

621 i‡(
	`IS_ERR
(
öode
)) {

622 
	`fu£_ª∂y_îr
(
ªq
, -
	`PTR_ERR
(
öode
));

626 
fi
->
fh
 = (
uöt64_t
)()
öode
;

627 
	`fu£_ª∂y_›í
(
ªq
, 
fi
);

628 
	}
}

630 
	$tux3fu£_Êush
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
,

631 
fu£_fûe_öfo
 *
fi
)

633 if(
DEBUG_MODE_U
==1)

635 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

637 
	`fu£_ª∂y_îr
(
ªq
, 0);

638 
	}
}

640 
	$tux3fu£_ªÀa£
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
,

641 
fu£_fûe_öfo
 *
fi
)

643 if(
DEBUG_MODE_U
==1)

645 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

647 
	`åa˚
("(%lx)", 
öo
);

648 
öode
 *öodê(öodê*)()
fi
->
fh
;

649 
	`ùut
(
öode
);

650 
	`fu£_ª∂y_îr
(
ªq
, 0);

651 
	}
}

654 
	$tux3fu£_ªad
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
size_t
 
size
,

655 
off_t
 
off£t
, 
fu£_fûe_öfo
 *
fi
)

657 if(
DEBUG_MODE_U
==1)

659 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

661 
	`åa˚
("(%lx)", 
öo
);

662 
öode
 *öodê(öodê*)()
fi
->
fh
;

663 
fûe
 *fûê&(fûe){ .
f_öode
 = 
öode
, };

664 
îr
;

667 
	`åa˚
("u£r•a˚Årõ†tÿ£ekÅÿ%Li\n", (
s64
)
off£t
);

668 
	`¥ötf
("SIZEOFFILE %u\n",()
size
);

669 i‡(
off£t
 >
öode
->
i_size
) {

670 
	`fu£_ª∂y_buf
(
ªq
, 
NULL
, 0);

674 i‡(
off£t
 + 
size
 > 
öode
->
i_size
)

675 
size
 = 
öode
->
i_size
 - 
off£t
;

677 
	`tux£ek
(
fûe
, 
off£t
);

679 *
buf
 = 
	`mÆloc
(
	`is_com¥es£d_fûe
(
öode
)?((((
size
/
PAGE_SIZE_1
)/
COMPRESSION_STRIDE_LEN
)+1)*PAGE_SIZE_1*COMPRESSION_STRIDE_LEN):size);

680 i‡(!
buf
) {

681 
	`fu£_ª∂y_îr
(
ªq
, 
ENOMEM
);

685 
ªad
 = 
	`tuxªad
(
fûe
, 
buf
, 
size
);

686 i‡(
ªad
 < 0) {

687 
îr
 = 
ªad
;

688 
îr‹
;

690 
	`as£π
(
ªad
 <
size
);

691 
	`fu£_ª∂y_buf
(
ªq
, 
buf
, 
ªad
);

692 
	`‰ì
(
buf
);

695 
îr‹
:

696 
	`åa˚
("Eek! %s", 
	`°ªº‹
(-
îr
));

697 
	`fu£_ª∂y_îr
(
ªq
, -
îr
);

698 
	`‰ì
(
buf
);

699 
	}
}

701 
	$tux3fu£_wrôe
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, c⁄° *
buf
,

702 
size_t
 
size
, 
off_t
 
off£t
, 
fu£_fûe_öfo
 *
fi
)

704 if(
DEBUG_MODE_U
==1)

706 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

708 
	`åa˚
("(%lx)", 
öo
);

709 
öode
 *öodê(öodê*)()
fi
->
fh
;

710 
fûe
 *fûê&(fûe){ .
f_öode
 = 
öode
 };

713 
	`tux£ek
(
fûe
, 
off£t
);

715 
wrôãn
 = 
	`tuxwrôe
(
fûe
, 
buf
, 
size
);

716 i‡(
wrôãn
 < 0) {

717 
	`tux3_w¨n
(
	`tux_sb
(
öode
->
i_sb
), "Eek! %s", 
	`°ªº‹
(-
wrôãn
));

718 
	`fu£_ª∂y_îr
(
ªq
, -
wrôãn
);

722 
	`fu£_ª∂y_wrôe
(
ªq
, 
wrôãn
);

723 
	}
}

725 
	$tux3fu£_›ídú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
,

726 
fu£_fûe_öfo
 *
fi
)

728 if(
DEBUG_MODE_U
==1)

730 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

732 
	`åa˚
("(%lx)", 
öo
);

733 
	`tux3fu£_›í
(
ªq
, 
öo
, 
fi
);

734 
	}
}

736 
	$tux3fu£_ªÀa£dú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
,

737 
fu£_fûe_öfo
 *
fi
)

739 if(
DEBUG_MODE_U
==1)

741 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

743 
	`åa˚
("(%lx)", 
öo
);

744 
	`tux3fu£_ªÀa£
(
ªq
, 
öo
, 
fi
);

745 
	}
}

747 
	sfûl°©e
 { *
	mdúít
; 
	md⁄e
; 
u64
 
	möo
; 
	mty≥
; };

749 
	$tux3fu£_fûÀr
(*
öfo
, c⁄° *
«me
, 
«mñí
,

750 
loff_t
 
off£t
, 
u64
 
öo
, 
ty≥
)

752 if(
DEBUG_MODE_U
==1)

754 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

756 
fûl°©e
 *
°©e
 = 
öfo
;

757 i‡(
°©e
->
d⁄e
 || 
«mñí
 > 
TUX_NAME_LEN
)

758  -
EINVAL
;

759 
	`åa˚
("'%.*s'\n", 
«mñí
, 
«me
);

760 
	`mem˝y
(
°©e
->
dúít
, 
«me
, 
«mñí
);

761 
°©e
->
dúít
[
«mñí
] = 0;

762 
°©e
->
öo
 = ino;

763 
°©e
->
ty≥
 =Åype;

764 
°©e
->
d⁄e
 = 1;

766 
	}
}

769 
	$tux3fu£_ªaddú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
size_t
 
size
,

770 
off_t
 
off£t
, 
fu£_fûe_öfo
 *
fi
)

772 if(
DEBUG_MODE_U
==1)

774 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

776 
	`åa˚
("(%lx)", 
öo
);

777 
öode
 *öodê(öodê*)()
fi
->
fh
;

778 
fûe
 *
dúfûe
 = &(fûe){ .
f_öode
 = 
öode
, .
f_pos
 = 
off£t
 };

779 
dúít
[
TUX_NAME_LEN
 + 1];

780 *
buf
 = 
	`mÆloc
(
size
);

781 i‡(!
buf
) {

782 
	`fu£_ª∂y_îr
(
ªq
, 
ENOMEM
);

786 
dúfûe
->
f_pos
 < dúfûe->
f_öode
->
i_size
) {

787 
fûl°©e
 
f°©e
 = { .
dúít
 = dirent };

788 
îr
;

790 
îr
 = 
	`tux_ªaddú
(
dúfûe
, &
f°©e
, 
tux3fu£_fûÀr
);

791 i‡(
îr
) {

792 
	`fu£_ª∂y_îr
(
ªq
, -
îr
);

793 
	`‰ì
(
buf
);

796 
°©
 
°buf
 = {

797 .
°_öo
 = 
f°©e
.
öo
,

798 .
°_mode
 = 
f°©e
.
ty≥
,

800 
size_t
 
Àn
 = 
	`fu£_add_dúíåy
(
ªq
, 
buf
, 
size
, 
dúít
, &
°buf
,

801 
dúfûe
->
f_pos
);

802 
	`fu£_ª∂y_buf
(
ªq
, 
buf
, 
Àn
);

803 
	`‰ì
(
buf
);

807 
	`fu£_ª∂y_buf
(
ªq
, 
NULL
, 0);

808 
	`‰ì
(
buf
);

809 
	}
}

811 
	$tux3fu£_°©fs
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
)

813 if(
DEBUG_MODE_U
==1)

815 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

817 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

818 
°©vfs
 statvfs = {

819 .
f_bsize
 = 
sb
->
blocksize
,

820 .
f_‰size
 = 
sb
->
blocksize
,

821 .
f_blocks
 = 
sb
->
vﬁblocks
,

822 .
f_b‰ì
 = 
sb
->
‰ìblocks
,

823 .
f_bavaû
 = 
sb
->
‰ìblocks
,

824 .
f_fûes
 = 
MAX_INODES
,

825 .
f_f‰ì
 = 
sb
->
‰ìöodes
,

826 .
f_Ávaû
 = 
sb
->
‰ìöodes
,

829 .
f_«memax
 = 
TUX_NAME_LEN
,

832 
	`fu£_ª∂y_°©fs
(
ªq
, &
°©vfs
);

833 
	}
}

835 
	$tux3fu£_ac˚ss
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
mask
)

838 if(
DEBUG_MODE_U
==1)

840 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

842 
	`fu£_ª∂y_îr
(
ªq
, 0);

843 
	}
}

845 
	$tux3fu£_fsyncdú
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
,

846 
d©async
, 
fu£_fûe_öfo
 *
fi
)

848 if(
DEBUG_MODE_U
==1)

850 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

852 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

854 
	`sync_su≥r
(
sb
);

855 
	`fu£_ª∂y_îr
(
ªq
, 0);

856 
	}
}

858 
	$tux3fu£_fsync
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
d©async
,

859 
fu£_fûe_öfo
 *
fi
)

861 if(
DEBUG_MODE_U
==1)

863 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

865 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

867 
	`sync_su≥r
(
sb
);

868 
	`fu£_ª∂y_îr
(
ªq
, 0);

869 
	}
}

876 
	$x©å_¥efix_check
(c⁄° *
«me
)

878 if(
DEBUG_MODE_U
==1)

880 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

882 i‡(!
	`°∫cmp
(
«me
, 
XATTR_TRUSTED_PREFIX
, 
XATTR_TRUSTED_PREFIX_LEN
)) {

883 i‡(
	`°æí
(
«me
Ë<
XATTR_TRUSTED_PREFIX_LEN
)

884  -
EINVAL
;

887 i‡(!
	`°∫cmp
(
«me
, 
XATTR_USER_PREFIX
, 
XATTR_USER_PREFIX_LEN
)) {

888 i‡(
	`°æí
(
«me
Ë<
XATTR_USER_PREFIX_LEN
)

889  -
EINVAL
;

892  -
EOPNOTSUPP
;

893 
	}
}

895 
	$tux3fu£_£tx©å
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, c⁄° *
«me
,

896 c⁄° *
vÆue
, 
size_t
 
size
, 
Êags
)

898 if(
DEBUG_MODE_U
==1)

900 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

902 
	`åa˚
("(%lx, '%s'='%s')", 
öo
, 
«me
, 
vÆue
);

903 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

904 
öode
 *inode;

905 
îr
;

907 
îr
 = 
	`x©å_¥efix_check
(
«me
);

908 i‡(
îr
) {

909 
	`fu£_ª∂y_îr
(
ªq
, -
îr
);

913 
öode
 = 
	`tux3fu£_igë
(
sb
, 
öo
);

914 i‡(
	`IS_ERR
(
öode
)) {

915 
	`fu£_ª∂y_îr
(
ªq
, -
	`PTR_ERR
(
öode
));

919 
îr
 = 
	`£t_x©å
(
öode
, 
«me
, 
	`°æí
“ame), 
vÆue
, 
size
, 
Êags
);

920 
	`ùut
(
öode
);

922 
	`fu£_ª∂y_îr
(
ªq
, -
îr
);

923 
	}
}

925 
	$tux3fu£_gëx©å
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, c⁄° *
«me
,

926 
size_t
 
maxsize
)

928 if(
DEBUG_MODE_U
==1)

930 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

932 
	`åa˚
("(%lx, '%s')", 
öo
, 
«me
);

933 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

934 
öode
 *inode;

935 
îr
;

937 
îr
 = 
	`x©å_¥efix_check
(
«me
);

938 i‡(
îr
) {

939 
	`fu£_ª∂y_îr
(
ªq
, -
îr
);

943 
öode
 = 
	`tux3fu£_igë
(
sb
, 
öo
);

944 i‡(
	`IS_ERR
(
öode
)) {

945 
	`fu£_ª∂y_îr
(
ªq
, -
	`PTR_ERR
(
öode
));

949 *
d©a
 = 
NULL
;

950 i‡(
maxsize
) {

951 i‡(!(
d©a
 = 
	`mÆloc
(
maxsize
))) {

952 
	`fu£_ª∂y_îr
(
ªq
, 
ENOMEM
);

953 
out
;

956 
size
 = 
	`gë_x©å
(
öode
, 
«me
, 
	`°æí
“ame), 
d©a
, 
maxsize
);

957 i‡(
size
 < 0)

958 
	`fu£_ª∂y_îr
(
ªq
, -
size
);

959 i‡(!
maxsize
)

960 
	`fu£_ª∂y_x©å
(
ªq
, 
size
);

962 
	`fu£_ª∂y_buf
(
ªq
, 
d©a
, 
size
);

964 i‡(
d©a
)

965 
	`‰ì
(
d©a
);

966 
out
:

967 
	`ùut
(
öode
);

968 
	}
}

970 
	$tux3fu£_li°x©å
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
size_t
 
size
)

972 if(
DEBUG_MODE_U
==1)

974 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

976 
	`åa˚
("(%lx, %zu)", 
öo
, 
size
);

977 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

978 
öode
 *inode;

980 
öode
 = 
	`tux3fu£_igë
(
sb
, 
öo
);

981 i‡(
	`IS_ERR
(
öode
)) {

982 
	`fu£_ª∂y_îr
(
ªq
, -
	`PTR_ERR
(
öode
));

986 *
buf
 = 
NULL
;

987 i‡(
size
) {

988 
buf
 = 
	`mÆloc
(
size
);

989 i‡(!
buf
) {

990 
	`fu£_ª∂y_îr
(
ªq
, 
ENOMEM
);

991 
	`ùut
(
öode
);

996 
Àn
 = 
	`li°_x©å
(
öode
, 
buf
, 
size
);

997 
	`åa˚
("li°x©å-buf„r: %s", 
buf
);

998 
	`ùut
(
öode
);

1000 i‡(
Àn
 < 0)

1001 
	`fu£_ª∂y_îr
(
ªq
, -
Àn
);

1003 i‡(
size
)

1004 
	`fu£_ª∂y_buf
(
ªq
, 
buf
, 
Àn
);

1006 
	`fu£_ª∂y_x©å
(
ªq
, 
Àn
);

1009 i‡(
buf
)

1010 
	`‰ì
(
buf
);

1011 
	}
}

1013 
	$tux3fu£_ªmovex©å
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
,

1014 c⁄° *
«me
)

1016 if(
DEBUG_MODE_U
==1)

1018 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1020 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

1021 
öode
 *inode;

1022 
îr
;

1024 
	`åa˚
("(%lx, '%s')", 
öo
, 
«me
);

1026 
îr
 = 
	`x©å_¥efix_check
(
«me
);

1027 i‡(
îr
) {

1028 
	`fu£_ª∂y_îr
(
ªq
, -
îr
);

1032 
öode
 = 
	`tux3fu£_igë
(
sb
, 
öo
);

1033 i‡(
	`IS_ERR
(
öode
)) {

1034 
	`fu£_ª∂y_îr
(
ªq
, -
	`PTR_ERR
(
öode
));

1038 
îr
 = 
	`dñ_x©å
(
öode
, 
«me
, 
	`°æí
(name));

1039 
	`ùut
(
öode
);

1041 
	`fu£_ª∂y_îr
(
ªq
, -
îr
);

1042 
	}
}

1044 #ifde‡
NEED_REMOTE_LOCKS


1046 
	$tux3fu£_gëlk
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
,

1047 
fu£_fûe_öfo
 *
fi
, 
Êock
 *
lock
)

1049 if(
DEBUG_MODE_U
==1)

1051 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1053 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

1054 
	`tux3_w¨n
(
sb
, "not implemented");

1055 
	`fu£_ª∂y_îr
(
ªq
, 
ENOSYS
);

1056 
	}
}

1058 
	$tux3fu£_£ék
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
,

1059 
fu£_fûe_öfo
 *
fi
, 
Êock
 *
lock
,

1060 
¶ìp
)

1062 if(
DEBUG_MODE_U
==1)

1064 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1066 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

1067 
	`tux3_w¨n
(
sb
, "not implemented");

1068 
	`fu£_ª∂y_îr
(
ªq
, 
ENOSYS
);

1069 
	}
}

1073 
	$tux3fu£_bm≠
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
size_t
 
blocksize
,

1074 
uöt64_t
 
idx
)

1076 if(
DEBUG_MODE_U
==1)

1078 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1080 
sb
 *sb = 
	`tux3fu£_gë_sb
(
ªq
);

1081 
	`tux3_w¨n
(
sb
, "not implemented");

1082 
	`fu£_ª∂y_îr
(
ªq
, 
ENOSYS
);

1083 
	}
}

1085 
	$tux3fu£_io˘l
(
fu£_ªq_t
 
ªq
, 
fu£_öo_t
 
öo
, 
cmd
, *
¨g
,

1086 
fu£_fûe_öfo
 *
fi
, 
Êags
,

1087 c⁄° *
ö_buf
, 
size_t
 
ö_bufsz
,

1088 
size_t
 
out_bufsz
)

1090 if(
DEBUG_MODE_U
==1)

1092 
	`¥ötf
("\t\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1094 
	`åa˚
("(%lx, 0x%08x, %p, %p, %x, %p, %zu, %zu)",

1095 
öo
, 
cmd
, 
¨g
, 
fi
, 
Êags
, 
ö_buf
, 
ö_bufsz
, 
out_bufsz
);

1097 
cmd
) {

1098 
FS_IOC_GETFLAGS
:

1099 
FS_IOC_SETFLAGS
:

1100 #i‡
BITS_PER_LONG
 == 64

1101 
FS_IOC32_GETFLAGS
:

1102 
FS_IOC32_SETFLAGS
:

1104 
	`fu£_ª∂y_îr
(
ªq
, 
ENOTTY
);

1108 
	`fu£_ª∂y_îr
(
ªq
, 
ENOTTY
);

1109 
	}
}

1111 
fu£_lowÀvñ_›s
 
	gtux3_›s
 = {

1112 .
öô
 = 
tux3fu£_öô
,

1113 .
	gde°roy
 = 
tux3fu£_de°roy
,

1114 .
	glookup
 = 
tux3fu£_lookup
,

1115 .
	gf‹gë
 = 
tux3fu£_f‹gë
,

1116 .
	ggë©å
 = 
tux3fu£_gë©å
,

1117 .
	g£èâr
 = 
tux3fu£_£èâr
,

1118 .
	gªadlök
 = 
tux3fu£_ªadlök
,

1119 .
	gmknod
 = 
tux3fu£_mknod
,

1120 .
	gmkdú
 = 
tux3fu£_mkdú
,

1121 .
	gu∆ök
 = 
tux3fu£_u∆ök
,

1122 .
	grmdú
 = 
tux3fu£_rmdú
,

1123 .
	gsymlök
 = 
tux3fu£_symlök
,

1124 .
	gª«me
 = 
tux3fu£_ª«me
,

1125 .
	glök
 = 
tux3fu£_lök
,

1126 .
	g›í
 = 
tux3fu£_›í
,

1127 .
	gªad
 = 
tux3fu£_ªad
,

1128 .
	gwrôe
 = 
tux3fu£_wrôe
,

1129 .
	gÊush
 = 
tux3fu£_Êush
,

1130 .
	gªÀa£
 = 
tux3fu£_ªÀa£
,

1131 .
	gfsync
 = 
tux3fu£_fsync
,

1132 .
	g›ídú
 = 
tux3fu£_›ídú
,

1133 .
	gªaddú
 = 
tux3fu£_ªaddú
,

1134 .
	gªÀa£dú
 = 
tux3fu£_ªÀa£dú
,

1135 .
	gfsyncdú
 = 
tux3fu£_fsyncdú
,

1136 .
	g°©fs
 = 
tux3fu£_°©fs
,

1137 .
	g£tx©å
 = 
tux3fu£_£tx©å
,

1138 .
	ggëx©å
 = 
tux3fu£_gëx©å
,

1139 .
	gli°x©å
 = 
tux3fu£_li°x©å
,

1140 .
	gªmovex©å
 = 
tux3fu£_ªmovex©å
,

1141 .
	gac˚ss
 = 
tux3fu£_ac˚ss
,

1142 .
	g¸óã
 = 
tux3fu£_¸óã
,

1143 #ifde‡
NEED_REMOTE_LOCKS


1144 .
	ggëlk
 = 
tux3fu£_gëlk
,

1145 .
	g£ék
 = 
tux3fu£_£ék
,

1147 .
	gbm≠
 = 
tux3fu£_bm≠
,

1148 .
	gio˘l
 = 
tux3fu£_io˘l
,

1154 
	mFUSE_OPT_KEY_TUX3_HELP
,

1157 
fu£_›t
 
	gtux3fu£_›ti⁄s
[] = {

1158 
FUSE_OPT_KEY
("-h", 
FUSE_OPT_KEY_TUX3_HELP
),

1159 
FUSE_OPT_KEY
("--hñp", 
FUSE_OPT_KEY_TUX3_HELP
),

1160 
FUSE_OPT_END


1163 
	$tux3fu£_∑r£_›ti⁄s
(*
d©a
, c⁄° *
¨g
,

1164 
key
, 
fu£_¨gs
 *
ouèrgs
)

1166 if(
DEBUG_MODE_U
==1)

1168 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1170 
tux3fu£
 *tux3fu£ = 
d©a
;

1176 i‡(
key
 =
FUSE_OPT_KEY_NONOPT
) {

1177 i‡(!
tux3fu£
->
vﬁ«me
) {

1178 
tux3fu£
->
vﬁ«me
 = 
	`ˇn⁄iˇlize_fûe_«me
(
¨g
);

1179 i‡(!
tux3fu£
->
vﬁ«me
) {

1180 
	`Ârötf
(
°dîr
, "VolumeÇot found: %s: %s\n",

1181 
¨g
, 
	`°ªº‹
(
î∫o
));

1186 } i‡(
key
 =
FUSE_OPT_KEY_TUX3_HELP
) {

1187 
	`Ârötf
(
°dîr
,

1194 "\n", 
ouèrgs
->
¨gv
[0]);

1195  
	`fu£_›t_add_¨g
(
ouèrgs
, "-ho");

1200 
	}
}

1202 
	$maö
(
¨gc
, *
¨gv
[])

1204 if(
DEBUG_MODE_U
==1)

1206 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1208 
fu£_¨gs
 
¨gs
 = 
	`FUSE_ARGS_INIT
(
¨gc
, 
¨gv
);

1209 
fu£_ch™
 *
fc
;

1210 
fu£_£ssi⁄
 *
fs
;

1211 *
mou¡poöt
;

1212 
f‹eground
;

1213 
îr
 = -1;

1215 
tux3fu£
Åux3fuse = {};

1217 i‡(
¨gc
 < 3) {

1219 
fu£_¨gs
 
ußge_¨gs
 = 
	`FUSE_ARGS_INIT
(0, 
NULL
);

1220 i‡(
	`fu£_›t_add_¨g
(&
ußge_¨gs
, 
¨gv
[0]) == -1 ||

1221 
	`fu£_›t_add_¨g
(&
ußge_¨gs
, "-h") == -1)

1222 
îr‹
;

1224 
¨gs
 = 
ußge_¨gs
;

1227 i‡(
	`fu£_›t_∑r£
(&
¨gs
, &
tux3fu£
, 
tux3fu£_›ti⁄s
,

1228 
tux3fu£_∑r£_›ti⁄s
) == -1)

1229 
îr‹
;

1231 i‡(
	`fu£_∑r£_cmdlöe
(&
¨gs
, &
mou¡poöt
, 
NULL
, &
f‹eground
) == -1)

1232 
îr‹
;

1234 
fc
 = 
	`fu£_mou¡
(
mou¡poöt
, &
¨gs
);

1235 i‡(!
fc
)

1236 
îr‹
;

1238 
fs
 = 
	`fu£_lowÀvñ_√w
(&
¨gs
, &
tux3_›s
, —ux3_›s), &
tux3fu£
);

1239 i‡(
fs
) {

1240 i‡(
	`fu£_£t_sig«l_h™dÀrs
(
fs
) != -1) {

1241 
	`fu£_£ssi⁄_add_ch™
(
fs
, 
fc
);

1243 i‡(!
f‹eground
)

1244 
	`¥ötf
("Running in background\n");

1245 
	`fu£_d´m⁄ize
(
f‹eground
);

1247 
îr
 = 
	`fu£_£ssi⁄_lo›
(
fs
);

1249 
	`fu£_ªmove_sig«l_h™dÀrs
(
fs
);

1250 
	`fu£_£ssi⁄_ªmove_ch™
(
fc
);

1252 
	`fu£_£ssi⁄_de°roy
(
fs
);

1255 
	`fu£_unmou¡
(
mou¡poöt
, 
fc
);

1257 
îr‹
:

1258 
	`fu£_›t_‰ì_¨gs
(&
¨gs
);

1259 i‡(
tux3fu£
.
vﬁ«me
)

1260 
	`‰ì
(
tux3fu£
.
vﬁ«me
);

1262  
îr
 ? 1 : 0;

1263 
	}
}

	@tux3graph.c

13 
	~"tux3u£r.h
"

14 
	~<gë›t.h
>

16 
	~"wÆk.c
"

19 
	#TABLE_STYLE
 \

20 "b‹dî=\"0\" cñlb‹dî=\"1\" cñÕaddög=\"5\" cñl•acög=\"0\""

	)

22 
	g›t_vîbo£
;

23 
	g›t_°©s
;

25 
	#DRAWN_DTREE
 (1 << 0)

	)

26 
	#DRAWN_DLEAF
 (1 << 1)

	)

27 
	#DRAWN_ILEAF
 (1 << 2)

	)

28 
	#DRAWN_OLEAF
 (1 << 3)

	)

29 
	gdøwn
;

30 
LIST_HEAD
(
tmpfûe_hód
);

32 
	s°©s_£ek
 {

33 
block_t
 
	mblocks
;

34 
block_t
 
	mƒ
;

35 
block_t
 
	mio
;

38 
	s°©s_båì_block
 {

39 
block_t
 
	mblocks
;

40 
block_t
 
	mem±y
;

41 
block_t
 
	mbyãs
;

44 
	s°©s_båì_d©a
 {

45 
block_t
 
	mblocks
;

46 
block_t
 
	mƒ
;

47 
	mmax
;

48 
	mmö
;

49 
block_t
 
	mœ°
;

50 
°©s_£ek
 
	md©a_£ek
;

51 
°©s_£ek
 
	mdú_£ek
;

54 
	s°©s_båì_Àvñ
 {

55 
°©s_båì_block
 
	mblock
;

56 
°©s_£ek
 
	mchûd_£ek
;

59 
	s°©s_båì
 {

60 
°©s_£ek
 
	mdïth_£ek
;

61 
°©s_båì_d©a
 
	md©a
;

62 
	mdïth
;

63 
°©s_båì_Àvñ
 
	mÀvñs
[];

66 
	s°©s_fs
 {

67 
°©s_båì
 *
	mown
;

68 
°©s_båì
 *
	mdåì_sum
;

70 
block_t
 
	mlogblock
;

71 
block_t
 
	mlogblock_byãs
;

72 
°©s_£ek
 
	mlogblock_£ek
;

75 
	$≥r˚¡age
(
u64
 
numî©‹
, u64 
díomö©‹
)

77 if(
DEBUG_MODE_U
==1)

79 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

81 i‡(!
díomö©‹
)

83  (()
numî©‹
 / 
díomö©‹
) * 100;

84 
	}
}

86 
u64
 
	$avîage
(
u64
 
tŸÆ
, u64 
ƒ
)

88 if(
DEBUG_MODE_U
==1)

90 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

92 i‡(!
ƒ
)

94  
tŸÆ
 / 
ƒ
;

95 
	}
}

97 
°©s_båì
 *
	$Æloc_°©s_båì
(
dïth
)

99 if(
DEBUG_MODE_U
==1)

101 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

103 
size_t
 
size
 = (
°©s_båì
)

104 + (
dïth
 + 1Ë* (
°©s_båì_Àvñ
);

105 
°©s_båì
 *
own
;

107 
own
 = 
	`mÆloc
(
size
);

108 i‡(!
own
)

109 
	`°ªº‹_exô
(1, 
ENOMEM
, "malloc");

111 
	`mem£t
(
own
, 0, 
size
);

112 
own
->
dïth
 = depth;

113 
own
->
d©a
.
mö
 = 
UINT_MAX
;

115  
own
;

116 
	}
}

118 
	$‰ì_°©s_båì
(
°©s_båì
 *
°©s
)

120 if(
DEBUG_MODE_U
==1)

122 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

124 i‡(
°©s
)

125 
	`‰ì
(
°©s
);

126 
	}
}

128 
°©s_fs
 
	$öô_°©s_fs
(
båì
 *btree)

130 if(
DEBUG_MODE_U
==1)

132 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

134 
dïth
 = 
båì
->
roŸ
.depth;

136 i‡(!
›t_°©s
)

137  (
°©s_fs
){};

138  (
°©s_fs
){ .
own
 = 
	`Æloc_°©s_båì
(
dïth
), };

139 
	}
}

141 
	$de°roy_°©s_fs
(
°©s_fs
 *
°©s
)

143 if(
DEBUG_MODE_U
==1)

145 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

147 
	`‰ì_°©s_båì
(
°©s
->
own
);

148 
	`‰ì_°©s_båì
(
°©s
->
dåì_sum
);

149 
	}
}

151 
block_t
 
	$°©s_suµo£_£ek
(
block_t
 
physiˇl
, 
cou¡
)

153 if(
DEBUG_MODE_U
==1)

155 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

157 
block_t
 
œ°
;

158 
block_t
 
Àn
 = 
	`Œabs
(
œ°
 - 
physiˇl
);

160 
	`åa˚
("dïth-fú° sìk: %Lu => %Lu, sìk %Lu", 
œ°
, 
physiˇl
, 
Àn
);

161 
œ°
 = 
physiˇl
 + 
cou¡
;

163  
Àn
;

164 
	}
}

166 
	$°©s_£ek_add
(
°©s_£ek
 *
°©s
, 
block_t
 
£ek_Àn
)

168 if(
DEBUG_MODE_U
==1)

170 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

172 
°©s
->
blocks
 +
£ek_Àn
;

173 
°©s
->
ƒ
 +!!
£ek_Àn
;

174 
°©s
->
io
++;

175 
	}
}

177 
	$°©s_d©a_£ek_add
(
°©s_båì
 *
°©s
, 
block_t
 
block
,

178 
cou¡
)

180 if(
DEBUG_MODE_U
==1)

182 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

184 
block_t
 
£ek
 = 
	`Œabs
(
block
 - (
°©s
->
d©a
.
œ°
 ? : block));

185 
	`°©s_£ek_add
(&
°©s
->
d©a
.
d©a_£ek
, 
£ek
);

186 
°©s
->
d©a
.
œ°
 = 
block
 + 
cou¡
;

187 
	}
}

189 
	$°©s_dú_£ek_add
(
°©s_båì
 *
°©s
, 
block_t
 
dú
,

190 
block_t
 
ûóf
)

192 if(
DEBUG_MODE_U
==1)

194 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

196 
block_t
 
œ°_ûóf
;

197 
block_t
 
£ek
 = 
	`Œabs
(
ûóf
 - 
dú
);

199 
	`åa˚
("dir => ileaf seek: %Lu => %Lu, seek %Lu,Üast %Lu",

200 
dú
, 
ûóf
, 
£ek
, 
œ°_ûóf
);

201 i‡(
œ°_ûóf
 !
ûóf
) {

202 
	`°©s_£ek_add
(&
°©s
->
d©a
.
dú_£ek
, 
£ek
);

203 
œ°_ûóf
 = 
ûóf
;

205 
	}
}

207 
	$°©s_chûd_£ek_add
(
°©s_båì
 *
°©s
, 
Àvñ
,

208 
block_t
 
cur
, block_à
chûd
)

210 if(
DEBUG_MODE_U
==1)

212 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

214 
block_t
 
£ek
 = 
	`Œabs
(
chûd
 - (
cur
 + 1));

215 
	`°©s_£ek_add
(&
°©s
->
Àvñs
[
Àvñ
].
chûd_£ek
, 
£ek
);

216 
	}
}

218 
	$°©s_block_add
(
°©s_båì
 *
°©s
, 
Àvñ
,

219 
block_t
 
block
, 
byãs
, 
em±y
)

221 if(
DEBUG_MODE_U
==1)

223 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

225 
block_t
 
£ek
 = 
	`°©s_suµo£_£ek
(
block
, 1);

227 
°©s
->
Àvñs
[
Àvñ
].
block
.
blocks
++;

228 
°©s
->
Àvñs
[
Àvñ
].
block
.
em±y
 +=Émpty;

229 
°©s
->
Àvñs
[
Àvñ
].
block
.
byãs
 += bytes;

231 
	`°©s_£ek_add
(&
°©s
->
dïth_£ek
, 
£ek
);

232 
	}
}

234 
	$°©s_d©a_add
(
°©s_båì
 *
°©s
, 
block_t
 
block
,

235 
cou¡
)

237 if(
DEBUG_MODE_U
==1)

239 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

241 
block_t
 
£ek
 = 
	`°©s_suµo£_£ek
(
block
, 
cou¡
);

243 
°©s
->
d©a
.
blocks
 +
cou¡
;

244 
°©s
->
d©a
.
ƒ
++;

245 
°©s
->
d©a
.
max
 = 
	`max
(°©s->d©a.max, 
cou¡
);

246 
°©s
->
d©a
.
mö
 = 
	`mö
(°©s->d©a.mö, 
cou¡
);

248 
	`°©s_£ek_add
(&
°©s
->
dïth_£ek
, 
£ek
);

249 
	}
}

251 
°©s_båì_Àvñ


252 
	$°©s_Àvñs_sum
(
°©s_båì
 *
°©s
, 
dïth
)

254 if(
DEBUG_MODE_U
==1)

256 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

258 
°©s_båì_Àvñ
 
sum
 = {};

260 
i
 = 0; i <
dïth
; i++) {

261 
sum
.
block
.
blocks
 +
°©s
->
Àvñs
[
i
].block.blocks;

262 
sum
.
block
.
em±y
 +
°©s
->
Àvñs
[
i
].block.empty;

263 
sum
.
block
.
byãs
 +
°©s
->
Àvñs
[
i
].block.bytes;

264 
sum
.
chûd_£ek
.
blocks
 +
°©s
->
Àvñs
[
i
].child_seek.blocks;

265 
sum
.
chûd_£ek
.
ƒ
 +
°©s
->
Àvñs
[
i
].child_seek.nr;

266 
sum
.
chûd_£ek
.
io
 +
°©s
->
Àvñs
[
i
].child_seek.io;

269  
sum
;

270 
	}
}

272 
	$°©s_båì_mîge
(
°©s_båì
 **
a
, °©s_båì *
b
)

274 if(
DEBUG_MODE_U
==1)

276 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

279 i‡(
b
 =
NULL
)

282 i‡(*
a
 =
NULL
) {

284 *
a
 = 
	`Æloc_°©s_båì
(
b
->
dïth
);

287 i‡((*
a
)->
dïth
 < 
b
->depth) {

288 
°©s_båì
 *
tmp
 = 
	`Æloc_°©s_båì
(
b
->
dïth
);

291 
tmp
->
dïth_£ek
 = (*
a
)->depth_seek;

292 
tmp
->
d©a
 = (*
a
)->data;

293 
i
 = 0; i < (*
a
)->
dïth
; i++)

294 
tmp
->
Àvñs
[
i
] = (*
a
)->levels[i];

296 
tmp
->
Àvñs
[tmp->
dïth
] = (*
a
)->levels[(*a)->depth];

298 
	`‰ì_°©s_båì
(*
a
);

299 *
a
 = 
tmp
;

304 
i
 = 0; i <
b
->
dïth
; i++) {

305 
Àvñ
 = 
i
 < 
b
->
dïth
 ? i : (*
a
)->depth;

306 
°©s_båì_Àvñ
 *
œ
 = &(*
a
)->
Àvñs
[
Àvñ
];

307 
°©s_båì_Àvñ
 *
lb
 = &
b
->
Àvñs
[
i
];

309 
œ
->
block
.
blocks
 +
lb
->block.blocks;

310 
œ
->
block
.
em±y
 +
lb
->block.empty;

311 
œ
->
block
.
byãs
 +
lb
->block.bytes;

312 
œ
->
chûd_£ek
.
blocks
 +
lb
->child_seek.blocks;

313 
œ
->
chûd_£ek
.
ƒ
 +
lb
->child_seek.nr;

314 
œ
->
chûd_£ek
.
io
 +
lb
->child_seek.io;

317 (*
a
)->
dïth_£ek
.
blocks
 +
b
->depth_seek.blocks;

318 (*
a
)->
dïth_£ek
.
ƒ
 +
b
->depth_seek.nr;

319 (*
a
)->
dïth_£ek
.
io
 +
b
->depth_seek.io;

321 
°©s_båì_d©a
 *
da
 = &(*
a
)->
d©a
;

322 
°©s_båì_d©a
 *
db
 = &
b
->
d©a
;

323 
da
->
blocks
 +
db
->blocks;

324 
da
->
ƒ
 +
db
->nr;

325 
da
->
max
 = 
	`max
(da->max, 
db
->max);

326 
da
->
mö
 = 
	`mö
(da->mö, 
db
->min);

327 
da
->
d©a_£ek
.
blocks
 +
db
->data_seek.blocks;

328 
da
->
d©a_£ek
.
ƒ
 +
db
->data_seek.nr;

329 
da
->
d©a_£ek
.
io
 +
db
->data_seek.io;

330 
da
->
dú_£ek
.
blocks
 +
db
->dir_seek.blocks;

331 
da
->
dú_£ek
.
ƒ
 +
db
->dir_seek.nr;

332 
da
->
dú_£ek
.
io
 +
db
->dir_seek.io;

333 
	}
}

335 
	$°©s_¥öt_£ek
(
°©s_£ek
 *
°©s
, c⁄° *
¥efix
)

337 if(
DEBUG_MODE_U
==1)

339 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

341 
	`¥ötf
("%s seek:\n"

344 
¥efix
, 
°©s
->
blocks
, sèts->
ƒ
, sèts->
io
, ' ',

345 
	`avîage
(
°©s
->
blocks
, sèts->
ƒ
),

346 
	`avîage
(
°©s
->
blocks
, sèts->
io
));

347 
	}
}

349 
	$°©s_¥öt_dïth_£ek
(
°©s_£ek
 *
°©s
)

351 if(
DEBUG_MODE_U
==1)

353 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

355 
	`°©s_¥öt_£ek
(
°©s
, "depth-first");

356 
	}
}

358 
	$°©s_¥öt_£eks
(
sb
 *sb, 
°©s_båì
 *
°©s
,

359 
d©a
, 
dú
)

361 if(
DEBUG_MODE_U
==1)

363 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

365 
i
 = 0; i <
°©s
->
dïth
; i++) {

366 
¥efix
[64];

368 i‡(
i
 < 
°©s
->
dïth
)

369 
	`¢¥ötf
(
¥efix
, (prefix), "level %d => %d",

370 
i
, i + 1);

372 
	`°r˝y
(
¥efix
, "leaf => child");

374 
	`°©s_¥öt_£ek
(&
°©s
->
Àvñs
[
i
].
chûd_£ek
, 
¥efix
);

377 i‡(
d©a
)

378 
	`°©s_¥öt_£ek
(&
°©s
->
d©a
.
d©a_£ek
, "data => data");

380 i‡(
dú
)

381 
	`°©s_¥öt_£ek
(&
°©s
->
d©a
.
dú_£ek
, "dir => ileaf");

382 
	}
}

384 
	$°©s_¥öt_log
(
sb
 *sb, 
°©s_fs
 *
°©s
)

386 if(
DEBUG_MODE_U
==1)

388 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

390 
block_t
 
byãs
;

392 
byãs
 = 
°©s
->
logblock
 << 
sb
->
blockbôs
;

393 
	`¥ötf
("[log]\n");

394 
	`¥ötf
("logblock:\n"

396 
°©s
->
logblock
, sèts->
logblock_byãs
,

397 
	`≥r˚¡age
(
°©s
->
logblock_byãs
, 
byãs
));

399 
	`°©s_¥öt_dïth_£ek
(&
°©s
->
logblock_£ek
);

400 
	}
}

402 
	$°©s_¥öt_Àvñ
(
sb
 *sb, 
°©s_båì_Àvñ
 *
Àvñ
,

403 c⁄° *
¥efix
)

405 if(
DEBUG_MODE_U
==1)

407 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

409 
block_t
 
byãs
;

411 
byãs
 = 
Àvñ
->
block
.
blocks
 << 
sb
->
blockbôs
;

412 
	`¥ötf
("%s:\n"

415 
¥efix
, 
Àvñ
->
block
.
blocks
,Üevñ->block.
byãs
,

416 
	`≥r˚¡age
(
Àvñ
->
block
.
byãs
, bytes),

417 
Àvñ
->
block
.
em±y
);

418 
	}
}

420 
	$__¥ötf
(5, 6)

421 
	$°©s_¥öt
(
sb
 *sb, 
°©s_båì
 *
°©s
, 
d©a
, 
dú
,

422 c⁄° *
fmt
, ...)

424 if(
DEBUG_MODE_U
==1)

426 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

428 
va_li°
 
≠
;

429 
°©s_båì_Àvñ
 
sum
;

431 i‡(
°©s
 =
NULL
)

434 
	`¥ötf
("[");

435 
	`va_°¨t
(
≠
, 
fmt
);

436 
	`v¥ötf
(
fmt
, 
≠
);

437 
	`va_íd
(
≠
);

438 
	`¥ötf
("]\n");

441 
sum
 = 
	`°©s_Àvñs_sum
(
°©s
, sèts->
dïth
 - 1);

442 
	`°©s_¥öt_Àvñ
(
sb
, &
sum
, "bnode");

444 
	`°©s_¥öt_Àvñ
(
sb
, &
°©s
->
Àvñs
[°©s->
dïth
], "leaf");

447 
sum
 = 
	`°©s_Àvñs_sum
(
°©s
, sèts->
dïth
);

448 
	`°©s_¥öt_Àvñ
(
sb
, &
sum
, "btree");

450 i‡(
d©a
) {

451 
	`¥ötf
("data:\n"

454 
°©s
->
d©a
.
blocks
, sèts->d©a.
mö
, sèts->d©a.
max
,

455 
	`avîage
(
°©s
->
d©a
.
blocks
, sèts->d©a.
ƒ
),

456 
°©s
->
d©a
.
ƒ
);

459 
	`°©s_¥öt_£eks
(
sb
, 
°©s
, 
d©a
, 
dú
);

460 
	`°©s_¥öt_dïth_£ek
(&
°©s
->
dïth_£ek
);

461 
	}
}

463 
	sgøph_öfo
 {

464 
FILE
 *
	mÂ
;

465 
	msubgøph
[32];

466 
	mfûed©a
[32];

467 c⁄° *
	mb«me
;

468 c⁄° *
	m ame
;

469 
li°_hód
 
	mlök_hód
;

471 *
	m¥iv©e
;

473 
°©s_fs
 *
	m°©s
;

476 
	slök_öfo
 {

477 
	mlök
[256];

478 
li°_hód
 
	mli°
;

480 
	#löfo_íåy
(
x
Ë
	`li°_íåy
(x, 
lök_öfo
, 
li°
)

	)

482 
	stmpfûe_öfo
 {

483 
FILE
 *
	mÂ
;

484 
li°_hód
 
	mli°
;

486 
	#tmpfûe_íåy
(
x
Ë
	`li°_íåy
(x, 
tmpfûe_öfo
, 
li°
)

	)

488 
	$add_lök
(
gøph_öfo
 *
gi
, c⁄° *
fmt
, ...)

490 if(
DEBUG_MODE_U
==1)

492 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

494 
lök_öfo
 *
löfo
;

495 
va_li°
 
≠
;

497 
löfo
 = 
	`mÆloc
((*linfo));

498 i‡(!
löfo
)

499 
	`°ªº‹_exô
(1, 
ENOMEM
, "out of memory");

500 
	`INIT_LIST_HEAD
(&
löfo
->
li°
);

501 
	`li°_add_èû
(&
löfo
->
li°
, &
gi
->
lök_hód
);

503 
	`va_°¨t
(
≠
, 
fmt
);

504 
	`v¢¥ötf
(
löfo
->
lök
, ÷öfo->lök), 
fmt
, 
≠
);

505 
	`va_íd
(
≠
);

506 
	}
}

508 
	$wrôe_lök
(
gøph_öfo
 *
gi
)

510 if(
DEBUG_MODE_U
==1)

512 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

514 i‡(!
	`li°_em±y
(&
gi
->
lök_hód
)) {

515 
	`Ârötf
(
gi
->
Â
, "\n");

516 !
	`li°_em±y
(&
gi
->
lök_hód
)) {

517 
lök_öfo
 *
l
 = 
	`löfo_íåy
(
gi
->
lök_hód
.
√xt
);

518 
	`li°_dñ
(&
l
->
li°
);

519 
	`Âuts
(
l
->
lök
, 
gi
->
Â
);

520 
	`‰ì
(
l
);

523 
	}
}

525 
tmpfûe_öfo
 *
	$Æloc_tmpfûe
()

527 if(
DEBUG_MODE_U
==1)

529 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

531 
tmpfûe_öfo
 *
tmpfûe
;

533 
tmpfûe
 = 
	`mÆloc
((*tmpfile));

534 i‡(!
tmpfûe
)

535 
	`°ªº‹_exô
(1, 
ENOMEM
, "out of memory");

537 
	`INIT_LIST_HEAD
(&
tmpfûe
->
li°
);

538 
	`li°_add_èû
(&
tmpfûe
->
li°
, &
tmpfûe_hód
);

539 
tmpfûe
->
Â
 = 
	`tmpfûe64
();

541  
tmpfûe
;

542 
	}
}

544 
	$mîge_fûe
(
FILE
 *
d°
, FILE *
§c
)

546 if(
DEBUG_MODE_U
==1)

548 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

550 
buf
[4096];

551 
ssize_t
 
size
;

552 
fd
;

554 
	`Âutc
('\n', 
d°
);

556 
	`fÊush
(
§c
);

557 
fd
 = 
	`fûío
(
§c
);

558 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

559 (
size
 = 
	`ªad
(
fd
, 
buf
, (buf))) > 0) {

560 
size_t
 
n
 = 
	`fwrôe
(
buf
, 
size
, 1, 
d°
);

561 i‡(
n
 != 1)

562 
	`°ªº‹_exô
(1, 
î∫o
, "fwrite");

564 
	}
}

566 
	$mîge_tmpfûes
(
gøph_öfo
 *
gi
)

568 if(
DEBUG_MODE_U
==1)

570 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

572 !
	`li°_em±y
(&
tmpfûe_hód
)) {

573 
tmpfûe_öfo
 *
tmpf
 = 
	`tmpfûe_íåy
(
tmpfûe_hód
.
√xt
);

574 
	`li°_dñ
(&
tmpf
->
li°
);

575 
	`mîge_fûe
(
gi
->
Â
, 
tmpf
->fp);

576 
	`f˛o£
(
tmpf
->
Â
);

577 
	`‰ì
(
tmpf
);

579 
	}
}

581 
	$døw_båì_¥e
(
båì
 *båì, *
d©a
)

583 if(
DEBUG_MODE_U
==1)

585 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

587 
gøph_öfo
 *
gi
 = 
d©a
;

589 
	`¢¥ötf
(
gi
->
subgøph
, (gi->subgøph), "˛u°î_%s", gi->
b«me
);

590 
	`Ârötf
(
gi
->
Â
,

593 
gi
->
subgøph
, gi->
b«me
);

594 
	}
}

596 
	$døw_bnode
(
båì
 *båì, 
buf„r_hód
 *
buf„r
,

597 
Àvñ
, *
d©a
)

599 if(
DEBUG_MODE_U
==1)

601 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

603 
gøph_öfo
 *
gi
 = 
d©a
;

604 
bnode
 *bnodê
	`bufd©a
(
buf„r
);

605 
block_t
 
blockƒ
 = 
buf„r
->
ödex
;

606 
ödex_íåy
 *
ödex
 = 
bnode
->
íåõs
;

607 
n
;

609 
	`Ârötf
(
gi
->
Â
,

613 
blockƒ
, blocknr,

614 
	`buf„r_dúty
(
buf„r
) ? ", dirty" : "",

615 
	`be16_to_˝u
(
bnode
->
magic
), 
	`bcou¡
(bnode));

616 
n
 = 0;Ç < 
	`bcou¡
(
bnode
);Ç++) {

617 
	`Ârötf
(
gi
->
Â
,

619 
n
 ? '|' : '{',Ç,

620 
	`be64_to_˝u
(
ödex
[
n
].
key
), be64_to_˝u(ödex[n].
block
));

622 
	`Ârötf
(
gi
->
Â
,

627 
	`buf„r_dúty
(
buf„r
) ? "color =Ñed\n" : "");

630 
n
 = 0;Ç < 
	`bcou¡
(
bnode
);Ç++) {

631 
	`Ârötf
(
gi
->
Â
,

633 
blockƒ
, 
n
,

634 
	`be64_to_˝u
(
ödex
[
n
].
block
));

636 i‡(
›t_°©s
)

637 
	`°©s_chûd_£ek_add
(
gi
->
°©s
->
own
, 
Àvñ
, 
blockƒ
,

638 
	`be64_to_˝u
(
ödex
[
n
].
block
));

641 i‡(
›t_°©s
) {

642 
byãs
 = (*
bnode
)

643 + (*
ödex
Ë* 
	`bcou¡
(
bnode
);

644 
em±y
 = !
	`bcou¡
(
bnode
);

646 
	`°©s_block_add
(
gi
->
°©s
->
own
, 
Àvñ
, 
blockƒ
, 
byãs
, 
em±y
);

648 
	}
}

650 
	$døw_båì_po°
(
båì
 *båì, *
d©a
)

652 if(
DEBUG_MODE_U
==1)

654 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

656 
gøph_öfo
 *
gi
 = 
d©a
;

658 
	`Ârötf
(
gi
->
Â
, "}\n");

661 
	`wrôe_lök
(
gi
);

662 
	}
}

664 
	sdøw_d©a_›s
 {

665 (*
	mdøw_°¨t
)(
gøph_öfo
 *
	mgi
, 
båì
 *
	mbåì
);

666 (*
	mdøw_d©a
)(
gøph_öfo
 *
	mgi
, 
båì
 *
	mbåì
,

667 
buf„r_hód
 *
	mÀafbuf
,

668 
block_t
 
	mödex
, block_à
	mblock
, 
	mcou¡
);

669 (*
	mdøw_íd
)(
gøph_öfo
 *
	mgi
, 
båì
 *
	mbåì
);

672 
	$døw_subd©a_°¨t
(
gøph_öfo
 *
gi
, 
båì
 *btree,

673 c⁄° *
po°fix
)

675 if(
DEBUG_MODE_U
==1)

677 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

679 
	`Ârötf
(
gi
->
Â
, "%s%†[\n", gi->
 ame
, 
po°fix
);

680 
	}
}

682 
	$døw_d©a_°¨t
(
gøph_öfo
 *
gi
, 
båì
 *btree)

684 if(
DEBUG_MODE_U
==1)

686 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

688 
	`Ârötf
(
gi
->
Â
,

691 
gi
->
 ame
, gi->lname);

693 
	`døw_subd©a_°¨t
(
gi
, 
båì
, "");

694 
	}
}

696 
	$døw_d©a
(
gøph_öfo
 *
gi
, 
båì
 *btree,

697 
buf„r_hód
 *
Àafbuf
,

698 
block_t
 
ödex
, block_à
block
, 
cou¡
)

700 if(
DEBUG_MODE_U
==1)

702 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

705 
	}
}

707 
	$døw_subd©a_íd
(
gøph_öfo
 *
gi
, 
båì
 *btree)

709 if(
DEBUG_MODE_U
==1)

711 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

713 
	`Ârötf
(
gi
->
Â
,

716 
	}
}

718 
	$døw_d©a_íd
(
gøph_öfo
 *
gi
, 
båì
 *btree)

720 if(
DEBUG_MODE_U
==1)

722 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

724 
	`døw_subd©a_íd
(
gi
, 
båì
);

726 
	`Ârötf
(
gi
->
Â
, "}\n");

727 
	}
}

729 
	$døw_bôm≠_°¨t
(
gøph_öfo
 *
gi
, 
båì
 *btree)

731 
	`døw_d©a_°¨t
(
gi
, 
båì
);

732 
	`Ârötf
(
gi
->
Â
, "label = \"{ dump of bitmap data");

733 
	}
}

735 
	gbôm≠_has_dúty
;

737 
	$døw_bôm≠_d©a
(
gøph_öfo
 *
gi
, 
båì
 *btree,

738 
buf„r_hód
 *
Àafbuf
,

739 
block_t
 
ödex
, block_à
block
, 
cou¡
)

741 if(
DEBUG_MODE_U
==1)

743 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

745 
sb
 *sb = 
båì
->sb;

746 
öode
 *
bôm≠
 = 
sb
->bitmap;

747 *
d©a
;

749 
i
 = 0; i < 
cou¡
; i++) {

750 
idx
, 
size
 = 
sb
->
blocksize
 * 8;

751 
buf„r_hód
 *
buf„r
;

754 
block_t
 
off£t
 = (
ödex
 + 
i
Ë* 
size
;

756 
	`Ârötf
(
gi
->
Â
, " | index %Œu:", (
ödex
 + 
i
));

757 
buf„r
 = 
	`blockªad
(
	`m≠pög
(
bôm≠
), 
ödex
 + 
i
);

758 
	`as£π
(
buf„r
);

759 
d©a
 = 
	`bufd©a
(
buf„r
);

761 
idx
 = 
	`föd_√xt_bô_À
(
d©a
, 
size
, 0);

762 
idx
 < 
size
) {

763 
block_t
 
°¨t
, 
íd
;

765 
°¨t
 = 
off£t
 + 
idx
;

766 
idx
 = 
	`föd_√xt_zîo_bô_À
(
d©a
, 
size
, idx + 1);

767 
íd
 = 
off£t
 + 
idx
 - 1;

769 i‡(
°¨t
 !
íd
)

770 
	`Ârötf
(
gi
->
Â
, " %Œu-%Œu,", 
°¨t
, 
íd
);

772 
	`Ârötf
(
gi
->
Â
, " %Œu,", 
°¨t
);

774 i‡(
idx
 >
size
)

776 
idx
 = 
	`föd_√xt_bô_À
(
d©a
, 
size
, idx + 1);

777 i‡(
idx
 >
size
)

780 
	`Ârötf
(
gi
->
Â
, " \\l");

782 i‡(
	`buf„r_dúty
(
buf„r
))

783 
bôm≠_has_dúty
 = 1;

784 
	`blockput
(
buf„r
);

786 
	}
}

788 
	$døw_bôm≠_íd
(
gøph_öfo
 *
gi
, 
båì
 *btree)

790 if(
DEBUG_MODE_U
==1)

792 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

794 
	`Ârötf
(
gi
->
Â
,

797 
bôm≠_has_dúty
 ? "color =Ñed\n" : "");

798 
	`døw_d©a_íd
(
gi
, 
båì
);

799 
	}
}

801 
døw_d©a_›s
 
	gdøw_bôm≠
 = {

802 .
døw_°¨t
 = 
døw_bôm≠_°¨t
,

803 .
	gdøw_d©a
 = 
døw_bôm≠_d©a
,

804 .
	gdøw_íd
 = 
døw_bôm≠_íd
,

807 
	$døw_vèbÀ_°¨t
(
gøph_öfo
 *
gi
, 
båì
 *btree)

809 if(
DEBUG_MODE_U
==1)

811 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

813 
	`døw_d©a_°¨t
(
gi
, 
båì
);

814 
	`Ârötf
(
gi
->
Â
, "label = \"versionÅable\"\n");

815 
	}
}

817 
døw_d©a_›s
 
	gdøw_vèbÀ
 = {

818 .
døw_°¨t
 = 
døw_vèbÀ_°¨t
,

819 .
	gdøw_d©a
 = 
døw_d©a
,

820 .
	gdøw_íd
 = 
døw_d©a_íd
,

823 
	$døw_©abÀ_°¨t
(
gøph_öfo
 *
gi
, 
båì
 *btree)

825 if(
DEBUG_MODE_U
==1)

827 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

829 
	`døw_d©a_°¨t
(
gi
, 
båì
);

830 
	`Ârötf
(
gi
->
Â
, "label = \"{ dump ofátable");

831 
	}
}

833 
	$__døw_dú_d©a
(
gøph_öfo
 *
gi
, 
båì
 *btree,

834 
buf„r_hód
 *
Àafbuf
,

835 
buf„r_hód
 *
buf„r
, 
block_t
 
block
,

836 
©abÀ
)

838 if(
DEBUG_MODE_U
==1)

840 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

842 
sb
 *sb = 
båì
->sb;

843 
tux_dúít
 *
íåy
 = 
	`bufd©a
(
buf„r
);

844 
tux_dúít
 *
limô
 = (*)
íåy
 + 
sb
->
blocksize
;

846 
íåy
 < 
limô
) {

847 
	`Ârötf
(
gi
->
Â
,

850 
	`be64_to_˝u
(
íåy
->
öum
), 
	`be16_to_˝u
”¡ry->
ªc_Àn
),

851 
íåy
->
«me_Àn
,É¡ry->
ty≥
,

852 ()
íåy
->
«me_Àn
,É¡ry->
«me
);

854 i‡(
›t_°©s
 && !
©abÀ
) {

855 
båì
 *
ôªe
 = 
	`ôªe_båì
(
sb
);

856 
îr
;

858 
curs‹
 *curs‹ = 
	`Æloc_curs‹
(
ôªe
, 0);

859 i‡(!
curs‹
)

860 
	`°ªº‹_exô
(1, 
ENOMEM
, "alloc_cursor");

862 
	`down_ªad
(&
curs‹
->
båì
->
lock
);

863 
îr
 = 
	`båì_¥obe
(
curs‹
, 
	`be64_to_˝u
(
íåy
->
öum
));

864 i‡(
îr
)

865 
	`°ªº‹_exô
(1, -
îr
,

868 
	`°©s_dú_£ek_add
(
gi
->
°©s
->
own
, 
block
,

869 
	`bufödex
(
	`curs‹_Àafbuf
(
curs‹
)));

871 
	`ªÀa£_curs‹
(
curs‹
);

873 
	`up_ªad
(&
curs‹
->
båì
->
lock
);

874 
	`‰ì_curs‹
(
curs‹
);

877 
íåy
 = (*Î¡ry + 
	`be16_to_˝u
”¡ry->
ªc_Àn
);

879 
	}
}

881 
	$døw_©abÀ_©omªf
(
gøph_öfo
 *
gi
, 
båì
 *btree,

882 
buf„r_hód
 *
low_buf
,

883 
buf„r_hód
 *
hi_buf
)

885 if(
DEBUG_MODE_U
==1)

887 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

889 
¥ev_©omªf
 = 1;

891 
sb
 *sb = 
båì
->sb;

892 
shi·
 = 
sb
->
blockbôs
 - 1;

893 
©om_ba£
 = (
	`bufödex
(
low_buf
Ë- 
sb
->
©omªf_ba£
Ë<< 
shi·
;

894 
__be16
 *
limô
, *
ba£
, *
low
 = 
	`bufd©a
(
low_buf
), *
hi
 = bufd©a(
hi_buf
);

896 
ba£
 = 
low
;

897 
limô
 = (*)
low
 + 
sb
->
blocksize
;

898 
low
 < 
limô
) {

899 
©om
 = 
©om_ba£
 + (
low
 - 
ba£
);

900 
ªf
 = (
u32
)
	`be16_to_˝up
(
hi
Ë<< 16 | be16_to_˝up(
low
);

902 i‡(
ªf
) {

903 i‡(!
¥ev_©omªf
)

904 
	`Ârötf
(
gi
->
Â
, " | ...");

906 
	`Ârötf
(
gi
->
Â
,

909 
	`be16_to_˝up
(
low
), be16_to_˝up(
hi
), 
©om
, 
ªf
);

911 
¥ev_©omªf
 = 1;

913 
¥ev_©omªf
 = 0;

915 
low
++;

916 
hi
++;

918 
	}
}

920 
	$døw_©abÀ_u«tom
(
gøph_öfo
 *
gi
, 
båì
 *btree,

921 
buf„r_hód
 *
buf„r
)

923 if(
DEBUG_MODE_U
==1)

925 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

927 
sb
 *sb = 
båì
->sb;

928 
shi·
 = 
sb
->
blockbôs
 - 3;

929 
©om_ba£
 = (
	`bufödex
(
buf„r
Ë- 
sb
->
u«tom_ba£
Ë<< 
shi·
;

930 
__be64
 *
limô
, *
ba£
, *
±r
 = 
	`bufd©a
(
buf„r
);

932 
ba£
 = 
±r
;

933 
limô
 = (*)
±r
 + 
sb
->
blocksize
;

934 
±r
 < 
limô
) {

935 
©om
 = 
©om_ba£
 + (
±r
 - 
ba£
);

937 i‡(
©om
 < 
sb
->
©omgí
) {

938 
	`Ârötf
(
gi
->
Â
,

940 
	`be64_to_˝up
(
±r
), 
©om
);

944 
±r
++;

946 
	}
}

948 
	$døw_©abÀ_d©a
(
gøph_öfo
 *
gi
, 
båì
 *btree,

949 
buf„r_hód
 *
Àafbuf
,

950 
block_t
 
ödex
, block_à
block
, 
cou¡
)

952 if(
DEBUG_MODE_U
==1)

954 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

956 
°¨t_©omªf
 = 1, 
°¨t_u«tom
 = 1;

958 
sb
 *sb = 
båì
->sb;

959 
buf„r_hód
 *
buf„r
, *
hi_buf
;

961 
i
 = 0; i < 
cou¡
; i++) {

962 
buf„r
 = 
	`blockªad
(
	`m≠pög
(
sb
->
©abÀ
), 
ödex
 + 
i
);

963 
	`as£π
(
buf„r
);

965 i‡(
ödex
 < 
sb
->
©omªf_ba£
) {

967 
	`__døw_dú_d©a
(
gi
, 
båì
, 
Àafbuf
, 
buf„r
, 
block
+
i
, 1);

968 } i‡(
ödex
 < 
sb
->
u«tom_ba£
) {

970 i‡(
°¨t_©omªf
) {

971 
°¨t_©omªf
 = 0;

972 
	`Ârötf
(
gi
->
Â
, " }\"\n");

973 
	`døw_subd©a_íd
(
gi
, 
båì
);

974 
	`døw_subd©a_°¨t
(
gi
, 
båì
, "_atomref");

975 
	`Ârötf
(
gi
->
Â
, "label = \"{ dump ofátomref");

979 i‡((
ödex
 + 
i
) & 1)

980 
√xt
;

982 
hi_buf
 = 
	`blockªad
(
	`m≠pög
(
sb
->
©abÀ
), 
ödex
 + 
i
 + 1);

983 
	`as£π
(
hi_buf
);

985 
	`døw_©abÀ_©omªf
(
gi
, 
båì
, 
buf„r
, 
hi_buf
);

987 
	`blockput
(
hi_buf
);

990 i‡(
°¨t_u«tom
) {

991 
°¨t_u«tom
 = 0;

992 
	`Ârötf
(
gi
->
Â
, " }\"\n");

993 
	`døw_subd©a_íd
(
gi
, 
båì
);

994 
	`døw_subd©a_°¨t
(
gi
, 
båì
, "_unatom");

995 
	`Ârötf
(
gi
->
Â
, "label = \"{ dump of unatom");

998 
	`døw_©abÀ_u«tom
(
gi
, 
båì
, 
buf„r
);

1001 
√xt
:

1002 
	`blockput
(
buf„r
);

1004 
	}
}

1006 
	$døw_©abÀ_íd
(
gøph_öfo
 *
gi
, 
båì
 *btree)

1008 if(
DEBUG_MODE_U
==1)

1010 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1012 
	`Ârötf
(
gi
->
Â
, " }\"\n");

1013 
	`døw_d©a_íd
(
gi
, 
båì
);

1014 
	}
}

1016 
døw_d©a_›s
 
	gdøw_©abÀ
 = {

1017 .
døw_°¨t
 = 
døw_©abÀ_°¨t
,

1018 .
	gdøw_d©a
 = 
døw_©abÀ_d©a
,

1019 .
	gdøw_íd
 = 
døw_©abÀ_íd
,

1022 
	$døw_dú_°¨t
(
gøph_öfo
 *
gi
, 
båì
 *btree)

1024 if(
DEBUG_MODE_U
==1)

1026 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1028 
	`døw_d©a_°¨t
(
gi
, 
båì
);

1029 
	`Ârötf
(
gi
->
Â
,

1031 
	}
}

1033 
	$døw_dú_d©a
(
gøph_öfo
 *
gi
, 
båì
 *btree,

1034 
buf„r_hód
 *
Àafbuf
,

1035 
block_t
 
ödex
, block_à
block
, 
cou¡
)

1037 if(
DEBUG_MODE_U
==1)

1039 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1041 
buf„r_hód
 *
buf„r
;

1043 
i
 = 0; i < 
cou¡
; i++) {

1044 
buf„r
 = 
	`blockªad
(
	`m≠pög
(
	`båì_öode
(
båì
)), 
ödex
 + 
i
);

1045 
	`as£π
(
buf„r
);

1047 
	`__døw_dú_d©a
(
gi
, 
båì
, 
Àafbuf
, 
buf„r
, 
block
 + 
i
, 0);

1049 
	`blockput
(
buf„r
);

1051 
	}
}

1053 
	$døw_dú_íd
(
gøph_öfo
 *
gi
, 
båì
 *btree)

1055 if(
DEBUG_MODE_U
==1)

1057 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1059 
	`Ârötf
(
gi
->
Â
,

1061 
	`døw_d©a_íd
(
gi
, 
båì
);

1062 
	}
}

1064 
døw_d©a_›s
 
	gdøw_dú
 = {

1065 .
døw_°¨t
 = 
døw_dú_°¨t
,

1066 .
	gdøw_d©a
 = 
døw_dú_d©a
,

1067 .
	gdøw_íd
 = 
døw_dú_íd
,

1070 
	$døw_fûe_°¨t
(
gøph_öfo
 *
gi
, 
båì
 *btree)

1072 if(
DEBUG_MODE_U
==1)

1074 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1076 
	`døw_d©a_°¨t
(
gi
, 
båì
);

1077 
	`Ârötf
(
gi
->
Â
, "label = \"file data\"\n");

1078 
	}
}

1080 
døw_d©a_›s
 
	gdøw_fûe
 = {

1081 .
døw_°¨t
 = 
døw_fûe_°¨t
,

1082 .
	gdøw_d©a
 = 
døw_d©a
,

1083 .
	gdøw_íd
 = 
døw_d©a_íd
,

1086 
	$døw_symlök_°¨t
(
gøph_öfo
 *
gi
, 
båì
 *btree)

1088 if(
DEBUG_MODE_U
==1)

1090 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1092 
	`døw_d©a_°¨t
(
gi
, 
båì
);

1093 
	`Ârötf
(
gi
->
Â
, "label = \"symlink data\"\n");

1094 
	}
}

1096 
døw_d©a_›s
 
	gdøw_symlök
 = {

1097 .
døw_°¨t
 = 
døw_symlök_°¨t
,

1098 .
	gdøw_d©a
 = 
døw_d©a
,

1099 .
	gdøw_íd
 = 
døw_d©a_íd
,

1102 
	$døw_dÀaf_°¨t
(
gøph_öfo
 *
gi
, c⁄° *
dÀaf_«me
,

1103 
buf„r_hód
 *
Àafbuf
)

1105 if(
DEBUG_MODE_U
==1)

1107 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1109 
block_t
 
blockƒ
 = 
Àafbuf
->
ödex
;

1111 
	`Ârötf
(
gi
->
Â
,

1114 
dÀaf_«me
, 
gi
->
 ame
, 
blockƒ
,

1115 
	`buf„r_dúty
(
Àafbuf
) ? ", dirty" : "");

1116 
	}
}

1118 
	$døw_dÀaf_íd
(
gøph_öfo
 *
gi
, c⁄° *
dÀaf_«me
,

1119 
buf„r_hód
 *
Àafbuf
)

1121 if(
DEBUG_MODE_U
==1)

1123 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1125 
	`Ârötf
(
gi
->
Â
,

1130 
	`buf„r_dúty
(
Àafbuf
) ? "color =Ñed\n" : "");

1131 
	}
}

1133 
ölöe
 
group
 *
	$dÀaf_groups_±r
(
båì
 *btree,

1134 
dÀaf
 *dleaf)

1136 if(
DEBUG_MODE_U
==1)

1138 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1140  (*)
dÀaf
 + 
båì
->
sb
->
blocksize
;

1141 
	}
}

1143 
ölöe
 
group
 *
	$dÀaf_group_±r
(
group
 *
groups
, 
gr
)

1145 if(
DEBUG_MODE_U
==1)

1147 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1149  
groups
 - (
gr
 + 1);

1150 
	}
}

1152 
ölöe
 
íåy
 *
	$dÀaf_íåõs
(
dÀaf
 *dleaf,

1153 
group
 *
groups
, 
gr
)

1155 if(
DEBUG_MODE_U
==1)

1157 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1159 
íåy
 *
íåõs
 = (íåy *)(
groups
 - 
	`dÀaf_groups
(
dÀaf
));

1160 
i
 = 0; i < 
gr
; i++)

1161 
íåõs
 -
	`group_cou¡
(
	`dÀaf_group_±r
(
groups
, 
i
));

1162  
íåõs
;

1163 
	}
}

1165 
ölöe
 
íåy
 *
	$dÀaf_íåy
(
íåy
 *
íåõs
, 
ít
)

1167 if(
DEBUG_MODE_U
==1)

1169 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1171  
íåõs
 - (
ít
 + 1);

1172 
	}
}

1174 
ölöe
 
	$dÀaf_exã¡_cou¡
(
íåy
 *
íåõs
, 
ít
)

1176 if(
DEBUG_MODE_U
==1)

1178 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1180 
off£t
 = 
ít
 ? 
	`íåy_limô
(
	`dÀaf_íåy
(
íåõs
,Ént - 1)) : 0;

1181  
	`íåy_limô
(
	`dÀaf_íåy
(
íåõs
, 
ít
)Ë- 
off£t
;

1182 
	}
}

1184 
ölöe
 
diskexã¡
 *
	$dÀaf_exã¡s
(
dÀaf
 *dleaf,

1185 
group
 *
groups
,

1186 
gr
, 
ít
)

1188 if(
DEBUG_MODE_U
==1)

1190 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1192 
diskexã¡
 *
exã¡s
 = 
dÀaf
->
èbÀ
;

1193 
group
 *group;

1194 
íåy
 *
íåõs
;

1195 
i
;

1197 
i
 = 0; i < 
gr
; i++) {

1198 
group
 = 
	`dÀaf_group_±r
(
groups
, 
i
);

1199 
íåõs
 = 
	`dÀaf_íåõs
(
dÀaf
, 
groups
, 
i
);

1200 
exã¡s
 +
	`íåy_limô
(
	`dÀaf_íåy
(
íåõs
, 
	`group_cou¡
(
group
) - 1));

1202 i‡(
ít
) {

1203 
íåõs
 = 
	`dÀaf_íåõs
(
dÀaf
, 
groups
, 
i
);

1204 
exã¡s
 +
	`íåy_limô
(
	`dÀaf_íåy
(
íåõs
, 
ít
 - 1));

1207  
exã¡s
;

1208 
	}
}

1210 
ölöe
 
diskexã¡
 *
	$dÀaf_exã¡
(
diskexã¡
 *
exã¡s
,

1211 
ex
)

1213 if(
DEBUG_MODE_U
==1)

1215 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1217  
exã¡s
 + 
ex
;

1218 
	}
}

1220 
	$døw_dÀaf1
(
gøph_öfo
 *
gi
, 
båì
 *btree,

1221 c⁄° *
dÀaf_«me
, 
buf„r_hód
 *
Àafbuf
,

1222 *
d©a
)

1224 if(
DEBUG_MODE_U
==1)

1226 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1228 
dÀaf
 *dÀa‡
	`bufd©a
(
Àafbuf
);

1229 
group
 *
groups
 = 
	`dÀaf_groups_±r
(
båì
, 
dÀaf
);

1230 
diskexã¡
 *
exã¡s
;

1231 
dïth
 = 
båì
->
roŸ
.depth;

1232 
gr
;

1234 
	`døw_dÀaf_°¨t
(
gi
, 
dÀaf_«me
, 
Àafbuf
);

1236 
	`Ârötf
(
gi
->
Â
,

1238 
	`be16_to_˝u
(
dÀaf
->
magic
), be16_to_˝u(dÀaf->
‰ì
),

1239 
	`be16_to_˝u
(
dÀaf
->
u£d
), 
	`dÀaf_groups
(dleaf));

1242 
gr
 = 0; g∏< 
	`dÀaf_groups
(
dÀaf
); gr++) {

1243 
group
 *grou∞
	`dÀaf_group_±r
(
groups
, 
gr
);

1244 
íåy
 *
íåõs
 = 
	`dÀaf_íåõs
(
dÀaf
, 
groups
, 
gr
);

1245 
ít
 = 0;É¡ < 
	`group_cou¡
(
group
);Ént++) {

1246 
ex
, 
ex_cou¡
 = 
	`dÀaf_exã¡_cou¡
(
íåõs
, 
ít
);

1247 
exã¡s
 = 
	`dÀaf_exã¡s
(
dÀaf
, 
groups
, 
gr
, 
ít
);

1248 
ex
 = 0;Éx < 
ex_cou¡
;Éx++) {

1249 
	`Ârötf
(
gi
->
Â
,

1253 
gr
, 
ít
, 
ex
,

1254 
	`exã¡_vîsi⁄
(
exã¡s
[
ex
]),

1255 
	`exã¡_cou¡
(
exã¡s
[
ex
]),

1256 
	`exã¡_block
(
exã¡s
[
ex
]),

1257 
ex
);

1261 
	`Ârötf
(
gi
->
Â
,

1265 
gr
 = 
	`dÀaf_groups
(
dÀaf
) - 1; gr >= 0; gr--) {

1266 
group
 *grou∞
	`dÀaf_group_±r
(
groups
, 
gr
);

1267 
íåy
 *
íåõs
 = 
	`dÀaf_íåõs
(
dÀaf
, 
groups
, 
gr
);

1268 
ít
;

1270 
ít
 = 
	`group_cou¡
(
group
) - 1;Ént >= 0;Ént--) {

1271 
íåy
 *íåy = 
	`dÀaf_íåy
(
íåõs
, 
ít
);

1273 
	`Ârötf
(
gi
->
Â
,

1276 
gr
, 
ít
, 
	`íåy_limô
(
íåy
), 
	`íåy_keylo
(entry),

1277 
ít
, 
	`dÀaf_exã¡_cou¡
(
íåõs
,Ént),

1278 
	`gë_ödex
(
group
, 
íåy
));

1283 
gr
 = 
	`dÀaf_groups
(
dÀaf
) - 1; gr >= 0; gr--) {

1284 
group
 *grou∞
	`dÀaf_group_±r
(
groups
, 
gr
);

1286 
	`Ârötf
(
gi
->
Â
,

1288 
gr
, 
	`group_cou¡
(
group
), 
	`group_keyhi
(group), gr);

1291 
	`døw_dÀaf_íd
(
gi
, 
dÀaf_«me
, 
Àafbuf
);

1293 
gr
 = 0; g∏< 
	`dÀaf_groups
(
dÀaf
); gr++) {

1294 
group
 *grou∞
	`dÀaf_group_±r
(
groups
, 
gr
);

1296 
	`Ârötf
(
gi
->
Â
,

1298 
dÀaf_«me
, 
gr
,

1299 
dÀaf_«me
, 
gr
, 0);

1300 
ít
 = 0;É¡ < 
	`group_cou¡
(
group
);Ént++) {

1302 
	`Ârötf
(
gi
->
Â
,

1304 
dÀaf_«me
, 
gr
, 
ít
,

1305 
dÀaf_«me
, 
gr
, 
ít
, 0);

1309 i‡(
›t_°©s
) {

1310 
byãs
 = (*
dÀaf
Ë+ 
	`dÀaf_‰ì
(
båì
, dleaf);

1311 
em±y
 = 
	`dÀaf_ˇn_‰ì
(
båì
, 
dÀaf
);

1313 
	`°©s_block_add
(
gi
->
°©s
->
own
, 
dïth
, 
	`bufödex
(
Àafbuf
),

1314 
byãs
, 
em±y
);

1318 
gøph_öfo
 *
gi_d©a
 = 
d©a
;

1319 
døw_d©a_›s
 *døw_d©a_›†
gi_d©a
->
¥iv©e
;

1320 
dwÆk
 
wÆk
;

1321 i‡(
	`dwÆk_¥obe
(
dÀaf
, 
båì
->
sb
->
blocksize
, &
wÆk
, 0)) {

1323 
block_t
 
ödex
 = 
	`dwÆk_ödex
(&
wÆk
);

1324 
block_t
 
block
 = 
	`dwÆk_block
(&
wÆk
);

1325 
cou¡
 = 
	`dwÆk_cou¡
(&
wÆk
);

1326 
døw_d©a_›s
->
	`døw_d©a
(
gi_d©a
, 
båì
, 
Àafbuf
,

1327 
ödex
, 
block
, 
cou¡
);

1329 i‡(
›t_°©s
) {

1330 
	`°©s_d©a_£ek_add
(
gi
->
°©s
->
own
, 
block
,

1331 
cou¡
);

1332 
	`°©s_chûd_£ek_add
(
gi
->
°©s
->
own
, 
dïth
,

1333 
	`bufödex
(
Àafbuf
), 
block
);

1334 
	`°©s_d©a_add
(
gi
->
°©s
->
own
, 
block
, 
cou¡
);

1336 } 
	`dwÆk_√xt
(&
wÆk
));

1338 
	}
}

1340 
	$døw_dÀaf2
(
gøph_öfo
 *
gi
, 
båì
 *btree,

1341 c⁄° *
dÀaf_«me
, 
buf„r_hód
 *
Àafbuf
,

1342 *
d©a
)

1344 if(
DEBUG_MODE_U
==1)

1346 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1348 
gøph_öfo
 *
gi_d©a
 = 
d©a
;

1349 
døw_d©a_›s
 *døw_d©a_›†
gi_d©a
->
¥iv©e
;

1350 
dÀaf2
 *
dÀaf
 = 
	`bufd©a
(
Àafbuf
);

1351 
diskexã¡2
 *
dex
, *
dex_limô
;

1352 
exã¡
 
¥ev
 = { .
logiˇl
 = 
TUXKEY_LIMIT
, };

1353 
dïth
 = 
båì
->
roŸ
.depth;

1355 i‡(
›t_°©s
) {

1356 
byãs
 = (*
dÀaf
)

1357 + (*
dÀaf
->
èbÀ
Ë* 
	`be16_to_˝u
(dÀaf->
cou¡
);

1358 
em±y
 = 
	`dÀaf2_ˇn_‰ì
(
båì
, 
dÀaf
);

1360 
	`°©s_block_add
(
gi
->
°©s
->
own
, 
dïth
, 
	`bufödex
(
Àafbuf
),

1361 
byãs
, 
em±y
);

1364 
	`døw_dÀaf_°¨t
(
gi
, 
dÀaf_«me
, 
Àafbuf
);

1366 
	`Ârötf
(
gi
->
Â
,

1368 
	`be16_to_˝u
(
dÀaf
->
magic
), be16_to_˝u(dÀaf->
cou¡
));

1370 
dex
 = 
dÀaf
->
èbÀ
;

1371 
dex_limô
 = 
dex
 + 
	`be16_to_˝u
(
dÀaf
->
cou¡
);

1372 
dex
 < 
dex_limô
) {

1373 
exã¡
 
ex
;

1374 
	`gë_exã¡
(
dex
, &
ex
);

1376 i‡(
¥ev
.
logiˇl
 !
TUXKEY_LIMIT
) {

1377 
block_t
 
logiˇl
 = 
¥ev
.logical;

1378 
block_t
 
physiˇl
 = 
¥ev
.physical;

1379 
cou¡
 = 
ex
.
logiˇl
 - 
¥ev
.logical;

1380 
	`Ârötf
(
gi
->
Â
, " (cou¡ %u)", 
cou¡
);

1382 i‡(!
physiˇl
)

1383 
skù
;

1386 
døw_d©a_›s
->
	`døw_d©a
(
gi_d©a
, 
båì
, 
Àafbuf
,

1387 
logiˇl
, 
physiˇl
, 
cou¡
);

1389 i‡(
›t_°©s
) {

1390 
	`°©s_d©a_£ek_add
(
gi
->
°©s
->
own
, 
physiˇl
,

1391 
cou¡
);

1392 
	`°©s_chûd_£ek_add
(
gi
->
°©s
->
own
, 
dïth
,

1393 
	`bufödex
(
Àafbuf
), 
physiˇl
);

1394 
	`°©s_d©a_add
(
gi
->
°©s
->
own
, 
physiˇl
, 
cou¡
);

1398 
skù
:

1399 
	`Ârötf
(
gi
->
Â
,

1402 
ex
.
vîsi⁄
 >> 
VER_BITS
,Éx.
logiˇl
,

1403 
ex
.
vîsi⁄
 & 
VER_MASK
,Éx.
physiˇl
);

1405 i‡(
dex
 =
dex_limô
 - 1)

1406 
	`Ârötf
(
gi
->
Â
, " (sentinel)");

1408 
¥ev
 = 
ex
;

1409 
dex
++;

1412 
	`døw_dÀaf_íd
(
gi
, 
dÀaf_«me
, 
Àafbuf
);

1413 
	}
}

1415 
	$døw_dÀaf
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

1416 *
d©a
)

1418 if(
DEBUG_MODE_U
==1)

1420 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1422 
gøph_öfo
 *
dåì_gi
 = 
d©a
;

1423 
gøph_öfo
 *
d©a_gi
 = 
dåì_gi
->
¥iv©e
;

1424 
dÀaf
 *dÀa‡
	`bufd©a
(
Àafbuf
);

1425 
block_t
 
blockƒ
 = 
Àafbuf
->
ödex
;

1426 
dÀaf_«me
[32];

1428 i‡(!
›t_vîbo£
 && (
døwn
 & 
DRAWN_DLEAF
))

1430 
døwn
 |
DRAWN_DLEAF
;

1432 
	`¢¥ötf
(
dÀaf_«me
, (dÀaf_«me), "vﬁm≠_%Œu", 
blockƒ
);

1434 i‡(
dÀaf
->
magic
 =
	`˝u_to_be16
(
TUX3_MAGIC_DLEAF
))

1435 
	`døw_dÀaf1
(
dåì_gi
, 
båì
, 
dÀaf_«me
, 
Àafbuf
, 
d©a_gi
);

1437 
	`døw_dÀaf2
(
dåì_gi
, 
båì
, 
dÀaf_«me
, 
Àafbuf
, 
d©a_gi
);

1440 
	`add_lök
(
dåì_gi
, "%s:s -> %s [ltail=%s,Ühead=cluster_%s];\n",

1441 
dÀaf_«me
, 
dåì_gi
->
fûed©a
, dåì_gi->
subgøph
,

1442 
dåì_gi
->
fûed©a
);

1443 
	}
}

1445 
wÆk_båì_›s
 
	gdøw_dåì_›s
 = {

1446 .
¥e
 = 
døw_båì_¥e
,

1447 .
	gbnode
 = 
døw_bnode
,

1448 .
	gÀaf
 = 
døw_dÀaf
,

1449 .
	gpo°
 = 
døw_båì_po°
,

1453 c⁄° *
	m«me
;

1454 
døw_d©a_›s
 *
	möfo
;

1455 } 
	gdåì_ty≥s
[] = {

1456 [
TUX_BITMAP_INO
] = {

1457 .
«me
 = "bitmap",

1458 .
	göfo
 = &
døw_bôm≠
,

1460 [
TUX_VTABLE_INO
] = {

1461 .
«me
 = "vtable",

1462 .
	göfo
 = &
døw_vèbÀ
,

1464 [
TUX_ATABLE_INO
] = {

1465 .
«me
 = "atable",

1466 .
	göfo
 = &
døw_©abÀ
,

1468 [
TUX_ROOTDIR_INO
] = {

1469 .
«me
 = "rootdir",

1470 .
	göfo
 = &
døw_dú
,

1474 
	#S_SHIFT
 12

	)

1475 
døw_d©a_›s
 *
	gdåì_funcs
[
S_IFMT
 >> 
S_SHIFT
] = {

1476 [
S_IFREG
 >> 
S_SHIFT
] = &
døw_fûe
,

1477 [
S_IFDIR
 >> 
S_SHIFT
] = &
døw_dú
,

1479 [
S_IFCHR
 >> 
S_SHIFT
] = &
døw_•ecül
,

1480 [
S_IFBLK
 >> 
S_SHIFT
] = &
døw_•ecül
,

1481 [
S_IFIFO
 >> 
S_SHIFT
] = &
døw_•ecül
,

1482 [
S_IFSOCK
 >> 
S_SHIFT
] = &
døw_•ecül
,

1484 [
S_IFLNK
 >> 
S_SHIFT
] = &
døw_symlök
,

1487 
	$døw_ûóf_cb
(
buf„r_hód
 *
Àafbuf
, 
©
,

1488 
öode
 *öode, *
d©a
)

1490 if(
DEBUG_MODE_U
==1)

1492 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1494 i‡(!
	`has_roŸ
(&
	`tux_öode
(
öode
)->
båì
))

1497 
gøph_öfo
 *
gi
 = 
d©a
;

1498 
båì
 *
dåì
 = &
	`tux_öode
(
öode
)->btree;

1499 
öum_t
 
öum
 = 
	`tux_öode
(
öode
)->inum;

1500 
block_t
 
blockƒ
 = 
	`bufödex
(
Àafbuf
);

1502 
døw_d©a_›s
 *draw_data_ops;

1503 
b«me
[64];

1504 
•ecül_öode
;

1505 i‡(
öum
 < 
	`ARRAY_SIZE
(
dåì_ty≥s
Ë&& dåì_ty≥s[öum].
«me
) {

1506 
	`•rötf
(
b«me
, "%s_dåì", 
dåì_ty≥s
[
öum
].
«me
);

1507 
døw_d©a_›s
 = 
dåì_ty≥s
[
öum
].
öfo
;

1508 
•ecül_öode
 = 1;

1510 
fûe_ty≥
 = (
öode
->
i_mode
 & 
S_IFMT
Ë>> 
S_SHIFT
;

1511 
	`•rötf
(
b«me
, "öo%Œu_dåì", 
öum
);

1512 
døw_d©a_›s
 = 
dåì_funcs
[
fûe_ty≥
];

1513 
•ecül_öode
 = 0;

1515 
	`as£π
(
døw_d©a_›s
);

1517 i‡(!
•ecül_öode
) {

1518 i‡(!
›t_vîbo£
 && (
døwn
 & 
DRAWN_DTREE
))

1521 
døwn
 |
DRAWN_DTREE
;

1525 
	`add_lök
(
gi
, "volmap_%llu:a%d:e -> volmap_%llu:n;\n",

1526 
blockƒ
, 
©
,

1527 
dåì
->
roŸ
.
block
);

1530 
°©s_fs
 
°©s_dåì
 = 
	`öô_°©s_fs
(
dåì
);

1531 
tmpfûe_öfo
 *
tmp
 = 
	`Æloc_tmpfûe
();

1533 
gøph_öfo
 
göfo_dåì
 = {

1534 .
Â
 = 
tmp
->fp,

1535 .
b«me
 = bname,

1536 .
 ame
 = "dleaf",

1537 .
lök_hód
 = 
	`LIST_HEAD_INIT
(
göfo_dåì
.link_head),

1538 .
°©s
 = &
°©s_dåì
,

1540 
	`¢¥ötf
(
göfo_dåì
.
fûed©a
, (ginfo_dtree.filedata),

1541 "%s_d©a", 
b«me
);

1544 
tmp
 = 
	`Æloc_tmpfûe
();

1545 
gøph_öfo
 
göfo_d©a
 = {

1546 .
Â
 = 
tmp
->fp,

1547 .
b«me
 = 
göfo_dåì
.
fûed©a
,

1548 .
 ame
 = 
göfo_dåì
.
fûed©a
,

1549 .
lök_hód
 = 
	`LIST_HEAD_INIT
(
göfo_d©a
.link_head),

1550 .
¥iv©e
 = 
døw_d©a_›s
,

1551 .
°©s
 = &
°©s_dåì
,

1554 
göfo_dåì
.
¥iv©e
 = &
göfo_d©a
;

1556 
døw_d©a_›s
->
	`døw_°¨t
(&
göfo_d©a
, 
dåì
);

1557 
	`wÆk_båì
(
dåì
, &
døw_dåì_›s
, &
göfo_dåì
);

1558 
døw_d©a_›s
->
	`døw_íd
(&
göfo_d©a
, 
dåì
);

1560 i‡(
›t_°©s
 > 1) {

1561 i‡(
•ecül_öode
) {

1562 
	`°©s_¥öt
(
dåì
->
sb
, 
°©s_dåì
.
own
,

1563 1, 
	`S_ISDIR
(
öode
->
i_mode
),

1564 "dåì, %s", 
dåì_ty≥s
[
öum
].
«me
);

1566 
	`°©s_¥öt
(
dåì
->
sb
, 
°©s_dåì
.
own
,

1567 1, 
	`S_ISDIR
(
öode
->
i_mode
),

1568 "dåì, inum %Lu", 
öum
);

1570 } i‡(
›t_°©s
) {

1571 
¥öt_⁄˚
;

1572 i‡(!
¥öt_⁄˚
) {

1573 
¥öt_⁄˚
++;

1574 
	`¥ötf
("Per-inode stats was suppressed."

1578 i‡(
›t_°©s
) {

1580 
	`°©s_båì_mîge
(&
gi
->
°©s
->
dåì_sum
, 
°©s_dåì
.
own
);

1583 
	`de°roy_°©s_fs
(&
°©s_dåì
);

1586 
døwn
 &~
DRAWN_DLEAF
;

1587 
	}
}

1589 (*
	tdøw_ûóf_©å_t
)(
	tgøph_öfo
 *, 
	tbåì
 *,

1590 
	tbuf„r_hód
 *, 
	töum_t
, *, 
	tu16
);

1592 
	$døw_ûóf_©å
(
gøph_öfo
 *
gi
, 
båì
 *btree,

1593 
buf„r_hód
 *
Àafbuf
, 
öum_t
 
öum
,

1594 *
©ås
, 
u16
 
size
)

1596 if(
DEBUG_MODE_U
==1)

1598 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1600 
sb
 *sb = 
båì
->sb;

1601 
öode
 *öodê
	`øpid_›í_öode
(
sb
, 
NULL
, 0);

1602 
dïth
 = 
båì
->
roŸ
.depth;

1605 
öode
 *
ˇche_öode
 = 
	`tux3_ûookup
(
sb
, 
öum
);

1606 
‹ph™
 = 0;

1607 i‡(
ˇche_öode
) {

1608 
‹ph™
 = 
	`tux3_öode_is_‹ph™
(
	`tux_öode
(
ˇche_öode
));

1609 
	`ùut
(
ˇche_öode
);

1612 
üâr_›s
.
	`decode
(
båì
, 
öode
, 
©ås
, 
size
);

1614 
	`Ârötf
(
gi
->
Â
,

1618 
‹ph™
 ? "<font color=\"blue\">" : "",

1619 
öum
, 
size
,

1620 
	`tux_öode
(
öode
)->
båì
.
roŸ
.
block
,

1621 
	`tux_öode
(
öode
)->
båì
.
roŸ
.
dïth
,

1622 
‹ph™
 ? ", orphan" : "",

1623 
‹ph™
 ? "</font>" : "");

1625 i‡(
›t_°©s
 && 
	`has_roŸ
(&
	`tux_öode
(
öode
)->
båì
)) {

1626 
	`°©s_chûd_£ek_add
(
gi
->
°©s
->
own
, 
dïth
, 
	`bufödex
(
Àafbuf
),

1627 
	`tux_öode
(
öode
)->
båì
.
roŸ
.
block
);

1630 
	`‰ì_xˇche
(
öode
);

1631 
	`‰ì_m≠
(
öode
->
m≠
);

1632 
	}
}

1634 
	$__døw_ûóf
(
gøph_öfo
 *
gi
, 
båì
 *btree,

1635 
buf„r_hód
 *
Àafbuf
,

1636 
døw_ûóf_©å_t
 
døw_ûóf_©å
)

1638 if(
DEBUG_MODE_U
==1)

1640 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1642 
ûóf
 *ûó‡
	`bufd©a
(
Àafbuf
);

1643 
__be16
 *
di˘
 = 
	`ûóf_di˘
(
båì
, 
ûóf
);

1644 
block_t
 
blockƒ
 = 
Àafbuf
->
ödex
;

1645 
dïth
 = 
båì
->
roŸ
.depth;

1646 
©
;

1648 
	`Ârötf
(
gi
->
Â
,

1651 "<<èbÀ " 
TABLE_STYLE
 ">\n"

1658 
blockƒ
,

1659 
gi
->
 ame
, 
blockƒ
,

1660 
	`buf„r_dúty
(
Àafbuf
) ? ", dirty" : "",

1661 
	`be16_to_˝u
(
ûóf
->
magic
), 
	`icou¡
(ûóf), 
	`iba£
(ileaf));

1664 
u16
 
off£t
 = 0, 
limô
, 
size
;

1665 
©
 = 0;áà< 
	`icou¡
(
ûóf
);át++) {

1666 
limô
 = 
	`__©di˘
(
di˘
, 
©
 + 1);

1667 i‡(
off£t
 >
limô
)

1669 
size
 = 
limô
 - 
off£t
;

1671 
öum_t
 
öum
 = 
	`iba£
(
ûóf
Ë+ 
©
;

1672 *
©ås
 = 
ûóf
->
èbÀ
 + 
off£t
;

1674 
off£t
 = 
limô
;

1676 
	`Ârötf
(
gi
->
Â
,

1679 
©
);

1681 
	`døw_ûóf_©å
(
gi
, 
båì
, 
Àafbuf
, 
öum
, 
©ås
, 
size
);

1683 
	`Ârötf
(
gi
->
Â
,

1687 
	`Ârötf
(
gi
->
Â
,

1693 
©
 = 
	`icou¡
(
ûóf
) - 1;át >= 0;át--) {

1694 
	`Ârötf
(
gi
->
Â
,

1699 
©
, 
	`©di˘
(
di˘
,át + 1),átdict(dict,át),

1700 
	`ûóf_©å_size
(
di˘
, 
©
), 
	`iba£
(
ûóf
) +át);

1703 
	`Ârötf
(
gi
->
Â
,

1708 
	`buf„r_dúty
(
Àafbuf
) ? "color =Ñed\n" : "");

1711 
©
 = 0;áà< 
	`icou¡
(
ûóf
);át++) {

1712 i‡(!
	`ûóf_©å_size
(
di˘
, 
©
))

1716 
	`Ârötf
(
gi
->
Â
,

1718 
blockƒ
, 
©
,

1719 
blockƒ
, 
©
);

1722 i‡(
›t_°©s
) {

1723 
byãs
 = (*
ûóf
Ë+ 
	`ûóf_√ed
(
båì
, ileaf);

1724 
em±y
 = 
båì
->
›s
->
	`Àaf_ˇn_‰ì
(båì, 
ûóf
);

1726 
	`°©s_block_add
(
gi
->
°©s
->
own
, 
dïth
, 
	`bufödex
(
Àafbuf
),

1727 
byãs
, 
em±y
);

1729 
	}
}

1731 
	$døw_ûóf
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

1732 *
d©a
)

1734 if(
DEBUG_MODE_U
==1)

1736 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1738 
gøph_öfo
 *
gi
 = 
d©a
;

1740 i‡(!
›t_vîbo£
 && (
døwn
 & 
DRAWN_ILEAF
))

1742 
døwn
 |
DRAWN_ILEAF
;

1744 
	`__døw_ûóf
(
gi
, 
båì
, 
Àafbuf
, 
døw_ûóf_©å
);

1746 
	`wÆk_ûóf
(
båì
, 
Àafbuf
, 
døw_ûóf_cb
, 
gi
);

1747 
	}
}

1749 
wÆk_båì_›s
 
	gdøw_ôªe_›s
 = {

1750 .
¥e
 = 
døw_båì_¥e
,

1751 .
	gbnode
 = 
døw_bnode
,

1752 .
	gÀaf
 = 
døw_ûóf
,

1753 .
	gpo°
 = 
døw_båì_po°
,

1756 
	$døw_ﬁóf_©å
(
gøph_öfo
 *
gi
, 
båì
 *btree,

1757 
buf„r_hód
 *
Àafbuf
, 
öum_t
 
öum
,

1758 *
©ås
, 
u16
 
size
)

1760 if(
DEBUG_MODE_U
==1)

1762 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1764 
	`Ârötf
(
gi
->
Â
, "©å†(öÿ%Œu, sizê%u)", 
öum
, 
size
);

1765 
	}
}

1767 
	$døw_ﬁóf
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

1768 *
d©a
)

1770 if(
DEBUG_MODE_U
==1)

1772 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1774 
gøph_öfo
 *
gi
 = 
d©a
;

1776 i‡(!
›t_vîbo£
 && (
døwn
 & 
DRAWN_OLEAF
))

1778 
døwn
 |
DRAWN_OLEAF
;

1780 
	`__døw_ûóf
(
gi
, 
båì
, 
Àafbuf
, 
døw_ﬁóf_©å
);

1781 
	}
}

1783 
wÆk_båì_›s
 
	gdøw_Ÿªe_›s
 = {

1784 .
¥e
 = 
døw_båì_¥e
,

1785 .
	gbnode
 = 
døw_bnode
,

1786 .
	gÀaf
 = 
døw_ﬁóf
,

1787 .
	gpo°
 = 
døw_båì_po°
,

1790 
	$døw_log_¥e
(
sb
 *sb, 
buf„r_hód
 *
buf„r
,

1791 
logcou¡
, 
obsﬁëe
, *
d©a
)

1793 if(
DEBUG_MODE_U
==1)

1795 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1797 
gøph_öfo
 *
gi
 = 
d©a
;

1798 
logblock
 *
log
 = 
	`bufd©a
(
buf„r
);

1800 
	`Ârötf
(
gi
->
Â
,

1804 
	`bufödex
(
buf„r
), bufindex(buffer), bufindex(buffer),

1805 
	`buf„r_dúty
(
buf„r
) ? ", dirty" : "",

1806 
	`be16_to_˝u
(
log
->
magic
), be16_to_˝u÷og->
byãs
),

1807 
	`be64_to_˝u
(
log
->
logchaö
));

1809 i‡(
›t_°©s
) {

1810 
block_t
 
£ek
 = 
	`°©s_suµo£_£ek
(
	`bufödex
(
buf„r
), 1);

1811 
byãs
 = (*
log
Ë+ 
	`be16_to_˝u
(log->bytes);

1813 
gi
->
°©s
->
logblock
++;

1814 
gi
->
°©s
->
logblock_byãs
 +
byãs
;

1815 
	`°©s_£ek_add
(&
gi
->
°©s
->
logblock_£ek
, 
£ek
);

1817 
	}
}

1819 
	$døw_log
(
sb
 *sb, 
buf„r_hód
 *
buf„r
,

1820 
u8
 
code
, u8 *
p
, 
Àn
, 
obsﬁëe
, *
d©a
)

1822 if(
DEBUG_MODE_U
==1)

1824 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1826 
gøph_öfo
 *
gi
 = 
d©a
;

1828 
	`Ârötf
(
gi
->
Â
, " | [%s] ", 
log_«me
[
code
]);

1830 
code
) {

1831 
LOG_BALLOC
:

1832 
LOG_BFREE
:

1833 
LOG_BFREE_ON_UNIFY
:

1834 
LOG_BFREE_RELOG
: {

1835 
u32
 
cou¡
;

1836 
u64
 
block
;

1837 
p
 = 
	`decode32
’, &
cou¡
);

1838 
p
 = 
	`decode48
’, &
block
);

1839 
	`Ârötf
(
gi
->
Â
, "cou¡ %u, block %Œu ", 
cou¡
, 
block
);

1842 
LOG_LEAF_REDIRECT
:

1843 
LOG_BNODE_REDIRECT
: {

1844 
u64
 
ﬁd
, 
√w
;

1845 
p
 = 
	`decode48
’, &
ﬁd
);

1846 
p
 = 
	`decode48
’, &
√w
);

1847 
	`Ârötf
(
gi
->
Â
, "ﬁd %Œu,Çew %Œu ", 
ﬁd
, 
√w
);

1850 
LOG_LEAF_FREE
:

1851 
LOG_BNODE_FREE
: {

1852 
u64
 
block
;

1853 
p
 = 
	`decode48
’, &
block
);

1854 
	`Ârötf
(
gi
->
Â
, "%s %llu ",

1855 
code
 =
LOG_LEAF_FREE
 ? "leaf" : "bnode",

1856 
block
);

1859 
LOG_BNODE_ROOT
: {

1860 
u64
 
roŸ
, 
À·
, 
right
, 
rkey
;

1861 
cou¡
 = *
p
++;

1862 
p
 = 
	`decode48
’, &
roŸ
);

1863 
p
 = 
	`decode48
’, &
À·
);

1864 
p
 = 
	`decode48
’, &
right
);

1865 
p
 = 
	`decode48
’, &
rkey
);

1866 
	`Ârötf
(
gi
->
Â
,

1869 
cou¡
, 
roŸ
, 
À·
, 
right
, 
rkey
);

1872 
LOG_BNODE_SPLIT
: {

1873 
u64
 
§c
, 
de°
;

1874 
pos
;

1875 
p
 = 
	`decode16
’, &
pos
);

1876 
p
 = 
	`decode48
’, &
§c
);

1877 
p
 = 
	`decode48
’, &
de°
);

1878 
	`Ârötf
(
gi
->
Â
, "pos %u, src %llu, dest %llu ",

1879 
pos
, 
§c
, 
de°
);

1882 
LOG_BNODE_ADD
:

1883 
LOG_BNODE_UPDATE
: {

1884 
u64
 
∑ª¡
, 
chûd
, 
key
;

1885 
p
 = 
	`decode48
’, &
∑ª¡
);

1886 
p
 = 
	`decode48
’, &
chûd
);

1887 
p
 = 
	`decode48
’, &
key
);

1888 
	`Ârötf
(
gi
->
Â
, "parent %llu, child %llu, key %llu ",

1889 
∑ª¡
, 
chûd
, 
key
);

1892 
LOG_BNODE_MERGE
:

1894 
u64
 
§c
, 
d°
;

1895 
p
 = 
	`decode48
’, &
§c
);

1896 
p
 = 
	`decode48
’, &
d°
);

1897 
	`Ârötf
(
gi
->
Â
, "§¯%Œu, d° %Œu ", 
§c
, 
d°
);

1900 
LOG_BNODE_DEL
:

1902 
cou¡
;

1903 
u64
 
bnode
, 
key
;

1904 
p
 = 
	`decode16
’, &
cou¡
);

1905 
p
 = 
	`decode48
’, &
bnode
);

1906 
p
 = 
	`decode48
’, &
key
);

1907 
	`Ârötf
(
gi
->
Â
, "count %u, bnode %llu, key %llu ",

1908 
cou¡
, 
bnode
, 
key
);

1911 
LOG_BNODE_ADJUST
:

1913 
u64
 
node
, 
‰om
, 
to
;

1914 
p
 = 
	`decode48
’, &
node
);

1915 
p
 = 
	`decode48
’, &
‰om
);

1916 
p
 = 
	`decode48
’, &
to
);

1917 
	`Ârötf
(
gi
->
Â
, "node %llu, from %llu,Åo %llu ",

1918 
node
, 
‰om
, 
to
);

1921 
LOG_ORPHAN_ADD
:

1922 
LOG_ORPHAN_DEL
: {

1923 
vîsi⁄
;

1924 
u64
 
öum
;

1925 
p
 = 
	`decode16
’, &
vîsi⁄
);

1926 
p
 = 
	`decode48
’, &
öum
);

1927 
	`Ârötf
(
gi
->
Â
, "version %x, inum %llu ",

1928 
vîsi⁄
, 
öum
);

1931 
LOG_FREEBLOCKS
: {

1932 
u64
 
‰ìblocks
;

1933 
p
 = 
	`decode48
’, &
‰ìblocks
);

1934 
	`Ârötf
(
gi
->
Â
, "‰ìblock†%Œu ", 
‰ìblocks
);

1937 
LOG_UNIFY
:

1938 
LOG_DELTA
:

1941 
	`Ârötf
(
°dîr
, "Unknow¿log codê0x%x!\n", 
code
);

1942 
	`as£π
(0);

1945 
	}
}

1947 
	$døw_log_po°
(
sb
 *sb, 
buf„r_hód
 *
buf„r
,

1948 
logcou¡
, 
obsﬁëe
, *
d©a
)

1950 if(
DEBUG_MODE_U
==1)

1952 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1954 
gøph_öfo
 *
gi
 = 
d©a
;

1955 
logblock
 *
log
 = 
	`bufd©a
(
buf„r
);

1957 
	`Ârötf
(
gi
->
Â
,

1962 
	`buf„r_dúty
(
buf„r
) ? "color =Ñed\n" : "");

1965 i‡(
logcou¡
 > 1) {

1967 
	`Ârötf
(
gi
->
Â
,

1969 
	`bufödex
(
buf„r
), 
	`be64_to_˝u
(
log
->
logchaö
));

1971 
	}
}

1973 
wÆk_logchaö_›s
 
	gdøw_logchaö_›s
 = {

1974 .
¥e
 = 
døw_log_¥e
,

1975 .
	glog
 = 
døw_log
,

1976 .
	gpo°
 = 
døw_log_po°
,

1979 
	$døw_logchaö
(
gøph_öfo
 *
gi
, 
sb
 *sb)

1981 if(
DEBUG_MODE_U
==1)

1983 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

1985 
	`Ârötf
(
gi
->
Â
,

1989 
	`wÆk_logchaö
(
sb
, &
døw_logchaö_›s
, 
gi
);

1991 
	`Ârötf
(
gi
->
Â
,

1993 
	}
}

1995 
	$døw_sb
(
gøph_öfo
 *
gi
, 
sb
 *sb)

1997 if(
DEBUG_MODE_U
==1)

1999 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

2001 
disksu≥r
 *
txsb
 = &
sb
->
su≥r
;

2003 
	`Ârötf
(
gi
->
Â
,

2020 (
block_t
)
SB_LOC
 >> 
sb
->
blockbôs
, sb->
‰ìblocks
,

2021 
txsb
->
magic
,

2022 (
u8
)
txsb
->
magic
[4], (u8)txsb->magic[5],

2023 (
u8
)
txsb
->
magic
[6], (u8)txsb->magic[7],

2024 
	`be64_to_˝u
(
txsb
->
búthd©e
),

2025 
	`be64_to_˝u
(
txsb
->
Êags
),

2026 
	`be64_to_˝u
(
txsb
->
úoŸ
),

2027 
	`ôªe_båì
(
sb
)->
roŸ
.
dïth
, iåì_båì(sb)->roŸ.
block
,

2028 
	`be64_to_˝u
(
txsb
->
‹oŸ
),

2029 
	`Ÿªe_båì
(
sb
)->
roŸ
.
dïth
, oåì_båì(sb)->roŸ.
block
,

2030 
sb
->
blockbôs
, sb->
blocksize
,

2031 
	`be64_to_˝u
(
txsb
->
vﬁblocks
), be64_to_˝u—xsb->
u£döodes
),

2032 
	`be64_to_˝u
(
txsb
->
√xtblock
),

2033 
	`be64_to_˝u
(
txsb
->
©omdi˘size
),

2034 
	`be32_to_˝u
(
txsb
->
‰ì©om
), be32_to_˝u—xsb->
©omgí
),

2035 
	`be64_to_˝u
(
txsb
->
logchaö
), be64_to_cpu(txsb->logchain),

2036 
	`be32_to_˝u
(
txsb
->
logcou¡
));

2039 
	`Ârötf
(
gi
->
Â
, "tux3_sb:iroot0:e -> volmap_%llu:n;\n\n",

2040 
	`ôªe_båì
(
sb
)->
roŸ
.
block
);

2042 
	`Ârötf
(
gi
->
Â
, "tux3_sb:oroot0:e -> volmap_%llu:n;\n\n",

2043 
	`Ÿªe_båì
(
sb
)->
roŸ
.
block
);

2045 
	`Ârötf
(
gi
->
Â
, "tux3_sb:logchain_%llu:e ->Üogchain_%llu:n;\n\n",

2046 
	`be64_to_˝u
(
txsb
->
logchaö
), be64_to_cpu(txsb->logchain));

2047 
	}
}

2049 
	$ußge
()

2051 if(
DEBUG_MODE_U
==1)

2053 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

2055 
	`¥ötf
("tux3 [-h|--help] [-v|--verbose] [-b|--blocksize=<size>] <volume>\n");

2056 
	`exô
(1);

2057 
	}
}

2059 
	$maö
(
¨gc
, *
¨gv
[])

2061 if(
DEBUG_MODE_U
==1)

2063 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

2065 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

2066 { "°©s", 
no_¨gumít
, 
NULL
, 's' },

2067 { "vîbo£", 
no_¨gumít
, 
NULL
, 'v' },

2068 { "hñp", 
no_¨gumít
, 
NULL
, 'h' },

2069 { 
NULL
, 0, NULL, 0 }

2071 c⁄° *
vﬁ«me
 = 
NULL
;

2072 
îr
;

2075 
c
, 
›tödex
 = 0;

2076 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "svh", 
l⁄g_›ti⁄s
, &
›tödex
);

2077 i‡(
c
 == -1)

2079 
c
) {

2081 
›t_°©s
++;

2083 i‡(!
›t_vîbo£
) {

2084 
›t_vîbo£
++;

2085 
	`¥ötf
("Turn --verbose on for stats\n");

2089 
›t_vîbo£
++;

2093 
ußge
;

2097 i‡(
¨gc
 - 
›töd
 < 1)

2098 
ußge
;

2100 
îr
 = 
	`tux3_öô_mem
();

2101 i‡(
îr
)

2102 
îr‹
;

2105 
vﬁ«me
 = 
¨gv
[
›töd
++];

2106 
fd
 = 
	`›í
(
vﬁ«me
, 
O_RDONLY
);

2107 i‡(
fd
 < 0)

2108 
	`°ªº‹_exô
(1, 
î∫o
, "couldn'à›í %s", 
vﬁ«me
);

2111 
dev
 *dev = &(dev){ .
fd
 = fd };

2112 
sb
 *sb = 
	`øpid_sb
(
dev
);

2113 
îr
 = 
	`lﬂd_sb
(
sb
);

2114 i‡(
îr
)

2115 
îr‹
;

2117 
dev
->
bôs
 = 
sb
->
blockbôs
;

2118 
	`öô_buf„rs
(
dev
, 1 << 20, 2);

2120 
ª∂ay
 *
Ω
 = 
	`tux3_öô_fs
(
sb
);

2121 i‡(
	`IS_ERR
(
Ω
)) {

2122 
îr
 = 
	`PTR_ERR
(
Ω
);

2123 
îr‹
;

2126 
gøph_öfo
 
göfo
;

2127 
fûíame
[256];

2128 
FILE
 *
fûe
;

2129 
	`•rötf
(
fûíame
, "%s.dŸ", 
vﬁ«me
);

2130 
fûe
 = 
	`f›í
(
fûíame
, "w");

2131 i‡(!
fûe
)

2132 
	`°ªº‹_exô
(1, 
î∫o
, "coundn'à›í %s\n", 
fûíame
);

2134 
°©s_fs
 
°©s_ôªe
 = 
	`öô_°©s_fs
(
	`ôªe_båì
(
sb
));

2135 
°©s_fs
 
°©s_Ÿªe
 = 
	`öô_°©s_fs
(
	`Ÿªe_båì
(
sb
));

2137 
	`Ârötf
(
fûe
,

2142 
göfo
 = (
gøph_öfo
){

2143 .
Â
 = 
fûe
,

2144 .
b«me
 = "itree",

2145 .
 ame
 = "ileaf",

2146 .
lök_hód
 = 
	`LIST_HEAD_INIT
(
göfo
.link_head),

2147 .
°©s
 = &
°©s_ôªe
,

2149 
	`døw_sb
(&
göfo
, 
sb
);

2150 
	`døw_logchaö
(&
göfo
, 
sb
);

2151 
	`wÆk_båì
(
	`ôªe_båì
(
sb
), &
døw_ôªe_›s
, &
göfo
);

2153 
göfo
 = (
gøph_öfo
){

2154 .
Â
 = 
fûe
,

2155 .
b«me
 = "otree",

2156 .
 ame
 = "oleaf",

2157 .
lök_hód
 = 
	`LIST_HEAD_INIT
(
göfo
.link_head),

2158 .
°©s
 = &
°©s_Ÿªe
,

2160 
	`wÆk_båì
(
	`Ÿªe_båì
(
sb
), &
døw_Ÿªe_›s
, &
göfo
);

2162 
	`mîge_tmpfûes
(&
göfo
);

2164 
	`Ârötf
(
göfo
.
Â
, "}\n");

2165 
	`f˛o£
(
göfo
.
Â
);

2167 
îr
 = 
	`ª∂ay_°age3
(
Ω
, 0);

2168 i‡(
îr
)

2169 
îr‹
;

2171 
	`put_su≥r
(
sb
);

2172 
	`tux3_exô_mem
();

2174 i‡(
›t_°©s
) {

2175 
	`°©s_¥öt
(
sb
, 
°©s_ôªe
.
dåì_sum
, 1, 1, "dtree");

2176 
	`°©s_¥öt
(
sb
, 
°©s_ôªe
.
own
, 0, 0, "itree");

2177 
	`°©s_¥öt
(
sb
, 
°©s_Ÿªe
.
own
, 0, 0, "otree");

2179 
	`°©s_¥öt_log
(
sb
, &
°©s_ôªe
);

2181 
	`°©s_båì_mîge
(&
°©s_ôªe
.
own
, sèts_ôªe.
dåì_sum
);

2182 
	`°©s_båì_mîge
(&
°©s_ôªe
.
own
, 
°©s_Ÿªe
.own);

2183 
	`°©s_¥öt
(
sb
, 
°©s_ôªe
.
own
, 1, 1, "total");

2186 
	`de°roy_°©s_fs
(&
°©s_ôªe
);

2187 
	`de°roy_°©s_fs
(&
°©s_Ÿªe
);

2191 
îr‹
:

2192 
	`°ªº‹_exô
(1, -
îr
, "eek!");

2195 
ußge
:

2196 
	`ußge
();

2198 
	}
}

	@tux3user.h

1 #i‚de‡
TUX3_USER_H


2 
	#TUX3_USER_H


	)

4 
	~<°ddef.h
>

5 
	~<°dlib.h
>

6 
	~<°dio.h
>

7 
	~<°rög.h
>

8 
	~<uni°d.h
>

9 
	~<öây≥s.h
>

10 
	~<limôs.h
>

11 
	~<sys/time.h
>

12 
	~<sys/°©.h
>

13 
	~<f˙é.h
>

14 
	~<time.h
>

15 
	~<î∫o.h
>

16 
	~"buf„r.h
"

17 
	~"åa˚.h
"

18 
	~"cuºít_èsk.h
"

19 
	~"›ti⁄s.h
"

21 
	~"libklib/libklib.h
"

22 
	~"libklib/lockdebug.h
"

23 
	~"libklib/©omic.h
"

24 
	~"libklib/mm.h
"

25 
	~"libklib/¶ab.h
"

26 
	~"libklib/fs.h
"

27 
	~"wrôeback.h
"

29 #i‚de‡
XATTR_CREATE


30 
	#XATTR_CREATE
 0x1

	)

31 
	#XATTR_REPLACE
 0x2

	)

34 
ölöe
 
öode
 *
	$buf„r_öode
(
buf„r_hód
 *
buf„r
)

36  
buf„r
->
m≠
->
öode
;

37 
	}
}

39 
ölöe
 
time•ec
 
	$gëtime
()

41 
timevÆ
 
now
;

42 
	`gëtimeofday
(&
now
, 
NULL
);

43  (
time•ec
){ .
tv_£c
 = 
now
.tv_£c, .
tv_n£c
 =Çow.
tv_u£c
 * 1000 };

44 
	}
}

46 
	#MAX_LFS_FILESIZE
 ((
loff_t
)
LLONG_MAX
)

	)

49 
	sfûe
 {

50 
öode
 *
	mf_öode
;

51 
u64
 
	mf_vîsi⁄
;

52 
loff_t
 
	mf_pos
;

55 
ölöe
 
öode
 *
	$fûe_öode
(
fûe
 *
f
)

57  
f
->
f_öode
;

58 
	}
}

60 
	~"kî√l/tux3.h
"

62 
	#INIT_DISKSB
(
_bôs
, 
_blocks
Ë(
disksu≥r
){ \

63 .
magic
 = 
TUX3_MAGIC
, \

64 .
búthd©e
 = 0, \

65 .
Êags
 = 0, \

66 .
blockbôs
 = 
	`˝u_to_be16
(
_bôs
), \

67 .
vﬁblocks
 = 
	`˝u_to_be64
(
_blocks
), \

69 .
úoŸ
 = 
	`˝u_to_be64
(
	`∑ck_roŸ
(&
no_roŸ
)), \

70 .
‹oŸ
 = 
	`˝u_to_be64
(
	`∑ck_roŸ
(&
no_roŸ
)), \

72 .
u£döodes
 = 
	`˝u_to_be64
(
TUX_NORMAL_INO
), \

73 .
√xtblock
 = 0, \

74 .
©omdi˘size
 = 0, \

75 .
‰ì©om
 = 0, \

76 .
©omgí
 = 
	`˝u_to_be32
(1), \

77 .
logchaö
 = 0, \

78 .
logcou¡
 = 0, \

79 }

	)

81 
	#øpid_›í_öode
(
sb
, 
io
, 
mode
) ({ \

82 
tux3_öode
 *
__tux
 = &(tux3_inode){}; \

83 
öode
 *
__öode
 = &
__tux
->
vfs_öode
; \

85 
	`öode_öô
(
__tux
, 
sb
, 
mode
); \

87 
	`öô_rw£m
(&
__tux
->
båì
.
lock
); \

89 
__öode
->
m≠
 = 
	`√w_m≠
((
sb
)->
dev
, 
io
); \

90 
	`as£π
(
__öode
->
m≠
); \

91 
__öode
->
m≠
->
öode
 = __inode; \

92 
__öode
; \

93 })

	)

95 
	#øpid_sb
(
x
Ë(&(
sb
){ .
dev
 = x })

	)

98 
tux_dump_íåõs
(
buf„r_hód
 *
buf„r
);

101 
tuxªad
(
fûe
 *fûe, *
d©a
, 
Àn
);

102 
tuxwrôe
(
fûe
 *fûe, c⁄° *
d©a
, 
Àn
);

103 
tux£ek
(
fûe
 *fûe, 
loff_t
 
pos
);

104 
∑ge_symlök
(
öode
 *öode, c⁄° *
sym«me
, 
Àn
);

105 
∑ge_ªadlök
(
öode
 *öode, *
buf
, 
size
);

108 
öode_Àak_check
();

109 
ªmove_öode_hash
(
öode
 *inode);

110 
u∆ock_√w_öode
(
öode
 *inode);

111 
__igë
(
öode
 *inode);

112 
ihﬁd
(
öode
 *inode);

113 
loff_t
 
i_size_ªad
(c⁄° 
öode
 *inode);

114 
i_size_wrôe
(
öode
 *öode, 
loff_t
 
i_size
);

115 
ùut
(
öode
 *inode);

116 
__tuxåunˇã
(
öode
 *öode, 
loff_t
 
size
);

117 
tuxåunˇã
(
öode
 *öode, 
loff_t
 
size
);

120 
öode
 *
tux›í
(öodê*
dú
, c⁄° *
«me
, 
Àn
);

121 
öode
 *
__tuxmknod
(öodê*
dú
, c⁄° *
«me
, 
Àn
,

122 
tux_üâr
 *
üâr
, 
dev_t
 
rdev
);

123 
öode
 *
tux¸óã
(öodê*
dú
, c⁄° *
«me
, 
Àn
,

124 
tux_üâr
 *
üâr
);

125 
öode
 *
__tuxlök
(öodê*
§c_öode
, öodê*
dú
,

126 c⁄° *
d°«me
, 
d°Àn
);

127 
tuxlök
(
öode
 *
dú
, c⁄° *
§˙ame
, 
§˛í
,

128 c⁄° *
d°«me
, 
d°Àn
);

129 
öode
 *
__tuxsymlök
(öodê*
dú
, c⁄° *
«me
, 
Àn
,

130 
tux_üâr
 *
üâr
, c⁄° *
sym«me
);

131 
tuxsymlök
(
öode
 *
dú
, c⁄° *
«me
, 
Àn
,

132 
tux_üâr
 *
üâr
, c⁄° *
sym«me
);

133 
tuxu∆ök
(
öode
 *
dú
, c⁄° *
«me
, 
Àn
);

134 
tuxrmdú
(
öode
 *
dú
, c⁄° *
«me
, 
Àn
);

135 
tuxª«me
(
öode
 *
ﬁd_dú
, c⁄° *
ﬁd_«me
, 
ﬁd_Àn
,

136 
öode
 *
√w_dú
, c⁄° *
√w_«me
, 
√w_Àn
);

139 
öode_öô
(
tux3_öode
 *
tuxnode
, 
sb
 *sb, 
umode_t
 
mode
);

140 
‰ì_öode_check
(
tux3_öode
 *
tuxnode
);

141 
put_su≥r
(
sb
 *sb);

142 
make_tux3
(
sb
 *sb);

143 
tux3_öô_mem
();

144 
tux3_exô_mem
();

147 
°ackåa˚
();

148 
devio
(
rw
, 
dev
 *dev, 
loff_t
 
off£t
, *
d©a
, 
Àn
);

149 
devio_vec
(
rw
, 
dev
 *dev, 
loff_t
 
off£t
, 
iovec
 *
iov
,

150 
iov˙t
);

151 
blockio
(
rw
, 
sb
 *sb, 
buf„r_hód
 *
buf„r
, 
block_t
 
block
);

152 
blockio_vec
(
rw
, 
bufvec
 *bufvec, 
block_t
 
block
, 
cou¡
);

154 
	#tux3_msg
(
sb
, 
fmt
, ...) \

155 
	`__tux3_msg
(
sb
, "", "", 
fmt
 "\n", ##
__VA_ARGS__
)

	)

156 
	#tux3_îr
(
sb
, 
fmt
, ...) \

157 
	`__tux3_msg
(
sb
, "", "", \

158 "Eº‹: %s:%d: " 
fmt
 "\n", 
__func__
, 
__LINE__
, ##
__VA_ARGS__
)

	)

159 
	#tux3_w¨n
(
sb
, 
fmt
, ...) \

160 
	`__tux3_msg
(
sb
, "", "", "W¨nög: " 
fmt
 "\n", ##
__VA_ARGS__
)

	)

162 
	#°ªº‹_exô
(
ªt
, 
îr
, 
fmt
, ...) do { \

163 i‡(
îr
) \

164 
	`tux3_îr
(
NULL
, 
fmt
 ": %s", ##
__VA_ARGS__
, 
	`°ªº‹
(
îr
)); \

166 
	`tux3_îr
(
NULL
, 
fmt
, ##
__VA_ARGS__
); \

167 
	`exô
(
ªt
); \

168 } 0)

	)

170 
	#îr‹_exô
(
fmt
, ...) do { \

171 
	`°ªº‹_exô
(1, 0, 
fmt
, ##
__VA_ARGS__
); \

172 } 0)

	)

	@utility.c

1 
	~"tux3u£r.h
"

3 
	~"buf„r.c
"

4 
	~"diskio.c
"

5 
	~"hexdump.c
"

7 #i‚de‡
åa˚


8 
	#åa˚
 
åa˚_⁄


	)

11 
	~"kî√l/utûôy.c
"

13 
	$devio
(
rw
, 
dev
 *dev, 
loff_t
 
off£t
, *
d©a
, 
Àn
)

15 if(
DEBUG_MODE_U
==1)

17 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

19  
	`iﬂbs
(
dev
->
fd
, 
d©a
, 
Àn
, 
rw
, 
off£t
);

20 
	}
}

22 
	$devio_vec
(
rw
, 
dev
 *dev, 
loff_t
 
off£t
, 
iovec
 *
iov
,

23 
iov˙t
)

25 if(
DEBUG_MODE_U
==1)

27 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

29  
	`iovabs
(
dev
->
fd
, 
iov
, 
iov˙t
, 
rw
, 
off£t
);

30 
	}
}

32 
	$blockio
(
rw
, 
sb
 *sb, 
buf„r_hód
 *
buf„r
, 
block_t
 
block
)

34 if(
DEBUG_MODE_U
==1)

36 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

38 
	`åa˚
("%s: buffer %p, block %Lx",

39 (
rw
 & 
WRITE
Ë? "wrôe" : "ªad", 
buf„r
, 
block
);

40  
	`devio
(
rw
, 
	`sb_dev
(
sb
), 
block
 << sb->
blockbôs
, 
	`bufd©a
(
buf„r
),

41 
sb
->
blocksize
);

42 
	}
}

44 
	$blockio_vec
(
rw
, 
bufvec
 *bufvec, 
block_t
 
block
, 
cou¡
)

46 if(
DEBUG_MODE_U
==1)

48 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

50 
	`åa˚
("%s: bufvec %p, count %u, block %Lx",

51 (
rw
 & 
WRITE
Ë? "wrôe" : "ªad", 
bufvec
, 
cou¡
, 
block
);

52 
	`¥ötf
("öodê: %Lu\n",
	`tux_öode
(
bufvec
->
m≠
->
öode
)->
öum
);

53  
	`bufvec_io
(
rw
, 
bufvec
, 
block
, 
cou¡
);

54 
	}
}

60 
	$__tux3_msg
(
sb
 *sb, c⁄° *
Àvñ
, c⁄° *
¥efix
,

61 c⁄° *
fmt
, ...)

63 if(
DEBUG_MODE_U
==1)

65 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

67 
va_li°
 
¨gs
;

69 
	`va_°¨t
(
¨gs
, 
fmt
);

70 
	`v¥ötf
(
fmt
, 
¨gs
);

71 
	`va_íd
(
¨gs
);

72 
	}
}

74 
	$__tux3_fs_îr‹
(
sb
 *sb, c⁄° *
func
, 
löe
,

75 c⁄° *
fmt
, ...)

77 if(
DEBUG_MODE_U
==1)

79 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

81 
va_li°
 
¨gs
;

83 
	`¥ötf
("Eº‹: %s:%d: ", 
func
, 
löe
);

84 
	`va_°¨t
(
¨gs
, 
fmt
);

85 
	`v¥ötf
(
fmt
, 
¨gs
);

86 
	`va_íd
(
¨gs
);

87 
	`¥ötf
("\n");

89 
	`as£π
(0);

90 
	}
}

92 
	$__tux3_dbg
(c⁄° *
fmt
, ...)

94 if(
DEBUG_MODE_U
==1)

96 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

98 
va_li°
 
¨gs
;

100 
	`va_°¨t
(
¨gs
, 
fmt
);

101 
	`v¥ötf
(
fmt
, 
¨gs
);

102 
	`va_íd
(
¨gs
);

103 
	}
}

	@walk.c

9 #i‚de‡
TUX3_WALK_C


10 
	#TUX3_WALK_C


	)

12 
	~"tux3u£r.h
"

15 
	~"kî√l/båì.c
"

16 
	~"kî√l/dÀaf.c
"

17 
	~"kî√l/dÀaf2.c
"

18 
	~"kî√l/ûóf.c
"

20 
	swÆk_båì_›s
 {

21 (*
	m¥e
)(
	mbåì
 *, *);

22 (*
	mbnode
)(
	mbåì
 *, 
	mbuf„r_hód
 *, , *);

23 (*
	mÀaf
)(
	mbåì
 *, 
	mbuf„r_hód
 *, *);

24 (*
	mpo°
)(
	mbåì
 *, *);

27 
	swÆk_logchaö_›s
 {

28 (*
	m¥e
)(
	msb
 *, 
	mbuf„r_hód
 *, , , *);

29 (*
	mlog
)(
	msb
 *, 
	mbuf„r_hód
 *, 
	mu8
, u8 *, ,

31 (*
	mpo°
)(
	msb
 *, 
	mbuf„r_hód
 *, , , *);

34 (*
	twÆk_ûóf_cb
)(
	tbuf„r_hód
 *, , 
	töode
 *,

36 (*
	twÆk_dÀaf_cb
)(
	tbåì
 *, 
	tbuf„r_hód
 *,

37 
	tblock_t
, block_t, , *);

39 
	$wÆk_dÀaf1
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

40 
wÆk_dÀaf_cb
 
ˇŒback
, *
d©a
)

42 if(
DEBUG_MODE_U
==1)

44 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

46 
sb
 *sb = 
båì
->sb;

47 
dÀaf
 *dÀa‡
	`bufd©a
(
Àafbuf
);

48 
dwÆk
 
wÆk
;

50 i‡(
	`dwÆk_¥obe
(
dÀaf
, 
sb
->
blocksize
, &
wÆk
, 0)) {

52 
block_t
 
ödex
 = 
	`dwÆk_ödex
(&
wÆk
);

53 
block_t
 
block
 = 
	`dwÆk_block
(&
wÆk
);

54 
cou¡
 = 
	`dwÆk_cou¡
(&
wÆk
);

56 
	`ˇŒback
(
båì
, 
Àafbuf
, 
ödex
, 
block
, 
cou¡
, 
d©a
);

57 } 
	`dwÆk_√xt
(&
wÆk
));

59 
	}
}

61 
	$wÆk_dÀaf2
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

62 
wÆk_dÀaf_cb
 
ˇŒback
, *
d©a
)

64 if(
DEBUG_MODE_U
==1)

66 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

68 
dÀaf2
 *
dÀaf
 = 
	`bufd©a
(
Àafbuf
);

69 
diskexã¡2
 *
dex
, *
dex_limô
;

70 
exã¡
 
¥ev
 = { .
logiˇl
 = 
TUXKEY_LIMIT
, };

72 
dex
 = 
dÀaf
->
èbÀ
;

73 
dex_limô
 = 
dex
 + 
	`be16_to_˝u
(
dÀaf
->
cou¡
);

74 
dex
 < 
dex_limô
) {

75 
exã¡
 
ex
;

76 
	`gë_exã¡
(
dex
, &
ex
);

78 i‡(
¥ev
.
logiˇl
 !
TUXKEY_LIMIT
) {

79 
cou¡
 = 
ex
.
logiˇl
 - 
¥ev
.logical;

80 i‡(
¥ev
.
physiˇl
) {

81 
	`ˇŒback
(
båì
, 
Àafbuf
, 
¥ev
.
logiˇl
,

82 
¥ev
.
physiˇl
, 
cou¡
, 
d©a
);

86 
¥ev
 = 
ex
;

87 
dex
++;

89 
	}
}

91 
	$wÆk_dÀaf
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

92 
wÆk_dÀaf_cb
 
ˇŒback
, *
d©a
)

94 if(
DEBUG_MODE_U
==1)

96 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

98 
dÀaf
 *dÀa‡
	`bufd©a
(
Àafbuf
);

100 i‡(
dÀaf
->
magic
 =
	`˝u_to_be16
(
TUX3_MAGIC_DLEAF
))

101 
	`wÆk_dÀaf1
(
båì
, 
Àafbuf
, 
ˇŒback
, 
d©a
);

103 
	`wÆk_dÀaf2
(
båì
, 
Àafbuf
, 
ˇŒback
, 
d©a
);

104 
	}
}

106 
ölöe
 
u16
 
	$ûóf_©å_size
(
__be16
 *
di˘
, 
©
)

108 if(
DEBUG_MODE_U
==1)

110 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

112 
size
 = 
	`__©di˘
(
di˘
, 
©
 + 1Ë- 
	`©di˘
(dict,át);

113 
	`as£π
(
size
 >= 0);

114  
size
;

115 
	}
}

117 
	$wÆk_ûóf
(
båì
 *båì, 
buf„r_hód
 *
Àafbuf
,

118 
wÆk_ûóf_cb
 
ˇŒback
, *
d©a
)

120 if(
DEBUG_MODE_U
==1)

122 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

124 
ûóf
 *ûó‡
	`bufd©a
(
Àafbuf
);

125 
__be16
 *
di˘
 = 
	`ûóf_di˘
(
båì
, 
ûóf
);

126 
©
;

129 
©
 = 0;áà< 
	`icou¡
(
ûóf
);át++) {

130 
u16
 
size
 = 
	`ûóf_©å_size
(
di˘
, 
©
);

131 i‡(!
size
)

134 
öum_t
 
öum
 = 
	`iba£
(
ûóf
Ë+ 
©
;

135 
öode
 *öodê
	`tux3_igë
(
båì
->
sb
, 
öum
);

136 i‡(
	`IS_ERR
(
öode
)) {

137 
	`tux3_fs_îr‹
(
båì
->
sb
,

139 
öum
, 
	`PTR_ERR
(
öode
));

142 
	`ˇŒback
(
Àafbuf
, 
©
, 
öode
, 
d©a
);

144 
	`ùut
(
öode
);

146 
	}
}

148 
	$wÆk_båì
(
båì
 *båì, 
wÆk_båì_›s
 *
cb
,

149 *
d©a
)

151 if(
DEBUG_MODE_U
==1)

153 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

155 
curs‹
 *cursor;

156 
buf„r_hód
 *
buf„r
;

157 
îr
;

159 i‡(!
	`has_roŸ
(
båì
))

162 i‡(
cb
->
¥e
)

163 
cb
->
	`¥e
(
båì
, 
d©a
);

165 
curs‹
 = 
	`Æloc_curs‹
(
båì
, 0);

166 i‡(!
curs‹
)

167 
	`°ªº‹_exô
(1, 
ENOMEM
, "out of memory");

169 
îr
 = 
	`curs‹_ªad_roŸ
(
curs‹
);

170 i‡(
îr
) {

171 
	`tux3_îr
(
båì
->
sb
, "curs‹_ªad_roŸ(): %d", 
îr
);

172 
îr‹
;

175 
buf„r
 = 
curs‹
->
∑th
[curs‹->
Àvñ
].buffer;

176 i‡(
cb
->
bnode
)

177 
cb
->
	`bnode
(
båì
, 
buf„r
, 
curs‹
->
Àvñ
, 
d©a
);

180 
ªt
 = 
	`curs‹_adv™˚_down
(
curs‹
);

181 i‡(
ªt
 < 0) {

182 
	`tux3_îr
(
båì
->
sb
, "curs‹_adv™˚_down(Ë: %d", 
ªt
);

183 
îr‹
;

185 i‡(
ªt
) {

186 
buf„r
 = 
curs‹
->
∑th
[curs‹->
Àvñ
].buffer;

187 i‡(
cb
->
bnode
)

188 
cb
->
	`bnode
(
båì
, 
buf„r
, 
curs‹
->
Àvñ
, 
d©a
);

192 
buf„r
 = 
	`curs‹_Àafbuf
(
curs‹
);

193 i‡(
cb
->
Àaf
)

194 
cb
->
	`Àaf
(
båì
, 
buf„r
, 
d©a
);

197 i‡(!
	`curs‹_adv™˚_up
(
curs‹
))

198 
out
;

199 } 
	`curs‹_Àvñ_föished
(
curs‹
));

202 
out
:

203 i‡(
cb
->
po°
)

204 
cb
->
	`po°
(
båì
, 
d©a
);

206 
	`‰ì_curs‹
(
curs‹
);

210 
îr‹
:

211 
	`ªÀa£_curs‹
(
curs‹
);

212 
	`‰ì_curs‹
(
curs‹
);

213 
	}
}

215 c⁄° *
	glog_«me
[] = {

216 
	#X
(
x
Ë[x] = #x

	)

217 
X
(
LOG_BALLOC
),

218 
X
(
LOG_BFREE
),

219 
X
(
LOG_BFREE_ON_UNIFY
),

220 
X
(
LOG_BFREE_RELOG
),

221 
X
(
LOG_LEAF_REDIRECT
),

222 
X
(
LOG_LEAF_FREE
),

223 
X
(
LOG_BNODE_REDIRECT
),

224 
X
(
LOG_BNODE_ROOT
),

225 
X
(
LOG_BNODE_SPLIT
),

226 
X
(
LOG_BNODE_ADD
),

227 
X
(
LOG_BNODE_UPDATE
),

228 
X
(
LOG_BNODE_MERGE
),

229 
X
(
LOG_BNODE_DEL
),

230 
X
(
LOG_BNODE_ADJUST
),

231 
X
(
LOG_BNODE_FREE
),

232 
X
(
LOG_ORPHAN_ADD
),

233 
X
(
LOG_ORPHAN_DEL
),

234 
X
(
LOG_FREEBLOCKS
),

235 
X
(
LOG_UNIFY
),

236 
X
(
LOG_DELTA
),

237 #unde‡
X


240 
	$wÆk_logchaö
(
sb
 *sb, 
wÆk_logchaö_›s
 *
cb
,

241 *
d©a
)

243 if(
DEBUG_MODE_U
==1)

245 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

247 
buf„r_hód
 *
buf„r
;

248 
block_t
 
√xtchaö
;

249 
logcou¡
;

250 
obsﬁëe
 = 0;

253 
	`BUILD_BUG_ON
(
	`ARRAY_SIZE
(
log_«me
Ë!
LOG_TYPES
);

255 
√xtchaö
 = 
	`be64_to_˝u
(
sb
->
su≥r
.
logchaö
);

256 
logcou¡
 = 
	`be32_to_˝u
(
sb
->
su≥r
.logcount);

257 
logcou¡
 > 0) {

258 
logblock
 *
log
;

259 
u8
 *
unify_pos
 = 
NULL
;

260 
obsﬁëe_block
 = 
obsﬁëe
;

262 
buf„r
 = 
	`vﬁ_bªad
(
sb
, 
√xtchaö
);

263 
	`as£π
(
buf„r
);

265 
log
 = 
	`bufd©a
(
buf„r
);

268 i‡(!
obsﬁëe_block
) {

269 
u8
 *
p
 = 
log
->
d©a
;

270 
p
 < 
log
->
d©a
 + 
	`be16_to_˝u
÷og->
byãs
)) {

271 
u8
 
code
 = *
p
;

273 i‡(
code
 =
LOG_UNIFY
) {

274 
unify_pos
 = 
p
;

275 
obsﬁëe
 = 1;

279 
p
 +
log_size
[
code
];

283 i‡(
cb
->
¥e
)

284 
cb
->
	`¥e
(
sb
, 
buf„r
, 
logcou¡
, 
obsﬁëe_block
, 
d©a
);

286 i‡(
cb
->
log
) {

287 
obsﬁëe_log
 = 
obsﬁëe_block
;

288 
u8
 *
p
 = 
log
->
d©a
;

289 
p
 < 
log
->
d©a
 + 
	`be16_to_˝u
÷og->
byãs
)) {

290 
u8
 
code
 = *
p
;

291 
Àn
 = 
log_size
[
code
];

293 i‡(
unify_pos
) {

294 i‡(
p
 < 
unify_pos
)

295 
obsﬁëe_log
 = 1;

297 
obsﬁëe_log
 = 0;

300 
cb
->
	`log
(
sb
, 
buf„r
, 
code
, 
p
 + (code),

301 
Àn
, 
obsﬁëe_log
, 
d©a
);

303 
p
 +
Àn
;

307 i‡(
cb
->
po°
)

308 
cb
->
	`po°
(
sb
, 
buf„r
, 
logcou¡
, 
obsﬁëe_block
, 
d©a
);

310 
logcou¡
--;

312 
√xtchaö
 = 
	`be64_to_˝u
(
log
->
logchaö
);

313 
	`blockput
(
buf„r
);

315 
	}
}

317 *
	gunu£_wÆk_logchaö
 = 
wÆk_logchaö
;

318 *
	gunu£_wÆk_dÀaf
 = 
wÆk_dÀaf
;

	@writeback.c

1 
	~"tux3u£r.h
"

3 #i‚de‡
åa˚


4 
	#åa˚
 
åa˚_⁄


	)

7 
	~"kî√l/wrôeback.c
"

9 
	$˛ór_öode
(
öode
 *inode)

11 if(
DEBUG_MODE_U
==1)

13 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

15 
öode
->
i_°©e
 = 
I_FREEING
;

16 
	}
}

18 
	$__m¨k_öode_dúty
(
öode
 *öode, 
Êags
)

20 if(
DEBUG_MODE_U
==1)

22 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

24 i‡(
Êags
 & (
I_DIRTY_SYNC
 | 
I_DIRTY_DATASYNC
))

25 
	`tux3_dúty_öode
(
öode
, 
Êags
);

27 i‡((
öode
->
i_°©e
 & 
Êags
) != flags)

28 
öode
->
i_°©e
 |
Êags
;

29 
	}
}

31 
	$m¨k_öode_dúty
(
öode
 *inode)

33 if(
DEBUG_MODE_U
==1)

35 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

37 
	`__m¨k_öode_dúty
(
öode
, 
I_DIRTY
);

38 
	}
}

40 
	$m¨k_öode_dúty_sync
(
öode
 *inode)

42 if(
DEBUG_MODE_U
==1)

44 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

46 
	`__m¨k_öode_dúty
(
öode
, 
I_DIRTY_SYNC
);

47 
	}
}

49 
	$sync_su≥r
(
sb
 *sb)

51 if(
DEBUG_MODE_U
==1)

53 
	`¥ötf
("\t\t\t\t%25s[U] %25† %4d #ö\n",
__FILE__
,
__func__
,
__LINE__
);

55  
	`f‹˚_dñè
(
sb
);

56 
	}
}

	@writeback.h

1 #i‚de‡
TUX3_WRITEBACK_H


2 
	#TUX3_WRITEBACK_H


	)

4 
	#I_DIRTY_SYNC
 (1 << 0)

	)

5 
	#I_DIRTY_DATASYNC
 (1 << 1)

	)

6 
	#I_DIRTY_PAGES
 (1 << 2)

	)

7 
	#__I_NEW
 3

	)

8 
	#I_NEW
 (1 << 
__I_NEW
)

	)

9 
	#I_FREEING
 (1 << 5)

	)

10 
	#I_DIRTY
 (
I_DIRTY_SYNC
 | 
I_DIRTY_DATASYNC
 | 
I_DIRTY_PAGES
)

	)

11 
	#I_BAD
 (1 << 31)

	)

13 
	gsb
;

14 
	göode
;

16 
˛ór_öode
(
öode
 *inode);

17 
__m¨k_öode_dúty
(
öode
 *öode, 
Êags
);

18 
m¨k_öode_dúty
(
öode
 *inode);

19 
m¨k_öode_dúty_sync
(
öode
 *inode);

20 
sync_su≥r
(
sb
 *sb);

	@/usr/include/byteswap.h

19 #i‚de‡
_BYTESWAP_H


20 
	#_BYTESWAP_H
 1

	)

23 
	~<bôs/byãsw≠.h
>

30 
	#bsw≠_16
(
x
Ë
	`__bsw≠_16
 (x)

	)

33 
	#bsw≠_32
(
x
Ë
	`__bsw≠_32
 (x)

	)

35 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

37 
	#bsw≠_64
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/execinfo.h

19 #i‚de‡
_EXECINFO_H


20 
	#_EXECINFO_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


28 
	$backåa˚
 (**
__¨øy
, 
__size
Ë
	`__n⁄nuŒ
 ((1));

33 **
	$backåa˚_symbﬁs
 (*
__c⁄°
 *
__¨øy
, 
__size
)

34 
__THROW
 
	`__n⁄nuŒ
 ((1));

39 
	$backåa˚_symbﬁs_fd
 (*
__c⁄°
 *
__¨øy
, 
__size
, 
__fd
)

40 
__THROW
 
	`__n⁄nuŒ
 ((1));

42 
__END_DECLS


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/link.h

21 #i‚def 
_LINK_H


22 
	#_LINK_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<ñf.h
>

26 
	~<dlf˙.h
>

27 
	~<sys/ty≥s.h
>

31 
	#ElfW
(
ty≥
Ë
	`_ElfW
 (
Elf
, 
__ELF_NATIVE_CLASS
,Åy≥)

	)

32 
	#_ElfW
(
e
,
w
,
t
Ë
	`_ElfW_1
 (e, w, 
_
##t)

	)

33 
	#_ElfW_1
(
e
,
w
,
t
Ëe##w##
	)
t

35 
	~<bôs/ñf˛ass.h
>

36 
	~<bôs/lök.h
>

43 
	sr_debug


45 
	mr_vîsi⁄
;

47 
lök_m≠
 *
	mr_m≠
;

54 
ElfW
(
Addr
Ë
	mr_brk
;

59 
	mRT_CONSISTENT
,

60 
	mRT_ADD
,

61 
	mRT_DELETE


62 } 
	mr_°©e
;

64 
ElfW
(
Addr
Ë
	mr_ldba£
;

68 
r_debug
 
_r_debug
;

77 
	$ElfW
(
Dyn
Ë
_DYNAMIC
[];

85 
	slök_m≠


90 
	`ElfW
(
Addr
Ë
l_addr
;

91 *
l_«me
;

92 
	`ElfW
(
Dyn
Ë*
l_ld
;

93 
lök_m≠
 *
l_√xt
, *
l_¥ev
;

96 #ifde‡
__USE_GNU


99 
	#LAV_CURRENT
 1

	)

104 
LA_ACT_CONSISTENT
,

105 
LA_ACT_ADD
,

106 
LA_ACT_DELETE


112 
LA_SER_ORIG
 = 0x01,

113 
LA_SER_LIBPATH
 = 0x02,

114 
LA_SER_RUNPATH
 = 0x04,

115 
LA_SER_CONFIG
 = 0x08,

116 
LA_SER_DEFAULT
 = 0x40,

117 
LA_SER_SECURE
 = 0x80

123 
LA_FLG_BINDTO
 = 0x01,

124 
LA_FLG_BINDFROM
 = 0x02

130 
LA_SYMB_NOPLTENTER
 = 0x01,

131 
LA_SYMB_NOPLTEXIT
 = 0x02,

132 
LA_SYMB_STRUCTCALL
 = 0x04,

133 
LA_SYMB_DLSYM
 = 0x08,

134 
LA_SYMB_ALTVALUE
 = 0x10

138 
	sdl_phdr_öfo


140 
	`ElfW
(
Addr
Ë
dÕi_addr
;

141 c⁄° *
dÕi_«me
;

142 c⁄° 
	`ElfW
(
Phdr
Ë*
dÕi_phdr
;

143 
	`ElfW
(
HÆf
Ë
dÕi_phnum
;

151 
dÕi_adds
;

153 
dÕi_subs
;

157 
size_t
 
dÕi_és_modid
;

162 *
dÕi_és_d©a
;

165 
__BEGIN_DECLS


167 
	`dl_ôî©e_phdr
 ((*
__ˇŒback
Ë(
dl_phdr_öfo
 *,

168 
size_t
, *),

169 *
__d©a
);

175 
	`œ_vîsi⁄
 (
__vîsi⁄
);

176 
	`œ_a˘ivôy
 (
uöçå_t
 *
__cookõ
, 
__Êag
);

177 *
	`œ_obj£¨ch
 (c⁄° *
__«me
, 
uöçå_t
 *
__cookõ
,

178 
__Êag
);

179 
	`œ_obj›í
 (
lök_m≠
 *
__m≠
, 
Lmid_t
 
__lmid
,

180 
uöçå_t
 *
__cookõ
);

181 
	`œ_¥eöô
 (
uöçå_t
 *
__cookõ
);

182 
uöçå_t
 
	`œ_symböd32
 (
Elf32_Sym
 *
__sym
, 
__ndx
,

183 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

184 *
__Êags
, c⁄° *
__sym«me
);

185 
uöçå_t
 
	`œ_symböd64
 (
Elf64_Sym
 *
__sym
, 
__ndx
,

186 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

187 *
__Êags
, c⁄° *
__sym«me
);

188 
	`œ_obj˛o£
 (
uöçå_t
 *
__cookõ
);

190 
__END_DECLS


	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

11 
	~<löux/blk_ty≥s.h
>

12 
	~<löux/ty≥s.h
>

25 #unde‡
NR_OPEN


26 
	#INR_OPEN_CUR
 1024

	)

27 
	#INR_OPEN_MAX
 4096

	)

29 
	#BLOCK_SIZE_BITS
 10

	)

30 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

32 
	#SEEK_SET
 0

	)

33 
	#SEEK_CUR
 1

	)

34 
	#SEEK_END
 2

	)

35 
	#SEEK_DATA
 3

	)

36 
	#SEEK_HOLE
 4

	)

37 
	#SEEK_MAX
 
SEEK_HOLE


	)

39 
	sf°rim_ønge
 {

40 
__u64
 
	m°¨t
;

41 
__u64
 
	mÀn
;

42 
__u64
 
	mmöÀn
;

46 
	sfûes_°©_°ru˘
 {

47 
	mƒ_fûes
;

48 
	mƒ_‰ì_fûes
;

49 
	mmax_fûes
;

52 
	söodes_°©_t
 {

53 
	mƒ_öodes
;

54 
	mƒ_unu£d
;

55 
	mdummy
[5];

59 
	#NR_FILE
 8192

	)

61 
	#MAY_EXEC
 0x00000001

	)

62 
	#MAY_WRITE
 0x00000002

	)

63 
	#MAY_READ
 0x00000004

	)

64 
	#MAY_APPEND
 0x00000008

	)

65 
	#MAY_ACCESS
 0x00000010

	)

66 
	#MAY_OPEN
 0x00000020

	)

67 
	#MAY_CHDIR
 0x00000040

	)

69 
	#MAY_NOT_BLOCK
 0x00000080

	)

77 
	#FMODE_READ
 ((
fmode_t
)0x1)

	)

79 
	#FMODE_WRITE
 ((
fmode_t
)0x2)

	)

81 
	#FMODE_LSEEK
 ((
fmode_t
)0x4)

	)

83 
	#FMODE_PREAD
 ((
fmode_t
)0x8)

	)

85 
	#FMODE_PWRITE
 ((
fmode_t
)0x10)

	)

87 
	#FMODE_EXEC
 ((
fmode_t
)0x20)

	)

89 
	#FMODE_NDELAY
 ((
fmode_t
)0x40)

	)

91 
	#FMODE_EXCL
 ((
fmode_t
)0x80)

	)

94 
	#FMODE_WRITE_IOCTL
 ((
fmode_t
)0x100)

	)

102 
	#FMODE_NOCMTIME
 ((
fmode_t
)0x800)

	)

105 
	#FMODE_RANDOM
 ((
fmode_t
)0x1000)

	)

108 
	#FMODE_UNSIGNED_OFFSET
 ((
fmode_t
)0x2000)

	)

111 
	#FMODE_PATH
 ((
fmode_t
)0x4000)

	)

114 
	#FMODE_NONOTIFY
 ((
fmode_t
)0x1000000)

	)

158 
	#RW_MASK
 
REQ_WRITE


	)

159 
	#RWA_MASK
 
REQ_RAHEAD


	)

161 
	#READ
 0

	)

162 
	#WRITE
 
RW_MASK


	)

163 
	#READA
 
RWA_MASK


	)

165 
	#READ_SYNC
 (
READ
 | 
REQ_SYNC
)

	)

166 
	#WRITE_SYNC
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
)

	)

167 
	#WRITE_ODIRECT
 (
WRITE
 | 
REQ_SYNC
)

	)

168 
	#WRITE_FLUSH
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
)

	)

169 
	#WRITE_FUA
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
 | 
REQ_FUA
)

	)

170 
	#WRITE_FLUSH_FUA
 (
WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
 | 
REQ_FUA
)

	)

172 
	#SEL_IN
 1

	)

173 
	#SEL_OUT
 2

	)

174 
	#SEL_EX
 4

	)

177 
	#FS_REQUIRES_DEV
 1

	)

178 
	#FS_BINARY_MOUNTDATA
 2

	)

179 
	#FS_HAS_SUBTYPE
 4

	)

180 
	#FS_REVAL_DOT
 16384

	)

181 
	#FS_RENAME_DOES_D_MOVE
 32768

	)

188 
	#MS_RDONLY
 1

	)

189 
	#MS_NOSUID
 2

	)

190 
	#MS_NODEV
 4

	)

191 
	#MS_NOEXEC
 8

	)

192 
	#MS_SYNCHRONOUS
 16

	)

193 
	#MS_REMOUNT
 32

	)

194 
	#MS_MANDLOCK
 64

	)

195 
	#MS_DIRSYNC
 128

	)

196 
	#MS_NOATIME
 1024

	)

197 
	#MS_NODIRATIME
 2048

	)

198 
	#MS_BIND
 4096

	)

199 
	#MS_MOVE
 8192

	)

200 
	#MS_REC
 16384

	)

201 
	#MS_VERBOSE
 32768

	)

203 
	#MS_SILENT
 32768

	)

204 
	#MS_POSIXACL
 (1<<16Ë

	)

205 
	#MS_UNBINDABLE
 (1<<17Ë

	)

206 
	#MS_PRIVATE
 (1<<18Ë

	)

207 
	#MS_SLAVE
 (1<<19Ë

	)

208 
	#MS_SHARED
 (1<<20Ë

	)

209 
	#MS_RELATIME
 (1<<21Ë

	)

210 
	#MS_KERNMOUNT
 (1<<22Ë

	)

211 
	#MS_I_VERSION
 (1<<23Ë

	)

212 
	#MS_STRICTATIME
 (1<<24Ë

	)

213 
	#MS_NOSEC
 (1<<28)

	)

214 
	#MS_BORN
 (1<<29)

	)

215 
	#MS_ACTIVE
 (1<<30)

	)

216 
	#MS_NOUSER
 (1<<31)

	)

221 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

226 
	#MS_MGC_VAL
 0xC0ED0000

	)

227 
	#MS_MGC_MSK
 0xffff0000

	)

231 
	#S_SYNC
 1

	)

232 
	#S_NOATIME
 2

	)

233 
	#S_APPEND
 4

	)

234 
	#S_IMMUTABLE
 8

	)

235 
	#S_DEAD
 16

	)

236 
	#S_NOQUOTA
 32

	)

237 
	#S_DIRSYNC
 64

	)

238 
	#S_NOCMTIME
 128

	)

239 
	#S_SWAPFILE
 256

	)

240 
	#S_PRIVATE
 512

	)

241 
	#S_IMA
 1024

	)

242 
	#S_AUTOMOUNT
 2048

	)

243 
	#S_NOSEC
 4096

	)

258 
	#__IS_FLG
(
öode
,
Êg
Ë((öode)->
i_sb
->
s_Êags
 & (Êg))

	)

260 
	#IS_RDONLY
(
öode
Ë((öode)->
i_sb
->
s_Êags
 & 
MS_RDONLY
)

	)

261 
	#IS_SYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
) || \

262 ((
öode
)->
i_Êags
 & 
S_SYNC
))

	)

263 
	#IS_DIRSYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
|
MS_DIRSYNC
) || \

264 ((
öode
)->
i_Êags
 & (
S_SYNC
|
S_DIRSYNC
)))

	)

265 
	#IS_MANDLOCK
(
öode
Ë
	`__IS_FLG
(öode, 
MS_MANDLOCK
)

	)

266 
	#IS_NOATIME
(
öode
Ë
	`__IS_FLG
(öode, 
MS_RDONLY
|
MS_NOATIME
)

	)

267 
	#IS_I_VERSION
(
öode
Ë
	`__IS_FLG
(öode, 
MS_I_VERSION
)

	)

269 
	#IS_NOQUOTA
(
öode
Ë((öode)->
i_Êags
 & 
S_NOQUOTA
)

	)

270 
	#IS_APPEND
(
öode
Ë((öode)->
i_Êags
 & 
S_APPEND
)

	)

271 
	#IS_IMMUTABLE
(
öode
Ë((öode)->
i_Êags
 & 
S_IMMUTABLE
)

	)

272 
	#IS_POSIXACL
(
öode
Ë
	`__IS_FLG
(öode, 
MS_POSIXACL
)

	)

274 
	#IS_DEADDIR
(
öode
Ë((öode)->
i_Êags
 & 
S_DEAD
)

	)

275 
	#IS_NOCMTIME
(
öode
Ë((öode)->
i_Êags
 & 
S_NOCMTIME
)

	)

276 
	#IS_SWAPFILE
(
öode
Ë((öode)->
i_Êags
 & 
S_SWAPFILE
)

	)

277 
	#IS_PRIVATE
(
öode
Ë((öode)->
i_Êags
 & 
S_PRIVATE
)

	)

278 
	#IS_IMA
(
öode
Ë((öode)->
i_Êags
 & 
S_IMA
)

	)

279 
	#IS_AUTOMOUNT
(
öode
Ë((öode)->
i_Êags
 & 
S_AUTOMOUNT
)

	)

280 
	#IS_NOSEC
(
öode
Ë((öode)->
i_Êags
 & 
S_NOSEC
)

	)

285 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

286 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

287 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

288 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

289 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

290 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

291 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

292 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

293 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

294 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

295 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

296 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

298 
	#BLKPG
 
	`_IO
(0x12,105)

	)

302 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

303 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

308 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

309 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

310 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

311 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

312 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

313 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

314 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

315 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

316 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

317 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

318 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

319 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

320 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

321 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

323 
	#BMAP_IOCTL
 1

	)

324 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

325 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

326 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

327 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

328 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

330 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

331 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

332 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

333 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

334 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

335 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

336 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

337 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

338 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

343 
	#FS_SECRM_FL
 0x00000001

	)

344 
	#FS_UNRM_FL
 0x00000002

	)

345 
	#FS_COMPR_FL
 0x00000004

	)

346 
	#FS_SYNC_FL
 0x00000008

	)

347 
	#FS_IMMUTABLE_FL
 0x00000010

	)

348 
	#FS_APPEND_FL
 0x00000020

	)

349 
	#FS_NODUMP_FL
 0x00000040

	)

350 
	#FS_NOATIME_FL
 0x00000080

	)

352 
	#FS_DIRTY_FL
 0x00000100

	)

353 
	#FS_COMPRBLK_FL
 0x00000200

	)

354 
	#FS_NOCOMP_FL
 0x00000400

	)

355 
	#FS_ECOMPR_FL
 0x00000800

	)

357 
	#FS_BTREE_FL
 0x00001000

	)

358 
	#FS_INDEX_FL
 0x00001000

	)

359 
	#FS_IMAGIC_FL
 0x00002000

	)

360 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

361 
	#FS_NOTAIL_FL
 0x00008000

	)

362 
	#FS_DIRSYNC_FL
 0x00010000

	)

363 
	#FS_TOPDIR_FL
 0x00020000

	)

364 
	#FS_EXTENT_FL
 0x00080000

	)

365 
	#FS_DIRECTIO_FL
 0x00100000

	)

366 
	#FS_NOCOW_FL
 0x00800000

	)

367 
	#FS_RESERVED_FL
 0x80000000

	)

369 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

370 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

373 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

374 
	#SYNC_FILE_RANGE_WRITE
 2

	)

375 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

7 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

8 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

11 
	#SI_LOAD_SHIFT
 16

	)

12 
	ssysöfo
 {

13 
	mu±ime
;

14 
	mlﬂds
[3];

15 
	mtŸÆøm
;

16 
	m‰ìøm
;

17 
	msh¨edøm
;

18 
	mbuf„ºam
;

19 
	mtŸÆsw≠
;

20 
	m‰ìsw≠
;

21 
	m¥ocs
;

22 
	m∑d
;

23 
	mtŸÆhigh
;

24 
	m‰ìhigh
;

25 
	mmem_unô
;

26 
	m_f
[20-2*()-()];

	@/usr/include/linux/magic.h

1 #i‚de‡
__LINUX_MAGIC_H__


2 
	#__LINUX_MAGIC_H__


	)

4 
	#ADFS_SUPER_MAGIC
 0xadf5

	)

5 
	#AFFS_SUPER_MAGIC
 0xadff

	)

6 
	#AFS_SUPER_MAGIC
 0x5346414F

	)

7 
	#AUTOFS_SUPER_MAGIC
 0x0187

	)

8 
	#CODA_SUPER_MAGIC
 0x73757245

	)

9 
	#CRAMFS_MAGIC
 0x28cd3d45

	)

10 
	#CRAMFS_MAGIC_WEND
 0x453dcd28

	)

11 
	#DEBUGFS_MAGIC
 0x64626720

	)

12 
	#SYSFS_MAGIC
 0x62656572

	)

13 
	#SECURITYFS_MAGIC
 0x73636673

	)

14 
	#SELINUX_MAGIC
 0xf97cff8c

	)

15 
	#RAMFS_MAGIC
 0x858458f6

	)

16 
	#TMPFS_MAGIC
 0x01021994

	)

17 
	#HUGETLBFS_MAGIC
 0x958458f6

	)

18 
	#SQUASHFS_MAGIC
 0x73717368

	)

19 
	#ECRYPTFS_SUPER_MAGIC
 0xf15f

	)

20 
	#EFS_SUPER_MAGIC
 0x414A53

	)

21 
	#EXT2_SUPER_MAGIC
 0xEF53

	)

22 
	#EXT3_SUPER_MAGIC
 0xEF53

	)

23 
	#XENFS_SUPER_MAGIC
 0xabba1974

	)

24 
	#EXT4_SUPER_MAGIC
 0xEF53

	)

25 
	#BTRFS_SUPER_MAGIC
 0x9123683E

	)

26 
	#NILFS_SUPER_MAGIC
 0x3434

	)

27 
	#HPFS_SUPER_MAGIC
 0xf995e849

	)

28 
	#ISOFS_SUPER_MAGIC
 0x9660

	)

29 
	#JFFS2_SUPER_MAGIC
 0x72b6

	)

30 
	#ANON_INODE_FS_MAGIC
 0x09041934

	)

31 
	#PSTOREFS_MAGIC
 0x6165676C

	)

33 
	#MINIX_SUPER_MAGIC
 0x137F

	)

34 
	#MINIX_SUPER_MAGIC2
 0x138F

	)

35 
	#MINIX2_SUPER_MAGIC
 0x2468

	)

36 
	#MINIX2_SUPER_MAGIC2
 0x2478

	)

37 
	#MINIX3_SUPER_MAGIC
 0x4d5®

	)

39 
	#MSDOS_SUPER_MAGIC
 0x4d44

	)

40 
	#NCP_SUPER_MAGIC
 0x564¯

	)

41 
	#NFS_SUPER_MAGIC
 0x6969

	)

42 
	#OPENPROM_SUPER_MAGIC
 0x9Á1

	)

43 
	#PROC_SUPER_MAGIC
 0x9Á0

	)

44 
	#QNX4_SUPER_MAGIC
 0x002‡

	)

46 
	#REISERFS_SUPER_MAGIC
 0x52654973

	)

49 
	#REISERFS_SUPER_MAGIC_STRING
 "ReIsErFs"

	)

50 
	#REISER2FS_SUPER_MAGIC_STRING
 "ReIsEr2Fs"

	)

51 
	#REISER2FS_JR_SUPER_MAGIC_STRING
 "ReIsEr3Fs"

	)

53 
	#SMB_SUPER_MAGIC
 0x517B

	)

54 
	#USBDEVICE_SUPER_MAGIC
 0x9Á2

	)

55 
	#CGROUP_SUPER_MAGIC
 0x27e0eb

	)

57 
	#FUTEXFS_SUPER_MAGIC
 0xBAD1DEA

	)

59 
	#STACK_END_MAGIC
 0x57AC6E9D

	)

61 
	#DEVPTS_SUPER_MAGIC
 0x1cd1

	)

62 
	#SOCKFS_MAGIC
 0x534F434B

	)

63 
	#V9FS_MAGIC
 0x01021997

	)

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#CLONE_VM
 0x00000100

	)

9 
	#CLONE_FS
 0x00000200

	)

10 
	#CLONE_FILES
 0x00000400

	)

11 
	#CLONE_SIGHAND
 0x00000800

	)

12 
	#CLONE_PTRACE
 0x00002000

	)

13 
	#CLONE_VFORK
 0x00004000

	)

14 
	#CLONE_PARENT
 0x00008000

	)

15 
	#CLONE_THREAD
 0x00010000

	)

16 
	#CLONE_NEWNS
 0x00020000

	)

17 
	#CLONE_SYSVSEM
 0x00040000

	)

18 
	#CLONE_SETTLS
 0x00080000

	)

19 
	#CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#CLONE_DETACHED
 0x00400000

	)

22 
	#CLONE_UNTRACED
 0x00800000

	)

23 
	#CLONE_CHILD_SETTID
 0x01000000

	)

26 
	#CLONE_NEWUTS
 0x04000000

	)

27 
	#CLONE_NEWIPC
 0x08000000

	)

28 
	#CLONE_NEWUSER
 0x10000000

	)

29 
	#CLONE_NEWPID
 0x20000000

	)

30 
	#CLONE_NEWNET
 0x40000000

	)

31 
	#CLONE_IO
 0x80000000

	)

36 
	#SCHED_NORMAL
 0

	)

37 
	#SCHED_FIFO
 1

	)

38 
	#SCHED_RR
 2

	)

39 
	#SCHED_BATCH
 3

	)

41 
	#SCHED_IDLE
 5

	)

43 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

	@/usr/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<löux/ty≥s.h
>

7 #i‚de‡
_STRUCT_TIMESPEC


8 
	#_STRUCT_TIMESPEC


	)

9 
	stime•ec
 {

10 
__kî√l_time_t
 
	mtv_£c
;

11 
	mtv_n£c
;

15 
	stimevÆ
 {

16 
__kî√l_time_t
 
	mtv_£c
;

17 
__kî√l_su£c⁄ds_t
 
	mtv_u£c
;

20 
	stimez⁄e
 {

21 
	mtz_möuãswe°
;

22 
	mtz_d°time
;

26 
	#NFDBITS
 
__NFDBITS


	)

28 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

29 
	#FD_SET
(
fd
,
fd£ç
Ë
	`__FD_SET
(fd,fd£ç)

	)

30 
	#FD_CLR
(
fd
,
fd£ç
Ë
	`__FD_CLR
(fd,fd£ç)

	)

31 
	#FD_ISSET
(
fd
,
fd£ç
Ë
	`__FD_ISSET
(fd,fd£ç)

	)

32 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
(fd£ç)

	)

38 
	#ITIMER_REAL
 0

	)

39 
	#ITIMER_VIRTUAL
 1

	)

40 
	#ITIMER_PROF
 2

	)

42 
	sôimî•ec
 {

43 
time•ec
 
	mô_öãrvÆ
;

44 
time•ec
 
	mô_vÆue
;

47 
	sôimîvÆ
 {

48 
timevÆ
 
	mô_öãrvÆ
;

49 
timevÆ
 
	mô_vÆue
;

55 
	#CLOCK_REALTIME
 0

	)

56 
	#CLOCK_MONOTONIC
 1

	)

57 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

58 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

59 
	#CLOCK_MONOTONIC_RAW
 4

	)

60 
	#CLOCK_REALTIME_COARSE
 5

	)

61 
	#CLOCK_MONOTONIC_COARSE
 6

	)

62 
	#CLOCK_BOOTTIME
 7

	)

63 
	#CLOCK_REALTIME_ALARM
 8

	)

64 
	#CLOCK_BOOTTIME_ALARM
 9

	)

69 
	#CLOCK_SGI_CYCLE
 10

	)

70 
	#MAX_CLOCKS
 16

	)

71 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

72 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

77 
	#TIMER_ABSTIME
 0x01

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 197134

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/linux/xattr.h

10 #i‚de‡
_LINUX_XATTR_H


11 
	#_LINUX_XATTR_H


	)

13 
	#XATTR_CREATE
 0x1

	)

14 
	#XATTR_REPLACE
 0x2

	)

17 
	#XATTR_OS2_PREFIX
 "os2."

	)

18 
	#XATTR_OS2_PREFIX_LEN
 ( (
XATTR_OS2_PREFIX
Ë- 1)

	)

20 
	#XATTR_SECURITY_PREFIX
 "£curôy."

	)

21 
	#XATTR_SECURITY_PREFIX_LEN
 ( (
XATTR_SECURITY_PREFIX
Ë- 1)

	)

23 
	#XATTR_SYSTEM_PREFIX
 "sy°em."

	)

24 
	#XATTR_SYSTEM_PREFIX_LEN
 ( (
XATTR_SYSTEM_PREFIX
Ë- 1)

	)

26 
	#XATTR_TRUSTED_PREFIX
 "åu°ed."

	)

27 
	#XATTR_TRUSTED_PREFIX_LEN
 ( (
XATTR_TRUSTED_PREFIX
Ë- 1)

	)

29 
	#XATTR_USER_PREFIX
 "u£r."

	)

30 
	#XATTR_USER_PREFIX_LEN
 ( (
XATTR_USER_PREFIX
Ë- 1)

	)

33 
	#XATTR_EVM_SUFFIX
 "evm"

	)

34 
	#XATTR_NAME_EVM
 
XATTR_SECURITY_PREFIX
 
XATTR_EVM_SUFFIX


	)

36 
	#XATTR_SELINUX_SUFFIX
 "£löux"

	)

37 
	#XATTR_NAME_SELINUX
 
XATTR_SECURITY_PREFIX
 
XATTR_SELINUX_SUFFIX


	)

39 
	#XATTR_SMACK_SUFFIX
 "SMACK64"

	)

40 
	#XATTR_SMACK_IPIN
 "SMACK64IPIN"

	)

41 
	#XATTR_SMACK_IPOUT
 "SMACK64IPOUT"

	)

42 
	#XATTR_SMACK_EXEC
 "SMACK64EXEC"

	)

43 
	#XATTR_SMACK_TRANSMUTE
 "SMACK64TRANSMUTE"

	)

44 
	#XATTR_SMACK_MMAP
 "SMACK64MMAP"

	)

45 
	#XATTR_NAME_SMACK
 
XATTR_SECURITY_PREFIX
 
XATTR_SMACK_SUFFIX


	)

46 
	#XATTR_NAME_SMACKIPIN
 
XATTR_SECURITY_PREFIX
 
XATTR_SMACK_IPIN


	)

47 
	#XATTR_NAME_SMACKIPOUT
 
XATTR_SECURITY_PREFIX
 
XATTR_SMACK_IPOUT


	)

48 
	#XATTR_NAME_SMACKEXEC
 
XATTR_SECURITY_PREFIX
 
XATTR_SMACK_EXEC


	)

49 
	#XATTR_NAME_SMACKTRANSMUTE
 
XATTR_SECURITY_PREFIX
 
XATTR_SMACK_TRANSMUTE


	)

50 
	#XATTR_NAME_SMACKMMAP
 
XATTR_SECURITY_PREFIX
 
XATTR_SMACK_MMAP


	)

52 
	#XATTR_CAPS_SUFFIX
 "ˇ∑bûôy"

	)

53 
	#XATTR_NAME_CAPS
 
XATTR_SECURITY_PREFIX
 
XATTR_CAPS_SUFFIX


	)

55 
	#XATTR_POSIX_ACL_ACCESS
 "posix_a˛_ac˚ss"

	)

56 
	#XATTR_NAME_POSIX_ACL_ACCESS
 
XATTR_SYSTEM_PREFIX
 
XATTR_POSIX_ACL_ACCESS


	)

57 
	#XATTR_POSIX_ACL_DEFAULT
 "posix_a˛_deÁu…"

	)

58 
	#XATTR_NAME_POSIX_ACL_DEFAULT
 
XATTR_SYSTEM_PREFIX
 
XATTR_POSIX_ACL_DEFAULT


	)

	@/usr/include/lzo/lzo1x.h

44 #i‚de‡
__LZO1X_H_INCLUDED


45 
	#__LZO1X_H_INCLUDED
 1

	)

47 #i‚de‡
__LZOCONF_H_INCLUDED


48 
	~"lzoc⁄f.h
"

51 #ifde‡
__˝lu•lus


64 
	#LZO1X_MEM_COMPRESS
 
LZO1X_1_MEM_COMPRESS


	)

65 
	#LZO1X_MEM_DECOMPRESS
 (0)

	)

66 
	#LZO1X_MEM_OPTIMIZE
 (0)

	)

70 
LZO_EXTERN
()

71 
lzo1x_decom¥ess
 ( c⁄° 
lzo_byãp
 
§c
, 
lzo_uöt
 
§c_Àn
,

72 
lzo_byãp
 
d°
, 
lzo_uöç
 
d°_Àn
,

73 
lzo_voidp
 
wrkmem
 );

76 
LZO_EXTERN
()

77 
lzo1x_decom¥ess_ß„
 ( c⁄° 
lzo_byãp
 
§c
, 
lzo_uöt
 
§c_Àn
,

78 
lzo_byãp
 
d°
, 
lzo_uöç
 
d°_Àn
,

79 
lzo_voidp
 
wrkmem
 );

86 
	#LZO1X_1_MEM_COMPRESS
 ((
lzo_uöt32
Ë(16384L * 
lzo_sizeof_di˘_t
))

	)

88 
LZO_EXTERN
()

89 
lzo1x_1_com¥ess
 ( c⁄° 
lzo_byãp
 
§c
, 
lzo_uöt
 
§c_Àn
,

90 
lzo_byãp
 
d°
, 
lzo_uöç
 
d°_Àn
,

91 
lzo_voidp
 
wrkmem
 );

99 
	#LZO1X_1_11_MEM_COMPRESS
 ((
lzo_uöt32
Ë(2048L * 
lzo_sizeof_di˘_t
))

	)

101 
LZO_EXTERN
()

102 
lzo1x_1_11_com¥ess
 ( c⁄° 
lzo_byãp
 
§c
, 
lzo_uöt
 
§c_Àn
,

103 
lzo_byãp
 
d°
, 
lzo_uöç
 
d°_Àn
,

104 
lzo_voidp
 
wrkmem
 );

108 
	#LZO1X_1_12_MEM_COMPRESS
 ((
lzo_uöt32
Ë(4096L * 
lzo_sizeof_di˘_t
))

	)

110 
LZO_EXTERN
()

111 
lzo1x_1_12_com¥ess
 ( c⁄° 
lzo_byãp
 
§c
, 
lzo_uöt
 
§c_Àn
,

112 
lzo_byãp
 
d°
, 
lzo_uöç
 
d°_Àn
,

113 
lzo_voidp
 
wrkmem
 );

117 
	#LZO1X_1_15_MEM_COMPRESS
 ((
lzo_uöt32
Ë(32768L * 
lzo_sizeof_di˘_t
))

	)

119 
LZO_EXTERN
()

120 
lzo1x_1_15_com¥ess
 ( c⁄° 
lzo_byãp
 
§c
, 
lzo_uöt
 
§c_Àn
,

121 
lzo_byãp
 
d°
, 
lzo_uöç
 
d°_Àn
,

122 
lzo_voidp
 
wrkmem
 );

129 
	#LZO1X_999_MEM_COMPRESS
 ((
lzo_uöt32
Ë(14 * 16384L * ()))

	)

131 
LZO_EXTERN
()

132 
lzo1x_999_com¥ess
 ( c⁄° 
lzo_byãp
 
§c
, 
lzo_uöt
 
§c_Àn
,

133 
lzo_byãp
 
d°
, 
lzo_uöç
 
d°_Àn
,

134 
lzo_voidp
 
wrkmem
 );

141 
LZO_EXTERN
()

142 
lzo1x_999_com¥ess_di˘
 ( c⁄° 
lzo_byãp
 
§c
, 
lzo_uöt
 
§c_Àn
,

143 
lzo_byãp
 
d°
, 
lzo_uöç
 
d°_Àn
,

144 
lzo_voidp
 
wrkmem
,

145 c⁄° 
lzo_byãp
 
di˘
, 
lzo_uöt
 
di˘_Àn
 );

147 
LZO_EXTERN
()

148 
lzo1x_999_com¥ess_Àvñ
 ( c⁄° 
lzo_byãp
 
§c
, 
lzo_uöt
 
§c_Àn
,

149 
lzo_byãp
 
d°
, 
lzo_uöç
 
d°_Àn
,

150 
lzo_voidp
 
wrkmem
,

151 c⁄° 
lzo_byãp
 
di˘
, 
lzo_uöt
 
di˘_Àn
,

152 
lzo_ˇŒback_p
 
cb
,

153 
com¥essi⁄_Àvñ
 );

155 
LZO_EXTERN
()

156 
lzo1x_decom¥ess_di˘_ß„
 ( c⁄° 
lzo_byãp
 
§c
, 
lzo_uöt
 
§c_Àn
,

157 
lzo_byãp
 
d°
, 
lzo_uöç
 
d°_Àn
,

158 
lzo_voidp
 
wrkmem
 ,

159 c⁄° 
lzo_byãp
 
di˘
, 
lzo_uöt
 
di˘_Àn
 );

166 
LZO_EXTERN
()

167 
lzo1x_›timize
 ( 
lzo_byãp
 
§c
, 
lzo_uöt
 
§c_Àn
,

168 
lzo_byãp
 
d°
, 
lzo_uöç
 
d°_Àn
,

169 
lzo_voidp
 
wrkmem
 );

173 #ifde‡
__˝lu•lus


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/dlfcn.h

20 #i‚def 
_DLFCN_H


21 
	#_DLFCN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<bôs/dlf˙.h
>

31 #ifde‡
__USE_GNU


36 
	#RTLD_NEXT
 ((*Ë-1l)

	)

41 
	#RTLD_DEFAULT
 ((*Ë0)

	)

45 
	tLmid_t
;

48 
	#LM_ID_BASE
 0

	)

49 
	#LM_ID_NEWLM
 -1

	)

53 
__BEGIN_DECLS


57 *
	$dl›í
 (
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

61 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

66 
__c⁄°
 *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

68 #ifde‡
__USE_GNU


70 *
	$dlm›í
 (
Lmid_t
 
__nsid
, 
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

74 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

75 
__c⁄°
 *
__ª°ri˘
 
__«me
,

76 
__c⁄°
 *
__ª°ri˘
 
__vîsi⁄
)

77 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

83 *
	$dÀº‹
 (Ë
__THROW
;

86 #ifde‡
__USE_GNU


91 
__c⁄°
 *
dli_‚ame
;

92 *
dli_fba£
;

93 
__c⁄°
 *
dli_¢ame
;

94 *
dli_ßddr
;

95 } 
	tDl_öfo
;

99 
	$dœddr
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
)

100 
__THROW
 
	`__n⁄nuŒ
 ((2));

103 
	$dœddr1
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
,

104 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
RTLD_DL_SYMENT
 = 1,

115 
RTLD_DL_LINKMAP
 = 2

124 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

125 
__ªque°
, *
__ª°ri˘
 
__¨g
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

132 
RTLD_DI_LMID
 = 1,

136 
RTLD_DI_LINKMAP
 = 2,

138 
RTLD_DI_CONFIGADDR
 = 3,

145 
RTLD_DI_SERINFO
 = 4,

146 
RTLD_DI_SERINFOSIZE
 = 5,

150 
RTLD_DI_ORIGIN
 = 6,

152 
RTLD_DI_PROFILENAME
 = 7,

153 
RTLD_DI_PROFILEOUT
 = 8,

158 
RTLD_DI_TLS_MODID
 = 9,

164 
RTLD_DI_TLS_DATA
 = 10,

166 
RTLD_DI_MAX
 = 10

174 *
dls_«me
;

175 
dls_Êags
;

176 } 
	tDl_£Ω©h
;

182 
size_t
 
dls_size
;

183 
dls_˙t
;

184 
Dl_£Ω©h
 
dls_£Ω©h
[1];

185 } 
	tDl_£röfo
;

189 
__END_DECLS


	@/usr/include/elf.h

21 #i‚de‡
_ELF_H


22 
	#_ELF_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


30 
	~<°döt.h
>

33 
uöt16_t
 
	tElf32_HÆf
;

34 
uöt16_t
 
	tElf64_HÆf
;

37 
uöt32_t
 
	tElf32_W‹d
;

38 
öt32_t
 
	tElf32_Sw‹d
;

39 
uöt32_t
 
	tElf64_W‹d
;

40 
öt32_t
 
	tElf64_Sw‹d
;

43 
uöt64_t
 
	tElf32_Xw‹d
;

44 
öt64_t
 
	tElf32_Sxw‹d
;

45 
uöt64_t
 
	tElf64_Xw‹d
;

46 
öt64_t
 
	tElf64_Sxw‹d
;

49 
uöt32_t
 
	tElf32_Addr
;

50 
uöt64_t
 
	tElf64_Addr
;

53 
uöt32_t
 
	tElf32_Off
;

54 
uöt64_t
 
	tElf64_Off
;

57 
uöt16_t
 
	tElf32_Se˘i⁄
;

58 
uöt16_t
 
	tElf64_Se˘i⁄
;

61 
Elf32_HÆf
 
	tElf32_Vîsym
;

62 
Elf64_HÆf
 
	tElf64_Vîsym
;

67 
	#EI_NIDENT
 (16)

	)

71 
	me_idít
[
EI_NIDENT
];

72 
Elf32_HÆf
 
	me_ty≥
;

73 
Elf32_HÆf
 
	me_machöe
;

74 
Elf32_W‹d
 
	me_vîsi⁄
;

75 
Elf32_Addr
 
	me_íåy
;

76 
Elf32_Off
 
	me_phoff
;

77 
Elf32_Off
 
	me_shoff
;

78 
Elf32_W‹d
 
	me_Êags
;

79 
Elf32_HÆf
 
	me_ehsize
;

80 
Elf32_HÆf
 
	me_phítsize
;

81 
Elf32_HÆf
 
	me_phnum
;

82 
Elf32_HÆf
 
	me_shítsize
;

83 
Elf32_HÆf
 
	me_shnum
;

84 
Elf32_HÆf
 
	me_sh°∫dx
;

85 } 
	tElf32_Ehdr
;

89 
	me_idít
[
EI_NIDENT
];

90 
Elf64_HÆf
 
	me_ty≥
;

91 
Elf64_HÆf
 
	me_machöe
;

92 
Elf64_W‹d
 
	me_vîsi⁄
;

93 
Elf64_Addr
 
	me_íåy
;

94 
Elf64_Off
 
	me_phoff
;

95 
Elf64_Off
 
	me_shoff
;

96 
Elf64_W‹d
 
	me_Êags
;

97 
Elf64_HÆf
 
	me_ehsize
;

98 
Elf64_HÆf
 
	me_phítsize
;

99 
Elf64_HÆf
 
	me_phnum
;

100 
Elf64_HÆf
 
	me_shítsize
;

101 
Elf64_HÆf
 
	me_shnum
;

102 
Elf64_HÆf
 
	me_sh°∫dx
;

103 } 
	tElf64_Ehdr
;

109 
	#EI_MAG0
 0

	)

110 
	#ELFMAG0
 0x7‡

	)

112 
	#EI_MAG1
 1

	)

113 
	#ELFMAG1
 'E'

	)

115 
	#EI_MAG2
 2

	)

116 
	#ELFMAG2
 'L'

	)

118 
	#EI_MAG3
 3

	)

119 
	#ELFMAG3
 'F'

	)

122 
	#ELFMAG
 "\177ELF"

	)

123 
	#SELFMAG
 4

	)

125 
	#EI_CLASS
 4

	)

126 
	#ELFCLASSNONE
 0

	)

127 
	#ELFCLASS32
 1

	)

128 
	#ELFCLASS64
 2

	)

129 
	#ELFCLASSNUM
 3

	)

131 
	#EI_DATA
 5

	)

132 
	#ELFDATANONE
 0

	)

133 
	#ELFDATA2LSB
 1

	)

134 
	#ELFDATA2MSB
 2

	)

135 
	#ELFDATANUM
 3

	)

137 
	#EI_VERSION
 6

	)

140 
	#EI_OSABI
 7

	)

141 
	#ELFOSABI_NONE
 0

	)

142 
	#ELFOSABI_SYSV
 0

	)

143 
	#ELFOSABI_HPUX
 1

	)

144 
	#ELFOSABI_NETBSD
 2

	)

145 
	#ELFOSABI_GNU
 3

	)

146 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

147 
	#ELFOSABI_SOLARIS
 6

	)

148 
	#ELFOSABI_AIX
 7

	)

149 
	#ELFOSABI_IRIX
 8

	)

150 
	#ELFOSABI_FREEBSD
 9

	)

151 
	#ELFOSABI_TRU64
 10

	)

152 
	#ELFOSABI_MODESTO
 11

	)

153 
	#ELFOSABI_OPENBSD
 12

	)

154 
	#ELFOSABI_ARM_AEABI
 64

	)

155 
	#ELFOSABI_ARM
 97

	)

156 
	#ELFOSABI_STANDALONE
 255

	)

158 
	#EI_ABIVERSION
 8

	)

160 
	#EI_PAD
 9

	)

164 
	#ET_NONE
 0

	)

165 
	#ET_REL
 1

	)

166 
	#ET_EXEC
 2

	)

167 
	#ET_DYN
 3

	)

168 
	#ET_CORE
 4

	)

169 
	#ET_NUM
 5

	)

170 
	#ET_LOOS
 0x„00

	)

171 
	#ET_HIOS
 0x„f‡

	)

172 
	#ET_LOPROC
 0xff00

	)

173 
	#ET_HIPROC
 0xfff‡

	)

177 
	#EM_NONE
 0

	)

178 
	#EM_M32
 1

	)

179 
	#EM_SPARC
 2

	)

180 
	#EM_386
 3

	)

181 
	#EM_68K
 4

	)

182 
	#EM_88K
 5

	)

183 
	#EM_860
 7

	)

184 
	#EM_MIPS
 8

	)

185 
	#EM_S370
 9

	)

186 
	#EM_MIPS_RS3_LE
 10

	)

188 
	#EM_PARISC
 15

	)

189 
	#EM_VPP500
 17

	)

190 
	#EM_SPARC32PLUS
 18

	)

191 
	#EM_960
 19

	)

192 
	#EM_PPC
 20

	)

193 
	#EM_PPC64
 21

	)

194 
	#EM_S390
 22

	)

196 
	#EM_V800
 36

	)

197 
	#EM_FR20
 37

	)

198 
	#EM_RH32
 38

	)

199 
	#EM_RCE
 39

	)

200 
	#EM_ARM
 40

	)

201 
	#EM_FAKE_ALPHA
 41

	)

202 
	#EM_SH
 42

	)

203 
	#EM_SPARCV9
 43

	)

204 
	#EM_TRICORE
 44

	)

205 
	#EM_ARC
 45

	)

206 
	#EM_H8_300
 46

	)

207 
	#EM_H8_300H
 47

	)

208 
	#EM_H8S
 48

	)

209 
	#EM_H8_500
 49

	)

210 
	#EM_IA_64
 50

	)

211 
	#EM_MIPS_X
 51

	)

212 
	#EM_COLDFIRE
 52

	)

213 
	#EM_68HC12
 53

	)

214 
	#EM_MMA
 54

	)

215 
	#EM_PCP
 55

	)

216 
	#EM_NCPU
 56

	)

217 
	#EM_NDR1
 57

	)

218 
	#EM_STARCORE
 58

	)

219 
	#EM_ME16
 59

	)

220 
	#EM_ST100
 60

	)

221 
	#EM_TINYJ
 61

	)

222 
	#EM_X86_64
 62

	)

223 
	#EM_PDSP
 63

	)

225 
	#EM_FX66
 66

	)

226 
	#EM_ST9PLUS
 67

	)

227 
	#EM_ST7
 68

	)

228 
	#EM_68HC16
 69

	)

229 
	#EM_68HC11
 70

	)

230 
	#EM_68HC08
 71

	)

231 
	#EM_68HC05
 72

	)

232 
	#EM_SVX
 73

	)

233 
	#EM_ST19
 74

	)

234 
	#EM_VAX
 75

	)

235 
	#EM_CRIS
 76

	)

236 
	#EM_JAVELIN
 77

	)

237 
	#EM_FIREPATH
 78

	)

238 
	#EM_ZSP
 79

	)

239 
	#EM_MMIX
 80

	)

240 
	#EM_HUANY
 81

	)

241 
	#EM_PRISM
 82

	)

242 
	#EM_AVR
 83

	)

243 
	#EM_FR30
 84

	)

244 
	#EM_D10V
 85

	)

245 
	#EM_D30V
 86

	)

246 
	#EM_V850
 87

	)

247 
	#EM_M32R
 88

	)

248 
	#EM_MN10300
 89

	)

249 
	#EM_MN10200
 90

	)

250 
	#EM_PJ
 91

	)

251 
	#EM_OPENRISC
 92

	)

252 
	#EM_ARC_A5
 93

	)

253 
	#EM_XTENSA
 94

	)

254 
	#EM_NUM
 95

	)

260 
	#EM_ALPHA
 0x9026

	)

264 
	#EV_NONE
 0

	)

265 
	#EV_CURRENT
 1

	)

266 
	#EV_NUM
 2

	)

272 
Elf32_W‹d
 
	msh_«me
;

273 
Elf32_W‹d
 
	msh_ty≥
;

274 
Elf32_W‹d
 
	msh_Êags
;

275 
Elf32_Addr
 
	msh_addr
;

276 
Elf32_Off
 
	msh_off£t
;

277 
Elf32_W‹d
 
	msh_size
;

278 
Elf32_W‹d
 
	msh_lök
;

279 
Elf32_W‹d
 
	msh_öfo
;

280 
Elf32_W‹d
 
	msh_addølign
;

281 
Elf32_W‹d
 
	msh_ítsize
;

282 } 
	tElf32_Shdr
;

286 
Elf64_W‹d
 
	msh_«me
;

287 
Elf64_W‹d
 
	msh_ty≥
;

288 
Elf64_Xw‹d
 
	msh_Êags
;

289 
Elf64_Addr
 
	msh_addr
;

290 
Elf64_Off
 
	msh_off£t
;

291 
Elf64_Xw‹d
 
	msh_size
;

292 
Elf64_W‹d
 
	msh_lök
;

293 
Elf64_W‹d
 
	msh_öfo
;

294 
Elf64_Xw‹d
 
	msh_addølign
;

295 
Elf64_Xw‹d
 
	msh_ítsize
;

296 } 
	tElf64_Shdr
;

300 
	#SHN_UNDEF
 0

	)

301 
	#SHN_LORESERVE
 0xff00

	)

302 
	#SHN_LOPROC
 0xff00

	)

303 
	#SHN_BEFORE
 0xff00

	)

305 
	#SHN_AFTER
 0xff01

	)

307 
	#SHN_HIPROC
 0xff1‡

	)

308 
	#SHN_LOOS
 0xff20

	)

309 
	#SHN_HIOS
 0xff3‡

	)

310 
	#SHN_ABS
 0xfff1

	)

311 
	#SHN_COMMON
 0xfff2

	)

312 
	#SHN_XINDEX
 0xfff‡

	)

313 
	#SHN_HIRESERVE
 0xfff‡

	)

317 
	#SHT_NULL
 0

	)

318 
	#SHT_PROGBITS
 1

	)

319 
	#SHT_SYMTAB
 2

	)

320 
	#SHT_STRTAB
 3

	)

321 
	#SHT_RELA
 4

	)

322 
	#SHT_HASH
 5

	)

323 
	#SHT_DYNAMIC
 6

	)

324 
	#SHT_NOTE
 7

	)

325 
	#SHT_NOBITS
 8

	)

326 
	#SHT_REL
 9

	)

327 
	#SHT_SHLIB
 10

	)

328 
	#SHT_DYNSYM
 11

	)

329 
	#SHT_INIT_ARRAY
 14

	)

330 
	#SHT_FINI_ARRAY
 15

	)

331 
	#SHT_PREINIT_ARRAY
 16

	)

332 
	#SHT_GROUP
 17

	)

333 
	#SHT_SYMTAB_SHNDX
 18

	)

334 
	#SHT_NUM
 19

	)

335 
	#SHT_LOOS
 0x60000000

	)

336 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

337 
	#SHT_GNU_HASH
 0x6ffffff6

	)

338 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

339 
	#SHT_CHECKSUM
 0x6ffffff8

	)

340 
	#SHT_LOSUNW
 0x6fffffÁ

	)

341 
	#SHT_SUNW_move
 0x6fffffÁ

	)

342 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

343 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

344 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

345 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

346 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

347 
	#SHT_HISUNW
 0x6ffffff‡

	)

348 
	#SHT_HIOS
 0x6ffffff‡

	)

349 
	#SHT_LOPROC
 0x70000000

	)

350 
	#SHT_HIPROC
 0x7ffffff‡

	)

351 
	#SHT_LOUSER
 0x80000000

	)

352 
	#SHT_HIUSER
 0x8ffffff‡

	)

356 
	#SHF_WRITE
 (1 << 0Ë

	)

357 
	#SHF_ALLOC
 (1 << 1Ë

	)

358 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

359 
	#SHF_MERGE
 (1 << 4Ë

	)

360 
	#SHF_STRINGS
 (1 << 5Ë

	)

361 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

362 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

363 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

365 
	#SHF_GROUP
 (1 << 9Ë

	)

366 
	#SHF_TLS
 (1 << 10Ë

	)

367 
	#SHF_MASKOS
 0x0ff00000

	)

368 
	#SHF_MASKPROC
 0xf0000000

	)

369 
	#SHF_ORDERED
 (1 << 30Ë

	)

371 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

375 
	#GRP_COMDAT
 0x1

	)

381 
Elf32_W‹d
 
	m°_«me
;

382 
Elf32_Addr
 
	m°_vÆue
;

383 
Elf32_W‹d
 
	m°_size
;

384 
	m°_öfo
;

385 
	m°_Ÿhî
;

386 
Elf32_Se˘i⁄
 
	m°_shndx
;

387 } 
	tElf32_Sym
;

391 
Elf64_W‹d
 
	m°_«me
;

392 
	m°_öfo
;

393 
	m°_Ÿhî
;

394 
Elf64_Se˘i⁄
 
	m°_shndx
;

395 
Elf64_Addr
 
	m°_vÆue
;

396 
Elf64_Xw‹d
 
	m°_size
;

397 } 
	tElf64_Sym
;

404 
Elf32_HÆf
 
	msi_boundto
;

405 
Elf32_HÆf
 
	msi_Êags
;

406 } 
	tElf32_Symöfo
;

410 
Elf64_HÆf
 
	msi_boundto
;

411 
Elf64_HÆf
 
	msi_Êags
;

412 } 
	tElf64_Symöfo
;

415 
	#SYMINFO_BT_SELF
 0xfff‡

	)

416 
	#SYMINFO_BT_PARENT
 0xff„

	)

417 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

420 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

421 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

422 
	#SYMINFO_FLG_COPY
 0x0004

	)

423 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

426 
	#SYMINFO_NONE
 0

	)

427 
	#SYMINFO_CURRENT
 1

	)

428 
	#SYMINFO_NUM
 2

	)

433 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

434 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

435 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

438 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

439 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

440 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

444 
	#STB_LOCAL
 0

	)

445 
	#STB_GLOBAL
 1

	)

446 
	#STB_WEAK
 2

	)

447 
	#STB_NUM
 3

	)

448 
	#STB_LOOS
 10

	)

449 
	#STB_GNU_UNIQUE
 10

	)

450 
	#STB_HIOS
 12

	)

451 
	#STB_LOPROC
 13

	)

452 
	#STB_HIPROC
 15

	)

456 
	#STT_NOTYPE
 0

	)

457 
	#STT_OBJECT
 1

	)

458 
	#STT_FUNC
 2

	)

459 
	#STT_SECTION
 3

	)

460 
	#STT_FILE
 4

	)

461 
	#STT_COMMON
 5

	)

462 
	#STT_TLS
 6

	)

463 
	#STT_NUM
 7

	)

464 
	#STT_LOOS
 10

	)

465 
	#STT_GNU_IFUNC
 10

	)

466 
	#STT_HIOS
 12

	)

467 
	#STT_LOPROC
 13

	)

468 
	#STT_HIPROC
 15

	)

475 
	#STN_UNDEF
 0

	)

480 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

483 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

486 
	#STV_DEFAULT
 0

	)

487 
	#STV_INTERNAL
 1

	)

488 
	#STV_HIDDEN
 2

	)

489 
	#STV_PROTECTED
 3

	)

496 
Elf32_Addr
 
	mr_off£t
;

497 
Elf32_W‹d
 
	mr_öfo
;

498 } 
	tElf32_Rñ
;

507 
Elf64_Addr
 
	mr_off£t
;

508 
Elf64_Xw‹d
 
	mr_öfo
;

509 } 
	tElf64_Rñ
;

515 
Elf32_Addr
 
	mr_off£t
;

516 
Elf32_W‹d
 
	mr_öfo
;

517 
Elf32_Sw‹d
 
	mr_addíd
;

518 } 
	tElf32_Rña
;

522 
Elf64_Addr
 
	mr_off£t
;

523 
Elf64_Xw‹d
 
	mr_öfo
;

524 
Elf64_Sxw‹d
 
	mr_addíd
;

525 } 
	tElf64_Rña
;

529 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

530 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

531 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

533 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

534 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

535 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

541 
Elf32_W‹d
 
	mp_ty≥
;

542 
Elf32_Off
 
	mp_off£t
;

543 
Elf32_Addr
 
	mp_vaddr
;

544 
Elf32_Addr
 
	mp_∑ddr
;

545 
Elf32_W‹d
 
	mp_fûesz
;

546 
Elf32_W‹d
 
	mp_memsz
;

547 
Elf32_W‹d
 
	mp_Êags
;

548 
Elf32_W‹d
 
	mp_Æign
;

549 } 
	tElf32_Phdr
;

553 
Elf64_W‹d
 
	mp_ty≥
;

554 
Elf64_W‹d
 
	mp_Êags
;

555 
Elf64_Off
 
	mp_off£t
;

556 
Elf64_Addr
 
	mp_vaddr
;

557 
Elf64_Addr
 
	mp_∑ddr
;

558 
Elf64_Xw‹d
 
	mp_fûesz
;

559 
Elf64_Xw‹d
 
	mp_memsz
;

560 
Elf64_Xw‹d
 
	mp_Æign
;

561 } 
	tElf64_Phdr
;

567 
	#PN_XNUM
 0xffff

	)

571 
	#PT_NULL
 0

	)

572 
	#PT_LOAD
 1

	)

573 
	#PT_DYNAMIC
 2

	)

574 
	#PT_INTERP
 3

	)

575 
	#PT_NOTE
 4

	)

576 
	#PT_SHLIB
 5

	)

577 
	#PT_PHDR
 6

	)

578 
	#PT_TLS
 7

	)

579 
	#PT_NUM
 8

	)

580 
	#PT_LOOS
 0x60000000

	)

581 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

582 
	#PT_GNU_STACK
 0x6474e551

	)

583 
	#PT_GNU_RELRO
 0x6474e552

	)

584 
	#PT_LOSUNW
 0x6fffffÁ

	)

585 
	#PT_SUNWBSS
 0x6fffffÁ

	)

586 
	#PT_SUNWSTACK
 0x6ffffffb

	)

587 
	#PT_HISUNW
 0x6fffffff

	)

588 
	#PT_HIOS
 0x6ffffff‡

	)

589 
	#PT_LOPROC
 0x70000000

	)

590 
	#PT_HIPROC
 0x7ffffff‡

	)

594 
	#PF_X
 (1 << 0Ë

	)

595 
	#PF_W
 (1 << 1Ë

	)

596 
	#PF_R
 (1 << 2Ë

	)

597 
	#PF_MASKOS
 0x0ff00000

	)

598 
	#PF_MASKPROC
 0xf0000000

	)

602 
	#NT_PRSTATUS
 1

	)

603 
	#NT_FPREGSET
 2

	)

604 
	#NT_PRPSINFO
 3

	)

605 
	#NT_PRXREG
 4

	)

606 
	#NT_TASKSTRUCT
 4

	)

607 
	#NT_PLATFORM
 5

	)

608 
	#NT_AUXV
 6

	)

609 
	#NT_GWINDOWS
 7

	)

610 
	#NT_ASRS
 8

	)

611 
	#NT_PSTATUS
 10

	)

612 
	#NT_PSINFO
 13

	)

613 
	#NT_PRCRED
 14

	)

614 
	#NT_UTSNAME
 15

	)

615 
	#NT_LWPSTATUS
 16

	)

616 
	#NT_LWPSINFO
 17

	)

617 
	#NT_PRFPXREG
 20

	)

618 
	#NT_PRXFPREG
 0x46e62b7‡

	)

619 
	#NT_PPC_VMX
 0x100

	)

620 
	#NT_PPC_SPE
 0x101

	)

621 
	#NT_PPC_VSX
 0x102

	)

622 
	#NT_386_TLS
 0x200

	)

623 
	#NT_386_IOPERM
 0x201

	)

624 
	#NT_X86_XSTATE
 0x202

	)

628 
	#NT_VERSION
 1

	)

635 
Elf32_Sw‹d
 
	md_èg
;

638 
Elf32_W‹d
 
	md_vÆ
;

639 
Elf32_Addr
 
	md_±r
;

640 } 
	md_un
;

641 } 
	tElf32_Dyn
;

645 
Elf64_Sxw‹d
 
	md_èg
;

648 
Elf64_Xw‹d
 
	md_vÆ
;

649 
Elf64_Addr
 
	md_±r
;

650 } 
	md_un
;

651 } 
	tElf64_Dyn
;

655 
	#DT_NULL
 0

	)

656 
	#DT_NEEDED
 1

	)

657 
	#DT_PLTRELSZ
 2

	)

658 
	#DT_PLTGOT
 3

	)

659 
	#DT_HASH
 4

	)

660 
	#DT_STRTAB
 5

	)

661 
	#DT_SYMTAB
 6

	)

662 
	#DT_RELA
 7

	)

663 
	#DT_RELASZ
 8

	)

664 
	#DT_RELAENT
 9

	)

665 
	#DT_STRSZ
 10

	)

666 
	#DT_SYMENT
 11

	)

667 
	#DT_INIT
 12

	)

668 
	#DT_FINI
 13

	)

669 
	#DT_SONAME
 14

	)

670 
	#DT_RPATH
 15

	)

671 
	#DT_SYMBOLIC
 16

	)

672 
	#DT_REL
 17

	)

673 
	#DT_RELSZ
 18

	)

674 
	#DT_RELENT
 19

	)

675 
	#DT_PLTREL
 20

	)

676 
	#DT_DEBUG
 21

	)

677 
	#DT_TEXTREL
 22

	)

678 
	#DT_JMPREL
 23

	)

679 
	#DT_BIND_NOW
 24

	)

680 
	#DT_INIT_ARRAY
 25

	)

681 
	#DT_FINI_ARRAY
 26

	)

682 
	#DT_INIT_ARRAYSZ
 27

	)

683 
	#DT_FINI_ARRAYSZ
 28

	)

684 
	#DT_RUNPATH
 29

	)

685 
	#DT_FLAGS
 30

	)

686 
	#DT_ENCODING
 32

	)

687 
	#DT_PREINIT_ARRAY
 32

	)

688 
	#DT_PREINIT_ARRAYSZ
 33

	)

689 
	#DT_NUM
 34

	)

690 
	#DT_LOOS
 0x6000000d

	)

691 
	#DT_HIOS
 0x6ffff000

	)

692 
	#DT_LOPROC
 0x70000000

	)

693 
	#DT_HIPROC
 0x7ffffff‡

	)

694 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

699 
	#DT_VALRNGLO
 0x6ffffd00

	)

700 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

701 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

702 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

703 
	#DT_CHECKSUM
 0x6ffffdf8

	)

704 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

705 
	#DT_MOVEENT
 0x6ffffdÁ

	)

706 
	#DT_MOVESZ
 0x6ffffdfb

	)

707 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

708 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

710 
	#DT_SYMINSZ
 0x6ffffd„

	)

711 
	#DT_SYMINENT
 0x6ffffdf‡

	)

712 
	#DT_VALRNGHI
 0x6ffffdff

	)

713 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

714 
	#DT_VALNUM
 12

	)

721 
	#DT_ADDRRNGLO
 0x6fff„00

	)

722 
	#DT_GNU_HASH
 0x6fff„f5

	)

723 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

724 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

725 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

726 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

727 
	#DT_CONFIG
 0x6fff„Á

	)

728 
	#DT_DEPAUDIT
 0x6fff„fb

	)

729 
	#DT_AUDIT
 0x6fff„f¯

	)

730 
	#DT_PLTPAD
 0x6fff„fd

	)

731 
	#DT_MOVETAB
 0x6fff„„

	)

732 
	#DT_SYMINFO
 0x6fff„f‡

	)

733 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

734 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

735 
	#DT_ADDRNUM
 11

	)

739 
	#DT_VERSYM
 0x6ffffff0

	)

741 
	#DT_RELACOUNT
 0x6ffffff9

	)

742 
	#DT_RELCOUNT
 0x6fffffÁ

	)

745 
	#DT_FLAGS_1
 0x6ffffffb

	)

746 
	#DT_VERDEF
 0x6ffffff¯

	)

748 
	#DT_VERDEFNUM
 0x6ffffffd

	)

749 
	#DT_VERNEED
 0x6fffff„

	)

751 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

752 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

753 
	#DT_VERSIONTAGNUM
 16

	)

757 
	#DT_AUXILIARY
 0x7ffffffd

	)

758 
	#DT_FILTER
 0x7ffffff‡

	)

759 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

760 
	#DT_EXTRANUM
 3

	)

763 
	#DF_ORIGIN
 0x00000001

	)

764 
	#DF_SYMBOLIC
 0x00000002

	)

765 
	#DF_TEXTREL
 0x00000004

	)

766 
	#DF_BIND_NOW
 0x00000008

	)

767 
	#DF_STATIC_TLS
 0x00000010

	)

771 
	#DF_1_NOW
 0x00000001

	)

772 
	#DF_1_GLOBAL
 0x00000002

	)

773 
	#DF_1_GROUP
 0x00000004

	)

774 
	#DF_1_NODELETE
 0x00000008

	)

775 
	#DF_1_LOADFLTR
 0x00000010

	)

776 
	#DF_1_INITFIRST
 0x00000020

	)

777 
	#DF_1_NOOPEN
 0x00000040

	)

778 
	#DF_1_ORIGIN
 0x00000080

	)

779 
	#DF_1_DIRECT
 0x00000100

	)

780 
	#DF_1_TRANS
 0x00000200

	)

781 
	#DF_1_INTERPOSE
 0x00000400

	)

782 
	#DF_1_NODEFLIB
 0x00000800

	)

783 
	#DF_1_NODUMP
 0x00001000

	)

784 
	#DF_1_CONFALT
 0x00002000

	)

785 
	#DF_1_ENDFILTEE
 0x00004000

	)

786 
	#DF_1_DISPRELDNE
 0x00008000

	)

787 
	#DF_1_DISPRELPND
 0x00010000

	)

790 
	#DTF_1_PARINIT
 0x00000001

	)

791 
	#DTF_1_CONFEXP
 0x00000002

	)

794 
	#DF_P1_LAZYLOAD
 0x00000001

	)

795 
	#DF_P1_GROUPPERM
 0x00000002

	)

802 
Elf32_HÆf
 
	mvd_vîsi⁄
;

803 
Elf32_HÆf
 
	mvd_Êags
;

804 
Elf32_HÆf
 
	mvd_ndx
;

805 
Elf32_HÆf
 
	mvd_˙t
;

806 
Elf32_W‹d
 
	mvd_hash
;

807 
Elf32_W‹d
 
	mvd_aux
;

808 
Elf32_W‹d
 
	mvd_√xt
;

810 } 
	tElf32_Vîdef
;

814 
Elf64_HÆf
 
	mvd_vîsi⁄
;

815 
Elf64_HÆf
 
	mvd_Êags
;

816 
Elf64_HÆf
 
	mvd_ndx
;

817 
Elf64_HÆf
 
	mvd_˙t
;

818 
Elf64_W‹d
 
	mvd_hash
;

819 
Elf64_W‹d
 
	mvd_aux
;

820 
Elf64_W‹d
 
	mvd_√xt
;

822 } 
	tElf64_Vîdef
;

826 
	#VER_DEF_NONE
 0

	)

827 
	#VER_DEF_CURRENT
 1

	)

828 
	#VER_DEF_NUM
 2

	)

831 
	#VER_FLG_BASE
 0x1

	)

832 
	#VER_FLG_WEAK
 0x2

	)

835 
	#VER_NDX_LOCAL
 0

	)

836 
	#VER_NDX_GLOBAL
 1

	)

837 
	#VER_NDX_LORESERVE
 0xff00

	)

838 
	#VER_NDX_ELIMINATE
 0xff01

	)

844 
Elf32_W‹d
 
	mvda_«me
;

845 
Elf32_W‹d
 
	mvda_√xt
;

847 } 
	tElf32_Vîdaux
;

851 
Elf64_W‹d
 
	mvda_«me
;

852 
Elf64_W‹d
 
	mvda_√xt
;

854 } 
	tElf64_Vîdaux
;

861 
Elf32_HÆf
 
	mvn_vîsi⁄
;

862 
Elf32_HÆf
 
	mvn_˙t
;

863 
Elf32_W‹d
 
	mvn_fûe
;

865 
Elf32_W‹d
 
	mvn_aux
;

866 
Elf32_W‹d
 
	mvn_√xt
;

868 } 
	tElf32_Vî√ed
;

872 
Elf64_HÆf
 
	mvn_vîsi⁄
;

873 
Elf64_HÆf
 
	mvn_˙t
;

874 
Elf64_W‹d
 
	mvn_fûe
;

876 
Elf64_W‹d
 
	mvn_aux
;

877 
Elf64_W‹d
 
	mvn_√xt
;

879 } 
	tElf64_Vî√ed
;

883 
	#VER_NEED_NONE
 0

	)

884 
	#VER_NEED_CURRENT
 1

	)

885 
	#VER_NEED_NUM
 2

	)

891 
Elf32_W‹d
 
	mv«_hash
;

892 
Elf32_HÆf
 
	mv«_Êags
;

893 
Elf32_HÆf
 
	mv«_Ÿhî
;

894 
Elf32_W‹d
 
	mv«_«me
;

895 
Elf32_W‹d
 
	mv«_√xt
;

897 } 
	tElf32_Vî«ux
;

901 
Elf64_W‹d
 
	mv«_hash
;

902 
Elf64_HÆf
 
	mv«_Êags
;

903 
Elf64_HÆf
 
	mv«_Ÿhî
;

904 
Elf64_W‹d
 
	mv«_«me
;

905 
Elf64_W‹d
 
	mv«_√xt
;

907 } 
	tElf64_Vî«ux
;

911 
	#VER_FLG_WEAK
 0x2

	)

925 
uöt32_t
 
	ma_ty≥
;

928 
uöt32_t
 
	ma_vÆ
;

932 } 
	ma_un
;

933 } 
	tElf32_auxv_t
;

937 
uöt64_t
 
	ma_ty≥
;

940 
uöt64_t
 
	ma_vÆ
;

944 } 
	ma_un
;

945 } 
	tElf64_auxv_t
;

949 
	#AT_NULL
 0

	)

950 
	#AT_IGNORE
 1

	)

951 
	#AT_EXECFD
 2

	)

952 
	#AT_PHDR
 3

	)

953 
	#AT_PHENT
 4

	)

954 
	#AT_PHNUM
 5

	)

955 
	#AT_PAGESZ
 6

	)

956 
	#AT_BASE
 7

	)

957 
	#AT_FLAGS
 8

	)

958 
	#AT_ENTRY
 9

	)

959 
	#AT_NOTELF
 10

	)

960 
	#AT_UID
 11

	)

961 
	#AT_EUID
 12

	)

962 
	#AT_GID
 13

	)

963 
	#AT_EGID
 14

	)

964 
	#AT_CLKTCK
 17

	)

967 
	#AT_PLATFORM
 15

	)

968 
	#AT_HWCAP
 16

	)

973 
	#AT_FPUCW
 18

	)

976 
	#AT_DCACHEBSIZE
 19

	)

977 
	#AT_ICACHEBSIZE
 20

	)

978 
	#AT_UCACHEBSIZE
 21

	)

982 
	#AT_IGNOREPPC
 22

	)

984 
	#AT_SECURE
 23

	)

986 
	#AT_BASE_PLATFORM
 24

	)

988 
	#AT_RANDOM
 25

	)

990 
	#AT_EXECFN
 31

	)

994 
	#AT_SYSINFO
 32

	)

995 
	#AT_SYSINFO_EHDR
 33

	)

999 
	#AT_L1I_CACHESHAPE
 34

	)

1000 
	#AT_L1D_CACHESHAPE
 35

	)

1001 
	#AT_L2_CACHESHAPE
 36

	)

1002 
	#AT_L3_CACHESHAPE
 37

	)

1009 
Elf32_W‹d
 
	mn_«mesz
;

1010 
Elf32_W‹d
 
	mn_descsz
;

1011 
Elf32_W‹d
 
	mn_ty≥
;

1012 } 
	tElf32_Nhdr
;

1016 
Elf64_W‹d
 
	mn_«mesz
;

1017 
Elf64_W‹d
 
	mn_descsz
;

1018 
Elf64_W‹d
 
	mn_ty≥
;

1019 } 
	tElf64_Nhdr
;

1024 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1027 
	#ELF_NOTE_GNU
 "GNU"

	)

1033 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1044 
	#NT_GNU_ABI_TAG
 1

	)

1045 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1049 
	#ELF_NOTE_OS_LINUX
 0

	)

1050 
	#ELF_NOTE_OS_GNU
 1

	)

1051 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1052 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1060 
	#NT_GNU_HWCAP
 2

	)

1064 
	#NT_GNU_BUILD_ID
 3

	)

1067 
	#NT_GNU_GOLD_VERSION
 4

	)

1073 
Elf32_Xw‹d
 
	mm_vÆue
;

1074 
Elf32_W‹d
 
	mm_öfo
;

1075 
Elf32_W‹d
 
	mm_poff£t
;

1076 
Elf32_HÆf
 
	mm_ª≥©
;

1077 
Elf32_HÆf
 
	mm_°ride
;

1078 } 
	tElf32_Move
;

1082 
Elf64_Xw‹d
 
	mm_vÆue
;

1083 
Elf64_Xw‹d
 
	mm_öfo
;

1084 
Elf64_Xw‹d
 
	mm_poff£t
;

1085 
Elf64_HÆf
 
	mm_ª≥©
;

1086 
Elf64_HÆf
 
	mm_°ride
;

1087 } 
	tElf64_Move
;

1090 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1091 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1092 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1094 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1095 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1096 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1102 
	#EF_CPU32
 0x00810000

	)

1106 
	#R_68K_NONE
 0

	)

1107 
	#R_68K_32
 1

	)

1108 
	#R_68K_16
 2

	)

1109 
	#R_68K_8
 3

	)

1110 
	#R_68K_PC32
 4

	)

1111 
	#R_68K_PC16
 5

	)

1112 
	#R_68K_PC8
 6

	)

1113 
	#R_68K_GOT32
 7

	)

1114 
	#R_68K_GOT16
 8

	)

1115 
	#R_68K_GOT8
 9

	)

1116 
	#R_68K_GOT32O
 10

	)

1117 
	#R_68K_GOT16O
 11

	)

1118 
	#R_68K_GOT8O
 12

	)

1119 
	#R_68K_PLT32
 13

	)

1120 
	#R_68K_PLT16
 14

	)

1121 
	#R_68K_PLT8
 15

	)

1122 
	#R_68K_PLT32O
 16

	)

1123 
	#R_68K_PLT16O
 17

	)

1124 
	#R_68K_PLT8O
 18

	)

1125 
	#R_68K_COPY
 19

	)

1126 
	#R_68K_GLOB_DAT
 20

	)

1127 
	#R_68K_JMP_SLOT
 21

	)

1128 
	#R_68K_RELATIVE
 22

	)

1129 
	#R_68K_TLS_GD32
 25

	)

1130 
	#R_68K_TLS_GD16
 26

	)

1131 
	#R_68K_TLS_GD8
 27

	)

1132 
	#R_68K_TLS_LDM32
 28

	)

1133 
	#R_68K_TLS_LDM16
 29

	)

1134 
	#R_68K_TLS_LDM8
 30

	)

1135 
	#R_68K_TLS_LDO32
 31

	)

1136 
	#R_68K_TLS_LDO16
 32

	)

1137 
	#R_68K_TLS_LDO8
 33

	)

1138 
	#R_68K_TLS_IE32
 34

	)

1139 
	#R_68K_TLS_IE16
 35

	)

1140 
	#R_68K_TLS_IE8
 36

	)

1141 
	#R_68K_TLS_LE32
 37

	)

1143 
	#R_68K_TLS_LE16
 38

	)

1145 
	#R_68K_TLS_LE8
 39

	)

1147 
	#R_68K_TLS_DTPMOD32
 40

	)

1148 
	#R_68K_TLS_DTPREL32
 41

	)

1149 
	#R_68K_TLS_TPREL32
 42

	)

1151 
	#R_68K_NUM
 43

	)

1157 
	#R_386_NONE
 0

	)

1158 
	#R_386_32
 1

	)

1159 
	#R_386_PC32
 2

	)

1160 
	#R_386_GOT32
 3

	)

1161 
	#R_386_PLT32
 4

	)

1162 
	#R_386_COPY
 5

	)

1163 
	#R_386_GLOB_DAT
 6

	)

1164 
	#R_386_JMP_SLOT
 7

	)

1165 
	#R_386_RELATIVE
 8

	)

1166 
	#R_386_GOTOFF
 9

	)

1167 
	#R_386_GOTPC
 10

	)

1168 
	#R_386_32PLT
 11

	)

1169 
	#R_386_TLS_TPOFF
 14

	)

1170 
	#R_386_TLS_IE
 15

	)

1172 
	#R_386_TLS_GOTIE
 16

	)

1174 
	#R_386_TLS_LE
 17

	)

1176 
	#R_386_TLS_GD
 18

	)

1178 
	#R_386_TLS_LDM
 19

	)

1181 
	#R_386_16
 20

	)

1182 
	#R_386_PC16
 21

	)

1183 
	#R_386_8
 22

	)

1184 
	#R_386_PC8
 23

	)

1185 
	#R_386_TLS_GD_32
 24

	)

1187 
	#R_386_TLS_GD_PUSH
 25

	)

1188 
	#R_386_TLS_GD_CALL
 26

	)

1190 
	#R_386_TLS_GD_POP
 27

	)

1191 
	#R_386_TLS_LDM_32
 28

	)

1193 
	#R_386_TLS_LDM_PUSH
 29

	)

1194 
	#R_386_TLS_LDM_CALL
 30

	)

1196 
	#R_386_TLS_LDM_POP
 31

	)

1197 
	#R_386_TLS_LDO_32
 32

	)

1198 
	#R_386_TLS_IE_32
 33

	)

1200 
	#R_386_TLS_LE_32
 34

	)

1202 
	#R_386_TLS_DTPMOD32
 35

	)

1203 
	#R_386_TLS_DTPOFF32
 36

	)

1204 
	#R_386_TLS_TPOFF32
 37

	)

1206 
	#R_386_TLS_GOTDESC
 39

	)

1207 
	#R_386_TLS_DESC_CALL
 40

	)

1210 
	#R_386_TLS_DESC
 41

	)

1214 
	#R_386_IRELATIVE
 42

	)

1216 
	#R_386_NUM
 43

	)

1222 
	#STT_SPARC_REGISTER
 13

	)

1226 
	#EF_SPARCV9_MM
 3

	)

1227 
	#EF_SPARCV9_TSO
 0

	)

1228 
	#EF_SPARCV9_PSO
 1

	)

1229 
	#EF_SPARCV9_RMO
 2

	)

1230 
	#EF_SPARC_LEDATA
 0x800000

	)

1231 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1232 
	#EF_SPARC_32PLUS
 0x000100

	)

1233 
	#EF_SPARC_SUN_US1
 0x000200

	)

1234 
	#EF_SPARC_HAL_R1
 0x000400

	)

1235 
	#EF_SPARC_SUN_US3
 0x000800

	)

1239 
	#R_SPARC_NONE
 0

	)

1240 
	#R_SPARC_8
 1

	)

1241 
	#R_SPARC_16
 2

	)

1242 
	#R_SPARC_32
 3

	)

1243 
	#R_SPARC_DISP8
 4

	)

1244 
	#R_SPARC_DISP16
 5

	)

1245 
	#R_SPARC_DISP32
 6

	)

1246 
	#R_SPARC_WDISP30
 7

	)

1247 
	#R_SPARC_WDISP22
 8

	)

1248 
	#R_SPARC_HI22
 9

	)

1249 
	#R_SPARC_22
 10

	)

1250 
	#R_SPARC_13
 11

	)

1251 
	#R_SPARC_LO10
 12

	)

1252 
	#R_SPARC_GOT10
 13

	)

1253 
	#R_SPARC_GOT13
 14

	)

1254 
	#R_SPARC_GOT22
 15

	)

1255 
	#R_SPARC_PC10
 16

	)

1256 
	#R_SPARC_PC22
 17

	)

1257 
	#R_SPARC_WPLT30
 18

	)

1258 
	#R_SPARC_COPY
 19

	)

1259 
	#R_SPARC_GLOB_DAT
 20

	)

1260 
	#R_SPARC_JMP_SLOT
 21

	)

1261 
	#R_SPARC_RELATIVE
 22

	)

1262 
	#R_SPARC_UA32
 23

	)

1266 
	#R_SPARC_PLT32
 24

	)

1267 
	#R_SPARC_HIPLT22
 25

	)

1268 
	#R_SPARC_LOPLT10
 26

	)

1269 
	#R_SPARC_PCPLT32
 27

	)

1270 
	#R_SPARC_PCPLT22
 28

	)

1271 
	#R_SPARC_PCPLT10
 29

	)

1272 
	#R_SPARC_10
 30

	)

1273 
	#R_SPARC_11
 31

	)

1274 
	#R_SPARC_64
 32

	)

1275 
	#R_SPARC_OLO10
 33

	)

1276 
	#R_SPARC_HH22
 34

	)

1277 
	#R_SPARC_HM10
 35

	)

1278 
	#R_SPARC_LM22
 36

	)

1279 
	#R_SPARC_PC_HH22
 37

	)

1280 
	#R_SPARC_PC_HM10
 38

	)

1281 
	#R_SPARC_PC_LM22
 39

	)

1282 
	#R_SPARC_WDISP16
 40

	)

1283 
	#R_SPARC_WDISP19
 41

	)

1284 
	#R_SPARC_GLOB_JMP
 42

	)

1285 
	#R_SPARC_7
 43

	)

1286 
	#R_SPARC_5
 44

	)

1287 
	#R_SPARC_6
 45

	)

1288 
	#R_SPARC_DISP64
 46

	)

1289 
	#R_SPARC_PLT64
 47

	)

1290 
	#R_SPARC_HIX22
 48

	)

1291 
	#R_SPARC_LOX10
 49

	)

1292 
	#R_SPARC_H44
 50

	)

1293 
	#R_SPARC_M44
 51

	)

1294 
	#R_SPARC_L44
 52

	)

1295 
	#R_SPARC_REGISTER
 53

	)

1296 
	#R_SPARC_UA64
 54

	)

1297 
	#R_SPARC_UA16
 55

	)

1298 
	#R_SPARC_TLS_GD_HI22
 56

	)

1299 
	#R_SPARC_TLS_GD_LO10
 57

	)

1300 
	#R_SPARC_TLS_GD_ADD
 58

	)

1301 
	#R_SPARC_TLS_GD_CALL
 59

	)

1302 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1303 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1304 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1305 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1306 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1307 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1308 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1309 
	#R_SPARC_TLS_IE_HI22
 67

	)

1310 
	#R_SPARC_TLS_IE_LO10
 68

	)

1311 
	#R_SPARC_TLS_IE_LD
 69

	)

1312 
	#R_SPARC_TLS_IE_LDX
 70

	)

1313 
	#R_SPARC_TLS_IE_ADD
 71

	)

1314 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1315 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1316 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1317 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1318 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1319 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1320 
	#R_SPARC_TLS_TPOFF32
 78

	)

1321 
	#R_SPARC_TLS_TPOFF64
 79

	)

1322 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1323 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1324 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1325 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1326 
	#R_SPARC_GOTDATA_OP
 84

	)

1327 
	#R_SPARC_H34
 85

	)

1328 
	#R_SPARC_SIZE32
 86

	)

1329 
	#R_SPARC_SIZE64
 87

	)

1330 
	#R_SPARC_JMP_IREL
 248

	)

1331 
	#R_SPARC_IRELATIVE
 249

	)

1332 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1333 
	#R_SPARC_GNU_VTENTRY
 251

	)

1334 
	#R_SPARC_REV32
 252

	)

1336 
	#R_SPARC_NUM
 253

	)

1340 
	#DT_SPARC_REGISTER
 0x70000001

	)

1341 
	#DT_SPARC_NUM
 2

	)

1347 
	#EF_MIPS_NOREORDER
 1

	)

1348 
	#EF_MIPS_PIC
 2

	)

1349 
	#EF_MIPS_CPIC
 4

	)

1350 
	#EF_MIPS_XGOT
 8

	)

1351 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1352 
	#EF_MIPS_ABI2
 32

	)

1353 
	#EF_MIPS_ABI_ON32
 64

	)

1354 
	#EF_MIPS_ARCH
 0xf0000000

	)

1358 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1359 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1360 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1361 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1362 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1363 
	#EF_MIPS_ARCH_32
 0x60000000

	)

1364 
	#EF_MIPS_ARCH_64
 0x70000000

	)

1368 
	#E_MIPS_ARCH_1
 0x00000000

	)

1369 
	#E_MIPS_ARCH_2
 0x10000000

	)

1370 
	#E_MIPS_ARCH_3
 0x20000000

	)

1371 
	#E_MIPS_ARCH_4
 0x30000000

	)

1372 
	#E_MIPS_ARCH_5
 0x40000000

	)

1373 
	#E_MIPS_ARCH_32
 0x60000000

	)

1374 
	#E_MIPS_ARCH_64
 0x70000000

	)

1378 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1379 
	#SHN_MIPS_TEXT
 0xff01

	)

1380 
	#SHN_MIPS_DATA
 0xff02

	)

1381 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1382 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1386 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1387 
	#SHT_MIPS_MSYM
 0x70000001

	)

1388 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1389 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1390 
	#SHT_MIPS_UCODE
 0x70000004

	)

1391 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1392 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1393 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1394 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1395 
	#SHT_MIPS_RELD
 0x70000009

	)

1396 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1397 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1398 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1399 
	#SHT_MIPS_SHDR
 0x70000010

	)

1400 
	#SHT_MIPS_FDESC
 0x70000011

	)

1401 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1402 
	#SHT_MIPS_DENSE
 0x70000013

	)

1403 
	#SHT_MIPS_PDESC
 0x70000014

	)

1404 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1405 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1406 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1407 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1408 
	#SHT_MIPS_LINE
 0x70000019

	)

1409 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1410 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1411 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1412 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1413 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1414 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1415 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1416 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1417 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1418 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1419 
	#SHT_MIPS_XLATE
 0x70000024

	)

1420 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1421 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1422 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1423 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1424 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1428 
	#SHF_MIPS_GPREL
 0x10000000

	)

1429 
	#SHF_MIPS_MERGE
 0x20000000

	)

1430 
	#SHF_MIPS_ADDR
 0x40000000

	)

1431 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1432 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1433 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1434 
	#SHF_MIPS_NAMES
 0x02000000

	)

1435 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1441 
	#STO_MIPS_DEFAULT
 0x0

	)

1442 
	#STO_MIPS_INTERNAL
 0x1

	)

1443 
	#STO_MIPS_HIDDEN
 0x2

	)

1444 
	#STO_MIPS_PROTECTED
 0x3

	)

1445 
	#STO_MIPS_PLT
 0x8

	)

1446 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1449 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1457 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1458 
Elf32_W‹d
 
	mgt_unu£d
;

1459 } 
	mgt_hódî
;

1462 
Elf32_W‹d
 
	mgt_g_vÆue
;

1463 
Elf32_W‹d
 
	mgt_byãs
;

1464 } 
	mgt_íåy
;

1465 } 
	tElf32_g±ab
;

1471 
Elf32_W‹d
 
	mri_g¥mask
;

1472 
Elf32_W‹d
 
	mri_˝rmask
[4];

1473 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1474 } 
	tElf32_RegInfo
;

1480 
	mköd
;

1482 
	msize
;

1483 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1485 
Elf32_W‹d
 
	möfo
;

1486 } 
	tElf_O±i⁄s
;

1490 
	#ODK_NULL
 0

	)

1491 
	#ODK_REGINFO
 1

	)

1492 
	#ODK_EXCEPTIONS
 2

	)

1493 
	#ODK_PAD
 3

	)

1494 
	#ODK_HWPATCH
 4

	)

1495 
	#ODK_FILL
 5

	)

1496 
	#ODK_TAGS
 6

	)

1497 
	#ODK_HWAND
 7

	)

1498 
	#ODK_HWOR
 8

	)

1502 
	#OEX_FPU_MIN
 0x1‡

	)

1503 
	#OEX_FPU_MAX
 0x1f00

	)

1504 
	#OEX_PAGE0
 0x10000

	)

1505 
	#OEX_SMM
 0x20000

	)

1506 
	#OEX_FPDBUG
 0x40000

	)

1507 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1508 
	#OEX_DISMISS
 0x80000

	)

1510 
	#OEX_FPU_INVAL
 0x10

	)

1511 
	#OEX_FPU_DIV0
 0x08

	)

1512 
	#OEX_FPU_OFLO
 0x04

	)

1513 
	#OEX_FPU_UFLO
 0x02

	)

1514 
	#OEX_FPU_INEX
 0x01

	)

1518 
	#OHW_R4KEOP
 0x1

	)

1519 
	#OHW_R8KPFETCH
 0x2

	)

1520 
	#OHW_R5KEOP
 0x4

	)

1521 
	#OHW_R5KCVTL
 0x8

	)

1523 
	#OPAD_PREFIX
 0x1

	)

1524 
	#OPAD_POSTFIX
 0x2

	)

1525 
	#OPAD_SYMBOL
 0x4

	)

1531 
Elf32_W‹d
 
	mhwp_Êags1
;

1532 
Elf32_W‹d
 
	mhwp_Êags2
;

1533 } 
	tElf_O±i⁄s_Hw
;

1537 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1538 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1542 
	#R_MIPS_NONE
 0

	)

1543 
	#R_MIPS_16
 1

	)

1544 
	#R_MIPS_32
 2

	)

1545 
	#R_MIPS_REL32
 3

	)

1546 
	#R_MIPS_26
 4

	)

1547 
	#R_MIPS_HI16
 5

	)

1548 
	#R_MIPS_LO16
 6

	)

1549 
	#R_MIPS_GPREL16
 7

	)

1550 
	#R_MIPS_LITERAL
 8

	)

1551 
	#R_MIPS_GOT16
 9

	)

1552 
	#R_MIPS_PC16
 10

	)

1553 
	#R_MIPS_CALL16
 11

	)

1554 
	#R_MIPS_GPREL32
 12

	)

1556 
	#R_MIPS_SHIFT5
 16

	)

1557 
	#R_MIPS_SHIFT6
 17

	)

1558 
	#R_MIPS_64
 18

	)

1559 
	#R_MIPS_GOT_DISP
 19

	)

1560 
	#R_MIPS_GOT_PAGE
 20

	)

1561 
	#R_MIPS_GOT_OFST
 21

	)

1562 
	#R_MIPS_GOT_HI16
 22

	)

1563 
	#R_MIPS_GOT_LO16
 23

	)

1564 
	#R_MIPS_SUB
 24

	)

1565 
	#R_MIPS_INSERT_A
 25

	)

1566 
	#R_MIPS_INSERT_B
 26

	)

1567 
	#R_MIPS_DELETE
 27

	)

1568 
	#R_MIPS_HIGHER
 28

	)

1569 
	#R_MIPS_HIGHEST
 29

	)

1570 
	#R_MIPS_CALL_HI16
 30

	)

1571 
	#R_MIPS_CALL_LO16
 31

	)

1572 
	#R_MIPS_SCN_DISP
 32

	)

1573 
	#R_MIPS_REL16
 33

	)

1574 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1575 
	#R_MIPS_PJUMP
 35

	)

1576 
	#R_MIPS_RELGOT
 36

	)

1577 
	#R_MIPS_JALR
 37

	)

1578 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1579 
	#R_MIPS_TLS_DTPREL32
 39

	)

1580 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1581 
	#R_MIPS_TLS_DTPREL64
 41

	)

1582 
	#R_MIPS_TLS_GD
 42

	)

1583 
	#R_MIPS_TLS_LDM
 43

	)

1584 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1585 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1586 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1587 
	#R_MIPS_TLS_TPREL32
 47

	)

1588 
	#R_MIPS_TLS_TPREL64
 48

	)

1589 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1590 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1591 
	#R_MIPS_GLOB_DAT
 51

	)

1592 
	#R_MIPS_COPY
 126

	)

1593 
	#R_MIPS_JUMP_SLOT
 127

	)

1595 
	#R_MIPS_NUM
 128

	)

1599 
	#PT_MIPS_REGINFO
 0x70000000

	)

1600 
	#PT_MIPS_RTPROC
 0x70000001

	)

1601 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1605 
	#PF_MIPS_LOCAL
 0x10000000

	)

1609 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1610 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1611 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1612 
	#DT_MIPS_IVERSION
 0x70000004

	)

1613 
	#DT_MIPS_FLAGS
 0x70000005

	)

1614 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1615 
	#DT_MIPS_MSYM
 0x70000007

	)

1616 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1617 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1618 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1619 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1620 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1621 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1622 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1623 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1624 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1625 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1626 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1627 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1629 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1630 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1632 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1633 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1635 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1637 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1639 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1641 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1643 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1644 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1645 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1646 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1647 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1648 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1649 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1650 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1651 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1652 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1653 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1654 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1656 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1658 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1659 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1660 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1662 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1666 
	#DT_MIPS_RWPLT
 0x70000034

	)

1667 
	#DT_MIPS_NUM
 0x35

	)

1671 
	#RHF_NONE
 0

	)

1672 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1673 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1674 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1675 
	#RHF_NO_MOVE
 (1 << 3)

	)

1676 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1677 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1678 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1679 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1680 
	#RHF_PIXIE
 (1 << 8)

	)

1681 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1682 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1683 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1684 
	#RHF_CORD
 (1 << 12)

	)

1685 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1686 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1692 
Elf32_W‹d
 
	ml_«me
;

1693 
Elf32_W‹d
 
	ml_time_°amp
;

1694 
Elf32_W‹d
 
	ml_checksum
;

1695 
Elf32_W‹d
 
	ml_vîsi⁄
;

1696 
Elf32_W‹d
 
	ml_Êags
;

1697 } 
	tElf32_Lib
;

1701 
Elf64_W‹d
 
	ml_«me
;

1702 
Elf64_W‹d
 
	ml_time_°amp
;

1703 
Elf64_W‹d
 
	ml_checksum
;

1704 
Elf64_W‹d
 
	ml_vîsi⁄
;

1705 
Elf64_W‹d
 
	ml_Êags
;

1706 } 
	tElf64_Lib
;

1711 
	#LL_NONE
 0

	)

1712 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1713 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1714 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1715 
	#LL_EXPORTS
 (1 << 3)

	)

1716 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1717 
	#LL_DELTA
 (1 << 5)

	)

1721 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1728 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1729 
	#EF_PARISC_EXT
 0x00020000

	)

1730 
	#EF_PARISC_LSB
 0x00040000

	)

1731 
	#EF_PARISC_WIDE
 0x00080000

	)

1732 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1734 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1735 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1739 
	#EFA_PARISC_1_0
 0x020b

	)

1740 
	#EFA_PARISC_1_1
 0x0210

	)

1741 
	#EFA_PARISC_2_0
 0x0214

	)

1745 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1747 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1751 
	#SHT_PARISC_EXT
 0x70000000

	)

1752 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1753 
	#SHT_PARISC_DOC
 0x70000002

	)

1757 
	#SHF_PARISC_SHORT
 0x20000000

	)

1758 
	#SHF_PARISC_HUGE
 0x40000000

	)

1759 
	#SHF_PARISC_SBP
 0x80000000

	)

1763 
	#STT_PARISC_MILLICODE
 13

	)

1765 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1766 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1770 
	#R_PARISC_NONE
 0

	)

1771 
	#R_PARISC_DIR32
 1

	)

1772 
	#R_PARISC_DIR21L
 2

	)

1773 
	#R_PARISC_DIR17R
 3

	)

1774 
	#R_PARISC_DIR17F
 4

	)

1775 
	#R_PARISC_DIR14R
 6

	)

1776 
	#R_PARISC_PCREL32
 9

	)

1777 
	#R_PARISC_PCREL21L
 10

	)

1778 
	#R_PARISC_PCREL17R
 11

	)

1779 
	#R_PARISC_PCREL17F
 12

	)

1780 
	#R_PARISC_PCREL14R
 14

	)

1781 
	#R_PARISC_DPREL21L
 18

	)

1782 
	#R_PARISC_DPREL14R
 22

	)

1783 
	#R_PARISC_GPREL21L
 26

	)

1784 
	#R_PARISC_GPREL14R
 30

	)

1785 
	#R_PARISC_LTOFF21L
 34

	)

1786 
	#R_PARISC_LTOFF14R
 38

	)

1787 
	#R_PARISC_SECREL32
 41

	)

1788 
	#R_PARISC_SEGBASE
 48

	)

1789 
	#R_PARISC_SEGREL32
 49

	)

1790 
	#R_PARISC_PLTOFF21L
 50

	)

1791 
	#R_PARISC_PLTOFF14R
 54

	)

1792 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1793 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1794 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1795 
	#R_PARISC_FPTR64
 64

	)

1796 
	#R_PARISC_PLABEL32
 65

	)

1797 
	#R_PARISC_PLABEL21L
 66

	)

1798 
	#R_PARISC_PLABEL14R
 70

	)

1799 
	#R_PARISC_PCREL64
 72

	)

1800 
	#R_PARISC_PCREL22F
 74

	)

1801 
	#R_PARISC_PCREL14WR
 75

	)

1802 
	#R_PARISC_PCREL14DR
 76

	)

1803 
	#R_PARISC_PCREL16F
 77

	)

1804 
	#R_PARISC_PCREL16WF
 78

	)

1805 
	#R_PARISC_PCREL16DF
 79

	)

1806 
	#R_PARISC_DIR64
 80

	)

1807 
	#R_PARISC_DIR14WR
 83

	)

1808 
	#R_PARISC_DIR14DR
 84

	)

1809 
	#R_PARISC_DIR16F
 85

	)

1810 
	#R_PARISC_DIR16WF
 86

	)

1811 
	#R_PARISC_DIR16DF
 87

	)

1812 
	#R_PARISC_GPREL64
 88

	)

1813 
	#R_PARISC_GPREL14WR
 91

	)

1814 
	#R_PARISC_GPREL14DR
 92

	)

1815 
	#R_PARISC_GPREL16F
 93

	)

1816 
	#R_PARISC_GPREL16WF
 94

	)

1817 
	#R_PARISC_GPREL16DF
 95

	)

1818 
	#R_PARISC_LTOFF64
 96

	)

1819 
	#R_PARISC_LTOFF14WR
 99

	)

1820 
	#R_PARISC_LTOFF14DR
 100

	)

1821 
	#R_PARISC_LTOFF16F
 101

	)

1822 
	#R_PARISC_LTOFF16WF
 102

	)

1823 
	#R_PARISC_LTOFF16DF
 103

	)

1824 
	#R_PARISC_SECREL64
 104

	)

1825 
	#R_PARISC_SEGREL64
 112

	)

1826 
	#R_PARISC_PLTOFF14WR
 115

	)

1827 
	#R_PARISC_PLTOFF14DR
 116

	)

1828 
	#R_PARISC_PLTOFF16F
 117

	)

1829 
	#R_PARISC_PLTOFF16WF
 118

	)

1830 
	#R_PARISC_PLTOFF16DF
 119

	)

1831 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1832 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1833 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1834 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1835 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1836 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1837 
	#R_PARISC_LORESERVE
 128

	)

1838 
	#R_PARISC_COPY
 128

	)

1839 
	#R_PARISC_IPLT
 129

	)

1840 
	#R_PARISC_EPLT
 130

	)

1841 
	#R_PARISC_TPREL32
 153

	)

1842 
	#R_PARISC_TPREL21L
 154

	)

1843 
	#R_PARISC_TPREL14R
 158

	)

1844 
	#R_PARISC_LTOFF_TP21L
 162

	)

1845 
	#R_PARISC_LTOFF_TP14R
 166

	)

1846 
	#R_PARISC_LTOFF_TP14F
 167

	)

1847 
	#R_PARISC_TPREL64
 216

	)

1848 
	#R_PARISC_TPREL14WR
 219

	)

1849 
	#R_PARISC_TPREL14DR
 220

	)

1850 
	#R_PARISC_TPREL16F
 221

	)

1851 
	#R_PARISC_TPREL16WF
 222

	)

1852 
	#R_PARISC_TPREL16DF
 223

	)

1853 
	#R_PARISC_LTOFF_TP64
 224

	)

1854 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1855 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1856 
	#R_PARISC_LTOFF_TP16F
 229

	)

1857 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1858 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1859 
	#R_PARISC_GNU_VTENTRY
 232

	)

1860 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1861 
	#R_PARISC_TLS_GD21L
 234

	)

1862 
	#R_PARISC_TLS_GD14R
 235

	)

1863 
	#R_PARISC_TLS_GDCALL
 236

	)

1864 
	#R_PARISC_TLS_LDM21L
 237

	)

1865 
	#R_PARISC_TLS_LDM14R
 238

	)

1866 
	#R_PARISC_TLS_LDMCALL
 239

	)

1867 
	#R_PARISC_TLS_LDO21L
 240

	)

1868 
	#R_PARISC_TLS_LDO14R
 241

	)

1869 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1870 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1871 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1872 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1873 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1874 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1875 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1876 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1877 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1878 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1879 
	#R_PARISC_HIRESERVE
 255

	)

1883 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1884 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1885 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1886 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1887 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1888 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1889 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1890 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1891 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1892 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1893 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1894 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1895 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1896 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1897 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1899 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1900 
	#PT_PARISC_UNWIND
 0x70000001

	)

1904 
	#PF_PARISC_SBP
 0x08000000

	)

1906 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1907 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1908 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1909 
	#PF_HP_CODE
 0x01000000

	)

1910 
	#PF_HP_MODIFY
 0x02000000

	)

1911 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1912 
	#PF_HP_SBP
 0x08000000

	)

1919 
	#EF_ALPHA_32BIT
 1

	)

1920 
	#EF_ALPHA_CANRELAX
 2

	)

1925 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1926 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1930 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1933 
	#STO_ALPHA_NOPV
 0x80

	)

1934 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1938 
	#R_ALPHA_NONE
 0

	)

1939 
	#R_ALPHA_REFLONG
 1

	)

1940 
	#R_ALPHA_REFQUAD
 2

	)

1941 
	#R_ALPHA_GPREL32
 3

	)

1942 
	#R_ALPHA_LITERAL
 4

	)

1943 
	#R_ALPHA_LITUSE
 5

	)

1944 
	#R_ALPHA_GPDISP
 6

	)

1945 
	#R_ALPHA_BRADDR
 7

	)

1946 
	#R_ALPHA_HINT
 8

	)

1947 
	#R_ALPHA_SREL16
 9

	)

1948 
	#R_ALPHA_SREL32
 10

	)

1949 
	#R_ALPHA_SREL64
 11

	)

1950 
	#R_ALPHA_GPRELHIGH
 17

	)

1951 
	#R_ALPHA_GPRELLOW
 18

	)

1952 
	#R_ALPHA_GPREL16
 19

	)

1953 
	#R_ALPHA_COPY
 24

	)

1954 
	#R_ALPHA_GLOB_DAT
 25

	)

1955 
	#R_ALPHA_JMP_SLOT
 26

	)

1956 
	#R_ALPHA_RELATIVE
 27

	)

1957 
	#R_ALPHA_TLS_GD_HI
 28

	)

1958 
	#R_ALPHA_TLSGD
 29

	)

1959 
	#R_ALPHA_TLS_LDM
 30

	)

1960 
	#R_ALPHA_DTPMOD64
 31

	)

1961 
	#R_ALPHA_GOTDTPREL
 32

	)

1962 
	#R_ALPHA_DTPREL64
 33

	)

1963 
	#R_ALPHA_DTPRELHI
 34

	)

1964 
	#R_ALPHA_DTPRELLO
 35

	)

1965 
	#R_ALPHA_DTPREL16
 36

	)

1966 
	#R_ALPHA_GOTTPREL
 37

	)

1967 
	#R_ALPHA_TPREL64
 38

	)

1968 
	#R_ALPHA_TPRELHI
 39

	)

1969 
	#R_ALPHA_TPRELLO
 40

	)

1970 
	#R_ALPHA_TPREL16
 41

	)

1972 
	#R_ALPHA_NUM
 46

	)

1975 
	#LITUSE_ALPHA_ADDR
 0

	)

1976 
	#LITUSE_ALPHA_BASE
 1

	)

1977 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1978 
	#LITUSE_ALPHA_JSR
 3

	)

1979 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1980 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1983 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

1984 
	#DT_ALPHA_NUM
 1

	)

1989 
	#EF_PPC_EMB
 0x80000000

	)

1992 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

1993 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

1997 
	#R_PPC_NONE
 0

	)

1998 
	#R_PPC_ADDR32
 1

	)

1999 
	#R_PPC_ADDR24
 2

	)

2000 
	#R_PPC_ADDR16
 3

	)

2001 
	#R_PPC_ADDR16_LO
 4

	)

2002 
	#R_PPC_ADDR16_HI
 5

	)

2003 
	#R_PPC_ADDR16_HA
 6

	)

2004 
	#R_PPC_ADDR14
 7

	)

2005 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2006 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2007 
	#R_PPC_REL24
 10

	)

2008 
	#R_PPC_REL14
 11

	)

2009 
	#R_PPC_REL14_BRTAKEN
 12

	)

2010 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2011 
	#R_PPC_GOT16
 14

	)

2012 
	#R_PPC_GOT16_LO
 15

	)

2013 
	#R_PPC_GOT16_HI
 16

	)

2014 
	#R_PPC_GOT16_HA
 17

	)

2015 
	#R_PPC_PLTREL24
 18

	)

2016 
	#R_PPC_COPY
 19

	)

2017 
	#R_PPC_GLOB_DAT
 20

	)

2018 
	#R_PPC_JMP_SLOT
 21

	)

2019 
	#R_PPC_RELATIVE
 22

	)

2020 
	#R_PPC_LOCAL24PC
 23

	)

2021 
	#R_PPC_UADDR32
 24

	)

2022 
	#R_PPC_UADDR16
 25

	)

2023 
	#R_PPC_REL32
 26

	)

2024 
	#R_PPC_PLT32
 27

	)

2025 
	#R_PPC_PLTREL32
 28

	)

2026 
	#R_PPC_PLT16_LO
 29

	)

2027 
	#R_PPC_PLT16_HI
 30

	)

2028 
	#R_PPC_PLT16_HA
 31

	)

2029 
	#R_PPC_SDAREL16
 32

	)

2030 
	#R_PPC_SECTOFF
 33

	)

2031 
	#R_PPC_SECTOFF_LO
 34

	)

2032 
	#R_PPC_SECTOFF_HI
 35

	)

2033 
	#R_PPC_SECTOFF_HA
 36

	)

2036 
	#R_PPC_TLS
 67

	)

2037 
	#R_PPC_DTPMOD32
 68

	)

2038 
	#R_PPC_TPREL16
 69

	)

2039 
	#R_PPC_TPREL16_LO
 70

	)

2040 
	#R_PPC_TPREL16_HI
 71

	)

2041 
	#R_PPC_TPREL16_HA
 72

	)

2042 
	#R_PPC_TPREL32
 73

	)

2043 
	#R_PPC_DTPREL16
 74

	)

2044 
	#R_PPC_DTPREL16_LO
 75

	)

2045 
	#R_PPC_DTPREL16_HI
 76

	)

2046 
	#R_PPC_DTPREL16_HA
 77

	)

2047 
	#R_PPC_DTPREL32
 78

	)

2048 
	#R_PPC_GOT_TLSGD16
 79

	)

2049 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2050 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2051 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2052 
	#R_PPC_GOT_TLSLD16
 83

	)

2053 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2054 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2055 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2056 
	#R_PPC_GOT_TPREL16
 87

	)

2057 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2058 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2059 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2060 
	#R_PPC_GOT_DTPREL16
 91

	)

2061 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2062 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2063 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2067 
	#R_PPC_EMB_NADDR32
 101

	)

2068 
	#R_PPC_EMB_NADDR16
 102

	)

2069 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2070 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2071 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2072 
	#R_PPC_EMB_SDAI16
 106

	)

2073 
	#R_PPC_EMB_SDA2I16
 107

	)

2074 
	#R_PPC_EMB_SDA2REL
 108

	)

2075 
	#R_PPC_EMB_SDA21
 109

	)

2076 
	#R_PPC_EMB_MRKREF
 110

	)

2077 
	#R_PPC_EMB_RELSEC16
 111

	)

2078 
	#R_PPC_EMB_RELST_LO
 112

	)

2079 
	#R_PPC_EMB_RELST_HI
 113

	)

2080 
	#R_PPC_EMB_RELST_HA
 114

	)

2081 
	#R_PPC_EMB_BIT_FLD
 115

	)

2082 
	#R_PPC_EMB_RELSDA
 116

	)

2085 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2086 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2087 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2088 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2089 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2090 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2093 
	#R_PPC_IRELATIVE
 248

	)

2096 
	#R_PPC_REL16
 249

	)

2097 
	#R_PPC_REL16_LO
 250

	)

2098 
	#R_PPC_REL16_HI
 251

	)

2099 
	#R_PPC_REL16_HA
 252

	)

2103 
	#R_PPC_TOC16
 255

	)

2106 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2107 
	#DT_PPC_NUM
 1

	)

2110 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2111 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2112 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2113 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2114 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2115 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2116 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2117 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2118 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2119 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2120 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2121 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2122 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2123 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2124 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2125 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2126 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2127 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2129 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2130 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2131 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2132 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2134 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2135 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2136 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2137 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2138 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2139 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2140 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2141 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2143 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2144 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2145 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2146 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2147 
	#R_PPC64_ADDR30
 37

	)

2148 
	#R_PPC64_ADDR64
 38

	)

2149 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2150 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2151 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2152 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2153 
	#R_PPC64_UADDR64
 43

	)

2154 
	#R_PPC64_REL64
 44

	)

2155 
	#R_PPC64_PLT64
 45

	)

2156 
	#R_PPC64_PLTREL64
 46

	)

2157 
	#R_PPC64_TOC16
 47

	)

2158 
	#R_PPC64_TOC16_LO
 48

	)

2159 
	#R_PPC64_TOC16_HI
 49

	)

2160 
	#R_PPC64_TOC16_HA
 50

	)

2161 
	#R_PPC64_TOC
 51

	)

2162 
	#R_PPC64_PLTGOT16
 52

	)

2163 
	#R_PPC64_PLTGOT16_LO
 53

	)

2164 
	#R_PPC64_PLTGOT16_HI
 54

	)

2165 
	#R_PPC64_PLTGOT16_HA
 55

	)

2167 
	#R_PPC64_ADDR16_DS
 56

	)

2168 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2169 
	#R_PPC64_GOT16_DS
 58

	)

2170 
	#R_PPC64_GOT16_LO_DS
 59

	)

2171 
	#R_PPC64_PLT16_LO_DS
 60

	)

2172 
	#R_PPC64_SECTOFF_DS
 61

	)

2173 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2174 
	#R_PPC64_TOC16_DS
 63

	)

2175 
	#R_PPC64_TOC16_LO_DS
 64

	)

2176 
	#R_PPC64_PLTGOT16_DS
 65

	)

2177 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2180 
	#R_PPC64_TLS
 67

	)

2181 
	#R_PPC64_DTPMOD64
 68

	)

2182 
	#R_PPC64_TPREL16
 69

	)

2183 
	#R_PPC64_TPREL16_LO
 70

	)

2184 
	#R_PPC64_TPREL16_HI
 71

	)

2185 
	#R_PPC64_TPREL16_HA
 72

	)

2186 
	#R_PPC64_TPREL64
 73

	)

2187 
	#R_PPC64_DTPREL16
 74

	)

2188 
	#R_PPC64_DTPREL16_LO
 75

	)

2189 
	#R_PPC64_DTPREL16_HI
 76

	)

2190 
	#R_PPC64_DTPREL16_HA
 77

	)

2191 
	#R_PPC64_DTPREL64
 78

	)

2192 
	#R_PPC64_GOT_TLSGD16
 79

	)

2193 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2194 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2195 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2196 
	#R_PPC64_GOT_TLSLD16
 83

	)

2197 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2198 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2199 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2200 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2201 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2202 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2203 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2204 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2205 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2206 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2207 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2208 
	#R_PPC64_TPREL16_DS
 95

	)

2209 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2210 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2211 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2212 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2213 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2214 
	#R_PPC64_DTPREL16_DS
 101

	)

2215 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2216 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2217 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2218 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2219 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2222 
	#R_PPC64_JMP_IREL
 247

	)

2223 
	#R_PPC64_IRELATIVE
 248

	)

2224 
	#R_PPC64_REL16
 249

	)

2225 
	#R_PPC64_REL16_LO
 250

	)

2226 
	#R_PPC64_REL16_HI
 251

	)

2227 
	#R_PPC64_REL16_HA
 252

	)

2230 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2231 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2232 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2233 
	#DT_PPC64_NUM
 3

	)

2239 
	#EF_ARM_RELEXEC
 0x01

	)

2240 
	#EF_ARM_HASENTRY
 0x02

	)

2241 
	#EF_ARM_INTERWORK
 0x04

	)

2242 
	#EF_ARM_APCS_26
 0x08

	)

2243 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2244 
	#EF_ARM_PIC
 0x20

	)

2245 
	#EF_ARM_ALIGN8
 0x40

	)

2246 
	#EF_ARM_NEW_ABI
 0x80

	)

2247 
	#EF_ARM_OLD_ABI
 0x100

	)

2248 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2249 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2250 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2255 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2256 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2257 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2258 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2261 
	#EF_ARM_BE8
 0x00800000

	)

2262 
	#EF_ARM_LE8
 0x00400000

	)

2264 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2265 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2266 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2267 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2268 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2269 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2270 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2273 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2274 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2277 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2278 
	#SHF_ARM_COMDEF
 0x80000000

	)

2282 
	#PF_ARM_SB
 0x10000000

	)

2284 
	#PF_ARM_PI
 0x20000000

	)

2285 
	#PF_ARM_ABS
 0x40000000

	)

2288 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2291 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2292 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2293 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2298 
	#R_ARM_NONE
 0

	)

2299 
	#R_ARM_PC24
 1

	)

2300 
	#R_ARM_ABS32
 2

	)

2301 
	#R_ARM_REL32
 3

	)

2302 
	#R_ARM_PC13
 4

	)

2303 
	#R_ARM_ABS16
 5

	)

2304 
	#R_ARM_ABS12
 6

	)

2305 
	#R_ARM_THM_ABS5
 7

	)

2306 
	#R_ARM_ABS8
 8

	)

2307 
	#R_ARM_SBREL32
 9

	)

2308 
	#R_ARM_THM_PC22
 10

	)

2309 
	#R_ARM_THM_PC8
 11

	)

2310 
	#R_ARM_AMP_VCALL9
 12

	)

2311 
	#R_ARM_SWI24
 13

	)

2312 
	#R_ARM_TLS_DESC
 13

	)

2313 
	#R_ARM_THM_SWI8
 14

	)

2314 
	#R_ARM_XPC25
 15

	)

2315 
	#R_ARM_THM_XPC22
 16

	)

2316 
	#R_ARM_TLS_DTPMOD32
 17

	)

2317 
	#R_ARM_TLS_DTPOFF32
 18

	)

2318 
	#R_ARM_TLS_TPOFF32
 19

	)

2319 
	#R_ARM_COPY
 20

	)

2320 
	#R_ARM_GLOB_DAT
 21

	)

2321 
	#R_ARM_JUMP_SLOT
 22

	)

2322 
	#R_ARM_RELATIVE
 23

	)

2323 
	#R_ARM_GOTOFF
 24

	)

2324 
	#R_ARM_GOTPC
 25

	)

2325 
	#R_ARM_GOT32
 26

	)

2326 
	#R_ARM_PLT32
 27

	)

2327 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2328 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2329 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2330 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2331 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2332 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2333 
	#R_ARM_TLS_GOTDESC
 90

	)

2334 
	#R_ARM_TLS_CALL
 91

	)

2335 
	#R_ARM_TLS_DESCSEQ
 92

	)

2336 
	#R_ARM_THM_TLS_CALL
 93

	)

2337 
	#R_ARM_GNU_VTENTRY
 100

	)

2338 
	#R_ARM_GNU_VTINHERIT
 101

	)

2339 
	#R_ARM_THM_PC11
 102

	)

2340 
	#R_ARM_THM_PC9
 103

	)

2341 
	#R_ARM_TLS_GD32
 104

	)

2343 
	#R_ARM_TLS_LDM32
 105

	)

2345 
	#R_ARM_TLS_LDO32
 106

	)

2347 
	#R_ARM_TLS_IE32
 107

	)

2349 
	#R_ARM_TLS_LE32
 108

	)

2351 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2352 
	#R_ARM_IRELATIVE
 160

	)

2353 
	#R_ARM_RXPC25
 249

	)

2354 
	#R_ARM_RSBREL32
 250

	)

2355 
	#R_ARM_THM_RPC22
 251

	)

2356 
	#R_ARM_RREL32
 252

	)

2357 
	#R_ARM_RABS22
 253

	)

2358 
	#R_ARM_RPC24
 254

	)

2359 
	#R_ARM_RBASE
 255

	)

2361 
	#R_ARM_NUM
 256

	)

2366 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2367 
	#EF_IA_64_ABI64
 0x00000010

	)

2368 
	#EF_IA_64_ARCH
 0xff000000

	)

2371 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2372 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2373 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2374 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2375 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2378 
	#PF_IA_64_NORECOV
 0x80000000

	)

2381 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2382 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2385 
	#SHF_IA_64_SHORT
 0x10000000

	)

2386 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2389 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2390 
	#DT_IA_64_NUM
 1

	)

2393 
	#R_IA64_NONE
 0x00

	)

2394 
	#R_IA64_IMM14
 0x21

	)

2395 
	#R_IA64_IMM22
 0x22

	)

2396 
	#R_IA64_IMM64
 0x23

	)

2397 
	#R_IA64_DIR32MSB
 0x24

	)

2398 
	#R_IA64_DIR32LSB
 0x25

	)

2399 
	#R_IA64_DIR64MSB
 0x26

	)

2400 
	#R_IA64_DIR64LSB
 0x27

	)

2401 
	#R_IA64_GPREL22
 0x2®

	)

2402 
	#R_IA64_GPREL64I
 0x2b

	)

2403 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2404 
	#R_IA64_GPREL32LSB
 0x2d

	)

2405 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2406 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2407 
	#R_IA64_LTOFF22
 0x32

	)

2408 
	#R_IA64_LTOFF64I
 0x33

	)

2409 
	#R_IA64_PLTOFF22
 0x3®

	)

2410 
	#R_IA64_PLTOFF64I
 0x3b

	)

2411 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2412 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2413 
	#R_IA64_FPTR64I
 0x43

	)

2414 
	#R_IA64_FPTR32MSB
 0x44

	)

2415 
	#R_IA64_FPTR32LSB
 0x45

	)

2416 
	#R_IA64_FPTR64MSB
 0x46

	)

2417 
	#R_IA64_FPTR64LSB
 0x47

	)

2418 
	#R_IA64_PCREL60B
 0x48

	)

2419 
	#R_IA64_PCREL21B
 0x49

	)

2420 
	#R_IA64_PCREL21M
 0x4®

	)

2421 
	#R_IA64_PCREL21F
 0x4b

	)

2422 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2423 
	#R_IA64_PCREL32LSB
 0x4d

	)

2424 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2425 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2426 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2427 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2428 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2429 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2430 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2431 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2432 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2433 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2434 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2435 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2436 
	#R_IA64_SECREL32MSB
 0x64

	)

2437 
	#R_IA64_SECREL32LSB
 0x65

	)

2438 
	#R_IA64_SECREL64MSB
 0x66

	)

2439 
	#R_IA64_SECREL64LSB
 0x67

	)

2440 
	#R_IA64_REL32MSB
 0x6¯

	)

2441 
	#R_IA64_REL32LSB
 0x6d

	)

2442 
	#R_IA64_REL64MSB
 0x6ê

	)

2443 
	#R_IA64_REL64LSB
 0x6‡

	)

2444 
	#R_IA64_LTV32MSB
 0x74

	)

2445 
	#R_IA64_LTV32LSB
 0x75

	)

2446 
	#R_IA64_LTV64MSB
 0x76

	)

2447 
	#R_IA64_LTV64LSB
 0x77

	)

2448 
	#R_IA64_PCREL21BI
 0x79

	)

2449 
	#R_IA64_PCREL22
 0x7®

	)

2450 
	#R_IA64_PCREL64I
 0x7b

	)

2451 
	#R_IA64_IPLTMSB
 0x80

	)

2452 
	#R_IA64_IPLTLSB
 0x81

	)

2453 
	#R_IA64_COPY
 0x84

	)

2454 
	#R_IA64_SUB
 0x85

	)

2455 
	#R_IA64_LTOFF22X
 0x86

	)

2456 
	#R_IA64_LDXMOV
 0x87

	)

2457 
	#R_IA64_TPREL14
 0x91

	)

2458 
	#R_IA64_TPREL22
 0x92

	)

2459 
	#R_IA64_TPREL64I
 0x93

	)

2460 
	#R_IA64_TPREL64MSB
 0x96

	)

2461 
	#R_IA64_TPREL64LSB
 0x97

	)

2462 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2463 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2464 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2465 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2466 
	#R_IA64_DTPREL14
 0xb1

	)

2467 
	#R_IA64_DTPREL22
 0xb2

	)

2468 
	#R_IA64_DTPREL64I
 0xb3

	)

2469 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2470 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2471 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2472 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2473 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2478 
	#EF_SH_MACH_MASK
 0x1f

	)

2479 
	#EF_SH_UNKNOWN
 0x0

	)

2480 
	#EF_SH1
 0x1

	)

2481 
	#EF_SH2
 0x2

	)

2482 
	#EF_SH3
 0x3

	)

2483 
	#EF_SH_DSP
 0x4

	)

2484 
	#EF_SH3_DSP
 0x5

	)

2485 
	#EF_SH4AL_DSP
 0x6

	)

2486 
	#EF_SH3E
 0x8

	)

2487 
	#EF_SH4
 0x9

	)

2488 
	#EF_SH2E
 0xb

	)

2489 
	#EF_SH4A
 0xc

	)

2490 
	#EF_SH2A
 0xd

	)

2491 
	#EF_SH4_NOFPU
 0x10

	)

2492 
	#EF_SH4A_NOFPU
 0x11

	)

2493 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2494 
	#EF_SH2A_NOFPU
 0x13

	)

2495 
	#EF_SH3_NOMMU
 0x14

	)

2496 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2497 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2498 
	#EF_SH2A_SH4
 0x17

	)

2499 
	#EF_SH2A_SH3E
 0x18

	)

2502 
	#R_SH_NONE
 0

	)

2503 
	#R_SH_DIR32
 1

	)

2504 
	#R_SH_REL32
 2

	)

2505 
	#R_SH_DIR8WPN
 3

	)

2506 
	#R_SH_IND12W
 4

	)

2507 
	#R_SH_DIR8WPL
 5

	)

2508 
	#R_SH_DIR8WPZ
 6

	)

2509 
	#R_SH_DIR8BP
 7

	)

2510 
	#R_SH_DIR8W
 8

	)

2511 
	#R_SH_DIR8L
 9

	)

2512 
	#R_SH_SWITCH16
 25

	)

2513 
	#R_SH_SWITCH32
 26

	)

2514 
	#R_SH_USES
 27

	)

2515 
	#R_SH_COUNT
 28

	)

2516 
	#R_SH_ALIGN
 29

	)

2517 
	#R_SH_CODE
 30

	)

2518 
	#R_SH_DATA
 31

	)

2519 
	#R_SH_LABEL
 32

	)

2520 
	#R_SH_SWITCH8
 33

	)

2521 
	#R_SH_GNU_VTINHERIT
 34

	)

2522 
	#R_SH_GNU_VTENTRY
 35

	)

2523 
	#R_SH_TLS_GD_32
 144

	)

2524 
	#R_SH_TLS_LD_32
 145

	)

2525 
	#R_SH_TLS_LDO_32
 146

	)

2526 
	#R_SH_TLS_IE_32
 147

	)

2527 
	#R_SH_TLS_LE_32
 148

	)

2528 
	#R_SH_TLS_DTPMOD32
 149

	)

2529 
	#R_SH_TLS_DTPOFF32
 150

	)

2530 
	#R_SH_TLS_TPOFF32
 151

	)

2531 
	#R_SH_GOT32
 160

	)

2532 
	#R_SH_PLT32
 161

	)

2533 
	#R_SH_COPY
 162

	)

2534 
	#R_SH_GLOB_DAT
 163

	)

2535 
	#R_SH_JMP_SLOT
 164

	)

2536 
	#R_SH_RELATIVE
 165

	)

2537 
	#R_SH_GOTOFF
 166

	)

2538 
	#R_SH_GOTPC
 167

	)

2540 
	#R_SH_NUM
 256

	)

2546 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2550 
	#R_390_NONE
 0

	)

2551 
	#R_390_8
 1

	)

2552 
	#R_390_12
 2

	)

2553 
	#R_390_16
 3

	)

2554 
	#R_390_32
 4

	)

2555 
	#R_390_PC32
 5

	)

2556 
	#R_390_GOT12
 6

	)

2557 
	#R_390_GOT32
 7

	)

2558 
	#R_390_PLT32
 8

	)

2559 
	#R_390_COPY
 9

	)

2560 
	#R_390_GLOB_DAT
 10

	)

2561 
	#R_390_JMP_SLOT
 11

	)

2562 
	#R_390_RELATIVE
 12

	)

2563 
	#R_390_GOTOFF32
 13

	)

2564 
	#R_390_GOTPC
 14

	)

2565 
	#R_390_GOT16
 15

	)

2566 
	#R_390_PC16
 16

	)

2567 
	#R_390_PC16DBL
 17

	)

2568 
	#R_390_PLT16DBL
 18

	)

2569 
	#R_390_PC32DBL
 19

	)

2570 
	#R_390_PLT32DBL
 20

	)

2571 
	#R_390_GOTPCDBL
 21

	)

2572 
	#R_390_64
 22

	)

2573 
	#R_390_PC64
 23

	)

2574 
	#R_390_GOT64
 24

	)

2575 
	#R_390_PLT64
 25

	)

2576 
	#R_390_GOTENT
 26

	)

2577 
	#R_390_GOTOFF16
 27

	)

2578 
	#R_390_GOTOFF64
 28

	)

2579 
	#R_390_GOTPLT12
 29

	)

2580 
	#R_390_GOTPLT16
 30

	)

2581 
	#R_390_GOTPLT32
 31

	)

2582 
	#R_390_GOTPLT64
 32

	)

2583 
	#R_390_GOTPLTENT
 33

	)

2584 
	#R_390_PLTOFF16
 34

	)

2585 
	#R_390_PLTOFF32
 35

	)

2586 
	#R_390_PLTOFF64
 36

	)

2587 
	#R_390_TLS_LOAD
 37

	)

2588 
	#R_390_TLS_GDCALL
 38

	)

2590 
	#R_390_TLS_LDCALL
 39

	)

2592 
	#R_390_TLS_GD32
 40

	)

2594 
	#R_390_TLS_GD64
 41

	)

2596 
	#R_390_TLS_GOTIE12
 42

	)

2598 
	#R_390_TLS_GOTIE32
 43

	)

2600 
	#R_390_TLS_GOTIE64
 44

	)

2602 
	#R_390_TLS_LDM32
 45

	)

2604 
	#R_390_TLS_LDM64
 46

	)

2606 
	#R_390_TLS_IE32
 47

	)

2608 
	#R_390_TLS_IE64
 48

	)

2610 
	#R_390_TLS_IEENT
 49

	)

2612 
	#R_390_TLS_LE32
 50

	)

2614 
	#R_390_TLS_LE64
 51

	)

2616 
	#R_390_TLS_LDO32
 52

	)

2618 
	#R_390_TLS_LDO64
 53

	)

2620 
	#R_390_TLS_DTPMOD
 54

	)

2621 
	#R_390_TLS_DTPOFF
 55

	)

2622 
	#R_390_TLS_TPOFF
 56

	)

2624 
	#R_390_20
 57

	)

2625 
	#R_390_GOT20
 58

	)

2626 
	#R_390_GOTPLT20
 59

	)

2627 
	#R_390_TLS_GOTIE20
 60

	)

2630 
	#R_390_NUM
 61

	)

2634 
	#R_CRIS_NONE
 0

	)

2635 
	#R_CRIS_8
 1

	)

2636 
	#R_CRIS_16
 2

	)

2637 
	#R_CRIS_32
 3

	)

2638 
	#R_CRIS_8_PCREL
 4

	)

2639 
	#R_CRIS_16_PCREL
 5

	)

2640 
	#R_CRIS_32_PCREL
 6

	)

2641 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2642 
	#R_CRIS_GNU_VTENTRY
 8

	)

2643 
	#R_CRIS_COPY
 9

	)

2644 
	#R_CRIS_GLOB_DAT
 10

	)

2645 
	#R_CRIS_JUMP_SLOT
 11

	)

2646 
	#R_CRIS_RELATIVE
 12

	)

2647 
	#R_CRIS_16_GOT
 13

	)

2648 
	#R_CRIS_32_GOT
 14

	)

2649 
	#R_CRIS_16_GOTPLT
 15

	)

2650 
	#R_CRIS_32_GOTPLT
 16

	)

2651 
	#R_CRIS_32_GOTREL
 17

	)

2652 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2653 
	#R_CRIS_32_PLT_PCREL
 19

	)

2655 
	#R_CRIS_NUM
 20

	)

2659 
	#R_X86_64_NONE
 0

	)

2660 
	#R_X86_64_64
 1

	)

2661 
	#R_X86_64_PC32
 2

	)

2662 
	#R_X86_64_GOT32
 3

	)

2663 
	#R_X86_64_PLT32
 4

	)

2664 
	#R_X86_64_COPY
 5

	)

2665 
	#R_X86_64_GLOB_DAT
 6

	)

2666 
	#R_X86_64_JUMP_SLOT
 7

	)

2667 
	#R_X86_64_RELATIVE
 8

	)

2668 
	#R_X86_64_GOTPCREL
 9

	)

2670 
	#R_X86_64_32
 10

	)

2671 
	#R_X86_64_32S
 11

	)

2672 
	#R_X86_64_16
 12

	)

2673 
	#R_X86_64_PC16
 13

	)

2674 
	#R_X86_64_8
 14

	)

2675 
	#R_X86_64_PC8
 15

	)

2676 
	#R_X86_64_DTPMOD64
 16

	)

2677 
	#R_X86_64_DTPOFF64
 17

	)

2678 
	#R_X86_64_TPOFF64
 18

	)

2679 
	#R_X86_64_TLSGD
 19

	)

2681 
	#R_X86_64_TLSLD
 20

	)

2683 
	#R_X86_64_DTPOFF32
 21

	)

2684 
	#R_X86_64_GOTTPOFF
 22

	)

2686 
	#R_X86_64_TPOFF32
 23

	)

2687 
	#R_X86_64_PC64
 24

	)

2688 
	#R_X86_64_GOTOFF64
 25

	)

2689 
	#R_X86_64_GOTPC32
 26

	)

2691 
	#R_X86_64_GOT64
 27

	)

2692 
	#R_X86_64_GOTPCREL64
 28

	)

2694 
	#R_X86_64_GOTPC64
 29

	)

2695 
	#R_X86_64_GOTPLT64
 30

	)

2696 
	#R_X86_64_PLTOFF64
 31

	)

2698 
	#R_X86_64_SIZE32
 32

	)

2699 
	#R_X86_64_SIZE64
 33

	)

2700 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

2701 
	#R_X86_64_TLSDESC_CALL
 35

	)

2703 
	#R_X86_64_TLSDESC
 36

	)

2704 
	#R_X86_64_IRELATIVE
 37

	)

2706 
	#R_X86_64_NUM
 38

	)

2710 
	#R_MN10300_NONE
 0

	)

2711 
	#R_MN10300_32
 1

	)

2712 
	#R_MN10300_16
 2

	)

2713 
	#R_MN10300_8
 3

	)

2714 
	#R_MN10300_PCREL32
 4

	)

2715 
	#R_MN10300_PCREL16
 5

	)

2716 
	#R_MN10300_PCREL8
 6

	)

2717 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2718 
	#R_MN10300_GNU_VTENTRY
 8

	)

2719 
	#R_MN10300_24
 9

	)

2720 
	#R_MN10300_GOTPC32
 10

	)

2721 
	#R_MN10300_GOTPC16
 11

	)

2722 
	#R_MN10300_GOTOFF32
 12

	)

2723 
	#R_MN10300_GOTOFF24
 13

	)

2724 
	#R_MN10300_GOTOFF16
 14

	)

2725 
	#R_MN10300_PLT32
 15

	)

2726 
	#R_MN10300_PLT16
 16

	)

2727 
	#R_MN10300_GOT32
 17

	)

2728 
	#R_MN10300_GOT24
 18

	)

2729 
	#R_MN10300_GOT16
 19

	)

2730 
	#R_MN10300_COPY
 20

	)

2731 
	#R_MN10300_GLOB_DAT
 21

	)

2732 
	#R_MN10300_JMP_SLOT
 22

	)

2733 
	#R_MN10300_RELATIVE
 23

	)

2735 
	#R_MN10300_NUM
 24

	)

2739 
	#R_M32R_NONE
 0

	)

2740 
	#R_M32R_16
 1

	)

2741 
	#R_M32R_32
 2

	)

2742 
	#R_M32R_24
 3

	)

2743 
	#R_M32R_10_PCREL
 4

	)

2744 
	#R_M32R_18_PCREL
 5

	)

2745 
	#R_M32R_26_PCREL
 6

	)

2746 
	#R_M32R_HI16_ULO
 7

	)

2747 
	#R_M32R_HI16_SLO
 8

	)

2748 
	#R_M32R_LO16
 9

	)

2749 
	#R_M32R_SDA16
 10

	)

2750 
	#R_M32R_GNU_VTINHERIT
 11

	)

2751 
	#R_M32R_GNU_VTENTRY
 12

	)

2753 
	#R_M32R_16_RELA
 33

	)

2754 
	#R_M32R_32_RELA
 34

	)

2755 
	#R_M32R_24_RELA
 35

	)

2756 
	#R_M32R_10_PCREL_RELA
 36

	)

2757 
	#R_M32R_18_PCREL_RELA
 37

	)

2758 
	#R_M32R_26_PCREL_RELA
 38

	)

2759 
	#R_M32R_HI16_ULO_RELA
 39

	)

2760 
	#R_M32R_HI16_SLO_RELA
 40

	)

2761 
	#R_M32R_LO16_RELA
 41

	)

2762 
	#R_M32R_SDA16_RELA
 42

	)

2763 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

2764 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

2765 
	#R_M32R_REL32
 45

	)

2767 
	#R_M32R_GOT24
 48

	)

2768 
	#R_M32R_26_PLTREL
 49

	)

2769 
	#R_M32R_COPY
 50

	)

2770 
	#R_M32R_GLOB_DAT
 51

	)

2771 
	#R_M32R_JMP_SLOT
 52

	)

2772 
	#R_M32R_RELATIVE
 53

	)

2773 
	#R_M32R_GOTOFF
 54

	)

2774 
	#R_M32R_GOTPC24
 55

	)

2775 
	#R_M32R_GOT16_HI_ULO
 56

	)

2777 
	#R_M32R_GOT16_HI_SLO
 57

	)

2779 
	#R_M32R_GOT16_LO
 58

	)

2780 
	#R_M32R_GOTPC_HI_ULO
 59

	)

2782 
	#R_M32R_GOTPC_HI_SLO
 60

	)

2784 
	#R_M32R_GOTPC_LO
 61

	)

2786 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

2788 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

2790 
	#R_M32R_GOTOFF_LO
 64

	)

2791 
	#R_M32R_NUM
 256

	)

2794 
	g__END_DECLS


	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/linux/blk_types.h

5 #i‚de‡
__LINUX_BLK_TYPES_H


6 
	#__LINUX_BLK_TYPES_H


	)

8 #ifde‡
CONFIG_BLOCK


10 
	~<löux/ty≥s.h
>

12 
	gbio_£t
;

13 
	gbio
;

14 
	gbio_öãgrôy_∑ylﬂd
;

15 
	g∑ge
;

16 
	gblock_devi˚
;

17 (
	tbio_íd_io_t
Ë(
	tbio
 *, );

18 (
	tbio_de°ru˘‹_t
Ë(
	tbio
 *);

23 
	sbio_vec
 {

24 
∑ge
 *
bv_∑ge
;

25 
bv_Àn
;

26 
bv_off£t
;

33 
	sbio
 {

34 
£˘‹_t
 
bi_£˘‹
;

36 
bio
 *
bi_√xt
;

37 
block_devi˚
 *
bi_bdev
;

38 
bi_Êags
;

39 
bi_rw
;

43 
bi_v˙t
;

44 
bi_idx
;

49 
bi_phys_£gmíts
;

51 
bi_size
;

57 
bi_£g_‰⁄t_size
;

58 
bi_£g_back_size
;

60 
bi_max_vecs
;

62 
©omic_t
 
bi_˙t
;

64 
bio_vec
 *
bi_io_vec
;

66 
bio_íd_io_t
 *
bi_íd_io
;

68 *
bi_¥iv©e
;

69 #i‡
	`deföed
(
CONFIG_BLK_DEV_INTEGRITY
)

70 
bio_öãgrôy_∑ylﬂd
 *
bi_öãgrôy
;

73 
bio_de°ru˘‹_t
 *
bi_de°ru˘‹
;

80 
bio_vec
 
bi_ölöe_vecs
[0];

86 
	#BIO_UPTODATE
 0

	)

87 
	#BIO_RW_BLOCK
 1

	)

88 
	#BIO_EOF
 2

	)

89 
	#BIO_SEG_VALID
 3

	)

90 
	#BIO_CLONED
 4

	)

91 
	#BIO_BOUNCED
 5

	)

92 
	#BIO_USER_MAPPED
 6

	)

93 
	#BIO_EOPNOTSUPP
 7

	)

94 
	#BIO_NULL_MAPPED
 8

	)

95 
	#BIO_FS_INTEGRITY
 9

	)

96 
	#BIO_QUIET
 10

	)

97 
	#BIO_MAPPED_INTEGRITY
 11

	)

98 
	#bio_Êagged
(
bio
, 
Êag
Ë((bio)->
bi_Êags
 & (1 << (Êag)))

	)

103 
	#BIO_POOL_BITS
 (4)

	)

104 
	#BIO_POOL_NONE
 ((1UL << 
BIO_POOL_BITS
Ë- 1)

	)

105 
	#BIO_POOL_OFFSET
 (
BITS_PER_LONG
 - 
BIO_POOL_BITS
)

	)

106 
	#BIO_POOL_MASK
 (1UL << 
BIO_POOL_OFFSET
)

	)

107 
	#BIO_POOL_IDX
(
bio
Ë((bio)->
bi_Êags
 >> 
BIO_POOL_OFFSET
)

	)

115 
	erq_Êag_bôs
 {

117 
__REQ_WRITE
,

118 
__REQ_FAILFAST_DEV
,

119 
__REQ_FAILFAST_TRANSPORT
,

120 
__REQ_FAILFAST_DRIVER
,

122 
__REQ_SYNC
,

123 
__REQ_META
,

124 
__REQ_PRIO
,

125 
__REQ_DISCARD
,

126 
__REQ_SECURE
,

128 
__REQ_NOIDLE
,

129 
__REQ_FUA
,

130 
__REQ_FLUSH
,

133 
__REQ_RAHEAD
,

134 
__REQ_THROTTLED
,

138 
__REQ_SORTED
,

139 
__REQ_SOFTBARRIER
,

140 
__REQ_NOMERGE
,

141 
__REQ_STARTED
,

142 
__REQ_DONTPREP
,

143 
__REQ_QUEUED
,

144 
__REQ_ELVPRIV
,

145 
__REQ_FAILED
,

146 
__REQ_QUIET
,

147 
__REQ_PREEMPT
,

148 
__REQ_ALLOCED
,

149 
__REQ_COPY_USER
,

150 
__REQ_FLUSH_SEQ
,

151 
__REQ_IO_STAT
,

152 
__REQ_MIXED_MERGE
,

153 
__REQ_NR_BITS
,

156 
	#REQ_WRITE
 (1 << 
__REQ_WRITE
)

	)

157 
	#REQ_FAILFAST_DEV
 (1 << 
__REQ_FAILFAST_DEV
)

	)

158 
	#REQ_FAILFAST_TRANSPORT
 (1 << 
__REQ_FAILFAST_TRANSPORT
)

	)

159 
	#REQ_FAILFAST_DRIVER
 (1 << 
__REQ_FAILFAST_DRIVER
)

	)

160 
	#REQ_SYNC
 (1 << 
__REQ_SYNC
)

	)

161 
	#REQ_META
 (1 << 
__REQ_META
)

	)

162 
	#REQ_PRIO
 (1 << 
__REQ_PRIO
)

	)

163 
	#REQ_DISCARD
 (1 << 
__REQ_DISCARD
)

	)

164 
	#REQ_NOIDLE
 (1 << 
__REQ_NOIDLE
)

	)

166 
	#REQ_FAILFAST_MASK
 \

167 (
REQ_FAILFAST_DEV
 | 
REQ_FAILFAST_TRANSPORT
 | 
REQ_FAILFAST_DRIVER
)

	)

168 
	#REQ_COMMON_MASK
 \

169 (
REQ_WRITE
 | 
REQ_FAILFAST_MASK
 | 
REQ_SYNC
 | 
REQ_META
 | 
REQ_PRIO
 | \

170 
REQ_DISCARD
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
 | 
REQ_FUA
 | 
REQ_SECURE
)

	)

171 
	#REQ_CLONE_MASK
 
REQ_COMMON_MASK


	)

173 
	#REQ_RAHEAD
 (1 << 
__REQ_RAHEAD
)

	)

174 
	#REQ_THROTTLED
 (1 << 
__REQ_THROTTLED
)

	)

176 
	#REQ_SORTED
 (1 << 
__REQ_SORTED
)

	)

177 
	#REQ_SOFTBARRIER
 (1 << 
__REQ_SOFTBARRIER
)

	)

178 
	#REQ_FUA
 (1 << 
__REQ_FUA
)

	)

179 
	#REQ_NOMERGE
 (1 << 
__REQ_NOMERGE
)

	)

180 
	#REQ_STARTED
 (1 << 
__REQ_STARTED
)

	)

181 
	#REQ_DONTPREP
 (1 << 
__REQ_DONTPREP
)

	)

182 
	#REQ_QUEUED
 (1 << 
__REQ_QUEUED
)

	)

183 
	#REQ_ELVPRIV
 (1 << 
__REQ_ELVPRIV
)

	)

184 
	#REQ_FAILED
 (1 << 
__REQ_FAILED
)

	)

185 
	#REQ_QUIET
 (1 << 
__REQ_QUIET
)

	)

186 
	#REQ_PREEMPT
 (1 << 
__REQ_PREEMPT
)

	)

187 
	#REQ_ALLOCED
 (1 << 
__REQ_ALLOCED
)

	)

188 
	#REQ_COPY_USER
 (1 << 
__REQ_COPY_USER
)

	)

189 
	#REQ_FLUSH
 (1 << 
__REQ_FLUSH
)

	)

190 
	#REQ_FLUSH_SEQ
 (1 << 
__REQ_FLUSH_SEQ
)

	)

191 
	#REQ_IO_STAT
 (1 << 
__REQ_IO_STAT
)

	)

192 
	#REQ_MIXED_MERGE
 (1 << 
__REQ_MIXED_MERGE
)

	)

193 
	#REQ_SECURE
 (1 << 
__REQ_SECURE
)

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@lzoconf.h

44 #i‚de‡
__LZOCONF_H_INCLUDED


45 
	#__LZOCONF_H_INCLUDED
 1

	)

47 
	#LZO_VERSION
 0x2060

	)

48 
	#LZO_VERSION_STRING
 "2.06"

	)

49 
	#LZO_VERSION_DATE
 "Aug 12 2011"

	)

52 #i‡
deföed
(
LZO_HAVE_CONFIG_H
)

53 
	~<c⁄fig.h
>

55 
	~<limôs.h
>

56 
	~<°ddef.h
>

63 #i‡!
deföed
(
CHAR_BIT
) || (CHAR_BIT != 8)

66 #i‡!
deföed
(
UCHAR_MAX
Ë|| !deföed(
UINT_MAX
Ë|| !deföed(
ULONG_MAX
)

69 #i‡(
USHRT_MAX
 < 1Ë|| (
UINT_MAX
 < 1Ë|| (
ULONG_MAX
 < 1)

74 #i‚de‡
__LZODEFS_H_INCLUDED


75 
	~"lzodefs.h
"

79 #ifde‡
__˝lu•lus


88 #i‡!
deföed
(
LZO_UINT32_C
)

89 #i‡(
UINT_MAX
 < 
LZO_0xffffffffL
)

90 
	#LZO_UINT32_C
(
c
Ë¯## 
UL


	)

92 
	#LZO_UINT32_C
(
c
Ë((cË+ 0U)

	)

97 #i‡!
deföed
(
__LZO_CHECKER
)

98 #i‡
deföed
(
__BOUNDS_CHECKING_ON
)

99 
	#__LZO_CHECKER
 1

	)

100 #ñi‡
deföed
(
__CHECKER__
)

101 
	#__LZO_CHECKER
 1

	)

102 #ñi‡
deföed
(
__INSURE__
)

103 
	#__LZO_CHECKER
 1

	)

104 #ñi‡
deföed
(
__PURIFY__
)

105 
	#__LZO_CHECKER
 1

	)

115 #i‡!
deföed
(
LZO_UINT_MAX
)

116 #i‡
deföed
(
LZO_ABI_LLP64
)

117 #i‡
deföed
(
LZO_OS_WIN64
)

118 
	t__öt64
 
	tlzo_uöt
;

119 
__öt64
 
	tlzo_öt
;

121 
	tlzo_uöt
;

122 
	tlzo_öt
;

124 
	#LZO_UINT_MAX
 0xffffffffffffffffuŒ

	)

125 
	#LZO_INT_MAX
 9223372036854775807LL

	)

126 
	#LZO_INT_MIN
 (-1LL - 
LZO_INT_MAX
)

	)

127 #ñi‡
deföed
(
LZO_ABI_IP32L64
)

128 
	tlzo_uöt
;

129 
	tlzo_öt
;

130 
	#LZO_UINT_MAX
 
UINT_MAX


	)

131 
	#LZO_INT_MAX
 
INT_MAX


	)

132 
	#LZO_INT_MIN
 
INT_MIN


	)

133 #ñi‡(
ULONG_MAX
 >
LZO_0xffffffffL
)

134 
	tlzo_uöt
;

135 
	tlzo_öt
;

136 
	#LZO_UINT_MAX
 
ULONG_MAX


	)

137 
	#LZO_INT_MAX
 
LONG_MAX


	)

138 
	#LZO_INT_MIN
 
LONG_MIN


	)

145 #i‡!
deföed
(
LZO_UINT32_MAX
)

146 #i‡(
UINT_MAX
 >
LZO_0xffffffffL
)

147 
	tlzo_uöt32
;

148 
	tlzo_öt32
;

149 
	#LZO_UINT32_MAX
 
UINT_MAX


	)

150 
	#LZO_INT32_MAX
 
INT_MAX


	)

151 
	#LZO_INT32_MIN
 
INT_MIN


	)

152 #ñi‡(
ULONG_MAX
 >
LZO_0xffffffffL
)

153 
	tlzo_uöt32
;

154 
	tlzo_öt32
;

155 
	#LZO_UINT32_MAX
 
ULONG_MAX


	)

156 
	#LZO_INT32_MAX
 
LONG_MAX


	)

157 
	#LZO_INT32_MIN
 
LONG_MIN


	)

164 #i‡!
deföed
(
LZO_UINT64_MAX
)

165 #i‡(
LZO_UINT_MAX
 >
LZO_0xffffffffL
)

166 #i‡((((
LZO_UINT_MAX
) >> 31) >> 31) == 3)

167 
	#lzo_uöt64
 
lzo_uöt


	)

168 
	#lzo_öt64
 
lzo_öt


	)

169 
	#LZO_UINT64_MAX
 
LZO_UINT_MAX


	)

170 
	#LZO_INT64_MAX
 
LZO_INT_MAX


	)

171 
	#LZO_INT64_MIN
 
LZO_INT_MIN


	)

173 #ñi‡(
ULONG_MAX
 >
LZO_0xffffffffL
)

174 #i‡((((
ULONG_MAX
) >> 31) >> 31) == 3)

175 
	tlzo_uöt64
;

176 
	tlzo_öt64
;

177 
	#LZO_UINT64_MAX
 
ULONG_MAX


	)

178 
	#LZO_INT64_MAX
 
LONG_MAX


	)

179 
	#LZO_INT64_MIN
 
LONG_MIN


	)

185 #i‡(
LZO_UINT_MAX
 >
LZO_UINT32_MAX
)

186 
	#lzo_xöt
 
lzo_uöt


	)

188 
	#lzo_xöt
 
lzo_uöt32


	)

192 #i‡!
deföed
(
__LZO_MMODEL
)

193 #i‡(
LZO_UINT_MAX
 <
UINT_MAX
)

194 
	#__LZO_MMODEL


	)

195 #ñi‡
deföed
(
LZO_HAVE_MM_HUGE_PTR
)

196 
	#__LZO_MMODEL_HUGE
 1

	)

197 
	#__LZO_MMODEL
 
__huge


	)

199 
	#__LZO_MMODEL


	)

204 
	#lzo_byãp
 
__LZO_MMODEL
 *

	)

205 
	#lzo_ch¨p
 
__LZO_MMODEL
 *

	)

206 
	#lzo_voidp
 
__LZO_MMODEL
 *

	)

207 
	#lzo_sh‹ç
 
__LZO_MMODEL
 *

	)

208 
	#lzo_ush‹ç
 
__LZO_MMODEL
 *

	)

209 
	#lzo_uöt32p
 
lzo_uöt32
 
__LZO_MMODEL
 *

	)

210 
	#lzo_öt32p
 
lzo_öt32
 
__LZO_MMODEL
 *

	)

211 #i‡
deföed
(
LZO_UINT64_MAX
)

212 
	#lzo_uöt64p
 
lzo_uöt64
 
__LZO_MMODEL
 *

	)

213 
	#lzo_öt64p
 
lzo_öt64
 
__LZO_MMODEL
 *

	)

215 
	#lzo_uöç
 
lzo_uöt
 
__LZO_MMODEL
 *

	)

216 
	#lzo_öç
 
lzo_öt
 
__LZO_MMODEL
 *

	)

217 
	#lzo_xöç
 
lzo_xöt
 
__LZO_MMODEL
 *

	)

218 
	#lzo_voidµ
 
lzo_voidp
 
__LZO_MMODEL
 *

	)

219 
	#lzo_byãµ
 
lzo_byãp
 
__LZO_MMODEL
 *

	)

221 
	#lzo_byã
 
__LZO_MMODEL


	)

223 
	tlzo_boﬁ
;

231 #i‡!
deföed
(
__LZO_EXTERN_C
)

232 #ifde‡
__˝lu•lus


233 
	#__LZO_EXTERN_C
 "C"

	)

235 
	#__LZO_EXTERN_C
 

	)

240 #i‡!
deföed
(
__LZO_CDECL
)

241 
	#__LZO_CDECL
 
__lzo_cde˛


	)

245 #i‡!
deföed
(
__LZO_EXPORT1
)

246 
	#__LZO_EXPORT1


	)

248 #i‡!
deföed
(
__LZO_EXPORT2
)

249 
	#__LZO_EXPORT2


	)

253 #i‡!
deföed
(
LZO_PUBLIC
)

254 
	#LZO_PUBLIC
(
_ªây≥
Ë
__LZO_EXPORT1
 _ªây≥ 
__LZO_EXPORT2
 
__LZO_CDECL


	)

256 #i‡!
deföed
(
LZO_EXTERN
)

257 
	#LZO_EXTERN
(
_ªây≥
Ë
__LZO_EXTERN_C
 
	`LZO_PUBLIC
(_ªây≥)

	)

259 #i‡!
deföed
(
LZO_PRIVATE
)

260 
	#LZO_PRIVATE
(
_ªây≥
Ë_ªây≥ 
__LZO_CDECL


	)

265 (
	t__LZO_CDECL
 *
	tlzo_com¥ess_t
Ë–c⁄° 
	tlzo_byãp
 
	t§c
, 
	tlzo_uöt
 
	t§c_Àn
,

266 
	tlzo_byãp
 
	td°
, 
	tlzo_uöç
 
	td°_Àn
,

267 
	tlzo_voidp
 
	twrkmem
 );

270 (
	t__LZO_CDECL
 *
	tlzo_decom¥ess_t
Ë–c⁄° 
	tlzo_byãp
 
	t§c
, 
	tlzo_uöt
 
	t§c_Àn
,

271 
	tlzo_byãp
 
	td°
, 
	tlzo_uöç
 
	td°_Àn
,

272 
	tlzo_voidp
 
	twrkmem
 );

275 (
	t__LZO_CDECL
 *
	tlzo_›timize_t
Ë–
	tlzo_byãp
 
	t§c
, 
	tlzo_uöt
 
	t§c_Àn
,

276 
	tlzo_byãp
 
	td°
, 
	tlzo_uöç
 
	td°_Àn
,

277 
	tlzo_voidp
 
	twrkmem
 );

280 (
	t__LZO_CDECL
 *
	tlzo_com¥ess_di˘_t
)(c⁄° 
	tlzo_byãp
 
	t§c
, 
	tlzo_uöt
 
	t§c_Àn
,

281 
	tlzo_byãp
 
	td°
, 
	tlzo_uöç
 
	td°_Àn
,

282 
	tlzo_voidp
 
	twrkmem
,

283 c⁄° 
	tlzo_byãp
 
	tdi˘
, 
	tlzo_uöt
 
	tdi˘_Àn
 );

286 (
	t__LZO_CDECL
 *
	tlzo_decom¥ess_di˘_t
)(c⁄° 
	tlzo_byãp
 
	t§c
, 
	tlzo_uöt
 
	t§c_Àn
,

287 
	tlzo_byãp
 
	td°
, 
	tlzo_uöç
 
	td°_Àn
,

288 
	tlzo_voidp
 
	twrkmem
,

289 c⁄° 
	tlzo_byãp
 
	tdi˘
, 
	tlzo_uöt
 
	tdi˘_Àn
 );

295 
	glzo_ˇŒback_t
;

296 
lzo_ˇŒback_t
 
	tlzo_ˇŒback_t
;

297 
	#lzo_ˇŒback_p
 
lzo_ˇŒback_t
 
__LZO_MMODEL
 *

	)

300 
lzo_voidp
 (
	t__LZO_CDECL
 *
	tlzo_Æloc_func_t
)

301 (
	tlzo_ˇŒback_p
 
	t£lf
, 
	tlzo_uöt
 
	tôems
,Üzo_uöà
	tsize
);

302 (
__LZO_CDECL
 *
	tlzo_‰ì_func_t
)

303 (
	tlzo_ˇŒback_p
 
	t£lf
, 
	tlzo_voidp
 
	t±r
);

306 (
__LZO_CDECL
 *
	tlzo_¥ogªss_func_t
)

307 (
	tlzo_ˇŒback_p
, 
	tlzo_uöt
,Üzo_uint, );

309 
	slzo_ˇŒback_t


312 
lzo_Æloc_func_t
 
	g«Œoc
;

313 
lzo_‰ì_func_t
 
	gn‰ì
;

316 
lzo_¥ogªss_func_t
 
	g≈rogªss
;

321 
lzo_voidp
 
	gu£r1
;

322 
lzo_xöt
 
	gu£r2
;

323 
lzo_xöt
 
	gu£r3
;

335 
	#LZO_E_OK
 0

	)

336 
	#LZO_E_ERROR
 (-1)

	)

337 
	#LZO_E_OUT_OF_MEMORY
 (-2Ë

	)

338 
	#LZO_E_NOT_COMPRESSIBLE
 (-3Ë

	)

339 
	#LZO_E_INPUT_OVERRUN
 (-4)

	)

340 
	#LZO_E_OUTPUT_OVERRUN
 (-5)

	)

341 
	#LZO_E_LOOKBEHIND_OVERRUN
 (-6)

	)

342 
	#LZO_E_EOF_NOT_FOUND
 (-7)

	)

343 
	#LZO_E_INPUT_NOT_CONSUMED
 (-8)

	)

344 
	#LZO_E_NOT_YET_IMPLEMENTED
 (-9Ë

	)

345 
	#LZO_E_INVALID_ARGUMENT
 (-10)

	)

348 #i‚de‡
lzo_sizeof_di˘_t


349 
	#lzo_sizeof_di˘_t
 (()(
lzo_byãp
))

	)

358 
	#lzo_öô
(Ë
	`__lzo_öô_v2
(
LZO_VERSION
,()(),()(),\

359 ()(),()(
lzo_uöt32
),()(
lzo_uöt
),\

360 ()
lzo_sizeof_di˘_t
,()(*),()(
lzo_voidp
),\

361 ()(
lzo_ˇŒback_t
))

	)

362 
LZO_EXTERN
(Ë
__lzo_öô_v2
(,,,,,,,,,);

365 
LZO_EXTERN
(Ë
lzo_vîsi⁄
();

366 
LZO_EXTERN
(c⁄° *Ë
lzo_vîsi⁄_°rög
();

367 
LZO_EXTERN
(c⁄° *Ë
lzo_vîsi⁄_d©e
();

368 
LZO_EXTERN
(c⁄° 
lzo_ch¨p
Ë
_lzo_vîsi⁄_°rög
();

369 
LZO_EXTERN
(c⁄° 
lzo_ch¨p
Ë
_lzo_vîsi⁄_d©e
();

372 
LZO_EXTERN
()

373 
lzo_memcmp
(c⁄° 
lzo_voidp
 
a
, c⁄°Üzo_void∞
b
, 
lzo_uöt
 
Àn
);

374 
LZO_EXTERN
(
lzo_voidp
)

375 
lzo_mem˝y
(
lzo_voidp
 
d°
, c⁄°Üzo_void∞
§c
, 
lzo_uöt
 
Àn
);

376 
LZO_EXTERN
(
lzo_voidp
)

377 
lzo_memmove
(
lzo_voidp
 
d°
, c⁄°Üzo_void∞
§c
, 
lzo_uöt
 
Àn
);

378 
LZO_EXTERN
(
lzo_voidp
)

379 
lzo_mem£t
(
lzo_voidp
 
buf
, 
c
, 
lzo_uöt
 
Àn
);

382 
LZO_EXTERN
(
lzo_uöt32
)

383 
lzo_adÀr32
(
lzo_uöt32
 
c
, c⁄° 
lzo_byãp
 
buf
, 
lzo_uöt
 
Àn
);

384 
LZO_EXTERN
(
lzo_uöt32
)

385 
lzo_¸c32
(
lzo_uöt32
 
c
, c⁄° 
lzo_byãp
 
buf
, 
lzo_uöt
 
Àn
);

386 
LZO_EXTERN
(c⁄° 
lzo_uöt32p
)

387 
lzo_gë_¸c32_èbÀ
();

390 
LZO_EXTERN
(Ë
_lzo_c⁄fig_check
();

391 uni⁄ { 
lzo_byãp
 
	gp
; 
lzo_uöt
 
	gu
; } 
	t__lzo_pu_u
;

392 uni⁄ { 
lzo_byãp
 
	gp
; 
lzo_uöt32
 
	gu32
; } 
	t__lzo_pu32_u
;

393 uni⁄ { *
	gvp
; 
lzo_byãp
 
	gbp
; 
lzo_uöt
 
	gu
; 
lzo_uöt32
 
	gu32
; 
	gl
; } 
	tlzo_Æign_t
;

396 
LZO_EXTERN
(Ë
__lzo_Æign_g≠
(c⁄° 
lzo_voidp
 
p
, 
lzo_uöt
 
size
);

397 
	#LZO_PTR_ALIGN_UP
(
p
,
size
) \

398 ((
p
Ë+ (
lzo_uöt
Ë
	`__lzo_Æign_g≠
((c⁄° 
lzo_voidp
)’),÷zo_uöt)(
size
)))

	)

405 #i‡
deföed
(
LZO_CFG_COMPAT
)

407 
	#__LZOCONF_H
 1

	)

409 #i‡
deföed
(
LZO_ARCH_I086
)

410 
	#__LZO_i386
 1

	)

411 #ñi‡
deföed
(
LZO_ARCH_I386
)

412 
	#__LZO_i386
 1

	)

415 #i‡
deföed
(
LZO_OS_DOS16
)

416 
	#__LZO_DOS
 1

	)

417 
	#__LZO_DOS16
 1

	)

418 #ñi‡
deföed
(
LZO_OS_DOS32
)

419 
	#__LZO_DOS
 1

	)

420 #ñi‡
deföed
(
LZO_OS_WIN16
)

421 
	#__LZO_WIN
 1

	)

422 
	#__LZO_WIN16
 1

	)

423 #ñi‡
deföed
(
LZO_OS_WIN32
)

424 
	#__LZO_WIN
 1

	)

427 
	#__LZO_CMODEL


	)

428 
	#__LZO_DMODEL


	)

429 
	#__LZO_ENTRY
 
__LZO_CDECL


	)

430 
	#LZO_EXTERN_CDECL
 
LZO_EXTERN


	)

431 
	#LZO_ALIGN
 
LZO_PTR_ALIGN_UP


	)

433 
	#lzo_com¥ess_asm_t
 
lzo_com¥ess_t


	)

434 
	#lzo_decom¥ess_asm_t
 
lzo_decom¥ess_t


	)

439 #ifde‡
__˝lu•lus


	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@lzodefs.h

44 #i‚de‡
__LZODEFS_H_INCLUDED


45 
	#__LZODEFS_H_INCLUDED
 1

	)

47 #i‡
deföed
(
__CYGWIN32__
Ë&& !deföed(
__CYGWIN__
)

48 
	#__CYGWIN__
 
__CYGWIN32__


	)

50 #i‡
deföed
(
__IBMCPP__
Ë&& !deföed(
__IBMC__
)

51 
	#__IBMC__
 
__IBMCPP__


	)

53 #i‡
deföed
(
__ICL
Ë&& deföed(
_WIN32
Ë&& !deföed(
__INTEL_COMPILER
)

54 
	#__INTEL_COMPILER
 
__ICL


	)

56 #i‡1 && 
deföed
(
__INTERIX
Ë&& deföed(
__GNUC__
Ë&& !deföed(
_ALL_SOURCE
)

57 
	#_ALL_SOURCE
 1

	)

59 #i‡
deföed
(
__mùs__
Ë&& deföed(
__R5900__
)

60 #i‡!
deföed
(
__LONG_MAX__
)

61 
	#__LONG_MAX__
 9223372036854775807L

	)

64 #i‡
deföed
(
__INTEL_COMPILER
Ë&& deföed(
__löux__
)

65 #¥agm®
w¨nög
(
dißbÀ
: 193)

67 #i‡
deföed
(
__KEIL__
Ë&& deföed(
__C166__
)

68 #¥agm®
w¨nög
 
dißbÀ
 = 322

69 #ñi‡0 && 
deföed
(
__C251__
)

70 #¥agm®
w¨nög
 
dißbÀ
 = 322

72 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__INTEL_COMPILER
Ë&& !deföed(
__MWERKS__
)

73 #i‡(
_MSC_VER
 >= 1300)

74 #¥agm®
w¨nög
(
dißbÀ
: 4668)

77 #i‡0 && 
deföed
(
__WATCOMC__
)

78 #i‡(
__WATCOMC__
 >= 1050) && (__WATCOMC__ < 1060)

79 #¥agm®
w¨nög
 203 9

82 #i‡
deföed
(
__BORLANDC__
Ë&& deföed(
__MSDOS__
Ë&& !deföed(
__FLAT__
)

83 #¥agm®
›ti⁄
 -
h


86 
	#LZO_0xffffL
 0xfffful

	)

87 
	#LZO_0xffffffffL
 0xfffffffful

	)

89 
	#LZO_0xffffL
 65535ul

	)

90 
	#LZO_0xffffffffL
 4294967295ul

	)

92 #i‡(
LZO_0xffffL
 =
LZO_0xffffffffL
)

106 #i‡(
UINT_MAX
 =
LZO_0xffffL
)

107 #i‡
deföed
(
__ZTC__
Ë&& deföed(
__I86__
Ë&& !deföed(
__OS2__
)

108 #i‡!
deföed
(
MSDOS
)

109 
	#MSDOS
 1

	)

111 #i‡!
deföed
(
_MSDOS
)

112 
	#_MSDOS
 1

	)

114 #ñi‡0 && 
deföed
(
__VERSION
Ë&& deföed(
MB_LEN_MAX
)

115 #i‡(
__VERSION
 =520Ë&& (
MB_LEN_MAX
 == 1)

116 #i‡!
deföed
(
__AZTEC_C__
)

117 
	#__AZTEC_C__
 
__VERSION


	)

119 #i‡!
deföed
(
__DOS__
)

120 
	#__DOS__
 1

	)

125 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
M_I86HM
Ë&& (
UINT_MAX
 =
LZO_0xffffL
)

126 
	#±rdiff_t
 

	)

127 
	#_PTRDIFF_T_DEFINED
 1

	)

129 #i‡(
UINT_MAX
 =
LZO_0xffffL
)

130 #unde‡
__LZO_RENAME_A


131 #unde‡
__LZO_RENAME_B


132 #i‡
deföed
(
__AZTEC_C__
Ë&& deföed(
__DOS__
)

133 
	#__LZO_RENAME_A
 1

	)

134 #ñi‡
deföed
(
_MSC_VER
Ë&& deföed(
MSDOS
)

135 #i‡(
_MSC_VER
 < 600)

136 
	#__LZO_RENAME_A
 1

	)

137 #ñi‡(
_MSC_VER
 < 700)

138 
	#__LZO_RENAME_B
 1

	)

140 #ñi‡
deföed
(
__TSC__
Ë&& deföed(
__OS2__
)

141 
	#__LZO_RENAME_A
 1

	)

142 #ñi‡
deföed
(
__MSDOS__
Ë&& deföed(
__TURBOC__
) && (__TURBOC__ < 0x0410)

143 
	#__LZO_RENAME_A
 1

	)

144 #ñi‡
deföed
(
__PACIFIC__
Ë&& deföed(
DOS
)

145 #i‡!
deföed
(
__Ár
)

146 
	#__Ár
 
Ár


	)

148 #i‡!
deföed
(
__√¨
)

149 
	#__√¨
 
√¨


	)

152 #i‡
deföed
(
__LZO_RENAME_A
)

153 #i‡!
deföed
(
__cde˛
)

154 
	#__cde˛
 
cde˛


	)

156 #i‡!
deföed
(
__Ár
)

157 
	#__Ár
 
Ár


	)

159 #i‡!
deföed
(
__huge
)

160 
	#__huge
 
huge


	)

162 #i‡!
deföed
(
__√¨
)

163 
	#__√¨
 
√¨


	)

165 #i‡!
deföed
(
__∑sˇl
)

166 
	#__∑sˇl
 
∑sˇl


	)

168 #i‡!
deföed
(
__huge
)

169 
	#__huge
 
huge


	)

171 #ñi‡
deföed
(
__LZO_RENAME_B
)

172 #i‡!
deföed
(
__cde˛
)

173 
	#__cde˛
 
_cde˛


	)

175 #i‡!
deföed
(
__Ár
)

176 
	#__Ár
 
_Ár


	)

178 #i‡!
deföed
(
__huge
)

179 
	#__huge
 
_huge


	)

181 #i‡!
deföed
(
__√¨
)

182 
	#__√¨
 
_√¨


	)

184 #i‡!
deföed
(
__∑sˇl
)

185 
	#__∑sˇl
 
_∑sˇl


	)

187 #ñi‡(
deföed
(
__PUREC__
Ë|| deföed(
__TURBOC__
)Ë&& deföed(
__TOS__
)

188 #i‡!
deföed
(
__cde˛
)

189 
	#__cde˛
 
cde˛


	)

191 #i‡!
deföed
(
__∑sˇl
)

192 
	#__∑sˇl
 
∑sˇl


	)

195 #unde‡
__LZO_RENAME_A


196 #unde‡
__LZO_RENAME_B


198 #i‡(
UINT_MAX
 =
LZO_0xffffL
)

199 #i‡
deföed
(
__AZTEC_C__
Ë&& deföed(
__DOS__
)

200 
	#LZO_BROKEN_CDECL_ALT_SYNTAX
 1

	)

201 #ñi‡
deföed
(
_MSC_VER
Ë&& deföed(
MSDOS
)

202 #i‡(
_MSC_VER
 < 600)

203 
	#LZO_BROKEN_INTEGRAL_CONSTANTS
 1

	)

205 #i‡(
_MSC_VER
 < 700)

206 
	#LZO_BROKEN_INTEGRAL_PROMOTION
 1

	)

207 
	#LZO_BROKEN_SIZEOF
 1

	)

209 #ñi‡
deföed
(
__PACIFIC__
Ë&& deföed(
DOS
)

210 
	#LZO_BROKEN_INTEGRAL_CONSTANTS
 1

	)

211 #ñi‡
deföed
(
__TURBOC__
Ë&& deföed(
__MSDOS__
)

212 #i‡(
__TURBOC__
 < 0x0150)

213 
	#LZO_BROKEN_CDECL_ALT_SYNTAX
 1

	)

214 
	#LZO_BROKEN_INTEGRAL_CONSTANTS
 1

	)

215 
	#LZO_BROKEN_INTEGRAL_PROMOTION
 1

	)

217 #i‡(
__TURBOC__
 < 0x0200)

218 
	#LZO_BROKEN_SIZEOF
 1

	)

220 #i‡(
__TURBOC__
 < 0x0400Ë&& 
deföed
(
__˝lu•lus
)

221 
	#LZO_BROKEN_CDECL_ALT_SYNTAX
 1

	)

223 #ñi‡(
deföed
(
__PUREC__
Ë|| deföed(
__TURBOC__
)Ë&& deföed(
__TOS__
)

224 
	#LZO_BROKEN_CDECL_ALT_SYNTAX
 1

	)

225 
	#LZO_BROKEN_SIZEOF
 1

	)

228 #i‡
deföed
(
__WATCOMC__
) && (__WATCOMC__ < 900)

229 
	#LZO_BROKEN_INTEGRAL_CONSTANTS
 1

	)

231 #i‡
deföed
(
_CRAY
Ë&& deföed(
_CRAY1
)

232 
	#LZO_BROKEN_SIGNED_RIGHT_SHIFT
 1

	)

234 
	#LZO_PP_STRINGIZE
(
x
Ë#x

	)

235 
	#LZO_PP_MACRO_EXPAND
(
x
Ë
	`LZO_PP_STRINGIZE
(x)

	)

236 
	#LZO_PP_CONCAT2
(
a
,
b
Ë®## 
	)
b

237 
	#LZO_PP_CONCAT3
(
a
,
b
,
c
Ë®## b ## 
	)
c

238 
	#LZO_PP_CONCAT4
(
a
,
b
,
c
,
d
Ë®## b ## c ## 
	)
d

239 
	#LZO_PP_CONCAT5
(
a
,
b
,
c
,
d
,
e
Ë®## b ## c ## d ## 
	)
e

240 
	#LZO_PP_ECONCAT2
(
a
,
b
Ë
	`LZO_PP_CONCAT2
◊,b)

	)

241 
	#LZO_PP_ECONCAT3
(
a
,
b
,
c
Ë
	`LZO_PP_CONCAT3
◊,b,c)

	)

242 
	#LZO_PP_ECONCAT4
(
a
,
b
,
c
,
d
Ë
	`LZO_PP_CONCAT4
◊,b,c,d)

	)

243 
	#LZO_PP_ECONCAT5
(
a
,
b
,
c
,
d
,
e
Ë
	`LZO_PP_CONCAT5
◊,b,c,d,e)

	)

245 
	#LZO_CPP_STRINGIZE
(
x
Ë#x

	)

246 
	#LZO_CPP_MACRO_EXPAND
(
x
Ë
	`LZO_CPP_STRINGIZE
(x)

	)

247 
	#LZO_CPP_CONCAT2
(
a
,
b
Ë®## 
	)
b

248 
	#LZO_CPP_CONCAT3
(
a
,
b
,
c
Ë®## b ## 
	)
c

249 
	#LZO_CPP_CONCAT4
(
a
,
b
,
c
,
d
Ë®## b ## c ## 
	)
d

250 
	#LZO_CPP_CONCAT5
(
a
,
b
,
c
,
d
,
e
Ë®## b ## c ## d ## 
	)
e

251 
	#LZO_CPP_ECONCAT2
(
a
,
b
Ë
	`LZO_CPP_CONCAT2
◊,b)

	)

252 
	#LZO_CPP_ECONCAT3
(
a
,
b
,
c
Ë
	`LZO_CPP_CONCAT3
◊,b,c)

	)

253 
	#LZO_CPP_ECONCAT4
(
a
,
b
,
c
,
d
Ë
	`LZO_CPP_CONCAT4
◊,b,c,d)

	)

254 
	#LZO_CPP_ECONCAT5
(
a
,
b
,
c
,
d
,
e
Ë
	`LZO_CPP_CONCAT5
◊,b,c,d,e)

	)

256 
	#__LZO_MASK_GEN
(
o
,
b
Ë(((((oË<< ((b)-1)Ë- (o)Ë<< 1Ë+ (o))

	)

257 #i‡1 && 
deföed
(
__˝lu•lus
)

258 #i‡!
deföed
(
__STDC_CONSTANT_MACROS
)

259 
	#__STDC_CONSTANT_MACROS
 1

	)

261 #i‡!
deföed
(
__STDC_LIMIT_MACROS
)

262 
	#__STDC_LIMIT_MACROS
 1

	)

265 #i‡
deföed
(
__˝lu•lus
)

266 
	#LZO_EXTERN_C
 "C"

	)

268 
	#LZO_EXTERN_C
 

	)

270 #i‡!
deföed
(
__LZO_OS_OVERRIDE
)

271 #i‡(
LZO_OS_FREESTANDING
)

272 
	#LZO_INFO_OS
 "‰ì°™dög"

	)

273 #ñi‡(
LZO_OS_EMBEDDED
)

274 
	#LZO_INFO_OS
 "embedded"

	)

275 #ñi‡1 && 
deföed
(
__IAR_SYSTEMS_ICC__
)

276 
	#LZO_OS_EMBEDDED
 1

	)

277 
	#LZO_INFO_OS
 "embedded"

	)

278 #ñi‡
deföed
(
__CYGWIN__
Ë&& deföed(
__GNUC__
)

279 
	#LZO_OS_CYGWIN
 1

	)

280 
	#LZO_INFO_OS
 "cygwö"

	)

281 #ñi‡
deföed
(
__EMX__
Ë&& deföed(
__GNUC__
)

282 
	#LZO_OS_EMX
 1

	)

283 
	#LZO_INFO_OS
 "emx"

	)

284 #ñi‡
deföed
(
__BEOS__
)

285 
	#LZO_OS_BEOS
 1

	)

286 
	#LZO_INFO_OS
 "beos"

	)

287 #ñi‡
deföed
(
__Lynx__
)

288 
	#LZO_OS_LYNXOS
 1

	)

289 
	#LZO_INFO_OS
 "lynxos"

	)

290 #ñi‡
deföed
(
__OS400__
)

291 
	#LZO_OS_OS400
 1

	)

292 
	#LZO_INFO_OS
 "os400"

	)

293 #ñi‡
deföed
(
__QNX__
)

294 
	#LZO_OS_QNX
 1

	)

295 
	#LZO_INFO_OS
 "qnx"

	)

296 #ñi‡
deföed
(
__BORLANDC__
Ë&& deföed(
__DPMI32__
) && (__BORLANDC__ >= 0x0460)

297 
	#LZO_OS_DOS32
 1

	)

298 
	#LZO_INFO_OS
 "dos32"

	)

299 #ñi‡
deföed
(
__BORLANDC__
Ë&& deföed(
__DPMI16__
)

300 
	#LZO_OS_DOS16
 1

	)

301 
	#LZO_INFO_OS
 "dos16"

	)

302 #ñi‡
deföed
(
__ZTC__
Ë&& deföed(
DOS386
)

303 
	#LZO_OS_DOS32
 1

	)

304 
	#LZO_INFO_OS
 "dos32"

	)

305 #ñi‡
deföed
(
__OS2__
Ë|| deföed(
__OS2V2__
)

306 #i‡(
UINT_MAX
 =
LZO_0xffffL
)

307 
	#LZO_OS_OS216
 1

	)

308 
	#LZO_INFO_OS
 "os216"

	)

309 #ñi‡(
UINT_MAX
 =
LZO_0xffffffffL
)

310 
	#LZO_OS_OS2
 1

	)

311 
	#LZO_INFO_OS
 "os2"

	)

315 #ñi‡
deföed
(
__WIN64__
Ë|| deföed(
_WIN64
Ë|| deföed(
WIN64
)

316 
	#LZO_OS_WIN64
 1

	)

317 
	#LZO_INFO_OS
 "wö64"

	)

318 #ñi‡
deföed
(
__WIN32__
Ë|| deföed(
_WIN32
Ë|| deföed(
WIN32
Ë|| deföed(
__WINDOWS_386__
)

319 
	#LZO_OS_WIN32
 1

	)

320 
	#LZO_INFO_OS
 "wö32"

	)

321 #ñi‡
deföed
(
__MWERKS__
Ë&& deföed(
__INTEL__
)

322 
	#LZO_OS_WIN32
 1

	)

323 
	#LZO_INFO_OS
 "wö32"

	)

324 #ñi‡
deföed
(
__WINDOWS__
Ë|| deföed(
_WINDOWS
Ë|| deföed(
_Wödows
)

325 #i‡(
UINT_MAX
 =
LZO_0xffffL
)

326 
	#LZO_OS_WIN16
 1

	)

327 
	#LZO_INFO_OS
 "wö16"

	)

328 #ñi‡(
UINT_MAX
 =
LZO_0xffffffffL
)

329 
	#LZO_OS_WIN32
 1

	)

330 
	#LZO_INFO_OS
 "wö32"

	)

334 #ñi‡
deföed
(
__DOS__
Ë|| deföed(
__MSDOS__
Ë|| deföed(
_MSDOS
Ë|| deföed(
MSDOS
Ë|| (deföed(
__PACIFIC__
Ë&& deföed(
DOS
))

335 #i‡(
UINT_MAX
 =
LZO_0xffffL
)

336 
	#LZO_OS_DOS16
 1

	)

337 
	#LZO_INFO_OS
 "dos16"

	)

338 #ñi‡(
UINT_MAX
 =
LZO_0xffffffffL
)

339 
	#LZO_OS_DOS32
 1

	)

340 
	#LZO_INFO_OS
 "dos32"

	)

344 #ñi‡
deföed
(
__WATCOMC__
)

345 #i‡
deföed
(
__NT__
Ë&& (
UINT_MAX
 =
LZO_0xffffL
)

346 
	#LZO_OS_DOS16
 1

	)

347 
	#LZO_INFO_OS
 "dos16"

	)

348 #ñi‡
deföed
(
__NT__
Ë&& (
__WATCOMC__
 < 1100)

349 
	#LZO_OS_WIN32
 1

	)

350 
	#LZO_INFO_OS
 "wö32"

	)

351 #ñi‡
deföed
(
__löux__
Ë|| deföed(
__LINUX__
)

352 
	#LZO_OS_POSIX
 1

	)

353 
	#LZO_INFO_OS
 "posix"

	)

357 #ñi‡
deföed
(
__∑lmos__
)

358 
	#LZO_OS_PALMOS
 1

	)

359 
	#LZO_INFO_OS
 "∑lmos"

	)

360 #ñi‡
deföed
(
__TOS__
Ë|| deföed(
__©¨i°__
)

361 
	#LZO_OS_TOS
 1

	)

362 
	#LZO_INFO_OS
 "tos"

	)

363 #ñi‡
deföed
(
macötosh
Ë&& !deföed(
__µc__
)

364 
	#LZO_OS_MACCLASSIC
 1

	)

365 
	#LZO_INFO_OS
 "mac˛assic"

	)

366 #ñi‡
deföed
(
__VMS
)

367 
	#LZO_OS_VMS
 1

	)

368 
	#LZO_INFO_OS
 "vms"

	)

369 #ñi‡((
deföed
(
__mùs__
Ë&& deföed(
__R5900__
)Ë|| deföed(
__MIPS_PSX2__
))

370 
	#LZO_OS_CONSOLE
 1

	)

371 
	#LZO_OS_CONSOLE_PS2
 1

	)

372 
	#LZO_INFO_OS
 "c⁄sﬁe"

	)

373 
	#LZO_INFO_OS_CONSOLE
 "ps2"

	)

374 #ñi‡(
deföed
(
__mùs__
Ë&& deföed(
__p•__
))

375 
	#LZO_OS_CONSOLE
 1

	)

376 
	#LZO_OS_CONSOLE_PSP
 1

	)

377 
	#LZO_INFO_OS
 "c⁄sﬁe"

	)

378 
	#LZO_INFO_OS_CONSOLE
 "p•"

	)

380 
	#LZO_OS_POSIX
 1

	)

381 
	#LZO_INFO_OS
 "posix"

	)

383 #i‡(
LZO_OS_POSIX
)

384 #i‡
deföed
(
_AIX
Ë|| deföed(
__AIX__
Ë|| deföed(
__aix__
)

385 
	#LZO_OS_POSIX_AIX
 1

	)

386 
	#LZO_INFO_OS_POSIX
 "aix"

	)

387 #ñi‡
deföed
(
__FªeBSD__
)

388 
	#LZO_OS_POSIX_FREEBSD
 1

	)

389 
	#LZO_INFO_OS_POSIX
 "‰ìbsd"

	)

390 #ñi‡
deföed
(
__hpux__
Ë|| deföed(
__hpux
)

391 
	#LZO_OS_POSIX_HPUX
 1

	)

392 
	#LZO_INFO_OS_POSIX
 "hpux"

	)

393 #ñi‡
deföed
(
__INTERIX
)

394 
	#LZO_OS_POSIX_INTERIX
 1

	)

395 
	#LZO_INFO_OS_POSIX
 "öãrix"

	)

396 #ñi‡
deföed
(
__IRIX__
Ë|| deföed(
__úix__
)

397 
	#LZO_OS_POSIX_IRIX
 1

	)

398 
	#LZO_INFO_OS_POSIX
 "úix"

	)

399 #ñi‡
deföed
(
__löux__
Ë|| deföed(
__löux
Ë|| deföed(
__LINUX__
)

400 
	#LZO_OS_POSIX_LINUX
 1

	)

401 
	#LZO_INFO_OS_POSIX
 "löux"

	)

402 #ñi‡
deföed
(
__APPLE__
Ë|| deföed(
__MACOS__
)

403 
	#LZO_OS_POSIX_MACOSX
 1

	)

404 
	#LZO_INFO_OS_POSIX
 "macosx"

	)

405 #ñi‡
deföed
(
__möix__
Ë|| deföed(
__möix
)

406 
	#LZO_OS_POSIX_MINIX
 1

	)

407 
	#LZO_INFO_OS_POSIX
 "möix"

	)

408 #ñi‡
deföed
(
__NëBSD__
)

409 
	#LZO_OS_POSIX_NETBSD
 1

	)

410 
	#LZO_INFO_OS_POSIX
 "√tbsd"

	)

411 #ñi‡
deföed
(
__O≥nBSD__
)

412 
	#LZO_OS_POSIX_OPENBSD
 1

	)

413 
	#LZO_INFO_OS_POSIX
 "›íbsd"

	)

414 #ñi‡
deföed
(
__osf__
)

415 
	#LZO_OS_POSIX_OSF
 1

	)

416 
	#LZO_INFO_OS_POSIX
 "osf"

	)

417 #ñi‡
deföed
(
__sﬁ¨is__
Ë|| deföed(
__sun
)

418 #i‡
deföed
(
__SVR4
Ë|| deföed(
__svr4__
)

419 
	#LZO_OS_POSIX_SOLARIS
 1

	)

420 
	#LZO_INFO_OS_POSIX
 "sﬁ¨is"

	)

422 
	#LZO_OS_POSIX_SUNOS
 1

	)

423 
	#LZO_INFO_OS_POSIX
 "sunos"

	)

425 #ñi‡
deföed
(
__u…rix__
Ë|| deföed(
__u…rix
)

426 
	#LZO_OS_POSIX_ULTRIX
 1

	)

427 
	#LZO_INFO_OS_POSIX
 "u…rix"

	)

428 #ñi‡
deföed
(
_UNICOS
)

429 
	#LZO_OS_POSIX_UNICOS
 1

	)

430 
	#LZO_INFO_OS_POSIX
 "unicos"

	)

432 
	#LZO_OS_POSIX_UNKNOWN
 1

	)

433 
	#LZO_INFO_OS_POSIX
 "unknown"

	)

437 #i‡(
LZO_OS_DOS16
 || 
LZO_OS_OS216
 || 
LZO_OS_WIN16
)

438 #i‡(
UINT_MAX
 !
LZO_0xffffL
)

441 #i‡(
ULONG_MAX
 !
LZO_0xffffffffL
)

445 #i‡(
LZO_OS_DOS32
 || 
LZO_OS_OS2
 || 
LZO_OS_WIN32
 || 
LZO_OS_WIN64
)

446 #i‡(
UINT_MAX
 !
LZO_0xffffffffL
)

449 #i‡(
ULONG_MAX
 !
LZO_0xffffffffL
)

453 #i‡
deföed
(
CIL
Ë&& deföed(
_GNUCC
Ë&& deföed(
__GNUC__
)

454 
	#LZO_CC_CILLY
 1

	)

455 
	#LZO_INFO_CC
 "Cûly"

	)

456 #i‡
deföed
(
__CILLY__
)

457 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__CILLY__
)

	)

459 
	#LZO_INFO_CCVER
 "unknown"

	)

461 #ñi‡0 && 
deföed
(
SDCC
Ë&& deföed(
__VERSION__
Ë&& !deföed(
__GNUC__
)

462 
	#LZO_CC_SDCC
 1

	)

463 
	#LZO_INFO_CC
 "sdcc"

	)

464 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
SDCC
)

	)

465 #ñi‡
deföed
(
__PATHSCALE__
Ë&& deföed(
__PATHCC_PATCHLEVEL__
)

466 
	#LZO_CC_PATHSCALE
 (
__PATHCC__
 * 0x10000L + 
__PATHCC_MINOR__
 * 0x100 + 
__PATHCC_PATCHLEVEL__
)

	)

467 
	#LZO_INFO_CC
 "P©hsˇÀ C"

	)

468 
	#LZO_INFO_CCVER
 
__PATHSCALE__


	)

469 #ñi‡
deföed
(
__INTEL_COMPILER
)

470 
	#LZO_CC_INTELC
 1

	)

471 
	#LZO_INFO_CC
 "I¡ñ C"

	)

472 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__INTEL_COMPILER
)

	)

473 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)

474 
	#LZO_CC_SYNTAX_MSC
 1

	)

476 
	#LZO_CC_SYNTAX_GNUC
 1

	)

478 #ñi‡
deföed
(
__POCC__
Ë&& deföed(
_WIN32
)

479 
	#LZO_CC_PELLESC
 1

	)

480 
	#LZO_INFO_CC
 "PñÀ†C"

	)

481 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__POCC__
)

	)

482 #ñi‡
deföed
(
__˛™g__
Ë&& deföed(
__Œvm__
Ë&& deföed(
__GNUC__
Ë&& deföed(
__GNUC_MINOR__
Ë&& deföed(
__VERSION__
)

483 #i‡
deföed
(
__GNUC_PATCHLEVEL__
)

484 
	#LZO_CC_CLANG_GNUC
 (
__GNUC__
 * 0x10000L + 
__GNUC_MINOR__
 * 0x100 + 
__GNUC_PATCHLEVEL__
)

	)

486 
	#LZO_CC_CLANG_GNUC
 (
__GNUC__
 * 0x10000L + 
__GNUC_MINOR__
 * 0x100)

	)

488 #i‡
deföed
(
__˛™g_maj‹__
Ë&& deföed(
__˛™g_mö‹__
Ë&& deföed(
__˛™g_∑tchÀvñ__
)

489 
	#LZO_CC_CLANG_CLANG
 (
__˛™g_maj‹__
 * 0x10000L + 
__˛™g_mö‹__
 * 0x100 + 
__˛™g_∑tchÀvñ__
)

	)

491 
	#LZO_CC_CLANG_CLANG
 0x010000L

	)

493 
	#LZO_CC_CLANG
 
LZO_CC_CLANG_GNUC


	)

494 
	#LZO_INFO_CC
 "˛™g"

	)

495 
	#LZO_INFO_CCVER
 
__VERSION__


	)

496 #ñi‡
deföed
(
__Œvm__
Ë&& deföed(
__GNUC__
Ë&& deföed(
__GNUC_MINOR__
Ë&& deföed(
__VERSION__
)

497 #i‡
deföed
(
__GNUC_PATCHLEVEL__
)

498 
	#LZO_CC_LLVM_GNUC
 (
__GNUC__
 * 0x10000L + 
__GNUC_MINOR__
 * 0x100 + 
__GNUC_PATCHLEVEL__
)

	)

500 
	#LZO_CC_LLVM_GNUC
 (
__GNUC__
 * 0x10000L + 
__GNUC_MINOR__
 * 0x100)

	)

502 
	#LZO_CC_LLVM
 
LZO_CC_LLVM_GNUC


	)

503 
	#LZO_INFO_CC
 "Œvm-gcc"

	)

504 
	#LZO_INFO_CCVER
 
__VERSION__


	)

505 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__VERSION__
)

506 #i‡
deföed
(
__GNUC_MINOR__
Ë&& deföed(
__GNUC_PATCHLEVEL__
)

507 
	#LZO_CC_GNUC
 (
__GNUC__
 * 0x10000L + 
__GNUC_MINOR__
 * 0x100 + 
__GNUC_PATCHLEVEL__
)

	)

508 #ñi‡
deföed
(
__GNUC_MINOR__
)

509 
	#LZO_CC_GNUC
 (
__GNUC__
 * 0x10000L + 
__GNUC_MINOR__
 * 0x100)

	)

511 
	#LZO_CC_GNUC
 (
__GNUC__
 * 0x10000L)

	)

513 
	#LZO_INFO_CC
 "gcc"

	)

514 
	#LZO_INFO_CCVER
 
__VERSION__


	)

515 #ñi‡
deföed
(
__ACK__
Ë&& deföed(
_ACK
)

516 
	#LZO_CC_ACK
 1

	)

517 
	#LZO_INFO_CC
 "Am°îdam Compûî Kô C"

	)

518 
	#LZO_INFO_CCVER
 "unknown"

	)

519 #ñi‡
deföed
(
__AZTEC_C__
)

520 
	#LZO_CC_AZTECC
 1

	)

521 
	#LZO_INFO_CC
 "Azã¯C"

	)

522 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__AZTEC_C__
)

	)

523 #ñi‡
deföed
(
__CODEGEARC__
)

524 
	#LZO_CC_CODEGEARC
 1

	)

525 
	#LZO_INFO_CC
 "CodeGó∏C"

	)

526 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__CODEGEARC__
)

	)

527 #ñi‡
deföed
(
__BORLANDC__
)

528 
	#LZO_CC_BORLANDC
 1

	)

529 
	#LZO_INFO_CC
 "B‹œnd C"

	)

530 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__BORLANDC__
)

	)

531 #ñi‡
deföed
(
_CRAYC
Ë&& deföed(
_RELEASE
)

532 
	#LZO_CC_CRAYC
 1

	)

533 
	#LZO_INFO_CC
 "Cøy C"

	)

534 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
_RELEASE
)

	)

535 #ñi‡
deföed
(
__DMC__
Ë&& deföed(
__SC__
)

536 
	#LZO_CC_DMC
 1

	)

537 
	#LZO_INFO_CC
 "DigôÆ M¨†C"

	)

538 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__DMC__
)

	)

539 #ñi‡
deföed
(
__DECC
)

540 
	#LZO_CC_DECC
 1

	)

541 
	#LZO_INFO_CC
 "DEC C"

	)

542 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__DECC
)

	)

543 #ñi‡
deföed
(
__HIGHC__
)

544 
	#LZO_CC_HIGHC
 1

	)

545 
	#LZO_INFO_CC
 "MëaW¨êHigh C"

	)

546 
	#LZO_INFO_CCVER
 "unknown"

	)

547 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
)

548 
	#LZO_CC_IARC
 1

	)

549 
	#LZO_INFO_CC
 "IAR C"

	)

550 #i‡
deföed
(
__VER__
)

551 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__VER__
)

	)

553 
	#LZO_INFO_CCVER
 "unknown"

	)

555 #ñi‡
deföed
(
__IBMC__
)

556 
	#LZO_CC_IBMC
 1

	)

557 
	#LZO_INFO_CC
 "IBM C"

	)

558 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__IBMC__
)

	)

559 #ñi‡
deföed
(
__KEIL__
Ë&& deföed(
__C166__
)

560 
	#LZO_CC_KEILC
 1

	)

561 
	#LZO_INFO_CC
 "Keû C"

	)

562 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__C166__
)

	)

563 #ñi‡
deföed
(
__LCC__
Ë&& deföed(
_WIN32
Ë&& deföed(
__LCCOPTIMLEVEL
)

564 
	#LZO_CC_LCCWIN32
 1

	)

565 
	#LZO_INFO_CC
 "lcc-wö32"

	)

566 
	#LZO_INFO_CCVER
 "unknown"

	)

567 #ñi‡
deföed
(
__LCC__
)

568 
	#LZO_CC_LCC
 1

	)

569 
	#LZO_INFO_CC
 "lcc"

	)

570 #i‡
deföed
(
__LCC_VERSION__
)

571 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__LCC_VERSION__
)

	)

573 
	#LZO_INFO_CCVER
 "unknown"

	)

575 #ñi‡
deföed
(
_MSC_VER
)

576 
	#LZO_CC_MSC
 1

	)

577 
	#LZO_INFO_CC
 "Mi¸oso· C"

	)

578 #i‡
deföed
(
_MSC_FULL_VER
)

579 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
_MSC_VER
Ë"." LZO_PP_MACRO_EXPAND(
_MSC_FULL_VER
)

	)

581 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
_MSC_VER
)

	)

583 #ñi‡
deföed
(
__MWERKS__
)

584 
	#LZO_CC_MWERKS
 1

	)

585 
	#LZO_INFO_CC
 "Mërowîk†C"

	)

586 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__MWERKS__
)

	)

587 #ñi‡(
deföed
(
__NDPC__
Ë|| deföed(
__NDPX__
)Ë&& deföed(
__i386
)

588 
	#LZO_CC_NDPC
 1

	)

589 
	#LZO_INFO_CC
 "Mi¸oway NDP C"

	)

590 
	#LZO_INFO_CCVER
 "unknown"

	)

591 #ñi‡
deföed
(
__PACIFIC__
)

592 
	#LZO_CC_PACIFICC
 1

	)

593 
	#LZO_INFO_CC
 "Pacifi¯C"

	)

594 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__PACIFIC__
)

	)

595 #ñi‡
deföed
(
__PGI
Ë&& (deföed(
__löux__
Ë|| deföed(
__WIN32__
))

596 
	#LZO_CC_PGI
 1

	)

597 
	#LZO_INFO_CC
 "P‹é™d Grou∞PGI C"

	)

598 
	#LZO_INFO_CCVER
 "unknown"

	)

599 #ñi‡
deföed
(
__PUREC__
Ë&& deföed(
__TOS__
)

600 
	#LZO_CC_PUREC
 1

	)

601 
	#LZO_INFO_CC
 "Puª C"

	)

602 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__PUREC__
)

	)

603 #ñi‡
deföed
(
__SC__
Ë&& deföed(
__ZTC__
)

604 
	#LZO_CC_SYMANTECC
 1

	)

605 
	#LZO_INFO_CC
 "Sym™ã¯C"

	)

606 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__SC__
)

	)

607 #ñi‡
deföed
(
__SUNPRO_C
)

608 
	#LZO_INFO_CC
 "SunPrÿC"

	)

609 #i‡((
__SUNPRO_C
)+0 > 0)

610 
	#LZO_CC_SUNPROC
 
__SUNPRO_C


	)

611 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__SUNPRO_C
)

	)

613 
	#LZO_CC_SUNPROC
 1

	)

614 
	#LZO_INFO_CCVER
 "unknown"

	)

616 #ñi‡
deföed
(
__SUNPRO_CC
)

617 
	#LZO_INFO_CC
 "SunPrÿC"

	)

618 #i‡((
__SUNPRO_CC
)+0 > 0)

619 
	#LZO_CC_SUNPROC
 
__SUNPRO_CC


	)

620 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__SUNPRO_CC
)

	)

622 
	#LZO_CC_SUNPROC
 1

	)

623 
	#LZO_INFO_CCVER
 "unknown"

	)

625 #ñi‡
deföed
(
__TINYC__
)

626 
	#LZO_CC_TINYC
 1

	)

627 
	#LZO_INFO_CC
 "Töy C"

	)

628 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__TINYC__
)

	)

629 #ñi‡
deföed
(
__TSC__
)

630 
	#LZO_CC_TOPSPEEDC
 1

	)

631 
	#LZO_INFO_CC
 "T›S≥ed C"

	)

632 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__TSC__
)

	)

633 #ñi‡
deföed
(
__WATCOMC__
)

634 
	#LZO_CC_WATCOMC
 1

	)

635 
	#LZO_INFO_CC
 "W©com C"

	)

636 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__WATCOMC__
)

	)

637 #ñi‡
deföed
(
__TURBOC__
)

638 
	#LZO_CC_TURBOC
 1

	)

639 
	#LZO_INFO_CC
 "TurbÿC"

	)

640 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__TURBOC__
)

	)

641 #ñi‡
deföed
(
__ZTC__
)

642 
	#LZO_CC_ZORTECHC
 1

	)

643 
	#LZO_INFO_CC
 "Z‹ãch C"

	)

644 #i‡(
__ZTC__
 == 0x310)

645 
	#LZO_INFO_CCVER
 "0x310"

	)

647 
	#LZO_INFO_CCVER
 
	`LZO_PP_MACRO_EXPAND
(
__ZTC__
)

	)

650 
	#LZO_CC_UNKNOWN
 1

	)

651 
	#LZO_INFO_CC
 "unknown"

	)

652 
	#LZO_INFO_CCVER
 "unknown"

	)

654 #i‡0 && (
LZO_CC_MSC
 && (
_MSC_VER
 >1200)Ë&& !
deföed
(
_MSC_FULL_VER
)

657 #i‡!
deföed
(
__LZO_ARCH_OVERRIDE
Ë&& !(
LZO_ARCH_GENERIC
Ë&& deföed(
_CRAY
)

658 #i‡(
UINT_MAX
 > 
LZO_0xffffffffL
Ë&& 
deföed
(
_CRAY
)

659 #i‡
deföed
(
_CRAYMPP
Ë|| deföed(
_CRAYT3D
Ë|| deföed(
_CRAYT3E
)

660 
	#LZO_ARCH_CRAY_MPP
 1

	)

661 #ñi‡
deföed
(
_CRAY1
)

662 
	#LZO_ARCH_CRAY_PVP
 1

	)

666 #i‡!
deföed
(
__LZO_ARCH_OVERRIDE
)

667 #i‡(
LZO_ARCH_GENERIC
)

668 
	#LZO_INFO_ARCH
 "gíîic"

	)

669 #ñi‡(
LZO_OS_DOS16
 || 
LZO_OS_OS216
 || 
LZO_OS_WIN16
)

670 
	#LZO_ARCH_I086
 1

	)

671 
	#LZO_ARCH_IA16
 1

	)

672 
	#LZO_INFO_ARCH
 "i086"

	)

673 #ñi‡
deföed
(
__Æpha__
Ë|| deföed(
__Æpha
Ë|| deföed(
_M_ALPHA
)

674 
	#LZO_ARCH_ALPHA
 1

	)

675 
	#LZO_INFO_ARCH
 "Æpha"

	)

676 #ñi‡(
LZO_ARCH_CRAY_MPP
Ë&& (
deföed
(
_CRAYT3D
Ë|| deföed(
_CRAYT3E
))

677 
	#LZO_ARCH_ALPHA
 1

	)

678 
	#LZO_INFO_ARCH
 "Æpha"

	)

679 #ñi‡
deföed
(
__amd64__
Ë|| deföed(
__x86_64__
Ë|| deföed(
_M_AMD64
)

680 
	#LZO_ARCH_AMD64
 1

	)

681 
	#LZO_INFO_ARCH
 "amd64"

	)

682 #ñi‡
deföed
(
__thumb__
Ë|| (deföed(
_M_ARM
Ë&& deföed(
_M_THUMB
))

683 
	#LZO_ARCH_ARM
 1

	)

684 
	#LZO_ARCH_ARM_THUMB
 1

	)

685 
	#LZO_INFO_ARCH
 "¨m_thumb"

	)

686 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
Ë&& deföed(
__ICCARM__
)

687 
	#LZO_ARCH_ARM
 1

	)

688 #i‡
deföed
(
__CPU_MODE__
) && ((__CPU_MODE__)+0 == 1)

689 
	#LZO_ARCH_ARM_THUMB
 1

	)

690 
	#LZO_INFO_ARCH
 "¨m_thumb"

	)

691 #ñi‡
deföed
(
__CPU_MODE__
) && ((__CPU_MODE__)+0 == 2)

692 
	#LZO_INFO_ARCH
 "¨m"

	)

694 
	#LZO_INFO_ARCH
 "¨m"

	)

696 #ñi‡
deföed
(
__¨m__
Ë|| deföed(
_M_ARM
)

697 
	#LZO_ARCH_ARM
 1

	)

698 
	#LZO_INFO_ARCH
 "¨m"

	)

699 #ñi‡(
UINT_MAX
 <
LZO_0xffffL
Ë&& 
deföed
(
__AVR__
)

700 
	#LZO_ARCH_AVR
 1

	)

701 
	#LZO_INFO_ARCH
 "avr"

	)

702 #ñi‡
deföed
(
__avr32__
Ë|| deföed(
__AVR32__
)

703 
	#LZO_ARCH_AVR32
 1

	)

704 
	#LZO_INFO_ARCH
 "avr32"

	)

705 #ñi‡
deföed
(
__bfö__
)

706 
	#LZO_ARCH_BLACKFIN
 1

	)

707 
	#LZO_INFO_ARCH
 "bœckfö"

	)

708 #ñi‡(
UINT_MAX
 =
LZO_0xffffL
Ë&& 
deföed
(
__C166__
)

709 
	#LZO_ARCH_C166
 1

	)

710 
	#LZO_INFO_ARCH
 "c166"

	)

711 #ñi‡
deföed
(
__¸is__
)

712 
	#LZO_ARCH_CRIS
 1

	)

713 
	#LZO_INFO_ARCH
 "¸is"

	)

714 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
Ë&& deföed(
__ICCEZ80__
)

715 
	#LZO_ARCH_EZ80
 1

	)

716 
	#LZO_INFO_ARCH
 "ez80"

	)

717 #ñi‡
deföed
(
__H8300__
Ë|| deföed(
__H8300H__
Ë|| deföed(
__H8300S__
Ë|| deföed(
__H8300SX__
)

718 
	#LZO_ARCH_H8300
 1

	)

719 
	#LZO_INFO_ARCH
 "h8300"

	)

720 #ñi‡
deföed
(
__hµa__
Ë|| deföed(
__hµa
)

721 
	#LZO_ARCH_HPPA
 1

	)

722 
	#LZO_INFO_ARCH
 "hµa"

	)

723 #ñi‡
deföed
(
__386__
Ë|| deföed(
__i386__
Ë|| deföed(
__i386
Ë|| deföed(
_M_IX86
Ë|| deföed(
_M_I386
)

724 
	#LZO_ARCH_I386
 1

	)

725 
	#LZO_ARCH_IA32
 1

	)

726 
	#LZO_INFO_ARCH
 "i386"

	)

727 #ñi‡(
LZO_CC_ZORTECHC
 && 
deföed
(
__I86__
))

728 
	#LZO_ARCH_I386
 1

	)

729 
	#LZO_ARCH_IA32
 1

	)

730 
	#LZO_INFO_ARCH
 "i386"

	)

731 #ñi‡(
LZO_OS_DOS32
 && 
LZO_CC_HIGHC
Ë&& 
deföed
(
_I386
)

732 
	#LZO_ARCH_I386
 1

	)

733 
	#LZO_ARCH_IA32
 1

	)

734 
	#LZO_INFO_ARCH
 "i386"

	)

735 #ñi‡
deföed
(
__ü64__
Ë|| deföed(
__ü64
Ë|| deföed(
_M_IA64
)

736 
	#LZO_ARCH_IA64
 1

	)

737 
	#LZO_INFO_ARCH
 "ü64"

	)

738 #ñi‡(
UINT_MAX
 =
LZO_0xffffL
Ë&& 
deföed
(
__m32c__
)

739 
	#LZO_ARCH_M16C
 1

	)

740 
	#LZO_INFO_ARCH
 "m16c"

	)

741 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
Ë&& deföed(
__ICCM16C__
)

742 
	#LZO_ARCH_M16C
 1

	)

743 
	#LZO_INFO_ARCH
 "m16c"

	)

744 #ñi‡
deföed
(
__m32r__
)

745 
	#LZO_ARCH_M32R
 1

	)

746 
	#LZO_INFO_ARCH
 "m32r"

	)

747 #ñi‡(
LZO_OS_TOS
Ë|| 
deföed
(
__m68k__
Ë|| deföed(
__m68000__
Ë|| deföed(
__mc68000__
Ë|| deföed(
__mc68020__
Ë|| deföed(
_M_M68K
)

748 
	#LZO_ARCH_M68K
 1

	)

749 
	#LZO_INFO_ARCH
 "m68k"

	)

750 #ñi‡(
UINT_MAX
 =
LZO_0xffffL
Ë&& 
deföed
(
__C251__
)

751 
	#LZO_ARCH_MCS251
 1

	)

752 
	#LZO_INFO_ARCH
 "mcs251"

	)

753 #ñi‡(
UINT_MAX
 =
LZO_0xffffL
Ë&& 
deföed
(
__C51__
)

754 
	#LZO_ARCH_MCS51
 1

	)

755 
	#LZO_INFO_ARCH
 "mcs51"

	)

756 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
Ë&& deföed(
__ICC8051__
)

757 
	#LZO_ARCH_MCS51
 1

	)

758 
	#LZO_INFO_ARCH
 "mcs51"

	)

759 #ñi‡
deföed
(
__mùs__
Ë|| deföed(
__mùs
Ë|| deföed(
_MIPS_ARCH
Ë|| deföed(
_M_MRX000
)

760 
	#LZO_ARCH_MIPS
 1

	)

761 
	#LZO_INFO_ARCH
 "mùs"

	)

762 #ñi‡(
UINT_MAX
 =
LZO_0xffffL
Ë&& 
deföed
(
__MSP430__
)

763 
	#LZO_ARCH_MSP430
 1

	)

764 
	#LZO_INFO_ARCH
 "m•430"

	)

765 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
Ë&& deföed(
__ICC430__
)

766 
	#LZO_ARCH_MSP430
 1

	)

767 
	#LZO_INFO_ARCH
 "m•430"

	)

768 #ñi‡
deföed
(
__powîpc__
Ë|| deföed(
__powîpc
Ë|| deföed(
__µc__
Ë|| deföed(
__PPC__
Ë|| deföed(
_M_PPC
Ë|| deföed(
_ARCH_PPC
Ë|| deföed(
_ARCH_PWR
)

769 
	#LZO_ARCH_POWERPC
 1

	)

770 
	#LZO_INFO_ARCH
 "powîpc"

	)

771 #ñi‡
deföed
(
__s390__
Ë|| deföed(
__s390
Ë|| deföed(
__s390x__
Ë|| deföed(
__s390x
)

772 
	#LZO_ARCH_S390
 1

	)

773 
	#LZO_INFO_ARCH
 "s390"

	)

774 #ñi‡
deföed
(
__sh__
Ë|| deföed(
_M_SH
)

775 
	#LZO_ARCH_SH
 1

	)

776 
	#LZO_INFO_ARCH
 "sh"

	)

777 #ñi‡
deföed
(
__•¨c__
Ë|| deföed(
__•¨c
Ë|| deföed(
__•¨cv8
)

778 
	#LZO_ARCH_SPARC
 1

	)

779 
	#LZO_INFO_ARCH
 "•¨c"

	)

780 #ñi‡
deföed
(
__SPU__
)

781 
	#LZO_ARCH_SPU
 1

	)

782 
	#LZO_INFO_ARCH
 "•u"

	)

783 #ñi‡(
UINT_MAX
 =
LZO_0xffffL
Ë&& 
deföed
(
__z80
)

784 
	#LZO_ARCH_Z80
 1

	)

785 
	#LZO_INFO_ARCH
 "z80"

	)

786 #ñi‡(
LZO_ARCH_CRAY_PVP
)

787 #i‡
deföed
(
_CRAYSV1
)

788 
	#LZO_ARCH_CRAY_SV1
 1

	)

789 
	#LZO_INFO_ARCH
 "¸ay_sv1"

	)

790 #ñi‡(
_ADDR64
)

791 
	#LZO_ARCH_CRAY_T90
 1

	)

792 
	#LZO_INFO_ARCH
 "¸ay_t90"

	)

793 #ñi‡(
_ADDR32
)

794 
	#LZO_ARCH_CRAY_YMP
 1

	)

795 
	#LZO_INFO_ARCH
 "¸ay_ymp"

	)

797 
	#LZO_ARCH_CRAY_XMP
 1

	)

798 
	#LZO_INFO_ARCH
 "¸ay_xmp"

	)

801 
	#LZO_ARCH_UNKNOWN
 1

	)

802 
	#LZO_INFO_ARCH
 "unknown"

	)

805 #i‡1 && (
LZO_ARCH_UNKNOWN
Ë&& (
LZO_OS_DOS32
 || 
LZO_OS_OS2
)

808 #i‡1 && (
LZO_ARCH_UNKNOWN
Ë&& (
LZO_OS_WIN32
)

811 #i‡1 && (
LZO_ARCH_UNKNOWN
Ë&& (
LZO_OS_WIN64
)

814 #i‡(
LZO_OS_OS216
 || 
LZO_OS_WIN16
)

815 
	#LZO_ARCH_I086PM
 1

	)

816 
	#LZO_ARCH_IA16PM
 1

	)

817 #ñi‡1 && (
LZO_OS_DOS16
 && 
deföed
(
BLX286
))

818 
	#LZO_ARCH_I086PM
 1

	)

819 
	#LZO_ARCH_IA16PM
 1

	)

820 #ñi‡1 && (
LZO_OS_DOS16
 && 
deföed
(
DOSX286
))

821 
	#LZO_ARCH_I086PM
 1

	)

822 
	#LZO_ARCH_IA16PM
 1

	)

823 #ñi‡1 && (
LZO_OS_DOS16
 && 
LZO_CC_BORLANDC
 && 
deföed
(
__DPMI16__
))

824 
	#LZO_ARCH_I086PM
 1

	)

825 
	#LZO_ARCH_IA16PM
 1

	)

827 #i‡(
LZO_ARCH_ARM_THUMB
Ë&& !(
LZO_ARCH_ARM
)

830 #i‡(
LZO_ARCH_I086PM
Ë&& !(
LZO_ARCH_I086
)

833 #i‡(
LZO_ARCH_I086
)

834 #i‡(
UINT_MAX
 !
LZO_0xffffL
)

837 #i‡(
ULONG_MAX
 !
LZO_0xffffffffL
)

841 #i‡(
LZO_ARCH_I386
)

842 #i‡(
UINT_MAX
 !
LZO_0xffffL
Ë&& 
deföed
(
__i386_öt16__
)

845 #i‡(
UINT_MAX
 !
LZO_0xffffffffL
Ë&& !
deföed
(
__i386_öt16__
)

848 #i‡(
ULONG_MAX
 !
LZO_0xffffffffL
)

852 #i‡!
deföed
(
__LZO_MM_OVERRIDE
)

853 #i‡(
LZO_ARCH_I086
)

854 #i‡(
UINT_MAX
 !
LZO_0xffffL
)

857 #i‡
deföed
(
__TINY__
Ë|| deföed(
M_I86TM
Ë|| deföed(
_M_I86TM
)

858 
	#LZO_MM_TINY
 1

	)

859 #ñi‡
deföed
(
__HUGE__
Ë|| deföed(
_HUGE_
Ë|| deföed(
M_I86HM
Ë|| deföed(
_M_I86HM
)

860 
	#LZO_MM_HUGE
 1

	)

861 #ñi‡
deföed
(
__SMALL__
Ë|| deföed(
M_I86SM
Ë|| deföed(
_M_I86SM
Ë|| deföed(
SMALL_MODEL
)

862 
	#LZO_MM_SMALL
 1

	)

863 #ñi‡
deföed
(
__MEDIUM__
Ë|| deföed(
M_I86MM
Ë|| deföed(
_M_I86MM
)

864 
	#LZO_MM_MEDIUM
 1

	)

865 #ñi‡
deföed
(
__COMPACT__
Ë|| deföed(
M_I86CM
Ë|| deföed(
_M_I86CM
)

866 
	#LZO_MM_COMPACT
 1

	)

867 #ñi‡
deföed
(
__LARGE__
Ë|| deföed(
M_I86LM
Ë|| deföed(
_M_I86LM
Ë|| deföed(
LARGE_MODEL
)

868 
	#LZO_MM_LARGE
 1

	)

869 #ñi‡(
LZO_CC_AZTECC
)

870 #i‡
deföed
(
_LARGE_CODE
Ë&& deföed(
_LARGE_DATA
)

871 
	#LZO_MM_LARGE
 1

	)

872 #ñi‡
deföed
(
_LARGE_CODE
)

873 
	#LZO_MM_MEDIUM
 1

	)

874 #ñi‡
deföed
(
_LARGE_DATA
)

875 
	#LZO_MM_COMPACT
 1

	)

877 
	#LZO_MM_SMALL
 1

	)

879 #ñi‡(
LZO_CC_ZORTECHC
 && 
deföed
(
__VCM__
))

880 
	#LZO_MM_LARGE
 1

	)

884 #i‡(
LZO_OS_DOS16
 || 
LZO_OS_OS216
 || 
LZO_OS_WIN16
)

885 
	#LZO_HAVE_MM_HUGE_PTR
 1

	)

886 
	#LZO_HAVE_MM_HUGE_ARRAY
 1

	)

887 #i‡(
LZO_MM_TINY
)

888 #unde‡
LZO_HAVE_MM_HUGE_ARRAY


890 #i‡(
LZO_CC_AZTECC
 || 
LZO_CC_PACIFICC
 || 
LZO_CC_ZORTECHC
)

891 #unde‡
LZO_HAVE_MM_HUGE_PTR


892 #unde‡
LZO_HAVE_MM_HUGE_ARRAY


893 #ñi‡(
LZO_CC_DMC
 || 
LZO_CC_SYMANTECC
)

894 #unde‡
LZO_HAVE_MM_HUGE_ARRAY


895 #ñi‡(
LZO_CC_MSC
 && 
deföed
(
_QC
))

896 #unde‡
LZO_HAVE_MM_HUGE_ARRAY


897 #i‡(
_MSC_VER
 < 600)

898 #unde‡
LZO_HAVE_MM_HUGE_PTR


900 #ñi‡(
LZO_CC_TURBOC
 && (
__TURBOC__
 < 0x0295))

901 #unde‡
LZO_HAVE_MM_HUGE_ARRAY


903 #i‡(
LZO_ARCH_I086PM
Ë&& !(
LZO_HAVE_MM_HUGE_PTR
)

904 #i‡(
LZO_OS_DOS16
)

906 #ñi‡(
LZO_CC_ZORTECHC
)

911 #ifde‡
__˝lu•lus


914 #i‡(
LZO_CC_BORLANDC
 && (
__BORLANDC__
 >= 0x0200))

915 
__√¨
 
__cde˛
 
_AHSHIFT
();

916 
	#LZO_MM_AHSHIFT
 ((Ë
_AHSHIFT
)

	)

917 #ñi‡(
LZO_CC_DMC
 || 
LZO_CC_SYMANTECC
 || 
LZO_CC_ZORTECHC
)

918 
__√¨
 
__cde˛
 
_AHSHIFT
();

919 
	#LZO_MM_AHSHIFT
 ((Ë
_AHSHIFT
)

	)

920 #ñi‡(
LZO_CC_MSC
 || 
LZO_CC_TOPSPEEDC
)

921 
__√¨
 
__cde˛
 
_AHSHIFT
();

922 
	#LZO_MM_AHSHIFT
 ((Ë
_AHSHIFT
)

	)

923 #ñi‡(
LZO_CC_TURBOC
 && (
__TURBOC__
 >= 0x0295))

924 
__√¨
 
__cde˛
 
_AHSHIFT
();

925 
	#LZO_MM_AHSHIFT
 ((Ë
_AHSHIFT
)

	)

926 #ñi‡((
LZO_CC_AZTECC
 || 
LZO_CC_PACIFICC
 || 
LZO_CC_TURBOC
Ë&& 
LZO_OS_DOS16
)

927 
	#LZO_MM_AHSHIFT
 12

	)

928 #ñi‡(
LZO_CC_WATCOMC
)

929 
_HShi·
;

930 
	#LZO_MM_AHSHIFT
 ((Ë
_HShi·
)

	)

934 #ifde‡
__˝lu•lus


938 #ñi‡(
LZO_ARCH_C166
)

939 #i‡!
deföed
(
__MODEL__
)

941 #ñi‡((
__MODEL__
) == 0)

942 
	#LZO_MM_SMALL
 1

	)

943 #ñi‡((
__MODEL__
) == 1)

944 
	#LZO_MM_SMALL
 1

	)

945 #ñi‡((
__MODEL__
) == 2)

946 
	#LZO_MM_LARGE
 1

	)

947 #ñi‡((
__MODEL__
) == 3)

948 
	#LZO_MM_TINY
 1

	)

949 #ñi‡((
__MODEL__
) == 4)

950 
	#LZO_MM_XTINY
 1

	)

951 #ñi‡((
__MODEL__
) == 5)

952 
	#LZO_MM_XSMALL
 1

	)

956 #ñi‡(
LZO_ARCH_MCS251
)

957 #i‡!
deföed
(
__MODEL__
)

959 #ñi‡((
__MODEL__
) == 0)

960 
	#LZO_MM_SMALL
 1

	)

961 #ñi‡((
__MODEL__
) == 2)

962 
	#LZO_MM_LARGE
 1

	)

963 #ñi‡((
__MODEL__
) == 3)

964 
	#LZO_MM_TINY
 1

	)

965 #ñi‡((
__MODEL__
) == 4)

966 
	#LZO_MM_XTINY
 1

	)

967 #ñi‡((
__MODEL__
) == 5)

968 
	#LZO_MM_XSMALL
 1

	)

972 #ñi‡(
LZO_ARCH_MCS51
)

973 #i‡!
deföed
(
__MODEL__
)

975 #ñi‡((
__MODEL__
) == 1)

976 
	#LZO_MM_SMALL
 1

	)

977 #ñi‡((
__MODEL__
) == 2)

978 
	#LZO_MM_LARGE
 1

	)

979 #ñi‡((
__MODEL__
) == 3)

980 
	#LZO_MM_TINY
 1

	)

981 #ñi‡((
__MODEL__
) == 4)

982 
	#LZO_MM_XTINY
 1

	)

983 #ñi‡((
__MODEL__
) == 5)

984 
	#LZO_MM_XSMALL
 1

	)

988 #ñi‡(
LZO_ARCH_CRAY_PVP
)

989 
	#LZO_MM_PVP
 1

	)

991 
	#LZO_MM_FLAT
 1

	)

993 #i‡(
LZO_MM_COMPACT
)

994 
	#LZO_INFO_MM
 "com∑˘"

	)

995 #ñi‡(
LZO_MM_FLAT
)

996 
	#LZO_INFO_MM
 "Ê©"

	)

997 #ñi‡(
LZO_MM_HUGE
)

998 
	#LZO_INFO_MM
 "huge"

	)

999 #ñi‡(
LZO_MM_LARGE
)

1000 
	#LZO_INFO_MM
 "œrge"

	)

1001 #ñi‡(
LZO_MM_MEDIUM
)

1002 
	#LZO_INFO_MM
 "medium"

	)

1003 #ñi‡(
LZO_MM_PVP
)

1004 
	#LZO_INFO_MM
 "pvp"

	)

1005 #ñi‡(
LZO_MM_SMALL
)

1006 
	#LZO_INFO_MM
 "smÆl"

	)

1007 #ñi‡(
LZO_MM_TINY
)

1008 
	#LZO_INFO_MM
 "töy"

	)

1013 #i‡
deföed
(
SIZEOF_SHORT
)

1014 
	#LZO_SIZEOF_SHORT
 (
SIZEOF_SHORT
)

	)

1016 #i‡
deföed
(
SIZEOF_INT
)

1017 
	#LZO_SIZEOF_INT
 (
SIZEOF_INT
)

	)

1019 #i‡
deföed
(
SIZEOF_LONG
)

1020 
	#LZO_SIZEOF_LONG
 (
SIZEOF_LONG
)

	)

1022 #i‡
deföed
(
SIZEOF_LONG_LONG
)

1023 
	#LZO_SIZEOF_LONG_LONG
 (
SIZEOF_LONG_LONG
)

	)

1025 #i‡
deföed
(
SIZEOF___INT16
)

1026 
	#LZO_SIZEOF___INT16
 (
SIZEOF___INT16
)

	)

1028 #i‡
deföed
(
SIZEOF___INT32
)

1029 
	#LZO_SIZEOF___INT32
 (
SIZEOF___INT32
)

	)

1031 #i‡
deföed
(
SIZEOF___INT64
)

1032 
	#LZO_SIZEOF___INT64
 (
SIZEOF___INT64
)

	)

1034 #i‡
deföed
(
SIZEOF_VOID_P
)

1035 
	#LZO_SIZEOF_VOID_P
 (
SIZEOF_VOID_P
)

	)

1037 #i‡
deföed
(
SIZEOF_SIZE_T
)

1038 
	#LZO_SIZEOF_SIZE_T
 (
SIZEOF_SIZE_T
)

	)

1040 #i‡
deföed
(
SIZEOF_PTRDIFF_T
)

1041 
	#LZO_SIZEOF_PTRDIFF_T
 (
SIZEOF_PTRDIFF_T
)

	)

1043 
	#__LZO_LSR
(
x
,
b
Ë(((x)+0ulË>> (b))

	)

1044 #i‡!
deföed
(
LZO_SIZEOF_SHORT
)

1045 #i‡(
LZO_ARCH_CRAY_PVP
)

1046 
	#LZO_SIZEOF_SHORT
 8

	)

1047 #ñi‡(
USHRT_MAX
 =
LZO_0xffffL
)

1048 
	#LZO_SIZEOF_SHORT
 2

	)

1049 #ñi‡(
__LZO_LSR
(
USHRT_MAX
,7) == 1)

1050 
	#LZO_SIZEOF_SHORT
 1

	)

1051 #ñi‡(
__LZO_LSR
(
USHRT_MAX
,15) == 1)

1052 
	#LZO_SIZEOF_SHORT
 2

	)

1053 #ñi‡(
__LZO_LSR
(
USHRT_MAX
,31) == 1)

1054 
	#LZO_SIZEOF_SHORT
 4

	)

1055 #ñi‡(
__LZO_LSR
(
USHRT_MAX
,63) == 1)

1056 
	#LZO_SIZEOF_SHORT
 8

	)

1057 #ñi‡(
__LZO_LSR
(
USHRT_MAX
,127) == 1)

1058 
	#LZO_SIZEOF_SHORT
 16

	)

1063 #i‡!
deföed
(
LZO_SIZEOF_INT
)

1064 #i‡(
LZO_ARCH_CRAY_PVP
)

1065 
	#LZO_SIZEOF_INT
 8

	)

1066 #ñi‡(
UINT_MAX
 =
LZO_0xffffL
)

1067 
	#LZO_SIZEOF_INT
 2

	)

1068 #ñi‡(
UINT_MAX
 =
LZO_0xffffffffL
)

1069 
	#LZO_SIZEOF_INT
 4

	)

1070 #ñi‡(
__LZO_LSR
(
UINT_MAX
,7) == 1)

1071 
	#LZO_SIZEOF_INT
 1

	)

1072 #ñi‡(
__LZO_LSR
(
UINT_MAX
,15) == 1)

1073 
	#LZO_SIZEOF_INT
 2

	)

1074 #ñi‡(
__LZO_LSR
(
UINT_MAX
,31) == 1)

1075 
	#LZO_SIZEOF_INT
 4

	)

1076 #ñi‡(
__LZO_LSR
(
UINT_MAX
,63) == 1)

1077 
	#LZO_SIZEOF_INT
 8

	)

1078 #ñi‡(
__LZO_LSR
(
UINT_MAX
,127) == 1)

1079 
	#LZO_SIZEOF_INT
 16

	)

1084 #i‡!
deföed
(
LZO_SIZEOF_LONG
)

1085 #i‡(
ULONG_MAX
 =
LZO_0xffffffffL
)

1086 
	#LZO_SIZEOF_LONG
 4

	)

1087 #ñi‡(
__LZO_LSR
(
ULONG_MAX
,7) == 1)

1088 
	#LZO_SIZEOF_LONG
 1

	)

1089 #ñi‡(
__LZO_LSR
(
ULONG_MAX
,15) == 1)

1090 
	#LZO_SIZEOF_LONG
 2

	)

1091 #ñi‡(
__LZO_LSR
(
ULONG_MAX
,31) == 1)

1092 
	#LZO_SIZEOF_LONG
 4

	)

1093 #ñi‡(
__LZO_LSR
(
ULONG_MAX
,63) == 1)

1094 
	#LZO_SIZEOF_LONG
 8

	)

1095 #ñi‡(
__LZO_LSR
(
ULONG_MAX
,127) == 1)

1096 
	#LZO_SIZEOF_LONG
 16

	)

1101 #i‡!
deföed
(
LZO_SIZEOF_LONG_LONG
Ë&& !deföed(
LZO_SIZEOF___INT64
)

1102 #i‡(
LZO_SIZEOF_LONG
 > 0 && LZO_SIZEOF_LONG < 8)

1103 #i‡
deföed
(
__LONG_MAX__
Ë&& deföed(
__LONG_LONG_MAX__
)

1104 #i‡(
LZO_CC_GNUC
 >= 0x030300ul)

1105 #i‡((
__LONG_MAX__
)+0 =(
__LONG_LONG_MAX__
)+0)

1106 
	#LZO_SIZEOF_LONG_LONG
 
LZO_SIZEOF_LONG


	)

1107 #ñi‡(
__LZO_LSR
(
__LONG_LONG_MAX__
,30) == 1)

1108 
	#LZO_SIZEOF_LONG_LONG
 4

	)

1114 #i‡!
deföed
(
LZO_SIZEOF_LONG_LONG
Ë&& !deföed(
LZO_SIZEOF___INT64
)

1115 #i‡(
LZO_SIZEOF_LONG
 > 0 && LZO_SIZEOF_LONG < 8)

1116 #i‡(
LZO_ARCH_I086
 && 
LZO_CC_DMC
)

1117 #ñi‡(
LZO_CC_CILLY
Ë&& 
deföed
(
__GNUC__
)

1118 
	#LZO_SIZEOF_LONG_LONG
 8

	)

1119 #ñi‡(
LZO_CC_CLANG
 || 
LZO_CC_GNUC
 || 
LZO_CC_LLVM
 || 
LZO_CC_PATHSCALE
)

1120 
	#LZO_SIZEOF_LONG_LONG
 8

	)

1121 #ñi‡((
LZO_OS_WIN32
 || 
LZO_OS_WIN64
 || 
deföed
(
_WIN32
)Ë&& 
LZO_CC_MSC
 && (
_MSC_VER
 >= 1400))

1122 
	#LZO_SIZEOF_LONG_LONG
 8

	)

1123 #ñi‡(
LZO_OS_WIN64
 || 
deföed
(
_WIN64
))

1124 
	#LZO_SIZEOF___INT64
 8

	)

1125 #ñi‡(
LZO_ARCH_I386
 && (
LZO_CC_DMC
))

1126 
	#LZO_SIZEOF_LONG_LONG
 8

	)

1127 #ñi‡(
LZO_ARCH_I386
 && (
LZO_CC_SYMANTECC
 && (
__SC__
 >= 0x700)))

1128 
	#LZO_SIZEOF_LONG_LONG
 8

	)

1129 #ñi‡(
LZO_ARCH_I386
 && (
LZO_CC_INTELC
 && 
deföed
(
__löux__
)))

1130 
	#LZO_SIZEOF_LONG_LONG
 8

	)

1131 #ñi‡(
LZO_ARCH_I386
 && (
LZO_CC_MWERKS
 || 
LZO_CC_PELLESC
 || 
LZO_CC_PGI
 || 
LZO_CC_SUNPROC
))

1132 
	#LZO_SIZEOF_LONG_LONG
 8

	)

1133 #ñi‡(
LZO_ARCH_I386
 && (
LZO_CC_INTELC
 || 
LZO_CC_MSC
))

1134 
	#LZO_SIZEOF___INT64
 8

	)

1135 #ñi‡((
LZO_OS_WIN32
 || 
deföed
(
_WIN32
)Ë&& (
LZO_CC_MSC
))

1136 
	#LZO_SIZEOF___INT64
 8

	)

1137 #ñi‡(
LZO_ARCH_I386
 && (
LZO_CC_BORLANDC
 && (
__BORLANDC__
 >= 0x0520)))

1138 
	#LZO_SIZEOF___INT64
 8

	)

1139 #ñi‡(
LZO_ARCH_I386
 && (
LZO_CC_WATCOMC
 && (
__WATCOMC__
 >= 1100)))

1140 
	#LZO_SIZEOF___INT64
 8

	)

1141 #ñi‡(
LZO_CC_WATCOMC
 && 
deföed
(
_INTEGRAL_MAX_BITS
) && (_INTEGRAL_MAX_BITS == 64))

1142 
	#LZO_SIZEOF___INT64
 8

	)

1143 #ñi‡(
LZO_OS_OS400
 || 
deföed
(
__OS400__
)Ë&& deföed(
__LLP64_IFC__
)

1144 
	#LZO_SIZEOF_LONG_LONG
 8

	)

1145 #ñi‡(
deföed
(
__vms
Ë|| deföed(
__VMS
)Ë&& (
__INITIAL_POINTER_SIZE
+0 == 64)

1146 
	#LZO_SIZEOF_LONG_LONG
 8

	)

1147 #ñi‡(
LZO_CC_SDCC
Ë&& (
LZO_SIZEOF_INT
 == 2)

1148 #ñi‡1 && 
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ >= 199901L)

1149 
	#LZO_SIZEOF_LONG_LONG
 8

	)

1153 #i‡
deföed
(
__˝lu•lus
Ë&& (
LZO_CC_GNUC
)

1154 #i‡(
LZO_CC_GNUC
 < 0x020800ul)

1155 #unde‡
LZO_SIZEOF_LONG_LONG


1158 #i‡(
LZO_CFG_NO_LONG_LONG
Ë|| 
deföed
(
__NO_LONG_LONG
)

1159 #unde‡
LZO_SIZEOF_LONG_LONG


1161 #i‡!
deföed
(
LZO_SIZEOF_VOID_P
)

1162 #i‡(
LZO_ARCH_I086
)

1163 
	#__LZO_WORDSIZE
 2

	)

1164 #i‡(
LZO_MM_TINY
 || 
LZO_MM_SMALL
 || 
LZO_MM_MEDIUM
)

1165 
	#LZO_SIZEOF_VOID_P
 2

	)

1166 #ñi‡(
LZO_MM_COMPACT
 || 
LZO_MM_LARGE
 || 
LZO_MM_HUGE
)

1167 
	#LZO_SIZEOF_VOID_P
 4

	)

1171 #ñi‡(
LZO_ARCH_AVR
 || 
LZO_ARCH_Z80
)

1172 
	#__LZO_WORDSIZE
 1

	)

1173 
	#LZO_SIZEOF_VOID_P
 2

	)

1174 #ñi‡(
LZO_ARCH_C166
 || 
LZO_ARCH_MCS51
 || 
LZO_ARCH_MCS251
 || 
LZO_ARCH_MSP430
)

1175 
	#LZO_SIZEOF_VOID_P
 2

	)

1176 #ñi‡(
LZO_ARCH_H8300
)

1177 #i‡
deföed
(
__NORMAL_MODE__
)

1178 
	#__LZO_WORDSIZE
 4

	)

1179 
	#LZO_SIZEOF_VOID_P
 2

	)

1180 #ñi‡
deföed
(
__H8300H__
Ë|| deföed(
__H8300S__
Ë|| deföed(
__H8300SX__
)

1181 
	#__LZO_WORDSIZE
 4

	)

1182 
	#LZO_SIZEOF_VOID_P
 4

	)

1184 
	#__LZO_WORDSIZE
 2

	)

1185 
	#LZO_SIZEOF_VOID_P
 2

	)

1187 #i‡(
LZO_CC_GNUC
 && (LZO_CC_GNUC < 0x040000ul)Ë&& (
LZO_SIZEOF_INT
 == 4)

1188 
	#LZO_SIZEOF_SIZE_T
 
LZO_SIZEOF_INT


	)

1189 
	#LZO_SIZEOF_PTRDIFF_T
 
LZO_SIZEOF_INT


	)

1191 #ñi‡(
LZO_ARCH_M16C
)

1192 
	#__LZO_WORDSIZE
 2

	)

1193 #i‡
deföed
(
__m32c_˝u__
Ë|| deföed(
__m32cm_˝u__
)

1194 
	#LZO_SIZEOF_VOID_P
 4

	)

1196 
	#LZO_SIZEOF_VOID_P
 2

	)

1198 #ñi‡(
LZO_SIZEOF_LONG
 =8Ë&& ((
deföed
(
__mùs__
Ë&& deföed(
__R5900__
)Ë|| deföed(
__MIPS_PSX2__
))

1199 
	#__LZO_WORDSIZE
 8

	)

1200 
	#LZO_SIZEOF_VOID_P
 4

	)

1201 #ñi‡
deföed
(
__LLP64__
Ë|| deföed(
__LLP64
Ë|| deföed(
_LLP64
Ë|| deföed(
_WIN64
)

1202 
	#__LZO_WORDSIZE
 8

	)

1203 
	#LZO_SIZEOF_VOID_P
 8

	)

1204 #ñi‡(
LZO_OS_OS400
 || 
deföed
(
__OS400__
)Ë&& deföed(
__LLP64_IFC__
)

1205 
	#LZO_SIZEOF_VOID_P
 
LZO_SIZEOF_LONG


	)

1206 
	#LZO_SIZEOF_SIZE_T
 
LZO_SIZEOF_LONG


	)

1207 
	#LZO_SIZEOF_PTRDIFF_T
 
LZO_SIZEOF_LONG


	)

1208 #ñi‡(
LZO_OS_OS400
 || 
deföed
(
__OS400__
))

1209 
	#__LZO_WORDSIZE
 
LZO_SIZEOF_LONG


	)

1210 
	#LZO_SIZEOF_VOID_P
 16

	)

1211 
	#LZO_SIZEOF_SIZE_T
 
LZO_SIZEOF_LONG


	)

1212 
	#LZO_SIZEOF_PTRDIFF_T
 
LZO_SIZEOF_LONG


	)

1213 #ñi‡(
deföed
(
__vms
Ë|| deföed(
__VMS
)Ë&& (
__INITIAL_POINTER_SIZE
+0 == 64)

1214 
	#LZO_SIZEOF_VOID_P
 8

	)

1215 
	#LZO_SIZEOF_SIZE_T
 
LZO_SIZEOF_LONG


	)

1216 
	#LZO_SIZEOF_PTRDIFF_T
 
LZO_SIZEOF_LONG


	)

1217 #ñi‡(
LZO_ARCH_SPU
)

1219 
	#__LZO_WORDSIZE
 16

	)

1221 
	#LZO_SIZEOF_VOID_P
 4

	)

1223 
	#LZO_SIZEOF_VOID_P
 
LZO_SIZEOF_LONG


	)

1226 #i‡!
deföed
(
LZO_WORDSIZE
)

1227 #i‡
deföed
(
__LZO_WORDSIZE
)

1228 
	#LZO_WORDSIZE
 
__LZO_WORDSIZE


	)

1230 
	#LZO_WORDSIZE
 
LZO_SIZEOF_VOID_P


	)

1233 #i‡!
deföed
(
LZO_SIZEOF_SIZE_T
)

1234 #i‡(
LZO_ARCH_I086
 || 
LZO_ARCH_M16C
)

1235 
	#LZO_SIZEOF_SIZE_T
 2

	)

1237 
	#LZO_SIZEOF_SIZE_T
 
LZO_SIZEOF_VOID_P


	)

1240 #i‡!
deföed
(
LZO_SIZEOF_PTRDIFF_T
)

1241 #i‡(
LZO_ARCH_I086
)

1242 #i‡(
LZO_MM_TINY
 || 
LZO_MM_SMALL
 || 
LZO_MM_MEDIUM
 || 
LZO_MM_HUGE
)

1243 
	#LZO_SIZEOF_PTRDIFF_T
 
LZO_SIZEOF_VOID_P


	)

1244 #ñi‡(
LZO_MM_COMPACT
 || 
LZO_MM_LARGE
)

1245 #i‡(
LZO_CC_BORLANDC
 || 
LZO_CC_TURBOC
)

1246 
	#LZO_SIZEOF_PTRDIFF_T
 4

	)

1248 
	#LZO_SIZEOF_PTRDIFF_T
 2

	)

1254 
	#LZO_SIZEOF_PTRDIFF_T
 
LZO_SIZEOF_SIZE_T


	)

1257 #i‡(
LZO_ABI_NEUTRAL_ENDIAN
)

1258 #unde‡
LZO_ABI_BIG_ENDIAN


1259 #unde‡
LZO_ABI_LITTLE_ENDIAN


1260 #ñi‡!(
LZO_ABI_BIG_ENDIAN
Ë&& !(
LZO_ABI_LITTLE_ENDIAN
)

1261 #i‡(
LZO_ARCH_ALPHA
Ë&& (
LZO_ARCH_CRAY_MPP
)

1262 
	#LZO_ABI_BIG_ENDIAN
 1

	)

1263 #ñi‡(
LZO_ARCH_IA64
Ë&& (
LZO_OS_POSIX_LINUX
 || 
LZO_OS_WIN64
)

1264 
	#LZO_ABI_LITTLE_ENDIAN
 1

	)

1265 #ñi‡(
LZO_ARCH_ALPHA
 || 
LZO_ARCH_AMD64
 || 
LZO_ARCH_BLACKFIN
 || 
LZO_ARCH_CRIS
 || 
LZO_ARCH_I086
 || 
LZO_ARCH_I386
 || 
LZO_ARCH_MSP430
)

1266 
	#LZO_ABI_LITTLE_ENDIAN
 1

	)

1267 #ñi‡(
LZO_ARCH_AVR32
 || 
LZO_ARCH_M68K
 || 
LZO_ARCH_S390
)

1268 
	#LZO_ABI_BIG_ENDIAN
 1

	)

1269 #ñi‡1 && 
deföed
(
__IAR_SYSTEMS_ICC__
Ë&& deföed(
__LITTLE_ENDIAN__
)

1270 #i‡(
__LITTLE_ENDIAN__
 == 1)

1271 
	#LZO_ABI_LITTLE_ENDIAN
 1

	)

1273 
	#LZO_ABI_BIG_ENDIAN
 1

	)

1275 #ñi‡1 && 
deföed
(
__BIG_ENDIAN__
Ë&& !deföed(
__LITTLE_ENDIAN__
)

1276 
	#LZO_ABI_BIG_ENDIAN
 1

	)

1277 #ñi‡1 && 
deföed
(
__LITTLE_ENDIAN__
Ë&& !deföed(
__BIG_ENDIAN__
)

1278 
	#LZO_ABI_LITTLE_ENDIAN
 1

	)

1279 #ñi‡1 && (
LZO_ARCH_ARM
Ë&& 
deföed
(
__ARMEB__
Ë&& !deföed(
__ARMEL__
)

1280 
	#LZO_ABI_BIG_ENDIAN
 1

	)

1281 #ñi‡1 && (
LZO_ARCH_ARM
Ë&& 
deföed
(
__ARMEL__
Ë&& !deföed(
__ARMEB__
)

1282 
	#LZO_ABI_LITTLE_ENDIAN
 1

	)

1283 #ñi‡1 && (
LZO_ARCH_MIPS
Ë&& 
deföed
(
__MIPSEB__
Ë&& !deföed(
__MIPSEL__
)

1284 
	#LZO_ABI_BIG_ENDIAN
 1

	)

1285 #ñi‡1 && (
LZO_ARCH_MIPS
Ë&& 
deföed
(
__MIPSEL__
Ë&& !deföed(
__MIPSEB__
)

1286 
	#LZO_ABI_LITTLE_ENDIAN
 1

	)

1289 #i‡(
LZO_ABI_BIG_ENDIAN
Ë&& (
LZO_ABI_LITTLE_ENDIAN
)

1292 #i‡(
LZO_ABI_BIG_ENDIAN
)

1293 
	#LZO_INFO_ABI_ENDIAN
 "be"

	)

1294 #ñi‡(
LZO_ABI_LITTLE_ENDIAN
)

1295 
	#LZO_INFO_ABI_ENDIAN
 "À"

	)

1296 #ñi‡(
LZO_ABI_NEUTRAL_ENDIAN
)

1297 
	#LZO_INFO_ABI_ENDIAN
 "√uåÆ"

	)

1299 #i‡(
LZO_SIZEOF_INT
 =1 && 
LZO_SIZEOF_LONG
 =2 && 
LZO_SIZEOF_VOID_P
 == 2)

1300 
	#LZO_ABI_I8LP16
 1

	)

1301 
	#LZO_INFO_ABI_PM
 "i8Õ16"

	)

1302 #ñi‡(
LZO_SIZEOF_INT
 =2 && 
LZO_SIZEOF_LONG
 =2 && 
LZO_SIZEOF_VOID_P
 == 2)

1303 
	#LZO_ABI_ILP16
 1

	)

1304 
	#LZO_INFO_ABI_PM
 "ûp16"

	)

1305 #ñi‡(
LZO_SIZEOF_INT
 =4 && 
LZO_SIZEOF_LONG
 =4 && 
LZO_SIZEOF_VOID_P
 == 4)

1306 
	#LZO_ABI_ILP32
 1

	)

1307 
	#LZO_INFO_ABI_PM
 "ûp32"

	)

1308 #ñi‡(
LZO_SIZEOF_INT
 =4 && 
LZO_SIZEOF_LONG
 =4 && 
LZO_SIZEOF_VOID_P
 =8 && 
LZO_SIZEOF_SIZE_T
 == 8)

1309 
	#LZO_ABI_LLP64
 1

	)

1310 
	#LZO_INFO_ABI_PM
 "Œp64"

	)

1311 #ñi‡(
LZO_SIZEOF_INT
 =4 && 
LZO_SIZEOF_LONG
 =8 && 
LZO_SIZEOF_VOID_P
 == 8)

1312 
	#LZO_ABI_LP64
 1

	)

1313 
	#LZO_INFO_ABI_PM
 "Õ64"

	)

1314 #ñi‡(
LZO_SIZEOF_INT
 =8 && 
LZO_SIZEOF_LONG
 =8 && 
LZO_SIZEOF_VOID_P
 == 8)

1315 
	#LZO_ABI_ILP64
 1

	)

1316 
	#LZO_INFO_ABI_PM
 "ûp64"

	)

1317 #ñi‡(
LZO_SIZEOF_INT
 =4 && 
LZO_SIZEOF_LONG
 =8 && 
LZO_SIZEOF_VOID_P
 == 4)

1318 
	#LZO_ABI_IP32L64
 1

	)

1319 
	#LZO_INFO_ABI_PM
 "ù32l64"

	)

1321 #i‡!
deföed
(
__LZO_LIBC_OVERRIDE
)

1322 #i‡(
LZO_LIBC_NAKED
)

1323 
	#LZO_INFO_LIBC
 "«ked"

	)

1324 #ñi‡(
LZO_LIBC_FREESTANDING
)

1325 
	#LZO_INFO_LIBC
 "‰ì°™dög"

	)

1326 #ñi‡(
LZO_LIBC_MOSTLY_FREESTANDING
)

1327 
	#LZO_INFO_LIBC
 "m‰ì°™dög"

	)

1328 #ñi‡(
LZO_LIBC_ISOC90
)

1329 
	#LZO_INFO_LIBC
 "isoc90"

	)

1330 #ñi‡(
LZO_LIBC_ISOC99
)

1331 
	#LZO_INFO_LIBC
 "isoc99"

	)

1332 #ñi‡
deföed
(
__dõéibc__
)

1333 
	#LZO_LIBC_DIETLIBC
 1

	)

1334 
	#LZO_INFO_LIBC
 "dõéibc"

	)

1335 #ñi‡
deföed
(
_NEWLIB_VERSION
)

1336 
	#LZO_LIBC_NEWLIB
 1

	)

1337 
	#LZO_INFO_LIBC
 "√wlib"

	)

1338 #ñi‡
deföed
(
__UCLIBC__
Ë&& deföed(
__UCLIBC_MAJOR__
Ë&& deföed(
__UCLIBC_MINOR__
)

1339 #i‡
deföed
(
__UCLIBC_SUBLEVEL__
)

1340 
	#LZO_LIBC_UCLIBC
 (
__UCLIBC_MAJOR__
 * 0x10000L + 
__UCLIBC_MINOR__
 * 0x100 + 
__UCLIBC_SUBLEVEL__
)

	)

1342 
	#LZO_LIBC_UCLIBC
 0x00090bL

	)

1344 
	#LZO_INFO_LIBC
 "u˛ibc"

	)

1345 #ñi‡
deföed
(
__GLIBC__
Ë&& deföed(
__GLIBC_MINOR__
)

1346 
	#LZO_LIBC_GLIBC
 (
__GLIBC__
 * 0x10000L + 
__GLIBC_MINOR__
 * 0x100)

	)

1347 
	#LZO_INFO_LIBC
 "glibc"

	)

1348 #ñi‡(
LZO_CC_MWERKS
Ë&& 
deföed
(
__MSL__
)

1349 
	#LZO_LIBC_MSL
 
__MSL__


	)

1350 
	#LZO_INFO_LIBC
 "m¶"

	)

1351 #ñi‡1 && 
deföed
(
__IAR_SYSTEMS_ICC__
)

1352 
	#LZO_LIBC_ISOC90
 1

	)

1353 
	#LZO_INFO_LIBC
 "isoc90"

	)

1355 
	#LZO_LIBC_DEFAULT
 1

	)

1356 
	#LZO_INFO_LIBC
 "deÁu…"

	)

1359 #i‡!
deföed
(
__lzo_gnuc_exãnsi⁄__
)

1360 #i‡(
LZO_CC_GNUC
 >= 0x020800ul)

1361 
	#__lzo_gnuc_exãnsi⁄__
 
__exãnsi⁄__


	)

1362 #ñi‡(
LZO_CC_CLANG
 || 
LZO_CC_LLVM
 || 
LZO_CC_PATHSCALE
)

1363 
	#__lzo_gnuc_exãnsi⁄__
 
__exãnsi⁄__


	)

1365 
	#__lzo_gnuc_exãnsi⁄__


	)

1368 #i‡!
deföed
(
__lzo_ua_vﬁ©ûe
)

1369 
	#__lzo_ua_vﬁ©ûe
 vﬁ©ûe

	)

1371 #i‡!
deföed
(
__lzo_Æignof
)

1372 #i‡(
LZO_CC_CILLY
 || 
LZO_CC_CLANG
 || 
LZO_CC_GNUC
 || 
LZO_CC_LLVM
 || 
LZO_CC_PATHSCALE
 || 
LZO_CC_PGI
)

1373 
	#__lzo_Æignof
(
e
Ë
	`__Æignof__
”)

	)

1374 #ñi‡(
LZO_CC_INTELC
 && (
__INTEL_COMPILER
 >= 700))

1375 
	#__lzo_Æignof
(
e
Ë
	`__Æignof__
”)

	)

1376 #ñi‡(
LZO_CC_MSC
 && (
_MSC_VER
 >= 1300))

1377 
	#__lzo_Æignof
(
e
Ë
	`__Æignof
”)

	)

1378 #ñi‡(
LZO_CC_SUNPROC
 && (LZO_CC_SUNPROC >= 0x5100))

1379 
	#__lzo_Æignof
(
e
Ë
	`__Æignof__
”)

	)

1382 #i‡
deföed
(
__lzo_Æignof
)

1383 
	#__lzo_HAVE_Æignof
 1

	)

1385 #i‡!
deföed
(
__lzo_c⁄°ru˘‹
)

1386 #i‡(
LZO_CC_GNUC
 >= 0x030400ul)

1387 
	#__lzo_c⁄°ru˘‹
 
	`__©åibuã__
((
__c⁄°ru˘‹__
,
__u£d__
))

	)

1388 #ñi‡(
LZO_CC_GNUC
 >= 0x020700ul)

1389 
	#__lzo_c⁄°ru˘‹
 
	`__©åibuã__
((
__c⁄°ru˘‹__
))

	)

1390 #ñi‡(
LZO_CC_CLANG
 || 
LZO_CC_LLVM
 || 
LZO_CC_PATHSCALE
)

1391 
	#__lzo_c⁄°ru˘‹
 
	`__©åibuã__
((
__c⁄°ru˘‹__
))

	)

1394 #i‡
deföed
(
__lzo_c⁄°ru˘‹
)

1395 
	#__lzo_HAVE_c⁄°ru˘‹
 1

	)

1397 #i‡!
deföed
(
__lzo_de°ru˘‹
)

1398 #i‡(
LZO_CC_GNUC
 >= 0x030400ul)

1399 
	#__lzo_de°ru˘‹
 
	`__©åibuã__
((
__de°ru˘‹__
,
__u£d__
))

	)

1400 #ñi‡(
LZO_CC_GNUC
 >= 0x020700ul)

1401 
	#__lzo_de°ru˘‹
 
	`__©åibuã__
((
__de°ru˘‹__
))

	)

1402 #ñi‡(
LZO_CC_CLANG
 || 
LZO_CC_LLVM
 || 
LZO_CC_PATHSCALE
)

1403 
	#__lzo_de°ru˘‹
 
	`__©åibuã__
((
__de°ru˘‹__
))

	)

1406 #i‡
deföed
(
__lzo_de°ru˘‹
)

1407 
	#__lzo_HAVE_de°ru˘‹
 1

	)

1409 #i‡(
__lzo_HAVE_de°ru˘‹
Ë&& !(
__lzo_HAVE_c⁄°ru˘‹
)

1412 #i‡!
deföed
(
__lzo_ölöe
)

1413 #i‡(
LZO_CC_TURBOC
 && (
__TURBOC__
 <= 0x0295))

1414 #ñi‡
deföed
(
__˝lu•lus
)

1415 
	#__lzo_ölöe
 
ölöe


	)

1416 #ñi‡(
LZO_CC_BORLANDC
 && (
__BORLANDC__
 >= 0x0550))

1417 
	#__lzo_ölöe
 
__ölöe


	)

1418 #ñi‡(
LZO_CC_CILLY
 || 
LZO_CC_CLANG
 || 
LZO_CC_GNUC
 || 
LZO_CC_LLVM
 || 
LZO_CC_PATHSCALE
 || 
LZO_CC_PGI
)

1419 
	#__lzo_ölöe
 
__ölöe__


	)

1420 #ñi‡(
LZO_CC_DMC
)

1421 
	#__lzo_ölöe
 
__ölöe


	)

1422 #ñi‡(
LZO_CC_INTELC
)

1423 
	#__lzo_ölöe
 
__ölöe


	)

1424 #ñi‡(
LZO_CC_MWERKS
 && (
__MWERKS__
 >= 0x2405))

1425 
	#__lzo_ölöe
 
__ölöe


	)

1426 #ñi‡(
LZO_CC_MSC
 && (
_MSC_VER
 >= 900))

1427 
	#__lzo_ölöe
 
__ölöe


	)

1428 #ñi‡(
LZO_CC_SUNPROC
 && (LZO_CC_SUNPROC >= 0x5100))

1429 
	#__lzo_ölöe
 
__ölöe__


	)

1430 #ñi‡
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ >= 199901L)

1431 
	#__lzo_ölöe
 
ölöe


	)

1434 #i‡
deföed
(
__lzo_ölöe
)

1435 
	#__lzo_HAVE_ölöe
 1

	)

1437 
	#__lzo_ölöe


	)

1439 #i‡!
deföed
(
__lzo_f‹˚ölöe
)

1440 #i‡(
LZO_CC_GNUC
 >= 0x030200ul)

1441 
	#__lzo_f‹˚ölöe
 
__ölöe__
 
	`__©åibuã__
((
__Æways_ölöe__
))

	)

1442 #ñi‡(
LZO_CC_INTELC
 && (
__INTEL_COMPILER
 >450Ë&& 
LZO_CC_SYNTAX_MSC
)

1443 
	#__lzo_f‹˚ölöe
 
__f‹˚ölöe


	)

1444 #ñi‡(
LZO_CC_INTELC
 && (
__INTEL_COMPILER
 >800Ë&& 
LZO_CC_SYNTAX_GNUC
)

1445 
	#__lzo_f‹˚ölöe
 
__ölöe__
 
	`__©åibuã__
((
__Æways_ölöe__
))

	)

1446 #ñi‡(
LZO_CC_CLANG
 || 
LZO_CC_LLVM
 || 
LZO_CC_PATHSCALE
)

1447 
	#__lzo_f‹˚ölöe
 
__ölöe__
 
	`__©åibuã__
((
__Æways_ölöe__
))

	)

1448 #ñi‡(
LZO_CC_MSC
 && (
_MSC_VER
 >= 1200))

1449 
	#__lzo_f‹˚ölöe
 
__f‹˚ölöe


	)

1450 #ñi‡(
LZO_CC_SUNPROC
 && (LZO_CC_SUNPROC >= 0x5100))

1451 
	#__lzo_f‹˚ölöe
 
__ölöe__
 
	`__©åibuã__
((
__Æways_ölöe__
))

	)

1454 #i‡
deföed
(
__lzo_f‹˚ölöe
)

1455 
	#__lzo_HAVE_f‹˚ölöe
 1

	)

1457 
	#__lzo_f‹˚ölöe


	)

1459 #i‡!
deföed
(
__lzo_noölöe
)

1460 #i‡1 && (
LZO_ARCH_I386
Ë&& (
LZO_CC_GNUC
 >= 0x040000ul) && (LZO_CC_GNUC < 0x040003ul)

1461 
	#__lzo_noölöe
 
	`__©åibuã__
((
__noölöe__
,
__u£d__
))

	)

1462 #ñi‡(
LZO_CC_GNUC
 >= 0x030200ul)

1463 
	#__lzo_noölöe
 
	`__©åibuã__
((
__noölöe__
))

	)

1464 #ñi‡(
LZO_CC_INTELC
 && (
__INTEL_COMPILER
 >600Ë&& 
LZO_CC_SYNTAX_MSC
)

1465 
	#__lzo_noölöe
 
	`__de˛•ec
(
noölöe
)

	)

1466 #ñi‡(
LZO_CC_INTELC
 && (
__INTEL_COMPILER
 >800Ë&& 
LZO_CC_SYNTAX_GNUC
)

1467 
	#__lzo_noölöe
 
	`__©åibuã__
((
__noölöe__
))

	)

1468 #ñi‡(
LZO_CC_CLANG
 || 
LZO_CC_LLVM
 || 
LZO_CC_PATHSCALE
)

1469 
	#__lzo_noölöe
 
	`__©åibuã__
((
__noölöe__
))

	)

1470 #ñi‡(
LZO_CC_MSC
 && (
_MSC_VER
 >= 1300))

1471 
	#__lzo_noölöe
 
	`__de˛•ec
(
noölöe
)

	)

1472 #ñi‡(
LZO_CC_MWERKS
 && (
__MWERKS__
 >0x3200Ë&& (
LZO_OS_WIN32
 || 
LZO_OS_WIN64
))

1473 #i‡
deföed
(
__˝lu•lus
)

1475 
	#__lzo_noölöe
 
	`__de˛•ec
(
noölöe
)

	)

1477 #ñi‡(
LZO_CC_SUNPROC
 && (LZO_CC_SUNPROC >= 0x5100))

1478 
	#__lzo_noölöe
 
	`__©åibuã__
((
__noölöe__
))

	)

1481 #i‡
deföed
(
__lzo_noölöe
)

1482 
	#__lzo_HAVE_noölöe
 1

	)

1484 
	#__lzo_noölöe


	)

1486 #i‡(
__lzo_HAVE_f‹˚ölöe
 || 
__lzo_HAVE_noölöe
Ë&& !(
__lzo_HAVE_ölöe
)

1489 #i‡!
deföed
(
__lzo_n‹ëu∫
)

1490 #i‡(
LZO_CC_GNUC
 >= 0x020700ul)

1491 
	#__lzo_n‹ëu∫
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

1492 #ñi‡(
LZO_CC_INTELC
 && (
__INTEL_COMPILER
 >450Ë&& 
LZO_CC_SYNTAX_MSC
)

1493 
	#__lzo_n‹ëu∫
 
	`__de˛•ec
(
n‹ëu∫
)

	)

1494 #ñi‡(
LZO_CC_INTELC
 && (
__INTEL_COMPILER
 >600Ë&& 
LZO_CC_SYNTAX_GNUC
)

1495 
	#__lzo_n‹ëu∫
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

1496 #ñi‡(
LZO_CC_CLANG
 || 
LZO_CC_LLVM
 || 
LZO_CC_PATHSCALE
)

1497 
	#__lzo_n‹ëu∫
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

1498 #ñi‡(
LZO_CC_MSC
 && (
_MSC_VER
 >= 1200))

1499 
	#__lzo_n‹ëu∫
 
	`__de˛•ec
(
n‹ëu∫
)

	)

1502 #i‡
deföed
(
__lzo_n‹ëu∫
)

1503 
	#__lzo_HAVE_n‹ëu∫
 1

	)

1505 
	#__lzo_n‹ëu∫


	)

1507 #i‡!
deföed
(
__lzo_nŸhrow
)

1508 #i‡(
LZO_CC_GNUC
 >= 0x030300ul)

1509 
	#__lzo_nŸhrow
 
	`__©åibuã__
((
__nŸhrow__
))

	)

1510 #ñi‡(
LZO_CC_INTELC
 && (
__INTEL_COMPILER
 >450Ë&& 
LZO_CC_SYNTAX_MSC
Ë&& 
deföed
(
__˝lu•lus
)

1511 
	#__lzo_nŸhrow
 
	`__de˛•ec
(
nŸhrow
)

	)

1512 #ñi‡(
LZO_CC_INTELC
 && (
__INTEL_COMPILER
 >900Ë&& 
LZO_CC_SYNTAX_GNUC
)

1513 
	#__lzo_nŸhrow
 
	`__©åibuã__
((
__nŸhrow__
))

	)

1514 #ñi‡(
LZO_CC_CLANG
 || 
LZO_CC_LLVM
 || 
LZO_CC_PATHSCALE
)

1515 
	#__lzo_nŸhrow
 
	`__©åibuã__
((
__nŸhrow__
))

	)

1516 #ñi‡(
LZO_CC_MSC
 && (
_MSC_VER
 >1200)Ë&& 
deföed
(
__˝lu•lus
)

1517 
	#__lzo_nŸhrow
 
	`__de˛•ec
(
nŸhrow
)

	)

1520 #i‡
deföed
(
__lzo_nŸhrow
)

1521 
	#__lzo_HAVE_nŸhrow
 1

	)

1523 
	#__lzo_nŸhrow


	)

1525 #i‡!
deföed
(
__lzo_ª°ri˘
)

1526 #i‡(
LZO_CC_GNUC
 >= 0x030400ul)

1527 
	#__lzo_ª°ri˘
 
__ª°ri˘__


	)

1528 #ñi‡(
LZO_CC_INTELC
 && (
__INTEL_COMPILER
 >600Ë&& 
LZO_CC_SYNTAX_GNUC
)

1529 
	#__lzo_ª°ri˘
 
__ª°ri˘__


	)

1530 #ñi‡(
LZO_CC_CLANG
 || 
LZO_CC_LLVM
)

1531 
	#__lzo_ª°ri˘
 
__ª°ri˘__


	)

1532 #ñi‡(
LZO_CC_MSC
 && (
_MSC_VER
 >= 1400))

1533 
	#__lzo_ª°ri˘
 
__ª°ri˘


	)

1536 #i‡
deföed
(
__lzo_ª°ri˘
)

1537 
	#__lzo_HAVE_ª°ri˘
 1

	)

1539 
	#__lzo_ª°ri˘


	)

1541 #i‡!
deföed
(
__lzo_likñy
Ë&& !deföed(
__lzo_u∆ikñy
)

1542 #i‡(
LZO_CC_GNUC
 >= 0x030200ul)

1543 
	#__lzo_likñy
(
e
Ë(
	`__buûtö_ex≥˘
(!!”),1))

	)

1544 
	#__lzo_u∆ikñy
(
e
Ë(
	`__buûtö_ex≥˘
(!!”),0))

	)

1545 #ñi‡(
LZO_CC_INTELC
 && (
__INTEL_COMPILER
 >= 800))

1546 
	#__lzo_likñy
(
e
Ë(
	`__buûtö_ex≥˘
(!!”),1))

	)

1547 
	#__lzo_u∆ikñy
(
e
Ë(
	`__buûtö_ex≥˘
(!!”),0))

	)

1548 #ñi‡(
LZO_CC_CLANG
 || 
LZO_CC_LLVM
 || 
LZO_CC_PATHSCALE
)

1549 
	#__lzo_likñy
(
e
Ë(
	`__buûtö_ex≥˘
(!!”),1))

	)

1550 
	#__lzo_u∆ikñy
(
e
Ë(
	`__buûtö_ex≥˘
(!!”),0))

	)

1553 #i‡
deföed
(
__lzo_likñy
)

1554 
	#__lzo_HAVE_likñy
 1

	)

1556 
	#__lzo_likñy
(
e
Ë”)

	)

1558 #i‡
deföed
(
__lzo_u∆ikñy
)

1559 
	#__lzo_HAVE_u∆ikñy
 1

	)

1561 
	#__lzo_u∆ikñy
(
e
Ë”)

	)

1563 #i‡!
deföed
(
LZO_UNUSED
)

1564 #i‡(
LZO_CC_BORLANDC
 && (
__BORLANDC__
 >= 0x0600))

1565 
	#LZO_UNUSED
(
v¨
Ë((Ë&v¨)

	)

1566 #ñi‡(
LZO_CC_BORLANDC
 || 
LZO_CC_HIGHC
 || 
LZO_CC_NDPC
 || 
LZO_CC_PELLESC
 || 
LZO_CC_TURBOC
)

1567 
	#LZO_UNUSED
(
v¨
Ëi‡(&v¨Ë; 

	)

1568 #ñi‡(
LZO_CC_CLANG
 || 
LZO_CC_GNUC
 || 
LZO_CC_LLVM
 || 
LZO_CC_PATHSCALE
)

1569 
	#LZO_UNUSED
(
v¨
Ë((Ëv¨)

	)

1570 #ñi‡(
LZO_CC_MSC
 && (
_MSC_VER
 < 900))

1571 
	#LZO_UNUSED
(
v¨
Ëi‡(&v¨Ë; 

	)

1572 #ñi‡(
LZO_CC_KEILC
)

1573 
	#LZO_UNUSED
(
v¨
Ë{
__lzo_unu£d
[1-2*!((v¨)>0)];}

	)

1574 #ñi‡(
LZO_CC_PACIFICC
)

1575 
	#LZO_UNUSED
(
v¨
Ë((Ë(v¨))

	)

1576 #ñi‡(
LZO_CC_WATCOMC
Ë&& 
deföed
(
__˝lu•lus
)

1577 
	#LZO_UNUSED
(
v¨
Ë((Ëv¨)

	)

1579 
	#LZO_UNUSED
(
v¨
Ë((Ë&v¨)

	)

1582 #i‡!
deföed
(
LZO_UNUSED_FUNC
)

1583 #i‡(
LZO_CC_BORLANDC
 && (
__BORLANDC__
 >= 0x0600))

1584 
	#LZO_UNUSED_FUNC
(
func
Ë((Ëfunc)

	)

1585 #ñi‡(
LZO_CC_BORLANDC
 || 
LZO_CC_NDPC
 || 
LZO_CC_TURBOC
)

1586 
	#LZO_UNUSED_FUNC
(
func
Ëi‡(funcË; 

	)

1587 #ñi‡(
LZO_CC_CLANG
 || 
LZO_CC_LLVM
)

1588 
	#LZO_UNUSED_FUNC
(
func
Ë((Ë&func)

	)

1589 #ñi‡(
LZO_CC_MSC
 && (
_MSC_VER
 < 900))

1590 
	#LZO_UNUSED_FUNC
(
func
Ëi‡(funcË; 

	)

1591 #ñi‡(
LZO_CC_MSC
)

1592 
	#LZO_UNUSED_FUNC
(
func
Ë((Ë&func)

	)

1593 #ñi‡(
LZO_CC_KEILC
 || 
LZO_CC_PELLESC
)

1594 
	#LZO_UNUSED_FUNC
(
func
Ë{
__lzo_unu£d
[1-2*!((()func)>0)];}

	)

1596 
	#LZO_UNUSED_FUNC
(
func
Ë((Ëfunc)

	)

1599 #i‡!
deföed
(
LZO_UNUSED_LABEL
)

1600 #i‡(
LZO_CC_WATCOMC
Ë&& 
deföed
(
__˝lu•lus
)

1601 
	#LZO_UNUSED_LABEL
(
l
Ë0Ë1:
	)
l

1602 #ñi‡(
LZO_CC_CLANG
 || 
LZO_CC_INTELC
 || 
LZO_CC_WATCOMC
)

1603 
	#LZO_UNUSED_LABEL
(
l
Ëi‡(0Ë
	)
l

1605 
	#LZO_UNUSED_LABEL
(
l
Ë0Ë1:
	)
l

1608 #i‡!
deföed
(
LZO_DEFINE_UNINITIALIZED_VAR
)

1610 
	#LZO_DEFINE_UNINITIALIZED_VAR
(
ty≥
,
v¨
,
öô
Ëty≥ 
	)
var

1611 #ñi‡0 && (
LZO_CC_GNUC
)

1612 
	#LZO_DEFINE_UNINITIALIZED_VAR
(
ty≥
,
v¨
,
öô
Ëty≥ v¨ = 
	)
var

1614 
	#LZO_DEFINE_UNINITIALIZED_VAR
(
ty≥
,
v¨
,
öô
Ëty≥ v¨ = 
	)
init

1617 #i‡!
deföed
(
LZO_UNCONST_CAST
)

1618 #i‡0 && 
deföed
(
__˝lu•lus
)

1619 
	#LZO_UNCONST_CAST
(
t
,
e
Ë(
c⁄°_ˇ°
<t> (e))

	)

1620 #ñi‡(
LZO_CC_CLANG
 || 
LZO_CC_GNUC
 || 
LZO_CC_LLVM
 || 
LZO_CC_PATHSCALE
)

1621 
	#LZO_UNCONST_CAST
(
t
,
e
Ë(—Ë((*Ë((*Ë((
lzo_uöçå_t
Ë((c⁄° *Ë”))))))

	)

1623 
	#LZO_UNCONST_CAST
(
t
,
e
Ë(—Ë((*Ë((*Ë((c⁄° *Ë”)))))

	)

1626 #i‡!
deföed
(
LZO_COMPILE_TIME_ASSERT_HEADER
)

1627 #i‡(
LZO_CC_AZTECC
 || 
LZO_CC_ZORTECHC
)

1628 
	#LZO_COMPILE_TIME_ASSERT_HEADER
(
e
Ë
__lzo_˘a
[1-!”)];

	)

1629 #ñi‡(
LZO_CC_DMC
 || 
LZO_CC_SYMANTECC
)

1630 
	#LZO_COMPILE_TIME_ASSERT_HEADER
(
e
Ë
__lzo_˘a
[1u-2*!”)];

	)

1631 #ñi‡(
LZO_CC_TURBOC
 && (
__TURBOC__
 == 0x0295))

1632 
	#LZO_COMPILE_TIME_ASSERT_HEADER
(
e
Ë
__lzo_˘a
[1-!”)];

	)

1634 
	#LZO_COMPILE_TIME_ASSERT_HEADER
(
e
Ë
__lzo_˘a
[1-2*!”)];

	)

1637 #i‡!
deföed
(
LZO_COMPILE_TIME_ASSERT
)

1638 #i‡(
LZO_CC_AZTECC
)

1639 
	#LZO_COMPILE_TIME_ASSERT
(
e
Ë{
	t__lzo_˘a_t
[1-!”)];}

	)

1640 #ñi‡(
LZO_CC_DMC
 || 
LZO_CC_PACIFICC
 || 
LZO_CC_SYMANTECC
 || 
LZO_CC_ZORTECHC
)

1641 
	#LZO_COMPILE_TIME_ASSERT
(
e
Ë0Ë1:!”):;

	)

1642 #ñi‡(
LZO_CC_MSC
 && (
_MSC_VER
 < 900))

1643 
	#LZO_COMPILE_TIME_ASSERT
(
e
Ë0Ë1:!”):;

	)

1644 #ñi‡(
LZO_CC_TURBOC
 && (
__TURBOC__
 == 0x0295))

1645 
	#LZO_COMPILE_TIME_ASSERT
(
e
Ë0Ë1:!”):;

	)

1647 
	#LZO_COMPILE_TIME_ASSERT
(
e
Ë{
	t__lzo_˘a_t
[1-2*!”)];}

	)

1650 #i‡(
LZO_ARCH_I086
 || 
LZO_ARCH_I386
Ë&& (
LZO_OS_DOS16
 || 
LZO_OS_DOS32
 || 
LZO_OS_OS2
 || 
LZO_OS_OS216
 || 
LZO_OS_WIN16
 || 
LZO_OS_WIN32
 || 
LZO_OS_WIN64
)

1651 #i‡(
LZO_CC_GNUC
 || 
LZO_CC_HIGHC
 || 
LZO_CC_NDPC
 || 
LZO_CC_PACIFICC
)

1652 #ñi‡(
LZO_CC_DMC
 || 
LZO_CC_SYMANTECC
 || 
LZO_CC_ZORTECHC
)

1653 
	#__lzo_cde˛
 
__cde˛


	)

1654 
	#__lzo_cde˛_©exô


	)

1655 
	#__lzo_cde˛_maö
 
__cde˛


	)

1656 #i‡(
LZO_OS_OS2
 && (
LZO_CC_DMC
 || 
LZO_CC_SYMANTECC
))

1657 
	#__lzo_cde˛_qs‹t
 
__∑sˇl


	)

1658 #ñi‡(
LZO_OS_OS2
 && (
LZO_CC_ZORTECHC
))

1659 
	#__lzo_cde˛_qs‹t
 
_°dˇŒ


	)

1661 
	#__lzo_cde˛_qs‹t
 
__cde˛


	)

1663 #ñi‡(
LZO_CC_WATCOMC
)

1664 
	#__lzo_cde˛
 
__cde˛


	)

1666 
	#__lzo_cde˛
 
__cde˛


	)

1667 
	#__lzo_cde˛_©exô
 
__cde˛


	)

1668 
	#__lzo_cde˛_maö
 
__cde˛


	)

1669 
	#__lzo_cde˛_qs‹t
 
__cde˛


	)

1671 #i‡(
LZO_CC_GNUC
 || 
LZO_CC_HIGHC
 || 
LZO_CC_NDPC
 || 
LZO_CC_PACIFICC
 || 
LZO_CC_WATCOMC
)

1672 #ñi‡(
LZO_OS_OS2
 && (
LZO_CC_DMC
 || 
LZO_CC_SYMANTECC
))

1673 
	#__lzo_cde˛_sigh™dÀr
 
__∑sˇl


	)

1674 #ñi‡(
LZO_OS_OS2
 && (
LZO_CC_ZORTECHC
))

1675 
	#__lzo_cde˛_sigh™dÀr
 
_°dˇŒ


	)

1676 #ñi‡(
LZO_CC_MSC
 && (
_MSC_VER
 >1400)Ë&& 
deföed
(
_M_CEE_PURE
)

1677 
	#__lzo_cde˛_sigh™dÀr
 
__˛rˇŒ


	)

1678 #ñi‡(
LZO_CC_MSC
 && (
_MSC_VER
 >= 600 && _MSC_VER < 700))

1679 #i‡
deföed
(
_DLL
)

1680 
	#__lzo_cde˛_sigh™dÀr
 
_Ár
 
_cde˛
 
_lﬂdds


	)

1681 #ñi‡
deföed
(
_MT
)

1682 
	#__lzo_cde˛_sigh™dÀr
 
_Ár
 
_cde˛


	)

1684 
	#__lzo_cde˛_sigh™dÀr
 
_cde˛


	)

1687 
	#__lzo_cde˛_sigh™dÀr
 
__cde˛


	)

1689 #ñi‡(
LZO_ARCH_I386
Ë&& (
LZO_CC_WATCOMC
)

1690 
	#__lzo_cde˛
 
__cde˛


	)

1691 #ñi‡(
LZO_ARCH_M68K
 && 
LZO_OS_TOS
 && (
LZO_CC_PUREC
 || 
LZO_CC_TURBOC
))

1692 
	#__lzo_cde˛
 
cde˛


	)

1694 #i‡!
deföed
(
__lzo_cde˛
)

1695 
	#__lzo_cde˛


	)

1697 #i‡!
deföed
(
__lzo_cde˛_©exô
)

1698 
	#__lzo_cde˛_©exô


	)

1700 #i‡!
deföed
(
__lzo_cde˛_maö
)

1701 
	#__lzo_cde˛_maö


	)

1703 #i‡!
deföed
(
__lzo_cde˛_qs‹t
)

1704 
	#__lzo_cde˛_qs‹t


	)

1706 #i‡!
deföed
(
__lzo_cde˛_sigh™dÀr
)

1707 
	#__lzo_cde˛_sigh™dÀr


	)

1709 #i‡!
deföed
(
__lzo_cde˛_va
)

1710 
	#__lzo_cde˛_va
 
__lzo_cde˛


	)

1712 #i‡!(
LZO_CFG_NO_WINDOWS_H
)

1713 #i‡(
LZO_OS_CYGWIN
 || (
LZO_OS_EMX
 && 
deföed
(
__RSXNT__
)Ë|| 
LZO_OS_WIN32
 || 
LZO_OS_WIN64
)

1714 #i‡(
LZO_CC_WATCOMC
 && (
__WATCOMC__
 < 1000))

1715 #ñi‡(
LZO_OS_WIN32
 && 
LZO_CC_GNUC
Ë&& 
deföed
(
__PW32__
)

1716 #ñi‡((
LZO_OS_CYGWIN
 || 
deföed
(
__MINGW32__
)Ë&& (
LZO_CC_GNUC
 && (LZO_CC_GNUC < 0x025f00ul)))

1718 
	#LZO_HAVE_WINDOWS_H
 1

	)

1722 #i‡(
LZO_ARCH_ALPHA
)

1723 
	#LZO_OPT_AVOID_UINT_INDEX
 1

	)

1724 
	#LZO_OPT_AVOID_SHORT
 1

	)

1725 
	#LZO_OPT_AVOID_USHORT
 1

	)

1726 #ñi‡(
LZO_ARCH_AMD64
)

1727 
	#LZO_OPT_AVOID_INT_INDEX
 1

	)

1728 
	#LZO_OPT_AVOID_UINT_INDEX
 1

	)

1729 
	#LZO_OPT_UNALIGNED16
 1

	)

1730 
	#LZO_OPT_UNALIGNED32
 1

	)

1731 
	#LZO_OPT_UNALIGNED64
 1

	)

1732 #ñi‡(
LZO_ARCH_ARM
 && 
LZO_ARCH_ARM_THUMB
)

1733 #ñi‡(
LZO_ARCH_ARM
)

1734 
	#LZO_OPT_AVOID_SHORT
 1

	)

1735 
	#LZO_OPT_AVOID_USHORT
 1

	)

1736 #ñi‡(
LZO_ARCH_CRIS
)

1737 
	#LZO_OPT_UNALIGNED16
 1

	)

1738 
	#LZO_OPT_UNALIGNED32
 1

	)

1739 #ñi‡(
LZO_ARCH_I386
)

1740 
	#LZO_OPT_UNALIGNED16
 1

	)

1741 
	#LZO_OPT_UNALIGNED32
 1

	)

1742 #ñi‡(
LZO_ARCH_IA64
)

1743 
	#LZO_OPT_AVOID_INT_INDEX
 1

	)

1744 
	#LZO_OPT_AVOID_UINT_INDEX
 1

	)

1745 
	#LZO_OPT_PREFER_POSTINC
 1

	)

1746 #ñi‡(
LZO_ARCH_M68K
)

1747 
	#LZO_OPT_PREFER_POSTINC
 1

	)

1748 
	#LZO_OPT_PREFER_PREDEC
 1

	)

1749 #i‡
deföed
(
__mc68020__
Ë&& !deföed(
__mcﬁdfúe__
)

1750 
	#LZO_OPT_UNALIGNED16
 1

	)

1751 
	#LZO_OPT_UNALIGNED32
 1

	)

1753 #ñi‡(
LZO_ARCH_MIPS
)

1754 
	#LZO_OPT_AVOID_UINT_INDEX
 1

	)

1755 #ñi‡(
LZO_ARCH_POWERPC
)

1756 
	#LZO_OPT_PREFER_PREINC
 1

	)

1757 
	#LZO_OPT_PREFER_PREDEC
 1

	)

1758 #i‡(
LZO_ABI_BIG_ENDIAN
)

1759 
	#LZO_OPT_UNALIGNED16
 1

	)

1760 
	#LZO_OPT_UNALIGNED32
 1

	)

1762 #ñi‡(
LZO_ARCH_S390
)

1763 
	#LZO_OPT_UNALIGNED16
 1

	)

1764 
	#LZO_OPT_UNALIGNED32
 1

	)

1765 #i‡(
LZO_SIZEOF_SIZE_T
 == 8)

1766 
	#LZO_OPT_UNALIGNED64
 1

	)

1768 #ñi‡(
LZO_ARCH_SH
)

1769 
	#LZO_OPT_PREFER_POSTINC
 1

	)

1770 
	#LZO_OPT_PREFER_PREDEC
 1

	)

1772 #i‚de‡
LZO_CFG_NO_INLINE_ASM


1773 #i‡(
LZO_CC_LLVM
)

1774 
	#LZO_CFG_NO_INLINE_ASM
 1

	)

1777 #i‚de‡
LZO_CFG_NO_UNALIGNED


1778 #i‡(
LZO_ABI_NEUTRAL_ENDIAN
Ë|| (
LZO_ARCH_GENERIC
)

1779 
	#LZO_CFG_NO_UNALIGNED
 1

	)

1782 #i‡(
LZO_CFG_NO_UNALIGNED
)

1783 #unde‡
LZO_OPT_UNALIGNED16


1784 #unde‡
LZO_OPT_UNALIGNED32


1785 #unde‡
LZO_OPT_UNALIGNED64


1787 #i‡(
LZO_CFG_NO_INLINE_ASM
)

1788 #ñi‡(
LZO_ARCH_I386
 && (
LZO_OS_DOS32
 || 
LZO_OS_WIN32
Ë&& (
LZO_CC_DMC
 || 
LZO_CC_INTELC
 || 
LZO_CC_MSC
 || 
LZO_CC_PELLESC
))

1789 
	#LZO_ASM_SYNTAX_MSC
 1

	)

1790 #ñi‡(
LZO_OS_WIN64
 && (
LZO_CC_DMC
 || 
LZO_CC_INTELC
 || 
LZO_CC_MSC
 || 
LZO_CC_PELLESC
))

1791 #ñi‡(
LZO_ARCH_I386
 && 
LZO_CC_GNUC
 && (LZO_CC_GNUC == 0x011f00ul))

1792 #ñi‡(
LZO_ARCH_I386
 && (
LZO_CC_CLANG
 || 
LZO_CC_GNUC
 || 
LZO_CC_INTELC
 || 
LZO_CC_PATHSCALE
))

1793 
	#LZO_ASM_SYNTAX_GNUC
 1

	)

1794 #ñi‡(
LZO_ARCH_AMD64
 && (
LZO_CC_CLANG
 || 
LZO_CC_GNUC
 || 
LZO_CC_INTELC
 || 
LZO_CC_PATHSCALE
))

1795 
	#LZO_ASM_SYNTAX_GNUC
 1

	)

1797 #i‡(
LZO_ASM_SYNTAX_GNUC
)

1798 #i‡(
LZO_ARCH_I386
 && 
LZO_CC_GNUC
 && (LZO_CC_GNUC < 0x020000ul))

1799 
	#__LZO_ASM_CLOBBER
 "ax"

	)

1800 #ñi‡(
LZO_CC_INTELC
)

1801 
	#__LZO_ASM_CLOBBER
 "mem‹y"

	)

1803 
	#__LZO_ASM_CLOBBER
 "cc", "mem‹y"

	)

1806 #i‡
deföed
(
__LZO_INFOSTR_MM
)

1807 #ñi‡(
LZO_MM_FLAT
Ë&& (
deföed
(
__LZO_INFOSTR_PM
Ë|| deföed(
LZO_INFO_ABI_PM
))

1808 
	#__LZO_INFOSTR_MM
 ""

	)

1809 #ñi‡
deföed
(
LZO_INFO_MM
)

1810 
	#__LZO_INFOSTR_MM
 "." 
LZO_INFO_MM


	)

1812 
	#__LZO_INFOSTR_MM
 ""

	)

1814 #i‡
deföed
(
__LZO_INFOSTR_PM
)

1815 #ñi‡
deföed
(
LZO_INFO_ABI_PM
)

1816 
	#__LZO_INFOSTR_PM
 "." 
LZO_INFO_ABI_PM


	)

1818 
	#__LZO_INFOSTR_PM
 ""

	)

1820 #i‡
deföed
(
__LZO_INFOSTR_ENDIAN
)

1821 #ñi‡
deföed
(
LZO_INFO_ABI_ENDIAN
)

1822 
	#__LZO_INFOSTR_ENDIAN
 "." 
LZO_INFO_ABI_ENDIAN


	)

1824 
	#__LZO_INFOSTR_ENDIAN
 ""

	)

1826 #i‡
deföed
(
__LZO_INFOSTR_OSNAME
)

1827 #ñi‡
deföed
(
LZO_INFO_OS_CONSOLE
)

1828 
	#__LZO_INFOSTR_OSNAME
 
LZO_INFO_OS
 "." 
LZO_INFO_OS_CONSOLE


	)

1829 #ñi‡
deföed
(
LZO_INFO_OS_POSIX
)

1830 
	#__LZO_INFOSTR_OSNAME
 
LZO_INFO_OS
 "." 
LZO_INFO_OS_POSIX


	)

1832 
	#__LZO_INFOSTR_OSNAME
 
LZO_INFO_OS


	)

1834 #i‡
deföed
(
__LZO_INFOSTR_LIBC
)

1835 #ñi‡
deföed
(
LZO_INFO_LIBC
)

1836 
	#__LZO_INFOSTR_LIBC
 "." 
LZO_INFO_LIBC


	)

1838 
	#__LZO_INFOSTR_LIBC
 ""

	)

1840 #i‡
deföed
(
__LZO_INFOSTR_CCVER
)

1841 #ñi‡
deföed
(
LZO_INFO_CCVER
)

1842 
	#__LZO_INFOSTR_CCVER
 " " 
LZO_INFO_CCVER


	)

1844 
	#__LZO_INFOSTR_CCVER
 ""

	)

1846 
	#LZO_INFO_STRING
 \

1847 
LZO_INFO_ARCH
 
__LZO_INFOSTR_MM
 
__LZO_INFOSTR_PM
 
__LZO_INFOSTR_ENDIAN
 \

1848 " " 
__LZO_INFOSTR_OSNAME
 
__LZO_INFOSTR_LIBC
 " " 
LZO_INFO_CC
 
__LZO_INFOSTR_CCVER


	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
154
2864
buffer.c
buffer.h
buffer_fork.c
buffer_writeback.c
compression.c
current_task.c
current_task.h
dir.c
diskio.c
diskio.h
filemap.c
hexdump.c
inode.c
kernel/balloc.c
kernel/btree.c
kernel/buffer.c
kernel/buffer.h
kernel/buffer_fork.c
kernel/buffer_writeback.c
kernel/buffer_writebacklib.c
kernel/commit.c
kernel/commit_flusher.c
kernel/commit_flusher.h
kernel/commit_flusher_hack.c
kernel/dir.c
kernel/dirty-buffer.h
kernel/dleaf.c
kernel/dleaf.h
kernel/dleaf2.c
kernel/dleaf2.h
kernel/filemap.c
kernel/filemap_blocklib.c
kernel/filemap_hole.c
kernel/filemap_hole.h
kernel/iattr.c
kernel/iattr.h
kernel/ileaf.c
kernel/ileaf.h
kernel/inode.c
kernel/inode_vfslib.c
kernel/kcompat.h
kernel/link.h
kernel/log.c
kernel/namei.c
kernel/orphan.c
kernel/replay.c
kernel/super.c
kernel/trace.h
kernel/tux3.h
kernel/tux3_fork.h
kernel/utility.c
kernel/writeback.c
kernel/writeback_iattrfork.c
kernel/writeback_inodedelete.c
kernel/writeback_xattrfork.c
kernel/xattr.c
libklib/atomic.h
libklib/barrier.h
libklib/bitops.h
libklib/bitops/__ffs.h
libklib/bitops/__fls.h
libklib/bitops/atomic.h
libklib/bitops/ffz.h
libklib/bitops/find.h
libklib/bitops/fls.h
libklib/bitops/fls64.h
libklib/bitops/le.h
libklib/bitops/non-atomic.h
libklib/byteorder.h
libklib/byteorder/big_endian.h
libklib/byteorder/generic.h
libklib/byteorder/little_endian.h
libklib/compiler.h
libklib/err.h
libklib/find_next_bit.c
libklib/fs.c
libklib/fs.h
libklib/hash.h
libklib/init.h
libklib/kdev_t.h
libklib/libklib.h
libklib/list.h
libklib/list_sort.c
libklib/list_sort.h
libklib/lockdebug.h
libklib/log2.h
libklib/mm.h
libklib/rcupdate.h
libklib/slab.c
libklib/slab.h
libklib/swab.h
libklib/typecheck.h
libklib/types.h
libklib/uidgid.c
libklib/uidgid.h
libklib/wait.h
namei.c
newDefines.h
options.c
options.h
super.c
trace.h
tux3.c
tux3_fsck.c
tux3_image.c
tux3fuse.c
tux3graph.c
tux3user.h
utility.c
walk.c
writeback.c
writeback.h
/usr/include/byteswap.h
/usr/include/endian.h
/usr/include/errno.h
/usr/include/execinfo.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/link.h
/usr/include/linux/fs.h
/usr/include/linux/kernel.h
/usr/include/linux/magic.h
/usr/include/linux/sched.h
/usr/include/linux/time.h
/usr/include/linux/version.h
/usr/include/linux/xattr.h
/usr/include/lzo/lzo1x.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/ctype.h
/usr/include/dlfcn.h
/usr/include/elf.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/linux/blk_types.h
/usr/include/linux/ioctl.h
/usr/include/linux/limits.h
/usr/include/linux/types.h
/usr/include/stdint.h
/usr/include/xlocale.h
lzoconf.h
/usr/include/_G_config.h
/usr/include/linux/posix_types.h
lzodefs.h
/usr/include/gconv.h
/usr/include/linux/stddef.h
/usr/include/wchar.h
/usr/include/wctype.h
